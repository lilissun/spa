@set @index 104;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event accept(1, 3);
@provide @event accept @removable @false;

@declare @event init(1, 3);
@provide @event init @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @conclusion know((x0, x1, x2, x3), #t);
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@set @barrier;

@declare @string l0[];

@declare @string SK[];
@declare @string agree[];

@declare @parameter $pn;
@declare @parameter $threshold;
@declare @parameter $pcar;
@declare @parameter $dcar;
@set @constraint $pn > 0;
@set @constraint $pcar - $dcar >= 0;
@set @constraint $pcar + $dcar >= 0;

@declare @function aenc/2;
@declare @function pk/1;
@declare @function sign/2;

@rule {
    @premise know((aenc(mess@91, pk(skey@92)), skey@92), #t);
    @conclusion know(mess@91, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@95, pkey@96), #t);
    @conclusion know(aenc(mess@95, pkey@96), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@97, skey@98), pk(skey@98)), #t);
    @conclusion know(mess@97, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@99, skey@100)), #t);
    @conclusion know(mess@99, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((skey@102), #t);
    @conclusion know(pk(skey@102), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@103, skey@104), #t);
    @conclusion know(sign(mess@103, skey@104), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @premise know(pkI@68, #t@69);
    @premise know(#t1@70, #t@71);
    @premise new([n@72], l0[]);
    @premise unique([n@72], l0[], {pkI@68, (#t1@70, #t@73), [n@72]});
    @premise init([n@72], (pkI@68, [n@72]), #t@73);
    @conclusion know([n@72], #t@75);
    @constraint #t@73 - #t1@70 + $dcar == 0;
    @constraint -$pn - #t@73 + #t@75 >= 0;
    @constraint -#t@9 + #t@18 > 0;
    @constraint -#t@18 + #t@73 > 0;
    @constraint -#t@5 + #t1@70 > 0;
    @constraint #t@73 - #t@71 > 0;
    @constraint #t@18 - #t@69 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(pk(SK[]), #t@76);
    @premise know(#t1@77, #t@78);
    @premise new([n@79], l0[]);
    @premise unique([n@79], l0[], {pk(SK[]), (#t1@77, #t@80), [n@79], sign(([n@79], agree[]), SK[]), (#t2@81, #t@82)});
    @premise init([n@79], (pk(SK[]), [n@79]), #t@80);
    @premise know(sign(([n@79], agree[]), SK[]), #t@84);
    @premise know(#t2@81, #t@85);
    @conclusion accept([n@79], (pk(SK[]), [n@79]), #t@82);
    @constraint #t@80 - #t1@77 - #t@82 + #t2@81 == 0;
    @constraint #t@80 - #t1@77 + $dcar == 0;
    @constraint -$pn - #t@80 + #t@33 >= 0;
    @constraint -#t@9 + #t@18 > 0;
    @constraint -#t@18 + #t@80 > 0;
    @constraint -#t@80 + #t@34 > 0;
    @constraint -#t@5 + #t1@77 > 0;
    @constraint $pn > 0;
    @constraint -#t@34 + #t@82 > 0;
    @constraint #t@82 - #t@85 > 0;
    @constraint #t@34 - #t@84 > 0;
    @constraint #t@80 - #t@82 + $threshold > 0;
    @constraint #t@80 - #t@78 > 0;
    @constraint #t@18 - #t@76 > 0;
};

@rule{
    @conclusion know(pk(SK[]), #t@86);
    @constraint -$pn - #t@9 + #t@86 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(n@87, #t@88);
    @conclusion know(sign((n@87, agree[]), SK[]), #t@89);
    @constraint -$pn - #t@9 + #t@49 >= 0;
    @constraint -$pn - #t@51 + #t@89 >= 0;
    @constraint -#t@9 + #t@51 > 0;
    @constraint #t@51 - #t@88 > 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SK[]), #t@90);
    @constraint -$pn - #t@9 + #t@90 >= 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @injective init(v@66, (pkI@62, n@63), #t1@64);
    @conclusion accept(v@67, (pkI@62, n@63), #t2@65);
    @constraint $threshold + #t1@64 - #t2@65 > 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
