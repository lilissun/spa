@set @index 176;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event alice(2, 2);
@provide @event alice @removable @false;

@declare @event bob(1, 3);
@provide @event bob @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @conclusion know((x0, x1, x2, x3), #t);
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @premise know(x4, #t4);
    @constraint #t4 - #t <= 0;
    @conclusion know((x0, x1, x2, x3, x4), #t);
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x4, #t4);
    @constraint #t4 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @premise know(x4, #t4);
    @constraint #t4 - #t <= 0;
    @premise know(x5, #t5);
    @constraint #t5 - #t <= 0;
    @conclusion know((x0, x1, x2, x3, x4, x5), #t);
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x4, #t4);
    @constraint #t4 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x5, #t5);
    @constraint #t5 - #t >= 0;
};

@set @barrier;

@declare @string l0[];
@declare @string l1[];

@declare @string SKA[];
@declare @string SKB[];

@declare @parameter $pn;
@set @constraint $pn > 0;

@declare @function X/2;
@declare @function Y/2;
@declare @function aenc/2;
@declare @function pk/1;
@declare @function sign/2;

@rule {
    @premise know((aenc(mess@165, pk(skey@166)), skey@166), #t);
    @conclusion know(mess@165, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@167, pkey@168), #t);
    @conclusion know(aenc(mess@167, pkey@168), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@169, skey@170), pk(skey@170)), #t);
    @conclusion know(mess@169, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@171, skey@172)), #t);
    @conclusion know(mess@171, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((skey@174), #t);
    @conclusion know(pk(skey@174), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@175, skey@176), #t);
    @conclusion know(sign(mess@175, skey@176), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @premise know(pkto@128, #t@129);
    @premise new([na@130], l0[]);
    @premise unique([na@130], l0[], {pkto@128, [na@130]});
    @conclusion know((pk(SKA[]), sign(([na@130], pkto@128, X(SKA[], pkto@128), aenc(Y(SKA[], pkto@128), pkto@128)), SKA[])), #t@132);
    @constraint -$pn - #t@12 + #t@132 >= 0;
    @constraint -#t@5 + #t@12 > 0;
    @constraint #t@12 - #t@129 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(pk(skey@133), #t@134);
    @premise new([na@135], l0[]);
    @premise unique([na@135], l0[], {pk(skey@133), [na@135], (pk(skey@133), sign((nb@136, pk(SKA[]), [na@135], xb@137, aenc(mess@138, pk(SKA[]))), skey@133)), #ta@139});
    @premise know((pk(skey@133), sign((nb@136, pk(SKA[]), [na@135], xb@137, aenc(mess@138, pk(SKA[]))), skey@133)), #t@141);
    @premise know(#ta@139, #t@142);
    @premise alice((pk(SKA[]), pk(skey@133), [na@135], nb@136), #ta@139);
    @conclusion know(sign((pk(skey@133), nb@136), SKA[]), #t@143);
    @constraint -$pn - #t@12 + #t@22 >= 0;
    @constraint -$pn - #ta@139 + #t@143 >= 0;
    @constraint -#t@5 + #t@12 > 0;
    @constraint -#t@12 + #t@37 > 0;
    @constraint -#t@37 + #ta@139 > 0;
    @constraint #ta@139 - #t@142 > 0;
    @constraint #t@37 - #t@141 > 0;
    @constraint #t@12 - #t@134 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know((pk(skey@144), sign((na@145, pk(SKB[]), xa@146, aenc(mess@147, pk(SKB[]))), skey@144)), #t@148);
    @premise new([nb@149], l1[]);
    @premise unique([nb@149], l1[], {(pk(skey@144), sign((na@145, pk(SKB[]), xa@146, aenc(mess@147, pk(SKB[]))), skey@144)), [nb@149]});
    @conclusion know(sign(([nb@149], pk(skey@144), na@145, X(SKB[], pk(skey@144)), aenc(Y(SKB[], pk(skey@144)), pk(skey@144))), SKB[]), #t@151);
    @constraint -$pn - #t@62 + #t@151 >= 0;
    @constraint -#t@5 + #t@62 > 0;
    @constraint #t@62 - #t@148 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know((pk(SKA[]), sign((na@152, pk(SKB[]), xa@153, aenc(mess@154, pk(SKB[]))), SKA[])), #t@155);
    @premise new([nb@156], l1[]);
    @premise unique([nb@156], l1[], {(pk(SKA[]), sign((na@152, pk(SKB[]), xa@153, aenc(mess@154, pk(SKB[]))), SKA[])), [nb@156], sign((pk(SKB[]), [nb@156]), SKA[]), #tb@157});
    @premise know(sign((pk(SKB[]), [nb@156]), SKA[]), #t@159);
    @premise know(#tb@157, #t@160);
    @conclusion bob([nb@156], (pk(SKA[]), pk(SKB[]), na@152, [nb@156]), #tb@157);
    @constraint -$pn - #t@62 + #t@79 >= 0;
    @constraint -#t@5 + #t@62 > 0;
    @constraint -#t@62 + #t@88 > 0;
    @constraint -#t@88 + #tb@157 > 0;
    @constraint #tb@157 - #t@160 > 0;
    @constraint #t@88 - #t@159 > 0;
    @constraint #t@62 - #t@155 > 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SKB[]), #t@161);
    @constraint -$pn - #t@5 + #t@161 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SKA[]), #t@162);
    @constraint -$pn - #t@5 + #t@162 >= 0;
    @constraint -$pn - #t@5 + #t@106 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(Y(SKB[], pk(SKA[])), #t@163);
    @conclusion leak(Y(SKB[], pk(SKA[])));
    @constraint #t@108 - #t@163 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(Y(SKA[], pk(SKB[])), #t@164);
    @conclusion leak(Y(SKA[], pk(SKB[])));
    @constraint #t@115 - #t@164 > 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @premise alice((pkI@121, pkR@122, na@123, nb@124), #ta@125);
    @conclusion bob(v@127, (pkI@121, pkR@122, na@123, nb@124), #tb@126);
    @constraint -#ta@125 + #tb@126 >= 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
