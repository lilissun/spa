@set @index 96;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event accept(1, 3);
@provide @event accept @removable @false;

@declare @event init(1, 3);
@provide @event init @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @conclusion know((x0, x1, x2, x3), #t);
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@set @barrier;

@declare @string l0[];

@declare @string SK[];
@declare @string agree[];

@declare @parameter $pn;
@declare @parameter $threshold;
@set @constraint $pn > 0;

@declare @function aenc/2;
@declare @function pk/1;
@declare @function sign/2;

@rule {
    @premise know((aenc(mess@83, pk(skey@84)), skey@84), #t);
    @conclusion know(mess@83, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@87, pkey@88), #t);
    @conclusion know(aenc(mess@87, pkey@88), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@89, skey@90), pk(skey@90)), #t);
    @conclusion know(mess@89, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@91, skey@92)), #t);
    @conclusion know(mess@91, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((skey@94), #t);
    @conclusion know(pk(skey@94), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@95, skey@96), #t);
    @conclusion know(sign(mess@95, skey@96), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @premise know(pkI@63, #t@64);
    @premise know(#t1@65, #t@66);
    @premise new([n@67], l0[]);
    @premise unique([n@67], l0[], {pkI@63, #t1@65, [n@67]});
    @premise init([n@67], (pkI@63, [n@67]), #t1@65);
    @conclusion know([n@67], #t@69);
    @constraint -$pn - #t1@65 + #t@69 >= 0;
    @constraint -#t@6 + #t@15 > 0;
    @constraint -#t@15 + #t1@65 > 0;
    @constraint #t1@65 - #t@66 > 0;
    @constraint #t@15 - #t@64 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(pk(SK[]), #t@70);
    @premise know(#t1@71, #t@72);
    @premise new([n@73], l0[]);
    @premise unique([n@73], l0[], {pk(SK[]), #t1@71, [n@73], sign(([n@73], agree[]), SK[]), #t2@74});
    @premise init([n@73], (pk(SK[]), [n@73]), #t1@71);
    @premise know(sign(([n@73], agree[]), SK[]), #t@76);
    @premise know(#t2@74, #t@77);
    @conclusion accept([n@73], (pk(SK[]), [n@73]), #t2@74);
    @constraint -$pn - #t1@71 + #t@29 >= 0;
    @constraint -#t@6 + #t@15 > 0;
    @constraint -#t@15 + #t1@71 > 0;
    @constraint -#t1@71 + #t@30 > 0;
    @constraint -#t@30 + #t2@74 > 0;
    @constraint #t2@74 - #t@77 > 0;
    @constraint #t@30 - #t@76 > 0;
    @constraint #t1@71 - #t@72 > 0;
    @constraint #t1@71 - #t2@74 + $threshold > 0;
    @constraint #t@15 - #t@70 > 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SK[]), #t@78);
    @constraint -$pn - #t@6 + #t@78 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(n@79, #t@80);
    @conclusion know(sign((n@79, agree[]), SK[]), #t@81);
    @constraint -$pn - #t@6 + #t@44 >= 0;
    @constraint -$pn - #t@46 + #t@81 >= 0;
    @constraint -#t@6 + #t@46 > 0;
    @constraint #t@46 - #t@80 > 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SK[]), #t@82);
    @constraint -$pn - #t@6 + #t@82 >= 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @injective init(v@61, (pkI@57, n@58), #t1@59);
    @conclusion accept(v@62, (pkI@57, n@58), #t2@60);
    @constraint $threshold + #t1@59 - #t2@60 > 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
