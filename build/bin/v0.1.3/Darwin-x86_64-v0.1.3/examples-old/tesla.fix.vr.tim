@set @index 324;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event accept(1, 3);
@provide @event accept @removable @false;

@declare @event init(2, 2);
@provide @event init @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @conclusion know((x0, x1, x2), #t);
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @premise know(x4, #t4);
    @constraint #t4 - #t <= 0;
    @conclusion know((x0, x1, x2, x3, x4), #t);
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x4, #t4);
    @constraint #t4 - #t >= 0;
};

@set @barrier;

@declare @string l0[];
@declare @string l1[];
@declare @string l2[];
@declare @string l3[];
@declare @string l4[];
@declare @string l5[];
@declare @string l6[];
@declare @string l7[];

@declare @string zero[];
@declare @string one[];
@declare @string syn[];
@declare @string boot[];
@declare @string SSK[];

@declare @parameter $pn;
@declare @parameter $d;
@declare @parameter $ps;
@declare @parameter $pr;
@set @constraint $pn > 0;

@declare @function aenc/2;
@declare @function dk/1;
@declare @function f/1;
@declare @function mac/2;
@declare @function pk/1;
@declare @function senc/2;
@declare @function sign/2;

@rule {
    @premise know((aenc(mess@299, pk(skey@300)), skey@300), #t);
    @conclusion know(mess@299, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@303, pkey@304), #t);
    @conclusion know(aenc(mess@303, pkey@304), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@305, skey@306), pk(skey@306)), #t);
    @conclusion know(mess@305, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((key@307), #t);
    @conclusion know(dk(key@307), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((key@309), #t);
    @conclusion know(f(key@309), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@311, skey@312)), #t);
    @conclusion know(mess@311, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((key@314, mess@315), #t);
    @conclusion know(mac(key@314, mess@315), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((skey@316), #t);
    @conclusion know(pk(skey@316), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((senc(mess@317, skey@318), skey@318), #t);
    @conclusion know(mess@317, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@321, skey@322), #t);
    @conclusion know(senc(mess@321, skey@322), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@323, skey@324), #t);
    @conclusion know(sign(mess@323, skey@324), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @premise know(n@177, #t@178);
    @premise know(#ts@179, #t@180);
    @conclusion know(sign((#ts@179, n@177, syn[]), SSK[]), #t@181);
    @constraint -$pn - #t@32 + #t@181 >= 0;
    @constraint -#t@13 + #t@27 > 0;
    @constraint -#t@27 + #t@32 > 0;
    @constraint -#t@32 + #ts@179 + $ps >= 0;
    @constraint -#t@7 + #ts@179 > 0;
    @constraint #t@32 - #ts@179 + $ps >= 0;
    @constraint #t@32 - #t@180 > 0;
    @constraint #t@27 - #t@178 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise new([k2p@182], l0[]);
    @premise unique([k2p@182], l0[], {(v@183, ([k2p@182], ((#t0@184, #t@185), ((v@186, v@187, v@188), v@189))))});
    @premise know(#t0@184, #t@191);
    @conclusion know(sign((#t0@184, mac(mac([k2p@182], zero[]), zero[]), boot[]), SSK[]), #t@192);
    @constraint -$pn - #t@185 + #t@192 >= 0;
    @constraint -#t@13 + #t@185 > 0;
    @constraint -#t@185 + #t0@184 + $ps >= 0;
    @constraint -#t@7 + #t0@184 > 0;
    @constraint #t@185 - #t0@184 + $ps >= 0;
    @constraint #t@185 - #t@191 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise new([k2p@193], l0[]);
    @premise unique([k2p@193], l0[], {(v@194, ([k2p@193], ((#t0@195, #t@196), ((v@197, v@198, v@199), v@200))))});
    @premise know(#t0@195, #t@202);
    @premise new([m@203], l3[]);
    @premise unique([m@203], l3[], {[m@203], (#tsp@204, #t@205)});
    @premise know(#tsp@204, #t@207);
    @premise init((pk(SSK[]), [m@203], mac(mac([k2p@193], zero[]), one[])), #t@205);
    @conclusion know(([m@203], mac(mac(mac([k2p@193], zero[]), one[]), [m@203])), #t@208);
    @constraint -$pn - #t@205 + #t@208 >= 0;
    @constraint -#t@13 + #t@196 > 0;
    @constraint -#t@196 + #t@205 > 0;
    @constraint -#t@196 + #t0@195 + $ps >= 0;
    @constraint -#t@7 + #t0@195 > 0;
    @constraint -#t0@195 + #tsp@204 > 0;
    @constraint #t@205 - #t@207 > 0;
    @constraint $ps - #t@205 + #tsp@204 >= 0;
    @constraint $ps + #t@205 - #tsp@204 >= 0;
    @constraint #t0@195 - #tsp@204 + $d > 0;
    @constraint #t@196 - #t0@195 + $ps >= 0;
    @constraint #t@196 - #t@202 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise new([k2p@209], l0[]);
    @premise unique([k2p@209], l0[], {(v@210, ([k2p@209], ((#t0@211, #t@212), ((v@213, v@214, v@215), v@216))))});
    @premise know(#t0@211, #t@218);
    @premise new([m@219], l3[]);
    @premise unique([m@219], l3[], {[m@219], (#tsp@220, #t@221)});
    @premise know(#tsp@220, #t@223);
    @premise init((pk(SSK[]), [m@219], mac([k2p@209], one[])), #t@221);
    @conclusion know(([m@219], mac(mac([k2p@209], one[]), [m@219])), #t@224);
    @constraint -$pn - #t@221 + #t@224 >= 0;
    @constraint -#t@13 + #t@212 > 0;
    @constraint -#t@212 + #t@221 > 0;
    @constraint -#t@212 + #t0@211 + $ps >= 0;
    @constraint -#t@7 + #t0@211 > 0;
    @constraint -#t0@211 + #tsp@220 - $d >= 0;
    @constraint $pn > 0;
    @constraint #t@221 - #t@223 > 0;
    @constraint $ps - #t@221 + #tsp@220 >= 0;
    @constraint $ps + #t@221 - #tsp@220 >= 0;
    @constraint #t0@211 - #tsp@220 + 2 * $d > 0;
    @constraint #t@212 - #t0@211 + $ps >= 0;
    @constraint #t@212 - #t@218 > 0;
};

@rule{
    @premise new([k2p@225], l0[]);
    @premise unique([k2p@225], l0[], {(v@226, ([k2p@225], ((#t0@227, #t@228), ((v@229, v@230, v@231), v@232))))});
    @premise know(#t0@227, #t@234);
    @premise new([m@235], l3[]);
    @premise unique([m@235], l3[], {[m@235], (#tsp@236, #t@237)});
    @premise know(#tsp@236, #t@239);
    @premise init((pk(SSK[]), [m@235], mac([k2p@225], one[])), #t@237);
    @conclusion know(mac([k2p@225], zero[]), #t@240);
    @constraint -$pn - #t@237 + #t@240 >= 0;
    @constraint -$pn - #t@237 + #t@84 >= 0;
    @constraint -#t@13 + #t@228 > 0;
    @constraint -#t@228 + #t@237 > 0;
    @constraint -#t@228 + #t0@227 + $ps >= 0;
    @constraint -#t@7 + #t0@227 > 0;
    @constraint -#t0@227 + #tsp@236 - $d >= 0;
    @constraint $pn > 0;
    @constraint #t@237 - #t@239 > 0;
    @constraint $ps - #t@237 + #tsp@236 >= 0;
    @constraint $ps + #t@237 - #tsp@236 >= 0;
    @constraint #t0@227 - #tsp@236 + 2 * $d > 0;
    @constraint #t@228 - #t0@227 + $ps >= 0;
    @constraint #t@228 - #t@234 > 0;
};

@rule{
    @premise new([k2p@241], l0[]);
    @premise unique([k2p@241], l0[], {(v@242, ([k2p@241], ((#t0@243, #t@244), ((v@245, v@246, v@247), v@248))))});
    @premise know(#t0@243, #t@250);
    @premise know(#ts@251, #t@252);
    @conclusion know([k2p@241], #t@253);
    @constraint -$pn - #t@90 + #t@253 >= 0;
    @constraint -#t@13 + #t@244 > 0;
    @constraint -#t@244 + #t@90 > 0;
    @constraint -#t@244 + #t0@243 + $ps >= 0;
    @constraint -#t@7 + #t0@243 > 0;
    @constraint -#t0@243 + #ts@251 - 2 * $d > 0;
    @constraint -#t0@243 + #ts@251 > 0;
    @constraint #t@90 - #t@252 > 0;
    @constraint $ps - #t@90 + #ts@251 >= 0;
    @constraint $ps + #t@90 - #ts@251 >= 0;
    @constraint #t@244 - #t0@243 + $ps >= 0;
    @constraint #t@244 - #t@250 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#tr@254, #t@255);
    @premise new([n@256], l5[]);
    @premise unique([n@256], l5[], {(#tr@254, #t@257), [n@256]});
    @conclusion know([n@256], #t@259);
    @constraint -$pn - #t@257 + #t@259 >= 0;
    @constraint -#t@13 + #t@257 > 0;
    @constraint -#t@257 + #tr@254 + $pr >= 0;
    @constraint -#t@9 + #tr@254 > 0;
    @constraint #t@257 - #tr@254 + $pr >= 0;
    @constraint #t@257 - #t@255 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#tr@260, #t@261);
    @premise new([n@262], l5[]);
    @premise unique([n@262], l5[], {(#tr@260, #t@263), [n@262], sign((#ts@264, [n@262], syn[]), SSK[]), sign((#t0@265, mac(key@266, zero[]), boot[]), SSK[])});
    @premise know(sign((#ts@264, [n@262], syn[]), SSK[]), #t@268);
    @premise know(sign((#t0@265, mac(key@266, zero[]), boot[]), SSK[]), #t@269);
    @premise know((mess@270, mac(mac(key@266, one[]), mess@270)), #t@271);
    @premise know(#trp@272, #t@273);
    @premise know(key@266, #t@274);
    @premise new([n@275], l6[]);
    @premise unique([n@275], l6[], {(mess@270, mac(mac(key@266, one[]), mess@270)), (#trp@272, #t@276), key@266, [n@275]});
    @conclusion accept([n@275], (pk(SSK[]), mess@270, mac(key@266, one[])), #t@276);
    @constraint -$pn - #t@263 + #t@105 >= 0;
    @constraint -#t@13 + #t@263 > 0;
    @constraint -#t@263 + #t@106 > 0;
    @constraint -#t@263 + #tr@260 + $pr >= 0;
    @constraint -#t@9 + #tr@260 > 0;
    @constraint -#tr@260 + #trp@272 > 0;
    @constraint -#t@106 + #t@114 > 0;
    @constraint -#t@114 + #t@123 > 0;
    @constraint -#t@123 + #t@276 > 0;
    @constraint -#t@276 + #t@132 > 0;
    @constraint #t@132 - #t@274 > 0;
    @constraint #t@276 - #t@273 > 0;
    @constraint #t@123 - #t@271 > 0;
    @constraint #t@114 - #t@269 > 0;
    @constraint #t@106 - #t@268 > 0;
    @constraint $pr - #t@276 + #trp@272 >= 0;
    @constraint $pr + #t@276 - #trp@272 >= 0;
    @constraint #tr@260 - #trp@272 + $d - #ts@264 + #t0@265 > 0;
    @constraint #t@263 - #tr@260 + $pr >= 0;
    @constraint #t@263 - #t@261 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#tr@278, #t@279);
    @premise new([n@280], l5[]);
    @premise unique([n@280], l5[], {(#tr@278, #t@281), [n@280], sign((#ts@282, [n@280], syn[]), SSK[]), sign((#t0@283, mac(mac(key@284, zero[]), zero[]), boot[]), SSK[])});
    @premise know(sign((#ts@282, [n@280], syn[]), SSK[]), #t@286);
    @premise know(sign((#t0@283, mac(mac(key@284, zero[]), zero[]), boot[]), SSK[]), #t@287);
    @premise know((mess@288, mac(mac(key@284, one[]), mess@288)), #t@289);
    @premise know(#trp@290, #t@291);
    @premise know(key@284, #t@292);
    @premise new([n@293], l7[]);
    @premise unique([n@293], l7[], {(mess@288, mac(mac(key@284, one[]), mess@288)), (#trp@290, #t@294), key@284, [n@293]});
    @conclusion accept([n@293], (pk(SSK[]), mess@288, mac(key@284, one[])), #t@294);
    @constraint -$pn - #t@281 + #t@105 >= 0;
    @constraint -#t@13 + #t@281 > 0;
    @constraint -#t@281 + #t@106 > 0;
    @constraint -#t@281 + #tr@278 + $pr >= 0;
    @constraint -#t@9 + #tr@278 > 0;
    @constraint -#tr@278 + #trp@290 - $d + #ts@282 - #t0@283 >= 0;
    @constraint -#tr@278 + #trp@290 > 0;
    @constraint -#t@106 + #t@114 > 0;
    @constraint -#t@114 + #t@123 > 0;
    @constraint -#t@123 + #t@294 > 0;
    @constraint -#t@294 + #t@148 > 0;
    @constraint #t@148 - #t@292 > 0;
    @constraint #t@294 - #t@291 > 0;
    @constraint #t@123 - #t@289 > 0;
    @constraint #t@114 - #t@287 > 0;
    @constraint #t@106 - #t@286 > 0;
    @constraint $pr - #t@294 + #trp@290 >= 0;
    @constraint $pr + #t@294 - #trp@290 >= 0;
    @constraint #tr@278 - #trp@290 + 2 * $d - #ts@282 + #t0@283 > 0;
    @constraint #t@281 - #tr@278 + $pr >= 0;
    @constraint #t@281 - #t@279 > 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SSK[]), #t@296);
    @constraint -$pn - #t@13 + #t@296 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know((one[], zero[]), #t@297);
    @constraint -$pn - #t@13 + #t@297 >= 0;
    @constraint -$pn - #t@13 + #t@168 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know((syn[], boot[]), #t@298);
    @constraint -$pn - #t@13 + #t@298 >= 0;
    @constraint -$pn - #t@13 + #t@169 >= 0;
    @constraint -$pn - #t@13 + #t@168 >= 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @premise init((spk@171, m@172, mv@173), #tsp@174);
    @conclusion accept(v@176, (spk@171, m@172, mv@173), #trp@175);
    @constraint -#tsp@174 + #trp@175 >= 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
