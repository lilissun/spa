@set @index 153;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event accept(1, 3);
@provide @event accept @removable @false;

@declare @event init(2, 2);
@provide @event init @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @conclusion know((x0, x1, x2), #t);
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@set @barrier;

@declare @string l0[];
@declare @string l1[];
@declare @string l2[];

@declare @string root[];
@declare @string SSK[];

@declare @parameter $pn;
@declare @parameter $ps;
@declare @parameter $sds;
@declare @parameter $pr;
@declare @parameter $sdr;
@declare @parameter $ds;
@declare @parameter $dr;
@set @constraint $pn > 0;
@set @constraint $ps - $sds >= 0;
@set @constraint $ps + $sds >= 0;
@set @constraint $pr - $sdr >= 0;
@set @constraint $pr + $sdr >= 0;

@declare @function aenc/2;
@declare @function dk/1;
@declare @function f/1;
@declare @function mac/2;
@declare @function pk/1;
@declare @function senc/2;
@declare @function sign/2;

@rule {
    @premise know((aenc(mess@130, pk(skey@131)), skey@131), #t);
    @conclusion know(mess@130, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@134, pkey@135), #t);
    @conclusion know(aenc(mess@134, pkey@135), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@136, skey@137), pk(skey@137)), #t);
    @conclusion know(mess@136, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((key@138), #t);
    @conclusion know(dk(key@138), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((key@139), #t);
    @conclusion know(f(key@139), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@140, skey@141)), #t);
    @conclusion know(mess@140, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((key@143, mess@144), #t);
    @conclusion know(mac(key@143, mess@144), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((skey@145), #t);
    @conclusion know(pk(skey@145), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((senc(mess@146, skey@147), skey@147), #t);
    @conclusion know(mess@146, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@150, skey@151), #t);
    @conclusion know(senc(mess@150, skey@151), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@152, skey@153), #t);
    @conclusion know(sign(mess@152, skey@153), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @premise new([rootkey@94], l0[]);
    @premise unique([rootkey@94], l0[], {[rootkey@94], (#ts@95, #t@96)});
    @premise know(#ts@95, #t@98);
    @conclusion know(sign((root[], #ts@95, dk([rootkey@94])), SSK[]), #t@99);
    @constraint #t@96 - #ts@95 + $sds == 0;
    @constraint -$pn - #t@96 + #t@99 >= 0;
    @constraint -#t@13 + #t@96 > 0;
    @constraint -#t@2 + #ts@95 > 0;
    @constraint #t@96 - #t@98 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise new([rootkey@100], l0[]);
    @premise unique([rootkey@100], l0[], {[rootkey@100], (#ts@101, #t@102), [message@103]});
    @premise know(#ts@101, #t@105);
    @premise new([message@103], l1[]);
    @premise unique([message@103], l1[], {[rootkey@100], (#ts@101, #t@102), [message@103]});
    @premise init(([message@103]), #t@102);
    @conclusion know(([message@103], mac(f([rootkey@100]), [message@103])), #t@106);
    @constraint #t@102 - #ts@101 + $sds == 0;
    @constraint -$pn - #t@102 + #t@106 >= 0;
    @constraint -$pn - #t@102 + #t@30 >= 0;
    @constraint -#t@13 + #t@102 > 0;
    @constraint -#t@2 + #ts@101 > 0;
    @constraint #t@102 - #t@105 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise new([rootkey@107], l0[]);
    @premise unique([rootkey@107], l0[], {[rootkey@107], (#ts@108, #t@109), [message@110], (#t@111, #t@112)});
    @premise know(#ts@108, #t@114);
    @premise new([message@110], l1[]);
    @premise unique([message@110], l1[], {[rootkey@107], (#ts@108, #t@109), [message@110], (#t@111, #t@112)});
    @premise init(([message@110]), #t@109);
    @premise know(#t@111, #t@115);
    @conclusion know([rootkey@107], #t@116);
    @constraint #t@109 - #ts@108 - #t@112 + #t@111 == 0;
    @constraint #t@109 - #ts@108 + $sds == 0;
    @constraint -$pn - #t@109 + #t@40 >= 0;
    @constraint -$pn - #t@109 + #t@30 >= 0;
    @constraint -$pn - #t@112 + #t@116 >= 0;
    @constraint -#t@13 + #t@109 > 0;
    @constraint -#t@109 + #t@112 > 0;
    @constraint -#t@2 + #ts@108 > 0;
    @constraint -#t@109 + #t@112 - $ds > 0;
    @constraint #t@112 - #t@115 > 0;
    @constraint #t@109 - #t@114 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(sign((root[], #ts@117, dk(key@118)), SSK[]), #t@119);
    @premise know((mess@120, mac(f(key@118), mess@120)), #t@121);
    @premise know(#tr@122, #t@123);
    @premise know(key@118, #t@124);
    @premise new([n@125], l2[]);
    @premise unique([n@125], l2[], {sign((root[], #ts@117, dk(key@118)), SSK[]), (mess@120, mac(f(key@118), mess@120)), (#tr@122, #t@126), key@118, [n@125]});
    @conclusion accept([n@125], (mess@120), #t@126);
    @constraint #t@126 - #tr@122 + $sdr == 0;
    @constraint -#t@13 + #t@55 > 0;
    @constraint -#t@55 + #t@64 > 0;
    @constraint -#t@64 + #t@126 > 0;
    @constraint -#t@126 + #t@73 > 0;
    @constraint -#t@5 + #tr@122 > 0;
    @constraint -#tr@122 + $dr + #ts@117 > 0;
    @constraint #t@73 - #t@124 > 0;
    @constraint #t@126 - #t@123 > 0;
    @constraint #t@64 - #t@121 > 0;
    @constraint #t@55 - #t@119 > 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SSK[]), #t@128);
    @constraint -$pn - #t@13 + #t@128 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(root[], #t@129);
    @constraint -$pn - #t@13 + #t@129 >= 0;
    @constraint -$pn - #t@13 + #t@88 >= 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @premise init((m@90), #ts@91);
    @conclusion accept(v@93, (m@90), #tr@92);
    @constraint -#ts@91 + #tr@92 >= 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
