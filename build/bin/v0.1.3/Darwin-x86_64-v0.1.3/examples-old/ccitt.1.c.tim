@set @index 140;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event alice(2, 2);
@provide @event alice @removable @false;

@declare @event bob(1, 3);
@provide @event bob @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @conclusion know((x0, x1, x2, x3), #t);
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @premise know(x4, #t4);
    @constraint #t4 - #t <= 0;
    @conclusion know((x0, x1, x2, x3, x4), #t);
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x4, #t4);
    @constraint #t4 - #t >= 0;
};

@set @barrier;

@declare @string l0[];
@declare @string l1[];

@declare @string SKA[];
@declare @string SKB[];

@declare @parameter $pn;
@set @constraint $pn > 0;

@declare @function X/2;
@declare @function Y/2;
@declare @function aenc/2;
@declare @function h/1;
@declare @function pk/1;
@declare @function sign/2;

@rule {
    @premise know((skfrom@124, pkto@125), #t);
    @conclusion know(X(skfrom@124, pkto@125), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((skfrom@126, pkto@127), #t);
    @conclusion know(Y(skfrom@126, pkto@127), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((aenc(mess@128, pk(skey@129)), skey@129), #t);
    @conclusion know(mess@128, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@130, pkey@131), #t);
    @conclusion know(aenc(mess@130, pkey@131), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@132, skey@133), pk(skey@133)), #t);
    @conclusion know(mess@132, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@134, skey@135)), #t);
    @conclusion know(mess@134, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@137), #t);
    @conclusion know(h(mess@137), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((skey@138), #t);
    @conclusion know(pk(skey@138), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@139, skey@140), #t);
    @conclusion know(sign(mess@139, skey@140), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @premise know(pkto@106, #t@107);
    @premise new([na@108], l0[]);
    @premise unique([na@108], l0[], {pkto@106, [na@108], #ta@109});
    @premise know(#ta@109, #t@111);
    @premise alice((pk(SKA[]), pkto@106, #ta@109, [na@108]), #ta@109);
    @conclusion know((pk(SKA[]), sign((#ta@109, [na@108], pkto@106, X(SKA[], pkto@106), aenc((Y(SKA[], pkto@106), sign(h(Y(SKA[], pkto@106)), SKA[])), pkto@106)), SKA[])), #t@112);
    @constraint -$pn - #ta@109 + #t@112 >= 0;
    @constraint -#t@5 + #t@12 > 0;
    @constraint -#t@12 + #ta@109 > 0;
    @constraint #ta@109 - #t@111 > 0;
    @constraint #t@12 - #t@107 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know((pk(skey@113), sign((#ta@114, na@115, pk(SKB[]), X(SKA[], pk(SKB[])), aenc((Y(SKA[], pk(SKB[])), sign(h(Y(SKA[], pk(SKB[]))), skey@113)), pk(SKB[]))), skey@113)), #t@116);
    @premise know(#tb@117, #t@118);
    @premise new([n@119], l1[]);
    @premise unique([n@119], l1[], {(pk(skey@113), sign((#ta@114, na@115, pk(SKB[]), X(SKA[], pk(SKB[])), aenc((Y(SKA[], pk(SKB[])), sign(h(Y(SKA[], pk(SKB[]))), skey@113)), pk(SKB[]))), skey@113)), #tb@117, [n@119]});
    @conclusion bob([n@119], (pk(skey@113), pk(SKB[]), #ta@114, na@115), #tb@117);
    @constraint -#t@5 + #t@50 > 0;
    @constraint -#t@50 + #tb@117 > 0;
    @constraint #tb@117 - #t@118 > 0;
    @constraint #t@50 - #t@116 > 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SKB[]), #t@121);
    @constraint -$pn - #t@5 + #t@121 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SKA[]), #t@122);
    @constraint -$pn - #t@5 + #t@122 >= 0;
    @constraint -$pn - #t@5 + #t@91 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(Y(SKA[], pk(SKB[])), #t@123);
    @conclusion leak(Y(SKA[], pk(SKB[])));
    @constraint #t@93 - #t@123 > 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @premise alice((pkA@100, pkB@101, #ta@103, na@102), #ta@103);
    @conclusion bob(v@105, (pkA@100, pkB@101, #ta@103, na@102), #tb@104);
    @constraint -#ta@103 + #tb@104 >= 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
