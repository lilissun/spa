@set @index 139;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event accept(1, 3);
@provide @event accept @removable @false;

@declare @event init(2, 2);
@provide @event init @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @conclusion know((x0, x1, x2), #t);
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@set @barrier;

@declare @string l0[];
@declare @string l1[];
@declare @string l2[];

@declare @string root[];
@declare @string SSK[];

@declare @parameter $pn;
@declare @parameter $ds;
@declare @parameter $dr;
@set @constraint $pn > 0;

@declare @function aenc/2;
@declare @function dk/1;
@declare @function f/1;
@declare @function mac/2;
@declare @function pk/1;
@declare @function senc/2;
@declare @function sign/2;

@rule {
    @premise know((aenc(mess@116, pk(skey@117)), skey@117), #t);
    @conclusion know(mess@116, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@120, pkey@121), #t);
    @conclusion know(aenc(mess@120, pkey@121), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@122, skey@123), pk(skey@123)), #t);
    @conclusion know(mess@122, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((key@124), #t);
    @conclusion know(dk(key@124), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((key@125), #t);
    @conclusion know(f(key@125), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@126, skey@127)), #t);
    @conclusion know(mess@126, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((key@129, mess@130), #t);
    @conclusion know(mac(key@129, mess@130), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((skey@131), #t);
    @conclusion know(pk(skey@131), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((senc(mess@132, skey@133), skey@133), #t);
    @conclusion know(mess@132, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@136, skey@137), #t);
    @conclusion know(senc(mess@136, skey@137), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@138, skey@139), #t);
    @conclusion know(sign(mess@138, skey@139), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @premise new([rootkey@85], l0[]);
    @premise unique([rootkey@85], l0[], {[rootkey@85], #ts@86});
    @premise know(#ts@86, #t@88);
    @conclusion know(sign((root[], #ts@86, dk([rootkey@85])), SSK[]), #t@89);
    @constraint -$pn - #ts@86 + #t@89 >= 0;
    @constraint -#t@7 + #ts@86 > 0;
    @constraint #ts@86 - #t@88 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise new([rootkey@90], l0[]);
    @premise unique([rootkey@90], l0[], {[rootkey@90], #ts@91, [message@92]});
    @premise know(#ts@91, #t@94);
    @premise new([message@92], l1[]);
    @premise unique([message@92], l1[], {[rootkey@90], #ts@91, [message@92]});
    @premise init(([message@92]), #ts@91);
    @conclusion know(([message@92], mac(f([rootkey@90]), [message@92])), #t@95);
    @constraint -$pn - #ts@91 + #t@95 >= 0;
    @constraint -$pn - #ts@91 + #t@23 >= 0;
    @constraint -#t@7 + #ts@91 > 0;
    @constraint #ts@91 - #t@94 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise new([rootkey@96], l0[]);
    @premise unique([rootkey@96], l0[], {[rootkey@96], #ts@97, [message@98], #t@99});
    @premise know(#ts@97, #t@101);
    @premise new([message@98], l1[]);
    @premise unique([message@98], l1[], {[rootkey@96], #ts@97, [message@98], #t@99});
    @premise init(([message@98]), #ts@97);
    @premise know(#t@99, #t@102);
    @conclusion know([rootkey@96], #t@103);
    @constraint -$pn - #ts@97 + #t@33 >= 0;
    @constraint -$pn - #ts@97 + #t@23 >= 0;
    @constraint -$pn - #t@99 + #t@103 >= 0;
    @constraint -#t@7 + #ts@97 > 0;
    @constraint -#ts@97 + #t@99 - $ds > 0;
    @constraint -#ts@97 + #t@99 > 0;
    @constraint #t@99 - #t@102 > 0;
    @constraint #ts@97 - #t@101 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(sign((root[], #ts@104, dk(key@105)), SSK[]), #t@106);
    @premise know((mess@107, mac(f(key@105), mess@107)), #t@108);
    @premise know(#tr@109, #t@110);
    @premise know(key@105, #t@111);
    @premise new([n@112], l2[]);
    @premise unique([n@112], l2[], {sign((root[], #ts@104, dk(key@105)), SSK[]), (mess@107, mac(f(key@105), mess@107)), #tr@109, key@105, [n@112]});
    @conclusion accept([n@112], (mess@107), #tr@109);
    @constraint -#t@7 + #t@47 > 0;
    @constraint -#t@47 + #t@56 > 0;
    @constraint -#t@56 + #tr@109 > 0;
    @constraint -#tr@109 + #t@64 > 0;
    @constraint -#tr@109 + $dr + #ts@104 > 0;
    @constraint #t@64 - #t@111 > 0;
    @constraint #tr@109 - #t@110 > 0;
    @constraint #t@56 - #t@108 > 0;
    @constraint #t@47 - #t@106 > 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SSK[]), #t@114);
    @constraint -$pn - #t@7 + #t@114 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(root[], #t@115);
    @constraint -$pn - #t@7 + #t@115 >= 0;
    @constraint -$pn - #t@7 + #t@79 >= 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @premise init((m@81), #ts@82);
    @conclusion accept(v@84, (m@81), #tr@83);
    @constraint -#ts@82 + #tr@83 >= 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
