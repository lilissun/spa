Rule in cache: 0
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@10, #t0@11);
    @premise know(*x1@12, #t1@13);
    @conclusion know(*tuple2(x0@10, x1@12), #t@14);
    @constraint -#t0@11 + #t@14 >= 0;
    @constraint #t@14 - #t1@13 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@10, #t0@11);
    @premise know(*x1@12, #t1@13);
    @conclusion know(*tuple2(x0@10, x1@12), #t@14);
    @constraint -#t0@11 + #t@14 >= 0;
    @constraint #t@14 - #t1@13 >= 0;
};

Rule in cache: 1
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple2(x0@15, x1@16), #t@17);
    @conclusion know(*x0@15, #t0@18);
    @constraint -#t@17 + #t0@18 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple2(x0@15, x1@16), #t@17);
    @conclusion know(*x0@15, #t0@18);
    @constraint -#t@17 + #t0@18 >= 0;
};

Rule in cache: 2
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple2(x0@19, x1@20), #t@21);
    @conclusion know(*x1@20, #t1@22);
    @constraint -#t@21 + #t1@22 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple2(x0@19, x1@20), #t@21);
    @conclusion know(*x1@20, #t1@22);
    @constraint -#t@21 + #t1@22 >= 0;
};

Rule in cache: 3
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m1@24, #t1@25);
    @premise know(*m2@26, #t2@27);
    @conclusion know(*hash(m1@24, m2@26), #t@28);
    @constraint -#t1@25 + #t@28 >= 0;
    @constraint #t@28 - #t2@27 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m1@24, #t1@25);
    @premise know(*m2@26, #t2@27);
    @conclusion know(*hash(m1@24, m2@26), #t@28);
    @constraint -#t1@25 + #t@28 >= 0;
    @constraint #t@28 - #t2@27 >= 0;
};

Rule in cache: 4
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sk@30, #t1@31);
    @conclusion know(*pk(sk@30), #t@32);
    @constraint -#t1@31 + #t@32 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@30, #t1@31);
    @conclusion know(*pk(sk@30), #t@32);
    @constraint -#t1@31 + #t@32 >= 0;
};

Rule in cache: 5
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m@34, #t1@35);
    @premise know(*sk@36, #t2@37);
    @conclusion know(*sign(m@34, sk@36), #t@38);
    @constraint -#t1@35 + #t@38 >= 0;
    @constraint #t@38 - #t2@37 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@34, #t1@35);
    @premise know(*sk@36, #t2@37);
    @conclusion know(*sign(m@34, sk@36), #t@38);
    @constraint -#t1@35 + #t@38 >= 0;
    @constraint #t@38 - #t2@37 >= 0;
};

Rule in cache: 6
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sign(m@39, sk@40), #t1@41);
    @conclusion know(*m@39, #t@42);
    @constraint -#t1@41 + #t@42 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sign(m@39, sk@40), #t1@41);
    @conclusion know(*m@39, #t@42);
    @constraint -#t1@41 + #t@42 >= 0;
};

Rule in cache: 7
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m@44, #t1@45);
    @premise know(*pk(sk@46), #t2@47);
    @conclusion know(*aenc(m@44, pk(sk@46)), #t@48);
    @constraint -#t1@45 + #t@48 >= 0;
    @constraint #t@48 - #t2@47 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@44, #t1@45);
    @premise know(*pk(sk@46), #t2@47);
    @conclusion know(*aenc(m@44, pk(sk@46)), #t@48);
    @constraint -#t1@45 + #t@48 >= 0;
    @constraint #t@48 - #t2@47 >= 0;
};

Rule in cache: 8
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sk@49, #t1@50);
    @premise know(*aenc(m@51, pk(sk@49)), #t2@52);
    @conclusion know(*m@51, #t@53);
    @constraint -#t1@50 + #t@53 >= 0;
    @constraint #t@53 - #t2@52 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@49, #t1@50);
    @premise know(*aenc(m@51, pk(sk@49)), #t2@52);
    @conclusion know(*m@51, #t@53);
    @constraint -#t1@50 + #t@53 >= 0;
    @constraint #t@53 - #t2@52 >= 0;
};

Rule in cache: 9
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m@55, #t1@56);
    @premise know(*k@57, #t2@58);
    @conclusion know(*senc(m@55, k@57), #t@59);
    @constraint -#t1@56 + #t@59 >= 0;
    @constraint #t@59 - #t2@58 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@55, #t1@56);
    @premise know(*k@57, #t2@58);
    @conclusion know(*senc(m@55, k@57), #t@59);
    @constraint -#t1@56 + #t@59 >= 0;
    @constraint #t@59 - #t2@58 >= 0;
};

Rule in cache: 10
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*k@60, #t1@61);
    @premise know(*senc(m@62, k@60), #t2@63);
    @conclusion know(*m@62, #t@64);
    @constraint -#t1@61 + #t@64 >= 0;
    @constraint #t@64 - #t2@63 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*k@60, #t1@61);
    @premise know(*senc(m@62, k@60), #t2@63);
    @conclusion know(*m@62, #t@64);
    @constraint -#t1@61 + #t@64 >= 0;
    @constraint #t@64 - #t2@63 >= 0;
};

Rule in cache: 11
Rule staged: 0
Rule before check and clean: 
@rule{
    @conclusion know(*ds(), #t@66);
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*ds(), #t@66);
};

Rule in cache: 12
Rule staged: 0
Rule before check and clean: 
@rule{
    @conclusion know(*pk(skB()), #t@68);
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*pk(skB()), #t@68);
};

Rule in cache: 13
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise init(*[na@72], #t1@73);
    @conclusion know(*[na@72], #t@74);
    @constraint -#t1@73 + #t@74 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*[na@72], #t1@73);
    @conclusion know(*[na@72], #t@74);
    @constraint -#t1@73 + #t@74 >= 0;
};

Rule in cache: 14
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*na@75, #t1@76);
    @conclusion know(*sign(tuple2(na@75, ds()), skB()), #t@77);
    @constraint -$d - #t1@76 + #rv@78 >= 0;
    @constraint -#rv@78 - $s + #t@77 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*na@75, #t1@76);
    @conclusion know(*sign(tuple2(na@75, ds()), skB()), #t@77);
    @constraint -$d - #t1@76 - $s + #t@77 >= 0;
};

Rule in cache: 15
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise init(*[na@79], #t1@80);
    @premise know(*sign(tuple2([na@79], ds()), skB()), #t2@81);
    @conclusion accept([na@79], #t@82);
    @constraint -$d - #t2@81 + #t@82 >= 0;
    @constraint -#t@82 + $l + #t1@80 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*[na@79], #t1@80);
    @premise know(*sign(tuple2([na@79], ds()), skB()), #t2@81);
    @conclusion accept([na@79], #t@82);
    @constraint -$d - #t2@81 + #t@82 >= 0;
    @constraint -#t@82 + $l + #t1@80 >= 0;
};

Stage rule: 
@rule{
    @premise know(*x0@10, #t0@11);
    @premise know(*x1@12, #t1@13);
    @conclusion know(*tuple2(x0@10, x1@12), #t@14);
    @constraint -#t0@11 + #t@14 >= 0;
    @constraint #t@14 - #t1@13 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple2(x0@15, x1@16), #t@17);
    @conclusion know(*x0@15, #t0@18);
    @constraint -#t@17 + #t0@18 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@10, #t0@11);
    @premise know(*x1@12, #t1@13);
    @conclusion know(*tuple2(x0@10, x1@12), #t@14);
    @constraint -#t0@11 + #t@14 >= 0;
    @constraint #t@14 - #t1@13 >= 0;
};
Rule in cache: 14
Rule staged: 2
Rule before check and clean: 
@rule{
    @premise know(*x0@86, #t0@88);
    @premise know(*x1@89, #t1@90);
    @conclusion know(*x0@86, #t0@87);
    @constraint #t0@87 - #t@14 >= 0;
    @constraint #t@14 - #t1@90 >= 0;
    @constraint -#t0@88 + #t@14 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple2(x0@19, x1@20), #t@21);
    @conclusion know(*x1@20, #t1@22);
    @constraint -#t@21 + #t1@22 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@10, #t0@11);
    @premise know(*x1@12, #t1@13);
    @conclusion know(*tuple2(x0@10, x1@12), #t@14);
    @constraint -#t0@11 + #t@14 >= 0;
    @constraint #t@14 - #t1@13 >= 0;
};
Rule in cache: 13
Rule staged: 3
Rule before check and clean: 
@rule{
    @premise know(*x0@93, #t0@94);
    @premise know(*x1@91, #t1@95);
    @conclusion know(*x1@91, #t1@92);
    @constraint #t1@92 - #t@14 >= 0;
    @constraint #t@14 - #t1@95 >= 0;
    @constraint -#t0@94 + #t@14 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*m1@24, #t1@25);
    @premise know(*m2@26, #t2@27);
    @conclusion know(*hash(m1@24, m2@26), #t@28);
    @constraint -#t1@25 + #t@28 >= 0;
    @constraint #t@28 - #t2@27 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*sk@30, #t1@31);
    @conclusion know(*pk(sk@30), #t@32);
    @constraint -#t1@31 + #t@32 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*m@34, #t1@35);
    @premise know(*sk@36, #t2@37);
    @conclusion know(*sign(m@34, sk@36), #t@38);
    @constraint -#t1@35 + #t@38 >= 0;
    @constraint #t@38 - #t2@37 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*sign(m@39, sk@40), #t1@41);
    @conclusion know(*m@39, #t@42);
    @constraint -#t1@41 + #t@42 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*m@34, #t1@35);
    @premise know(*sk@36, #t2@37);
    @conclusion know(*sign(m@34, sk@36), #t@38);
    @constraint -#t1@35 + #t@38 >= 0;
    @constraint #t@38 - #t2@37 >= 0;
};
Rule in cache: 9
Rule staged: 7
Rule before check and clean: 
@rule{
    @premise know(*m@96, #t1@98);
    @premise know(*sk@99, #t2@100);
    @conclusion know(*m@96, #t@97);
    @constraint #t@97 - #t@38 >= 0;
    @constraint #t@38 - #t2@100 >= 0;
    @constraint -#t1@98 + #t@38 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*m@44, #t1@45);
    @premise know(*pk(sk@46), #t2@47);
    @conclusion know(*aenc(m@44, pk(sk@46)), #t@48);
    @constraint -#t1@45 + #t@48 >= 0;
    @constraint #t@48 - #t2@47 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@30, #t1@31);
    @conclusion know(*pk(sk@30), #t@32);
    @constraint -#t1@31 + #t@32 >= 0;
};
Rule in cache: 8
Rule staged: 8
Rule before check and clean: 
@rule{
    @premise know(*sk@102, #t1@104);
    @premise know(*m@101, #t1@105);
    @conclusion know(*aenc(m@101, pk(sk@102)), #t@103);
    @constraint -#t1@105 + #t@103 >= 0;
    @constraint -#t1@104 + #t@32 >= 0;
    @constraint #t@103 - #t@32 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@102, #t1@104);
    @premise know(*m@101, #t1@105);
    @conclusion know(*aenc(m@101, pk(sk@102)), #t@103);
    @constraint -#t1@105 + #t@103 >= 0;
    @constraint #t@103 - #t1@104 >= 0;
};

Stage rule: 
@rule{
    @premise know(*sk@49, #t1@50);
    @premise know(*aenc(m@51, pk(sk@49)), #t2@52);
    @conclusion know(*m@51, #t@53);
    @constraint -#t1@50 + #t@53 >= 0;
    @constraint #t@53 - #t2@52 >= 0;
};
Rule added at 1.

Stage rule: 
@rule{
    @premise know(*m@55, #t1@56);
    @premise know(*k@57, #t2@58);
    @conclusion know(*senc(m@55, k@57), #t@59);
    @constraint -#t1@56 + #t@59 >= 0;
    @constraint #t@59 - #t2@58 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*k@60, #t1@61);
    @premise know(*senc(m@62, k@60), #t2@63);
    @conclusion know(*m@62, #t@64);
    @constraint -#t1@61 + #t@64 >= 0;
    @constraint #t@64 - #t2@63 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*m@55, #t1@56);
    @premise know(*k@57, #t2@58);
    @conclusion know(*senc(m@55, k@57), #t@59);
    @constraint -#t1@56 + #t@59 >= 0;
    @constraint #t@59 - #t2@58 >= 0;
};
Rule in cache: 6
Rule staged: 11
Rule before check and clean: 
@rule{
    @premise know(*m@106, #t1@108);
    @premise know(*k@109, #t2@110);
    @premise know(*k@109, #t1@111);
    @conclusion know(*m@106, #t@107);
    @constraint -#t1@111 + #t@107 >= 0;
    @constraint #t@59 - #t2@110 >= 0;
    @constraint -#t1@108 + #t@59 >= 0;
    @constraint #t@107 - #t@59 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @conclusion know(*ds(), #t@66);
};
Rule added.

Stage rule: 
@rule{
    @conclusion know(*pk(skB()), #t@68);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*m@44, #t1@45);
    @premise know(*pk(sk@46), #t2@47);
    @conclusion know(*aenc(m@44, pk(sk@46)), #t@48);
    @constraint -#t1@45 + #t@48 >= 0;
    @constraint #t@48 - #t2@47 >= 0;
};
Rule in cache: 4
Rule staged: 13
Rule before check and clean: 
@rule{
    @premise know(*m@112, #t1@114);
    @conclusion know(*aenc(m@112, pk(skB())), #t@113);
    @constraint -#t1@114 + #t@113 >= 0;
    @constraint #t@113 - #t@68 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@112, #t1@114);
    @conclusion know(*aenc(m@112, pk(skB())), #t@113);
    @constraint -#t1@114 + #t@113 >= 0;
};

Stage rule: 
@rule{
    @premise init(*[na@72], #t1@73);
    @conclusion know(*[na@72], #t@74);
    @constraint -#t1@73 + #t@74 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*na@75, #t1@76);
    @conclusion know(*sign(tuple2(na@75, ds()), skB()), #t@77);
    @constraint -$d - #t1@76 - $s + #t@77 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*sign(m@39, sk@40), #t1@41);
    @conclusion know(*m@39, #t@42);
    @constraint -#t1@41 + #t@42 >= 0;
};
Rule in cache: 3
Rule staged: 15
Rule before check and clean: 
@rule{
    @premise know(*na@115, #t1@117);
    @conclusion know(*tuple2(na@115, ds()), #t@116);
    @constraint #t@116 - #t@77 >= 0;
    @constraint -$d - #t1@117 - $s + #t@77 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*na@115, #t1@117);
    @conclusion know(*tuple2(na@115, ds()), #t@116);
    @constraint #t@116 - $d - #t1@117 - $s >= 0;
};

Stage rule: 
@rule{
    @premise init(*[na@79], #t1@80);
    @premise know(*sign(tuple2([na@79], ds()), skB()), #t2@81);
    @conclusion accept([na@79], #t@82);
    @constraint -$d - #t2@81 + #t@82 >= 0;
    @constraint -#t@82 + $l + #t1@80 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*m@34, #t1@35);
    @premise know(*sk@36, #t2@37);
    @conclusion know(*sign(m@34, sk@36), #t@38);
    @constraint -#t1@35 + #t@38 >= 0;
    @constraint #t@38 - #t2@37 >= 0;
};
Rule in cache: 3
Rule staged: 16
Rule before check and clean: 
@rule{
    @premise know(*tuple2([na@118], ds()), #t1@120);
    @premise know(*skB(), #t2@121);
    @premise init(*[na@118], #t1@122);
    @conclusion accept([na@118], #t@119);
    @constraint -$d + #t@119 - #t@38 >= 0;
    @constraint -#t@119 + $l + #t1@122 >= 0;
    @constraint #t@38 - #t2@121 >= 0;
    @constraint -#t1@120 + #t@38 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*tuple2([na@118], ds()), #t1@120);
    @premise know(*skB(), #t2@121);
    @premise init(*[na@118], #t1@122);
    @conclusion accept([na@118], #t@119);
    @constraint -#t@119 + $l + #t1@122 >= 0;
    @constraint -$d + #t@119 - #t1@120 >= 0;
    @constraint -$d + #t@119 - #t2@121 >= 0;
};

Compose by at 1 : 
@rule{
    @premise know(*na@75, #t1@76);
    @conclusion know(*sign(tuple2(na@75, ds()), skB()), #t@77);
    @constraint -$d - #t1@76 - $s + #t@77 >= 0;
};
Rule in cache: 4
Rule staged: 16
Rule before check and clean: 
@rule{
    @premise know(*[na@123], #t1@125);
    @premise init(*[na@123], #t1@126);
    @conclusion accept([na@123], #t@124);
    @constraint -$d + #t@124 - #t@77 >= 0;
    @constraint -#t@124 + $l + #t1@126 >= 0;
    @constraint -$d - #t1@125 - $s + #t@77 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*[na@123], #t1@125);
    @premise init(*[na@123], #t1@126);
    @conclusion accept([na@123], #t@124);
    @constraint -#t@124 + $l + #t1@126 >= 0;
    @constraint -2 * $d + #t@124 - #t1@125 - $s >= 0;
};

Stage rule: 
@rule{
    @premise know(*sk@102, #t1@104);
    @premise know(*m@101, #t1@105);
    @conclusion know(*aenc(m@101, pk(sk@102)), #t@103);
    @constraint -#t1@105 + #t@103 >= 0;
    @constraint #t@103 - #t1@104 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@49, #t1@50);
    @premise know(*aenc(m@51, pk(sk@49)), #t2@52);
    @conclusion know(*m@51, #t@53);
    @constraint -#t1@50 + #t@53 >= 0;
    @constraint #t@53 - #t2@52 >= 0;
};
Rule in cache: 4
Rule staged: 17
Rule before check and clean: 
@rule{
    @premise know(*sk@129, #t1@130);
    @premise know(*m@127, #t1@131);
    @premise know(*sk@129, #t1@132);
    @conclusion know(*m@127, #t@128);
    @constraint -#t1@132 + #t@128 >= 0;
    @constraint #t@103 - #t1@130 >= 0;
    @constraint -#t1@131 + #t@103 >= 0;
    @constraint #t@128 - #t@103 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*m@112, #t1@114);
    @conclusion know(*aenc(m@112, pk(skB())), #t@113);
    @constraint -#t1@114 + #t@113 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@49, #t1@50);
    @premise know(*aenc(m@51, pk(sk@49)), #t2@52);
    @conclusion know(*m@51, #t@53);
    @constraint -#t1@50 + #t@53 >= 0;
    @constraint #t@53 - #t2@52 >= 0;
};
Rule in cache: 3
Rule staged: 18
Rule before check and clean: 
@rule{
    @premise know(*m@133, #t1@135);
    @premise know(*skB(), #t1@136);
    @conclusion know(*m@133, #t@134);
    @constraint -#t1@136 + #t@134 >= 0;
    @constraint -#t1@135 + #t@113 >= 0;
    @constraint #t@134 - #t@113 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*na@115, #t1@117);
    @conclusion know(*tuple2(na@115, ds()), #t@116);
    @constraint #t@116 - $d - #t1@117 - $s >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple2(x0@15, x1@16), #t@17);
    @conclusion know(*x0@15, #t0@18);
    @constraint -#t@17 + #t0@18 >= 0;
};
Rule in cache: 2
Rule staged: 19
Rule before check and clean: 
@rule{
    @premise know(*na@137, #t1@139);
    @conclusion know(*na@137, #t0@138);
    @constraint #t@116 - $d - #t1@139 - $s >= 0;
    @constraint #t0@138 - #t@116 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*tuple2(x0@19, x1@20), #t@21);
    @conclusion know(*x1@20, #t1@22);
    @constraint -#t@21 + #t1@22 >= 0;
};
Rule in cache: 2
Rule staged: 19
Rule before check and clean: 
@rule{
    @premise know(*na@141, #t1@142);
    @conclusion know(*ds(), #t1@140);
    @constraint #t@116 - $d - #t1@142 - $s >= 0;
    @constraint #t1@140 - #t@116 >= 0;
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*ds(), #t1@140);
};

Stage rule: 
@rule{
    @premise know(*tuple2([na@118], ds()), #t1@120);
    @premise know(*skB(), #t2@121);
    @premise init(*[na@118], #t1@122);
    @conclusion accept([na@118], #t@119);
    @constraint -#t@119 + $l + #t1@122 >= 0;
    @constraint -$d + #t@119 - #t1@120 >= 0;
    @constraint -$d + #t@119 - #t2@121 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@10, #t0@11);
    @premise know(*x1@12, #t1@13);
    @conclusion know(*tuple2(x0@10, x1@12), #t@14);
    @constraint -#t0@11 + #t@14 >= 0;
    @constraint #t@14 - #t1@13 >= 0;
};
Rule in cache: 2
Rule staged: 20
Rule before check and clean: 
@rule{
    @premise know(*[na@143], #t0@145);
    @premise know(*ds(), #t1@146);
    @premise know(*skB(), #t2@147);
    @premise init(*[na@143], #t1@148);
    @conclusion accept([na@143], #t@144);
    @constraint #t@14 - #t1@146 >= 0;
    @constraint -#t0@145 + #t@14 >= 0;
    @constraint -$d + #t@144 - #t@14 >= 0;
    @constraint -$d + #t@144 - #t2@147 >= 0;
    @constraint -#t@144 + $l + #t1@148 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*[na@143], #t0@145);
    @premise know(*ds(), #t1@146);
    @premise know(*skB(), #t2@147);
    @premise init(*[na@143], #t1@148);
    @conclusion accept([na@143], #t@144);
    @constraint -$d + #t@144 - #t2@147 >= 0;
    @constraint -#t@144 + $l + #t1@148 >= 0;
    @constraint -$d + #t@144 - #t0@145 >= 0;
    @constraint -$d + #t@144 - #t1@146 >= 0;
};

Stage rule: 
@rule{
    @premise know(*[na@123], #t1@125);
    @premise init(*[na@123], #t1@126);
    @conclusion accept([na@123], #t@124);
    @constraint -#t@124 + $l + #t1@126 >= 0;
    @constraint -2 * $d + #t@124 - #t1@125 - $s >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise init(*[na@72], #t1@73);
    @conclusion know(*[na@72], #t@74);
    @constraint -#t1@73 + #t@74 >= 0;
};
Rule in cache: 2
Rule staged: 21
Rule before check and clean: 
@rule{
    @premise init(*[na@149], #t1@151);
    @premise init(*[na@149], #t1@152);
    @conclusion accept([na@149], #t@150);
    @constraint -#t@150 + $l + #t1@152 >= 0;
    @constraint -#t1@151 + #t@74 >= 0;
    @constraint -2 * $d + #t@150 - $s - #t@74 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*[na@149], #t1@151);
    @conclusion accept([na@149], #t@150);
    @constraint -2 * $d + #t@150 - $s - #t1@151 >= 0;
    @constraint -#t@150 + $l + #t1@151 >= 0;
};

Stage rule: 
@rule{
    @conclusion know(*ds(), #t1@140);
};
Rule implied by: 
@rule{
    @conclusion know(*ds(), #t@66);
};
Rule not added.

Stage rule: 
@rule{
    @premise know(*[na@143], #t0@145);
    @premise know(*ds(), #t1@146);
    @premise know(*skB(), #t2@147);
    @premise init(*[na@143], #t1@148);
    @conclusion accept([na@143], #t@144);
    @constraint -$d + #t@144 - #t2@147 >= 0;
    @constraint -#t@144 + $l + #t1@148 >= 0;
    @constraint -$d + #t@144 - #t0@145 >= 0;
    @constraint -$d + #t@144 - #t1@146 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise init(*[na@72], #t1@73);
    @conclusion know(*[na@72], #t@74);
    @constraint -#t1@73 + #t@74 >= 0;
};
Rule in cache: 1
Rule staged: 22
Rule before check and clean: 
@rule{
    @premise init(*[na@153], #t1@155);
    @premise know(*ds(), #t1@156);
    @premise know(*skB(), #t2@157);
    @premise init(*[na@153], #t1@158);
    @conclusion accept([na@153], #t@154);
    @constraint -#t@154 + $l + #t1@158 >= 0;
    @constraint -#t1@155 + #t@74 >= 0;
    @constraint -$d + #t@154 - #t@74 >= 0;
    @constraint -$d + #t@154 - #t1@156 >= 0;
    @constraint -$d + #t@154 - #t2@157 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*[na@153], #t1@155);
    @premise know(*ds(), #t1@156);
    @premise know(*skB(), #t2@157);
    @conclusion accept([na@153], #t@154);
    @constraint -$d + #t@154 - #t1@156 >= 0;
    @constraint -$d + #t@154 - #t2@157 >= 0;
    @constraint -$d + #t@154 - #t1@155 >= 0;
    @constraint -#t@154 + $l + #t1@155 >= 0;
};

Stage rule: 
@rule{
    @premise init(*[na@149], #t1@151);
    @conclusion accept([na@149], #t@150);
    @constraint -2 * $d + #t@150 - $s - #t1@151 >= 0;
    @constraint -#t@150 + $l + #t1@151 >= 0;
};
Rule added.

Check rule against queries: 
@rule{
    @premise init(*[na@149], #t1@151);
    @conclusion accept([na@149], #t@150);
    @constraint -2 * $d + #t@150 - $s - #t1@151 >= 0;
    @constraint -#t@150 + $l + #t1@151 >= 0;
};
Before checking:
0. Requested parameter relation:
[@universe]

After checking:
0. Requested parameter relation:
[@universe]


Stage rule: 
@rule{
    @premise init(*[na@153], #t1@155);
    @premise know(*ds(), #t1@156);
    @premise know(*skB(), #t2@157);
    @conclusion accept([na@153], #t@154);
    @constraint -$d + #t@154 - #t1@156 >= 0;
    @constraint -$d + #t@154 - #t2@157 >= 0;
    @constraint -$d + #t@154 - #t1@155 >= 0;
    @constraint -#t@154 + $l + #t1@155 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @conclusion know(*ds(), #t@66);
};
Rule in cache: 0
Rule staged: 24
Rule before check and clean: 
@rule{
    @premise init(*[na@159], #t1@161);
    @premise know(*skB(), #t2@162);
    @conclusion accept([na@159], #t@160);
    @constraint -$d + #t@160 - #t2@162 >= 0;
    @constraint -$d + #t@160 - #t@66 >= 0;
    @constraint -$d + #t@160 - #t1@161 >= 0;
    @constraint -#t@160 + $l + #t1@161 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*[na@159], #t1@161);
    @premise know(*skB(), #t2@162);
    @conclusion accept([na@159], #t@160);
    @constraint -$d + #t@160 - #t2@162 >= 0;
    @constraint -#t@160 + $l + #t1@161 >= 0;
    @constraint -$d + #t@160 - #t1@161 >= 0;
};

Stage rule: 
@rule{
    @premise init(*[na@159], #t1@161);
    @premise know(*skB(), #t2@162);
    @conclusion accept([na@159], #t@160);
    @constraint -$d + #t@160 - #t2@162 >= 0;
    @constraint -#t@160 + $l + #t1@161 >= 0;
    @constraint -$d + #t@160 - #t1@161 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*[na@153], #t1@155);
    @premise know(*ds(), #t1@156);
    @premise know(*skB(), #t2@157);
    @conclusion accept([na@153], #t@154);
    @constraint -$d + #t@154 - #t1@156 >= 0;
    @constraint -$d + #t@154 - #t2@157 >= 0;
    @constraint -$d + #t@154 - #t1@155 >= 0;
    @constraint -#t@154 + $l + #t1@155 >= 0;
};
Rule added at 1.

Details:
General Rules: 
Rule No. [0.0]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@10, #t0@11);
    @premise know(*x1@12, #t1@13);
    @conclusion know(*tuple2(x0@10, x1@12), #t@14);
    @constraint -#t0@11 + #t@14 >= 0;
    @constraint #t@14 - #t1@13 >= 0;
};

Rule No. [0.1]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple2(x0@15, x1@16), #t@17);
    @conclusion know(*x0@15, #t0@18);
    @constraint -#t@17 + #t0@18 >= 0;
};

Rule No. [0.2]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple2(x0@19, x1@20), #t@21);
    @conclusion know(*x1@20, #t1@22);
    @constraint -#t@21 + #t1@22 >= 0;
};

Rule No. [1.0]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*m1@24, #t1@25);
    @premise know(*m2@26, #t2@27);
    @conclusion know(*hash(m1@24, m2@26), #t@28);
    @constraint -#t1@25 + #t@28 >= 0;
    @constraint #t@28 - #t2@27 >= 0;
};

Rule No. [1.1]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*sk@30, #t1@31);
    @conclusion know(*pk(sk@30), #t@32);
    @constraint -#t1@31 + #t@32 >= 0;
};

Rule No. [1.2]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*m@34, #t1@35);
    @premise know(*sk@36, #t2@37);
    @conclusion know(*sign(m@34, sk@36), #t@38);
    @constraint -#t1@35 + #t@38 >= 0;
    @constraint #t@38 - #t2@37 >= 0;
};

Rule No. [1.3]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*sign(m@39, sk@40), #t1@41);
    @conclusion know(*m@39, #t@42);
    @constraint -#t1@41 + #t@42 >= 0;
};

Rule No. [1.4]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise know(*m@44, #t1@45);
    @premise know(*pk(sk@46), #t2@47);
    @conclusion know(*aenc(m@44, pk(sk@46)), #t@48);
    @constraint -#t1@45 + #t@48 >= 0;
    @constraint #t@48 - #t2@47 >= 0;
};

Rule No. [1.5]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise know(*sk@49, #t1@50);
    @premise know(*aenc(m@51, pk(sk@49)), #t2@52);
    @conclusion know(*m@51, #t@53);
    @constraint -#t1@50 + #t@53 >= 0;
    @constraint #t@53 - #t2@52 >= 0;
};

Rule No. [1.6]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*m@55, #t1@56);
    @premise know(*k@57, #t2@58);
    @conclusion know(*senc(m@55, k@57), #t@59);
    @constraint -#t1@56 + #t@59 >= 0;
    @constraint #t@59 - #t2@58 >= 0;
};

Rule No. [1.7]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise know(*k@60, #t1@61);
    @premise know(*senc(m@62, k@60), #t2@63);
    @conclusion know(*m@62, #t@64);
    @constraint -#t1@61 + #t@64 >= 0;
    @constraint #t@64 - #t2@63 >= 0;
};

Rule No. [1.8]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @conclusion know(*ds(), #t@66);
};

Rule No. [1.9]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @conclusion know(*pk(skB()), #t@68);
};

Rule No. [1.10]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise init(*[na@72], #t1@73);
    @conclusion know(*[na@72], #t@74);
    @constraint -#t1@73 + #t@74 >= 0;
};

Rule No. [1.11]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*na@75, #t1@76);
    @conclusion know(*sign(tuple2(na@75, ds()), skB()), #t@77);
    @constraint -$d - #t1@76 - $s + #t@77 >= 0;
};

Rule No. [1.12]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise init(*[na@79], #t1@80);
    @premise know(*sign(tuple2([na@79], ds()), skB()), #t2@81);
    @conclusion accept([na@79], #t@82);
    @constraint -$d - #t2@81 + #t@82 >= 0;
    @constraint -#t@82 + $l + #t1@80 >= 0;
};

Rule No. [1.13]
Valid Rule
Composed by Rule [1.1] and [1.4]
Not Selectable : 
@rule{
    @premise know(*sk@102, #t1@104);
    @premise know(*m@101, #t1@105);
    @conclusion know(*aenc(m@101, pk(sk@102)), #t@103);
    @constraint -#t1@105 + #t@103 >= 0;
    @constraint #t@103 - #t1@104 >= 0;
};

Rule No. [1.14]
Valid Rule
Composed by Rule [1.9] and [1.4]
Not Selectable : 
@rule{
    @premise know(*m@112, #t1@114);
    @conclusion know(*aenc(m@112, pk(skB())), #t@113);
    @constraint -#t1@114 + #t@113 >= 0;
};

Rule No. [1.15]
Valid Rule
Composed by Rule [1.11] and [1.3]
Not Selectable : 
@rule{
    @premise know(*na@115, #t1@117);
    @conclusion know(*tuple2(na@115, ds()), #t@116);
    @constraint #t@116 - $d - #t1@117 - $s >= 0;
};

Rule No. [1.16]
Valid Rule
Composed by Rule [1.2] and [1.12]
Selectable at 0:
@rule{
    @premise know(*tuple2([na@118], ds()), #t1@120);
    @premise know(*skB(), #t2@121);
    @premise init(*[na@118], #t1@122);
    @conclusion accept([na@118], #t@119);
    @constraint -#t@119 + $l + #t1@122 >= 0;
    @constraint -$d + #t@119 - #t1@120 >= 0;
    @constraint -$d + #t@119 - #t2@121 >= 0;
};

Rule No. [1.17]
Valid Rule
Composed by Rule [1.11] and [1.12]
Selectable at 0:
@rule{
    @premise know(*[na@123], #t1@125);
    @premise init(*[na@123], #t1@126);
    @conclusion accept([na@123], #t@124);
    @constraint -#t@124 + $l + #t1@126 >= 0;
    @constraint -2 * $d + #t@124 - #t1@125 - $s >= 0;
};

Rule No. [1.18]
Valid Rule
Composed by Rule [0.0] and [1.16]
Selectable at 0:
@rule{
    @premise know(*[na@143], #t0@145);
    @premise know(*ds(), #t1@146);
    @premise know(*skB(), #t2@147);
    @premise init(*[na@143], #t1@148);
    @conclusion accept([na@143], #t@144);
    @constraint -$d + #t@144 - #t2@147 >= 0;
    @constraint -#t@144 + $l + #t1@148 >= 0;
    @constraint -$d + #t@144 - #t0@145 >= 0;
    @constraint -$d + #t@144 - #t1@146 >= 0;
};

Rule No. [1.20]
Replaced by Rule [1.21]
Composed by Rule [1.10] and [1.18]
Selectable at 1:
@rule{
    @premise init(*[na@153], #t1@155);
    @premise know(*ds(), #t1@156);
    @premise know(*skB(), #t2@157);
    @conclusion accept([na@153], #t@154);
    @constraint -$d + #t@154 - #t1@156 >= 0;
    @constraint -$d + #t@154 - #t2@157 >= 0;
    @constraint -$d + #t@154 - #t1@155 >= 0;
    @constraint -#t@154 + $l + #t1@155 >= 0;
};

Rule No. [1.21]
Valid Rule
Composed by Rule [1.8] and [1.20]
Selectable at 1:
@rule{
    @premise init(*[na@159], #t1@161);
    @premise know(*skB(), #t2@162);
    @conclusion accept([na@159], #t@160);
    @constraint -$d + #t@160 - #t2@162 >= 0;
    @constraint -#t@160 + $l + #t1@161 >= 0;
    @constraint -$d + #t@160 - #t1@161 >= 0;
};


Final Rules: 
Rule No. [1.19]
Valid Rule
Composed by Rule [1.10] and [1.17]
@rule{
    @premise init(*[na@149], #t1@151);
    @conclusion accept([na@149], #t@150);
    @constraint -2 * $d + #t@150 - $s - #t1@151 >= 0;
    @constraint -#t@150 + $l + #t1@151 >= 0;
};
with parameter relation:
-2 * $d + $l - $s >= 0


0. Requested parameter relation:
[@universe]


Overall generated rule count : 33
Basis size : 25
Verification time: 17

Proved as secure.

