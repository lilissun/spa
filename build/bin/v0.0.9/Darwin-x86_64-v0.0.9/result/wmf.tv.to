Rule in cache: 0
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@13, #t0@14);
    @premise know(*x1@15, #t1@16);
    @conclusion know(*tuple2(x0@13, x1@15), #t@17);
    @constraint -#t0@14 + #t@17 >= 0;
    @constraint #t@17 - #t1@16 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@13, #t0@14);
    @premise know(*x1@15, #t1@16);
    @conclusion know(*tuple2(x0@13, x1@15), #t@17);
    @constraint -#t0@14 + #t@17 >= 0;
    @constraint #t@17 - #t1@16 >= 0;
};

Rule in cache: 1
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple2(x0@18, x1@19), #t@20);
    @conclusion know(*x0@18, #t0@21);
    @constraint -#t@20 + #t0@21 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple2(x0@18, x1@19), #t@20);
    @conclusion know(*x0@18, #t0@21);
    @constraint -#t@20 + #t0@21 >= 0;
};

Rule in cache: 2
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple2(x0@22, x1@23), #t@24);
    @conclusion know(*x1@23, #t1@25);
    @constraint -#t@24 + #t1@25 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple2(x0@22, x1@23), #t@24);
    @conclusion know(*x1@23, #t1@25);
    @constraint -#t@24 + #t1@25 >= 0;
};

Rule in cache: 3
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@27, #t0@28);
    @premise know(*x1@29, #t1@30);
    @premise know(*x2@31, #t2@32);
    @conclusion know(*tuple3(x0@27, x1@29, x2@31), #t@33);
    @constraint -#t0@28 + #t@33 >= 0;
    @constraint #t@33 - #t1@30 >= 0;
    @constraint #t@33 - #t2@32 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@27, #t0@28);
    @premise know(*x1@29, #t1@30);
    @premise know(*x2@31, #t2@32);
    @conclusion know(*tuple3(x0@27, x1@29, x2@31), #t@33);
    @constraint -#t0@28 + #t@33 >= 0;
    @constraint #t@33 - #t1@30 >= 0;
    @constraint #t@33 - #t2@32 >= 0;
};

Rule in cache: 4
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple3(x0@34, x1@35, x2@36), #t@37);
    @conclusion know(*x0@34, #t0@38);
    @constraint -#t@37 + #t0@38 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple3(x0@34, x1@35, x2@36), #t@37);
    @conclusion know(*x0@34, #t0@38);
    @constraint -#t@37 + #t0@38 >= 0;
};

Rule in cache: 5
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple3(x0@39, x1@40, x2@41), #t@42);
    @conclusion know(*x1@40, #t1@43);
    @constraint -#t@42 + #t1@43 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple3(x0@39, x1@40, x2@41), #t@42);
    @conclusion know(*x1@40, #t1@43);
    @constraint -#t@42 + #t1@43 >= 0;
};

Rule in cache: 6
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple3(x0@44, x1@45, x2@46), #t@47);
    @conclusion know(*x2@46, #t2@48);
    @constraint -#t@47 + #t2@48 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple3(x0@44, x1@45, x2@46), #t@47);
    @conclusion know(*x2@46, #t2@48);
    @constraint -#t@47 + #t2@48 >= 0;
};

Rule in cache: 7
Rule staged: 0
Rule before check and clean: 
@rule{
    @conclusion know(*A(), #t@10004);
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*A(), #t@10004);
};

Rule in cache: 8
Rule staged: 0
Rule before check and clean: 
@rule{
    @conclusion know(*B(), #t@10005);
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*B(), #t@10005);
};

Rule in cache: 9
Rule staged: 0
Rule before check and clean: 
@rule{
    @guard c@10007 != A();
    @guard c@10007 != B();
    @premise know(*c@10007, #t1@10008);
    @conclusion know(*sk(c@10007), #t@10009);
    @constraint -#t1@10008 + #t@10009 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10007 != A();
    @guard c@10007 != B();
    @premise know(*c@10007, #t1@10008);
    @conclusion know(*sk(c@10007), #t@10009);
    @constraint -#t1@10008 + #t@10009 >= 0;
};

Rule in cache: 10
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m@10011, #t1@10012);
    @premise know(*k@10013, #t2@10014);
    @conclusion know(*senc(m@10011, k@10013), #t@10015);
    @constraint -#t1@10012 + #t@10015 >= 0;
    @constraint #t@10015 - #t2@10014 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@10011, #t1@10012);
    @premise know(*k@10013, #t2@10014);
    @conclusion know(*senc(m@10011, k@10013), #t@10015);
    @constraint -#t1@10012 + #t@10015 >= 0;
    @constraint #t@10015 - #t2@10014 >= 0;
};

Rule in cache: 11
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*senc(m@10016, k@10017), #t1@10018);
    @premise know(*k@10017, #t2@10019);
    @conclusion know(*m@10016, #t@10020);
    @constraint -#t1@10018 + #t@10020 >= 0;
    @constraint #t@10020 - #t2@10019 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*senc(m@10016, k@10017), #t1@10018);
    @premise know(*k@10017, #t2@10019);
    @conclusion know(*m@10016, #t@10020);
    @constraint -#t1@10018 + #t@10020 >= 0;
    @constraint #t@10020 - #t2@10019 >= 0;
};

Rule in cache: 12
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple2(R@10021, #tA@10022), #t@10023);
    @premise new(*[k@10024], gen(), tuple3(A(), R@10021, #tA@10022));
    @premise initA(*A(), *R@10021, *[k@10024], *#tA@10022);
    @conclusion know(*tuple2(A(), senc(tuple3(#tA@10022, R@10021, [k@10024]), sk(A()))), #tA@10022);
    @constraint #tA@10022 - #t@10023 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*tuple2(R@10021, #tA@10022), #t@10023);
    @premise new(*[k@10024], gen(), tuple3(A(), R@10021, #tA@10022));
    @premise initA(*A(), *R@10021, *[k@10024], *#tA@10022);
    @conclusion know(*tuple2(A(), senc(tuple3(#tA@10022, R@10021, [k@10024]), sk(A()))), #tA@10022);
    @constraint #tA@10022 - #t@10023 >= 0;
};

Rule in cache: 13
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*#tS@10025, #t1@10026);
    @premise know(*tuple2(I@10027, senc(tuple3(#tI@10028, R@10029, k@10030), sk(I@10027))), #t2@10031);
    @premise initS(*I@10027, *R@10029, *k@10030, *#tS@10025);
    @conclusion know(*senc(tuple3(#tS@10025, I@10027, k@10030), sk(R@10029)), #tS@10025);
    @constraint -$pd + #tS@10025 - #t1@10026 >= 0;
    @constraint -$pd + #tS@10025 - #t2@10031 >= 0;
    @constraint -#tS@10025 + $pa + #tI@10028 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*#tS@10025, #t1@10026);
    @premise know(*tuple2(I@10027, senc(tuple3(#tI@10028, R@10029, k@10030), sk(I@10027))), #t2@10031);
    @premise initS(*I@10027, *R@10029, *k@10030, *#tS@10025);
    @conclusion know(*senc(tuple3(#tS@10025, I@10027, k@10030), sk(R@10029)), #tS@10025);
    @constraint -$pd + #tS@10025 - #t1@10026 >= 0;
    @constraint -$pd + #tS@10025 - #t2@10031 >= 0;
    @constraint -#tS@10025 + $pa + #tI@10028 >= 0;
};

Rule in cache: 14
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*senc(tuple3(#tS@10032, A(), k@10033), sk(B())), #t@10034);
    @conclusion accept(*A(), *B(), *k@10033, *#tB@10035);
    @constraint -$pd - #t@10034 + #tB@10035 >= 0;
    @constraint -#tB@10035 + $pa + #tS@10032 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*senc(tuple3(#tS@10032, A(), k@10033), sk(B())), #t@10034);
    @conclusion accept(*A(), *B(), *k@10033, *#tB@10035);
    @constraint -$pd - #t@10034 + #tB@10035 >= 0;
    @constraint -#tB@10035 + $pa + #tS@10032 >= 0;
};

Rule in cache: 15
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise new(*[k@10036], gen(), tuple3(A(), B(), #tA@10037));
    @premise know(*[k@10036], #t@10038);
    @conclusion leak(*[k@10036]);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10036], gen(), tuple3(A(), B(), #tA@10037));
    @premise know(*[k@10036], #t@10038);
    @conclusion leak(*[k@10036]);
};

Stage rule: 
@rule{
    @premise know(*x0@13, #t0@14);
    @premise know(*x1@15, #t1@16);
    @conclusion know(*tuple2(x0@13, x1@15), #t@17);
    @constraint -#t0@14 + #t@17 >= 0;
    @constraint #t@17 - #t1@16 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple2(x0@18, x1@19), #t@20);
    @conclusion know(*x0@18, #t0@21);
    @constraint -#t@20 + #t0@21 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@13, #t0@14);
    @premise know(*x1@15, #t1@16);
    @conclusion know(*tuple2(x0@13, x1@15), #t@17);
    @constraint -#t0@14 + #t@17 >= 0;
    @constraint #t@17 - #t1@16 >= 0;
};
Rule in cache: 14
Rule staged: 2
Rule before check and clean: 
@rule{
    @premise know(*x0@10044, #t0@10046);
    @premise know(*x1@10047, #t1@10048);
    @conclusion know(*x0@10044, #t0@10045);
    @constraint #t0@10045 - #t@17 >= 0;
    @constraint #t@17 - #t1@10048 >= 0;
    @constraint -#t0@10046 + #t@17 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple2(x0@22, x1@23), #t@24);
    @conclusion know(*x1@23, #t1@25);
    @constraint -#t@24 + #t1@25 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@13, #t0@14);
    @premise know(*x1@15, #t1@16);
    @conclusion know(*tuple2(x0@13, x1@15), #t@17);
    @constraint -#t0@14 + #t@17 >= 0;
    @constraint #t@17 - #t1@16 >= 0;
};
Rule in cache: 13
Rule staged: 3
Rule before check and clean: 
@rule{
    @premise know(*x0@10051, #t0@10052);
    @premise know(*x1@10049, #t1@10053);
    @conclusion know(*x1@10049, #t1@10050);
    @constraint #t1@10050 - #t@17 >= 0;
    @constraint #t@17 - #t1@10053 >= 0;
    @constraint -#t0@10052 + #t@17 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*x0@27, #t0@28);
    @premise know(*x1@29, #t1@30);
    @premise know(*x2@31, #t2@32);
    @conclusion know(*tuple3(x0@27, x1@29, x2@31), #t@33);
    @constraint -#t0@28 + #t@33 >= 0;
    @constraint #t@33 - #t1@30 >= 0;
    @constraint #t@33 - #t2@32 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple3(x0@34, x1@35, x2@36), #t@37);
    @conclusion know(*x0@34, #t0@38);
    @constraint -#t@37 + #t0@38 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@27, #t0@28);
    @premise know(*x1@29, #t1@30);
    @premise know(*x2@31, #t2@32);
    @conclusion know(*tuple3(x0@27, x1@29, x2@31), #t@33);
    @constraint -#t0@28 + #t@33 >= 0;
    @constraint #t@33 - #t1@30 >= 0;
    @constraint #t@33 - #t2@32 >= 0;
};
Rule in cache: 11
Rule staged: 5
Rule before check and clean: 
@rule{
    @premise know(*x0@10054, #t0@10056);
    @premise know(*x1@10057, #t1@10058);
    @premise know(*x2@10059, #t2@10060);
    @conclusion know(*x0@10054, #t0@10055);
    @constraint #t0@10055 - #t@33 >= 0;
    @constraint #t@33 - #t2@10060 >= 0;
    @constraint #t@33 - #t1@10058 >= 0;
    @constraint -#t0@10056 + #t@33 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple3(x0@39, x1@40, x2@41), #t@42);
    @conclusion know(*x1@40, #t1@43);
    @constraint -#t@42 + #t1@43 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@27, #t0@28);
    @premise know(*x1@29, #t1@30);
    @premise know(*x2@31, #t2@32);
    @conclusion know(*tuple3(x0@27, x1@29, x2@31), #t@33);
    @constraint -#t0@28 + #t@33 >= 0;
    @constraint #t@33 - #t1@30 >= 0;
    @constraint #t@33 - #t2@32 >= 0;
};
Rule in cache: 10
Rule staged: 6
Rule before check and clean: 
@rule{
    @premise know(*x0@10063, #t0@10064);
    @premise know(*x1@10061, #t1@10065);
    @premise know(*x2@10066, #t2@10067);
    @conclusion know(*x1@10061, #t1@10062);
    @constraint #t1@10062 - #t@33 >= 0;
    @constraint #t@33 - #t2@10067 >= 0;
    @constraint #t@33 - #t1@10065 >= 0;
    @constraint -#t0@10064 + #t@33 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple3(x0@44, x1@45, x2@46), #t@47);
    @conclusion know(*x2@46, #t2@48);
    @constraint -#t@47 + #t2@48 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@27, #t0@28);
    @premise know(*x1@29, #t1@30);
    @premise know(*x2@31, #t2@32);
    @conclusion know(*tuple3(x0@27, x1@29, x2@31), #t@33);
    @constraint -#t0@28 + #t@33 >= 0;
    @constraint #t@33 - #t1@30 >= 0;
    @constraint #t@33 - #t2@32 >= 0;
};
Rule in cache: 9
Rule staged: 7
Rule before check and clean: 
@rule{
    @premise know(*x0@10070, #t0@10071);
    @premise know(*x1@10072, #t1@10073);
    @premise know(*x2@10068, #t2@10074);
    @conclusion know(*x2@10068, #t2@10069);
    @constraint #t2@10069 - #t@33 >= 0;
    @constraint #t@33 - #t2@10074 >= 0;
    @constraint #t@33 - #t1@10073 >= 0;
    @constraint -#t0@10071 + #t@33 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @conclusion know(*A(), #t@10004);
};
Rule added.

Stage rule: 
@rule{
    @conclusion know(*B(), #t@10005);
};
Rule added.

Stage rule: 
@rule{
    @guard c@10007 != A();
    @guard c@10007 != B();
    @premise know(*c@10007, #t1@10008);
    @conclusion know(*sk(c@10007), #t@10009);
    @constraint -#t1@10008 + #t@10009 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*m@10011, #t1@10012);
    @premise know(*k@10013, #t2@10014);
    @conclusion know(*senc(m@10011, k@10013), #t@10015);
    @constraint -#t1@10012 + #t@10015 >= 0;
    @constraint #t@10015 - #t2@10014 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*senc(m@10016, k@10017), #t1@10018);
    @premise know(*k@10017, #t2@10019);
    @conclusion know(*m@10016, #t@10020);
    @constraint -#t1@10018 + #t@10020 >= 0;
    @constraint #t@10020 - #t2@10019 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*m@10011, #t1@10012);
    @premise know(*k@10013, #t2@10014);
    @conclusion know(*senc(m@10011, k@10013), #t@10015);
    @constraint -#t1@10012 + #t@10015 >= 0;
    @constraint #t@10015 - #t2@10014 >= 0;
};
Rule in cache: 4
Rule staged: 12
Rule before check and clean: 
@rule{
    @premise know(*m@10075, #t1@10077);
    @premise know(*k@10078, #t2@10079);
    @premise know(*k@10078, #t2@10080);
    @conclusion know(*m@10075, #t@10076);
    @constraint #t@10076 - #t@10015 >= 0;
    @constraint #t@10015 - #t2@10079 >= 0;
    @constraint -#t1@10077 + #t@10015 >= 0;
    @constraint #t@10076 - #t2@10080 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple2(R@10021, #tA@10022), #t@10023);
    @premise new(*[k@10024], gen(), tuple3(A(), R@10021, #tA@10022));
    @premise initA(*A(), *R@10021, *[k@10024], *#tA@10022);
    @conclusion know(*tuple2(A(), senc(tuple3(#tA@10022, R@10021, [k@10024]), sk(A()))), #tA@10022);
    @constraint #tA@10022 - #t@10023 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@13, #t0@14);
    @premise know(*x1@15, #t1@16);
    @conclusion know(*tuple2(x0@13, x1@15), #t@17);
    @constraint -#t0@14 + #t@17 >= 0;
    @constraint #t@17 - #t1@16 >= 0;
};
Rule in cache: 3
Rule staged: 13
Rule before check and clean: 
@rule{
    @premise know(*x0@10082, #t0@10084);
    @premise know(*#tA@10081, #t1@10085);
    @premise new(*[k@10083], gen(), tuple3(A(), x0@10082, #tA@10081));
    @premise initA(*A(), *x0@10082, *[k@10083], *#tA@10081);
    @conclusion know(*tuple2(A(), senc(tuple3(#tA@10081, x0@10082, [k@10083]), sk(A()))), #tA@10081);
    @constraint #t@17 - #t1@10085 >= 0;
    @constraint -#t0@10084 + #t@17 >= 0;
    @constraint #tA@10081 - #t@17 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*x0@10082, #t0@10084);
    @premise know(*#tA@10081, #t1@10085);
    @premise new(*[k@10083], gen(), tuple3(A(), x0@10082, #tA@10081));
    @premise initA(*A(), *x0@10082, *[k@10083], *#tA@10081);
    @conclusion know(*tuple2(A(), senc(tuple3(#tA@10081, x0@10082, [k@10083]), sk(A()))), #tA@10081);
    @constraint #tA@10081 - #t1@10085 >= 0;
    @constraint #tA@10081 - #t0@10084 >= 0;
};

Stage rule: 
@rule{
    @premise know(*#tS@10025, #t1@10026);
    @premise know(*tuple2(I@10027, senc(tuple3(#tI@10028, R@10029, k@10030), sk(I@10027))), #t2@10031);
    @premise initS(*I@10027, *R@10029, *k@10030, *#tS@10025);
    @conclusion know(*senc(tuple3(#tS@10025, I@10027, k@10030), sk(R@10029)), #tS@10025);
    @constraint -$pd + #tS@10025 - #t1@10026 >= 0;
    @constraint -$pd + #tS@10025 - #t2@10031 >= 0;
    @constraint -#tS@10025 + $pa + #tI@10028 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*x0@13, #t0@14);
    @premise know(*x1@15, #t1@16);
    @conclusion know(*tuple2(x0@13, x1@15), #t@17);
    @constraint -#t0@14 + #t@17 >= 0;
    @constraint #t@17 - #t1@16 >= 0;
};
Rule in cache: 3
Rule staged: 14
Rule before check and clean: 
@rule{
    @premise know(*x0@10087, #t0@10090);
    @premise know(*senc(tuple3(#tI@10091, R@10089, k@10088), sk(x0@10087)), #t1@10092);
    @premise know(*#tS@10086, #t1@10093);
    @premise initS(*x0@10087, *R@10089, *k@10088, *#tS@10086);
    @conclusion know(*senc(tuple3(#tS@10086, x0@10087, k@10088), sk(R@10089)), #tS@10086);
    @constraint -#tS@10086 + $pa + #tI@10091 >= 0;
    @constraint #t@17 - #t1@10092 >= 0;
    @constraint -#t0@10090 + #t@17 >= 0;
    @constraint -$pd + #tS@10086 - #t@17 >= 0;
    @constraint -$pd + #tS@10086 - #t1@10093 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*x0@10087, #t0@10090);
    @premise know(*senc(tuple3(#tI@10091, R@10089, k@10088), sk(x0@10087)), #t1@10092);
    @premise know(*#tS@10086, #t1@10093);
    @premise initS(*x0@10087, *R@10089, *k@10088, *#tS@10086);
    @conclusion know(*senc(tuple3(#tS@10086, x0@10087, k@10088), sk(R@10089)), #tS@10086);
    @constraint -$pd + #tS@10086 - #t1@10093 >= 0;
    @constraint -#tS@10086 + $pa + #tI@10091 >= 0;
    @constraint -$pd + #tS@10086 - #t0@10090 >= 0;
    @constraint -$pd + #tS@10086 - #t1@10092 >= 0;
};

Stage rule: 
@rule{
    @premise know(*senc(tuple3(#tS@10032, A(), k@10033), sk(B())), #t@10034);
    @conclusion accept(*A(), *B(), *k@10033, *#tB@10035);
    @constraint -$pd - #t@10034 + #tB@10035 >= 0;
    @constraint -#tB@10035 + $pa + #tS@10032 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*m@10011, #t1@10012);
    @premise know(*k@10013, #t2@10014);
    @conclusion know(*senc(m@10011, k@10013), #t@10015);
    @constraint -#t1@10012 + #t@10015 >= 0;
    @constraint #t@10015 - #t2@10014 >= 0;
};
Rule in cache: 3
Rule staged: 15
Rule before check and clean: 
@rule{
    @premise know(*tuple3(#tS@10096, A(), k@10094), #t1@10097);
    @premise know(*sk(B()), #t2@10098);
    @conclusion accept(*A(), *B(), *k@10094, *#tB@10095);
    @constraint -$pd + #tB@10095 - #t@10015 >= 0;
    @constraint -#tB@10095 + $pa + #tS@10096 >= 0;
    @constraint #t@10015 - #t2@10098 >= 0;
    @constraint -#t1@10097 + #t@10015 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*tuple3(#tS@10096, A(), k@10094), #t1@10097);
    @premise know(*sk(B()), #t2@10098);
    @conclusion accept(*A(), *B(), *k@10094, *#tB@10095);
    @constraint -#tB@10095 + $pa + #tS@10096 >= 0;
    @constraint -$pd + #tB@10095 - #t1@10097 >= 0;
    @constraint -$pd + #tB@10095 - #t2@10098 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[k@10036], gen(), tuple3(A(), B(), #tA@10037));
    @premise know(*[k@10036], #t@10038);
    @conclusion leak(*[k@10036]);
};
Rule added at 1.

Stage rule: 
@rule{
    @premise know(*x0@10082, #t0@10084);
    @premise know(*#tA@10081, #t1@10085);
    @premise new(*[k@10083], gen(), tuple3(A(), x0@10082, #tA@10081));
    @premise initA(*A(), *x0@10082, *[k@10083], *#tA@10081);
    @conclusion know(*tuple2(A(), senc(tuple3(#tA@10081, x0@10082, [k@10083]), sk(A()))), #tA@10081);
    @constraint #tA@10081 - #t1@10085 >= 0;
    @constraint #tA@10081 - #t0@10084 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple2(x0@18, x1@19), #t@20);
    @conclusion know(*x0@18, #t0@21);
    @constraint -#t@20 + #t0@21 >= 0;
};
Rule in cache: 2
Rule staged: 17
Rule before check and clean: 
@rule{
    @premise know(*x0@10100, #t0@10101);
    @premise know(*#tA@10102, #t1@10103);
    @premise new(*[k@10104], gen(), tuple3(A(), x0@10100, #tA@10102));
    @premise initA(*A(), *x0@10100, *[k@10104], *#tA@10102);
    @conclusion know(*A(), #t0@10099);
    @constraint #tA@10102 - #t1@10103 >= 0;
    @constraint #t0@10099 - #tA@10102 >= 0;
    @constraint #tA@10102 - #t0@10101 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*x0@10100, #t0@10101);
    @premise know(*#tA@10102, #t1@10103);
    @premise new(*[k@10104], gen(), tuple3(A(), x0@10100, #tA@10102));
    @premise initA(*A(), *x0@10100, *[k@10104], *#tA@10102);
    @conclusion know(*A(), #t0@10099);
    @constraint #tA@10102 - #t1@10103 >= 0;
    @constraint #t0@10099 - #tA@10102 >= 0;
    @constraint #tA@10102 - #t0@10101 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple2(x0@22, x1@23), #t@24);
    @conclusion know(*x1@23, #t1@25);
    @constraint -#t@24 + #t1@25 >= 0;
};
Rule in cache: 3
Rule staged: 17
Rule before check and clean: 
@rule{
    @premise know(*x0@10106, #t0@10109);
    @premise know(*#tA@10105, #t1@10110);
    @premise new(*[k@10107], gen(), tuple3(A(), x0@10106, #tA@10105));
    @premise initA(*A(), *x0@10106, *[k@10107], *#tA@10105);
    @conclusion know(*senc(tuple3(#tA@10105, x0@10106, [k@10107]), sk(A())), #t1@10108);
    @constraint #tA@10105 - #t1@10110 >= 0;
    @constraint #t1@10108 - #tA@10105 >= 0;
    @constraint #tA@10105 - #t0@10109 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*x0@10106, #t0@10109);
    @premise know(*#tA@10105, #t1@10110);
    @premise new(*[k@10107], gen(), tuple3(A(), x0@10106, #tA@10105));
    @premise initA(*A(), *x0@10106, *[k@10107], *#tA@10105);
    @conclusion know(*senc(tuple3(#tA@10105, x0@10106, [k@10107]), sk(A())), #t1@10108);
    @constraint #tA@10105 - #t1@10110 >= 0;
    @constraint #t1@10108 - #tA@10105 >= 0;
    @constraint #tA@10105 - #t0@10109 >= 0;
};

Stage rule: 
@rule{
    @premise know(*x0@10087, #t0@10090);
    @premise know(*senc(tuple3(#tI@10091, R@10089, k@10088), sk(x0@10087)), #t1@10092);
    @premise know(*#tS@10086, #t1@10093);
    @premise initS(*x0@10087, *R@10089, *k@10088, *#tS@10086);
    @conclusion know(*senc(tuple3(#tS@10086, x0@10087, k@10088), sk(R@10089)), #tS@10086);
    @constraint -$pd + #tS@10086 - #t1@10093 >= 0;
    @constraint -#tS@10086 + $pa + #tI@10091 >= 0;
    @constraint -$pd + #tS@10086 - #t0@10090 >= 0;
    @constraint -$pd + #tS@10086 - #t1@10092 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*m@10011, #t1@10012);
    @premise know(*k@10013, #t2@10014);
    @conclusion know(*senc(m@10011, k@10013), #t@10015);
    @constraint -#t1@10012 + #t@10015 >= 0;
    @constraint #t@10015 - #t2@10014 >= 0;
};
Rule in cache: 3
Rule staged: 18
Rule before check and clean: 
@rule{
    @premise know(*tuple3(#tI@10115, R@10114, k@10113), #t1@10116);
    @premise know(*sk(x0@10112), #t2@10117);
    @premise know(*x0@10112, #t0@10118);
    @premise know(*#tS@10111, #t1@10119);
    @premise initS(*x0@10112, *R@10114, *k@10113, *#tS@10111);
    @conclusion know(*senc(tuple3(#tS@10111, x0@10112, k@10113), sk(R@10114)), #tS@10111);
    @constraint #t@10015 - #t2@10117 >= 0;
    @constraint -#t1@10116 + #t@10015 >= 0;
    @constraint -$pd + #tS@10111 - #t@10015 >= 0;
    @constraint -$pd + #tS@10111 - #t0@10118 >= 0;
    @constraint -$pd + #tS@10111 - #t1@10119 >= 0;
    @constraint -#tS@10111 + $pa + #tI@10115 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*tuple3(#tI@10115, R@10114, k@10113), #t1@10116);
    @premise know(*sk(x0@10112), #t2@10117);
    @premise initS(*x0@10112, *R@10114, *k@10113, *#tS@10111);
    @premise know(*#tS@10111, #t1@10119);
    @premise know(*x0@10112, #t0@10118);
    @conclusion know(*senc(tuple3(#tS@10111, x0@10112, k@10113), sk(R@10114)), #tS@10111);
    @constraint -$pd + #tS@10111 - #t0@10118 >= 0;
    @constraint -$pd + #tS@10111 - #t1@10119 >= 0;
    @constraint -#tS@10111 + $pa + #tI@10115 >= 0;
    @constraint -$pd + #tS@10111 - #t1@10116 >= 0;
    @constraint -$pd + #tS@10111 - #t2@10117 >= 0;
};

Stage rule: 
@rule{
    @premise know(*tuple3(#tS@10096, A(), k@10094), #t1@10097);
    @premise know(*sk(B()), #t2@10098);
    @conclusion accept(*A(), *B(), *k@10094, *#tB@10095);
    @constraint -#tB@10095 + $pa + #tS@10096 >= 0;
    @constraint -$pd + #tB@10095 - #t1@10097 >= 0;
    @constraint -$pd + #tB@10095 - #t2@10098 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@27, #t0@28);
    @premise know(*x1@29, #t1@30);
    @premise know(*x2@31, #t2@32);
    @conclusion know(*tuple3(x0@27, x1@29, x2@31), #t@33);
    @constraint -#t0@28 + #t@33 >= 0;
    @constraint #t@33 - #t1@30 >= 0;
    @constraint #t@33 - #t2@32 >= 0;
};
Rule in cache: 3
Rule staged: 19
Rule before check and clean: 
@rule{
    @premise know(*#tS@10122, #t0@10123);
    @premise know(*A(), #t1@10124);
    @premise know(*x2@10120, #t2@10125);
    @premise know(*sk(B()), #t2@10126);
    @conclusion accept(*A(), *B(), *x2@10120, *#tB@10121);
    @constraint #t@33 - #t2@10125 >= 0;
    @constraint #t@33 - #t1@10124 >= 0;
    @constraint -#t0@10123 + #t@33 >= 0;
    @constraint -$pd + #tB@10121 - #t@33 >= 0;
    @constraint -$pd + #tB@10121 - #t2@10126 >= 0;
    @constraint -#tB@10121 + $pa + #tS@10122 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*A(), #t1@10124);
    @premise know(*x2@10120, #t2@10125);
    @premise know(*sk(B()), #t2@10126);
    @conclusion accept(*A(), *B(), *x2@10120, *#tB@10121);
    @constraint -$pd + #tB@10121 - #t2@10126 >= 0;
    @constraint -$pd + #tB@10121 - #t1@10124 >= 0;
    @constraint -$pd + #tB@10121 - #t2@10125 >= 0;
};

Stage rule: 
@rule{
    @premise know(*x0@10100, #t0@10101);
    @premise know(*#tA@10102, #t1@10103);
    @premise new(*[k@10104], gen(), tuple3(A(), x0@10100, #tA@10102));
    @premise initA(*A(), *x0@10100, *[k@10104], *#tA@10102);
    @conclusion know(*A(), #t0@10099);
    @constraint #tA@10102 - #t1@10103 >= 0;
    @constraint #t0@10099 - #tA@10102 >= 0;
    @constraint #tA@10102 - #t0@10101 >= 0;
};
Rule implied by: 
@rule{
    @conclusion know(*A(), #t@10004);
};
Rule not added.

Stage rule: 
@rule{
    @premise know(*x0@10106, #t0@10109);
    @premise know(*#tA@10105, #t1@10110);
    @premise new(*[k@10107], gen(), tuple3(A(), x0@10106, #tA@10105));
    @premise initA(*A(), *x0@10106, *[k@10107], *#tA@10105);
    @conclusion know(*senc(tuple3(#tA@10105, x0@10106, [k@10107]), sk(A())), #t1@10108);
    @constraint #tA@10105 - #t1@10110 >= 0;
    @constraint #t1@10108 - #tA@10105 >= 0;
    @constraint #tA@10105 - #t0@10109 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*senc(m@10016, k@10017), #t1@10018);
    @premise know(*k@10017, #t2@10019);
    @conclusion know(*m@10016, #t@10020);
    @constraint -#t1@10018 + #t@10020 >= 0;
    @constraint #t@10020 - #t2@10019 >= 0;
};
Rule in cache: 2
Rule staged: 20
Rule before check and clean: 
@rule{
    @premise know(*x0@10128, #t0@10131);
    @premise know(*#tA@10127, #t1@10132);
    @premise new(*[k@10129], gen(), tuple3(A(), x0@10128, #tA@10127));
    @premise initA(*A(), *x0@10128, *[k@10129], *#tA@10127);
    @premise know(*sk(A()), #t2@10133);
    @conclusion know(*tuple3(#tA@10127, x0@10128, [k@10129]), #t@10130);
    @constraint #tA@10127 - #t1@10132 >= 0;
    @constraint #t1@10108 - #tA@10127 >= 0;
    @constraint #t@10130 - #t1@10108 >= 0;
    @constraint #tA@10127 - #t0@10131 >= 0;
    @constraint #t@10130 - #t2@10133 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10129], gen(), tuple3(A(), x0@10128, #tA@10127));
    @premise know(*sk(A()), #t2@10133);
    @premise initA(*A(), *x0@10128, *[k@10129], *#tA@10127);
    @premise know(*#tA@10127, #t1@10132);
    @premise know(*x0@10128, #t0@10131);
    @conclusion know(*tuple3(#tA@10127, x0@10128, [k@10129]), #t@10130);
    @constraint #tA@10127 - #t1@10132 >= 0;
    @constraint #tA@10127 - #t0@10131 >= 0;
    @constraint #t@10130 - #t2@10133 >= 0;
    @constraint #t@10130 - #tA@10127 >= 0;
};

Compose to at 1 : 
@rule{
    @premise know(*x0@10087, #t0@10090);
    @premise know(*senc(tuple3(#tI@10091, R@10089, k@10088), sk(x0@10087)), #t1@10092);
    @premise know(*#tS@10086, #t1@10093);
    @premise initS(*x0@10087, *R@10089, *k@10088, *#tS@10086);
    @conclusion know(*senc(tuple3(#tS@10086, x0@10087, k@10088), sk(R@10089)), #tS@10086);
    @constraint -$pd + #tS@10086 - #t1@10093 >= 0;
    @constraint -#tS@10086 + $pa + #tI@10091 >= 0;
    @constraint -$pd + #tS@10086 - #t0@10090 >= 0;
    @constraint -$pd + #tS@10086 - #t1@10092 >= 0;
};
Rule in cache: 3
Rule staged: 20
Rule before check and clean: 
@rule{
    @premise know(*x0@10136, #t0@10137);
    @premise know(*#tA@10138, #t1@10139);
    @premise new(*[k@10135], gen(), tuple3(A(), x0@10136, #tA@10138));
    @premise initA(*A(), *x0@10136, *[k@10135], *#tA@10138);
    @premise know(*A(), #t0@10140);
    @premise know(*#tS@10134, #t1@10141);
    @premise initS(*A(), *x0@10136, *[k@10135], *#tS@10134);
    @conclusion know(*senc(tuple3(#tS@10134, A(), [k@10135]), sk(x0@10136)), #tS@10134);
    @constraint #tA@10138 - #t1@10139 >= 0;
    @constraint #tA@10138 - #t0@10137 >= 0;
    @constraint -$pd + #tS@10134 - #t0@10140 >= 0;
    @constraint -$pd + #tS@10134 - #t1@10141 >= 0;
    @constraint -$pd + #tS@10134 - #t1@10108 >= 0;
    @constraint -#tS@10134 + $pa + #tA@10138 >= 0;
    @constraint #t1@10108 - #tA@10138 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10135], gen(), tuple3(A(), x0@10136, #tA@10138));
    @premise initS(*A(), *x0@10136, *[k@10135], *#tS@10134);
    @premise initA(*A(), *x0@10136, *[k@10135], *#tA@10138);
    @premise know(*A(), #t0@10140);
    @premise know(*#tA@10138, #t1@10139);
    @premise know(*#tS@10134, #t1@10141);
    @premise know(*x0@10136, #t0@10137);
    @conclusion know(*senc(tuple3(#tS@10134, A(), [k@10135]), sk(x0@10136)), #tS@10134);
    @constraint #tA@10138 - #t1@10139 >= 0;
    @constraint #tA@10138 - #t0@10137 >= 0;
    @constraint -$pd + #tS@10134 - #t0@10140 >= 0;
    @constraint -$pd + #tS@10134 - #t1@10141 >= 0;
    @constraint -$pd + #tS@10134 - #tA@10138 >= 0;
    @constraint -#tS@10134 + $pa + #tA@10138 >= 0;
};

Stage rule: 
@rule{
    @premise know(*tuple3(#tI@10115, R@10114, k@10113), #t1@10116);
    @premise know(*sk(x0@10112), #t2@10117);
    @premise initS(*x0@10112, *R@10114, *k@10113, *#tS@10111);
    @premise know(*#tS@10111, #t1@10119);
    @premise know(*x0@10112, #t0@10118);
    @conclusion know(*senc(tuple3(#tS@10111, x0@10112, k@10113), sk(R@10114)), #tS@10111);
    @constraint -$pd + #tS@10111 - #t0@10118 >= 0;
    @constraint -$pd + #tS@10111 - #t1@10119 >= 0;
    @constraint -#tS@10111 + $pa + #tI@10115 >= 0;
    @constraint -$pd + #tS@10111 - #t1@10116 >= 0;
    @constraint -$pd + #tS@10111 - #t2@10117 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@27, #t0@28);
    @premise know(*x1@29, #t1@30);
    @premise know(*x2@31, #t2@32);
    @conclusion know(*tuple3(x0@27, x1@29, x2@31), #t@33);
    @constraint -#t0@28 + #t@33 >= 0;
    @constraint #t@33 - #t1@30 >= 0;
    @constraint #t@33 - #t2@32 >= 0;
};
Rule in cache: 3
Rule staged: 21
Rule before check and clean: 
@rule{
    @premise know(*#tI@10146, #t0@10147);
    @premise know(*x1@10145, #t1@10148);
    @premise know(*x2@10144, #t2@10149);
    @premise know(*sk(x0@10143), #t2@10150);
    @premise initS(*x0@10143, *x1@10145, *x2@10144, *#tS@10142);
    @premise know(*#tS@10142, #t1@10151);
    @premise know(*x0@10143, #t0@10152);
    @conclusion know(*senc(tuple3(#tS@10142, x0@10143, x2@10144), sk(x1@10145)), #tS@10142);
    @constraint -#tS@10142 + $pa + #tI@10146 >= 0;
    @constraint #t@33 - #t2@10149 >= 0;
    @constraint #t@33 - #t1@10148 >= 0;
    @constraint -#t0@10147 + #t@33 >= 0;
    @constraint -$pd + #tS@10142 - #t@33 >= 0;
    @constraint -$pd + #tS@10142 - #t2@10150 >= 0;
    @constraint -$pd + #tS@10142 - #t0@10152 >= 0;
    @constraint -$pd + #tS@10142 - #t1@10151 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk(x0@10143), #t2@10150);
    @premise initS(*x0@10143, *x1@10145, *x2@10144, *#tS@10142);
    @premise know(*#tS@10142, #t1@10151);
    @premise know(*x1@10145, #t1@10148);
    @premise know(*x2@10144, #t2@10149);
    @premise know(*x0@10143, #t0@10152);
    @conclusion know(*senc(tuple3(#tS@10142, x0@10143, x2@10144), sk(x1@10145)), #tS@10142);
    @constraint -$pd + #tS@10142 - #t2@10150 >= 0;
    @constraint -$pd + #tS@10142 - #t0@10152 >= 0;
    @constraint -$pd + #tS@10142 - #t1@10151 >= 0;
    @constraint -$pd + #tS@10142 - #t1@10148 >= 0;
    @constraint -$pd + #tS@10142 - #t2@10149 >= 0;
};

Stage rule: 
@rule{
    @premise know(*A(), #t1@10124);
    @premise know(*x2@10120, #t2@10125);
    @premise know(*sk(B()), #t2@10126);
    @conclusion accept(*A(), *B(), *x2@10120, *#tB@10121);
    @constraint -$pd + #tB@10121 - #t2@10126 >= 0;
    @constraint -$pd + #tB@10121 - #t1@10124 >= 0;
    @constraint -$pd + #tB@10121 - #t2@10125 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @conclusion know(*A(), #t@10004);
};
Rule in cache: 3
Rule staged: 22
Rule before check and clean: 
@rule{
    @premise know(*x2@10153, #t2@10155);
    @premise know(*sk(B()), #t2@10156);
    @conclusion accept(*A(), *B(), *x2@10153, *#tB@10154);
    @constraint -$pd + #tB@10154 - #t2@10156 >= 0;
    @constraint -$pd + #tB@10154 - #t@10004 >= 0;
    @constraint -$pd + #tB@10154 - #t2@10155 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*x2@10153, #t2@10155);
    @premise know(*sk(B()), #t2@10156);
    @conclusion accept(*A(), *B(), *x2@10153, *#tB@10154);
    @constraint -$pd + #tB@10154 - #t2@10155 >= 0;
    @constraint -$pd + #tB@10154 - #t2@10156 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[k@10129], gen(), tuple3(A(), x0@10128, #tA@10127));
    @premise know(*sk(A()), #t2@10133);
    @premise initA(*A(), *x0@10128, *[k@10129], *#tA@10127);
    @premise know(*#tA@10127, #t1@10132);
    @premise know(*x0@10128, #t0@10131);
    @conclusion know(*tuple3(#tA@10127, x0@10128, [k@10129]), #t@10130);
    @constraint #tA@10127 - #t1@10132 >= 0;
    @constraint #tA@10127 - #t0@10131 >= 0;
    @constraint #t@10130 - #t2@10133 >= 0;
    @constraint #t@10130 - #tA@10127 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @guard c@10007 != A();
    @guard c@10007 != B();
    @premise know(*c@10007, #t1@10008);
    @conclusion know(*sk(c@10007), #t@10009);
    @constraint -#t1@10008 + #t@10009 >= 0;
};
Rule in cache: 3
Rule staged: 23
Rule before check and clean: 
@rule{
    @guard A() != A();
    @guard A() != B();
    @premise know(*A(), #t1@10161);
    @premise new(*[k@10159], gen(), tuple3(A(), x0@10158, #tA@10157));
    @premise initA(*A(), *x0@10158, *[k@10159], *#tA@10157);
    @premise know(*#tA@10157, #t1@10162);
    @premise know(*x0@10158, #t0@10163);
    @conclusion know(*tuple3(#tA@10157, x0@10158, [k@10159]), #t@10160);
    @constraint -#t1@10161 + #t@10009 >= 0;
    @constraint #t@10160 - #t@10009 >= 0;
    @constraint #tA@10157 - #t1@10162 >= 0;
    @constraint #tA@10157 - #t0@10163 >= 0;
    @constraint #t@10160 - #tA@10157 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise new(*[k@10135], gen(), tuple3(A(), x0@10136, #tA@10138));
    @premise initS(*A(), *x0@10136, *[k@10135], *#tS@10134);
    @premise initA(*A(), *x0@10136, *[k@10135], *#tA@10138);
    @premise know(*A(), #t0@10140);
    @premise know(*#tA@10138, #t1@10139);
    @premise know(*#tS@10134, #t1@10141);
    @premise know(*x0@10136, #t0@10137);
    @conclusion know(*senc(tuple3(#tS@10134, A(), [k@10135]), sk(x0@10136)), #tS@10134);
    @constraint #tA@10138 - #t1@10139 >= 0;
    @constraint #tA@10138 - #t0@10137 >= 0;
    @constraint -$pd + #tS@10134 - #t0@10140 >= 0;
    @constraint -$pd + #tS@10134 - #t1@10141 >= 0;
    @constraint -$pd + #tS@10134 - #tA@10138 >= 0;
    @constraint -#tS@10134 + $pa + #tA@10138 >= 0;
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @conclusion know(*A(), #t@10004);
};
Rule in cache: 2
Rule staged: 24
Rule before check and clean: 
@rule{
    @premise new(*[k@10165], gen(), tuple3(A(), x0@10166, #tA@10167));
    @premise initS(*A(), *x0@10166, *[k@10165], *#tS@10164);
    @premise initA(*A(), *x0@10166, *[k@10165], *#tA@10167);
    @premise know(*#tA@10167, #t1@10168);
    @premise know(*#tS@10164, #t1@10169);
    @premise know(*x0@10166, #t0@10170);
    @conclusion know(*senc(tuple3(#tS@10164, A(), [k@10165]), sk(x0@10166)), #tS@10164);
    @constraint -$pd + #tS@10164 - #t1@10169 >= 0;
    @constraint -$pd + #tS@10164 - #t@10004 >= 0;
    @constraint -$pd + #tS@10164 - #tA@10167 >= 0;
    @constraint -#tS@10164 + $pa + #tA@10167 >= 0;
    @constraint #tA@10167 - #t0@10170 >= 0;
    @constraint #tA@10167 - #t1@10168 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10165], gen(), tuple3(A(), x0@10166, #tA@10167));
    @premise initS(*A(), *x0@10166, *[k@10165], *#tS@10164);
    @premise initA(*A(), *x0@10166, *[k@10165], *#tA@10167);
    @premise know(*#tA@10167, #t1@10168);
    @premise know(*#tS@10164, #t1@10169);
    @premise know(*x0@10166, #t0@10170);
    @conclusion know(*senc(tuple3(#tS@10164, A(), [k@10165]), sk(x0@10166)), #tS@10164);
    @constraint #tA@10167 - #t1@10168 >= 0;
    @constraint #tA@10167 - #t0@10170 >= 0;
    @constraint -$pd + #tS@10164 - #t1@10169 >= 0;
    @constraint -$pd + #tS@10164 - #tA@10167 >= 0;
    @constraint -#tS@10164 + $pa + #tA@10167 >= 0;
};

Stage rule: 
@rule{
    @premise know(*sk(x0@10143), #t2@10150);
    @premise initS(*x0@10143, *x1@10145, *x2@10144, *#tS@10142);
    @premise know(*#tS@10142, #t1@10151);
    @premise know(*x1@10145, #t1@10148);
    @premise know(*x2@10144, #t2@10149);
    @premise know(*x0@10143, #t0@10152);
    @conclusion know(*senc(tuple3(#tS@10142, x0@10143, x2@10144), sk(x1@10145)), #tS@10142);
    @constraint -$pd + #tS@10142 - #t2@10150 >= 0;
    @constraint -$pd + #tS@10142 - #t0@10152 >= 0;
    @constraint -$pd + #tS@10142 - #t1@10151 >= 0;
    @constraint -$pd + #tS@10142 - #t1@10148 >= 0;
    @constraint -$pd + #tS@10142 - #t2@10149 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @guard c@10007 != A();
    @guard c@10007 != B();
    @premise know(*c@10007, #t1@10008);
    @conclusion know(*sk(c@10007), #t@10009);
    @constraint -#t1@10008 + #t@10009 >= 0;
};
Rule in cache: 2
Rule staged: 25
Rule before check and clean: 
@rule{
    @guard c@10172 != A();
    @guard c@10172 != B();
    @premise know(*c@10172, #t1@10175);
    @premise initS(*c@10172, *x1@10174, *x2@10173, *#tS@10171);
    @premise know(*#tS@10171, #t1@10176);
    @premise know(*x1@10174, #t1@10177);
    @premise know(*x2@10173, #t2@10178);
    @premise know(*c@10172, #t0@10179);
    @conclusion know(*senc(tuple3(#tS@10171, c@10172, x2@10173), sk(x1@10174)), #tS@10171);
    @constraint -#t1@10175 + #t@10009 >= 0;
    @constraint -$pd + #tS@10171 - #t@10009 >= 0;
    @constraint -$pd + #tS@10171 - #t2@10178 >= 0;
    @constraint -$pd + #tS@10171 - #t1@10177 >= 0;
    @constraint -$pd + #tS@10171 - #t0@10179 >= 0;
    @constraint -$pd + #tS@10171 - #t1@10176 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10172 != A();
    @guard c@10172 != B();
    @premise initS(*c@10172, *x1@10174, *x2@10173, *#tS@10171);
    @premise know(*#tS@10171, #t1@10176);
    @premise know(*c@10172, #t1@10175);
    @premise know(*x1@10174, #t1@10177);
    @premise know(*x2@10173, #t2@10178);
    @conclusion know(*senc(tuple3(#tS@10171, c@10172, x2@10173), sk(x1@10174)), #tS@10171);
    @constraint -$pd + #tS@10171 - #t2@10178 >= 0;
    @constraint -$pd + #tS@10171 - #t1@10177 >= 0;
    @constraint -$pd + #tS@10171 - #t1@10176 >= 0;
    @constraint -$pd + #tS@10171 - #t1@10175 >= 0;
};

Stage rule: 
@rule{
    @premise know(*x2@10153, #t2@10155);
    @premise know(*sk(B()), #t2@10156);
    @conclusion accept(*A(), *B(), *x2@10153, *#tB@10154);
    @constraint -$pd + #tB@10154 - #t2@10155 >= 0;
    @constraint -$pd + #tB@10154 - #t2@10156 >= 0;
};
Rule deleted: 
@rule{
    @premise know(*A(), #t1@10124);
    @premise know(*x2@10120, #t2@10125);
    @premise know(*sk(B()), #t2@10126);
    @conclusion accept(*A(), *B(), *x2@10120, *#tB@10121);
    @constraint -$pd + #tB@10121 - #t2@10126 >= 0;
    @constraint -$pd + #tB@10121 - #t1@10124 >= 0;
    @constraint -$pd + #tB@10121 - #t2@10125 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @guard c@10007 != A();
    @guard c@10007 != B();
    @premise know(*c@10007, #t1@10008);
    @conclusion know(*sk(c@10007), #t@10009);
    @constraint -#t1@10008 + #t@10009 >= 0;
};
Rule in cache: 2
Rule staged: 26
Rule before check and clean: 
@rule{
    @guard B() != A();
    @guard B() != B();
    @premise know(*B(), #t1@10182);
    @premise know(*x2@10180, #t2@10183);
    @conclusion accept(*A(), *B(), *x2@10180, *#tB@10181);
    @constraint -#t1@10182 + #t@10009 >= 0;
    @constraint -$pd + #tB@10181 - #t@10009 >= 0;
    @constraint -$pd + #tB@10181 - #t2@10183 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise new(*[k@10165], gen(), tuple3(A(), x0@10166, #tA@10167));
    @premise initS(*A(), *x0@10166, *[k@10165], *#tS@10164);
    @premise initA(*A(), *x0@10166, *[k@10165], *#tA@10167);
    @premise know(*#tA@10167, #t1@10168);
    @premise know(*#tS@10164, #t1@10169);
    @premise know(*x0@10166, #t0@10170);
    @conclusion know(*senc(tuple3(#tS@10164, A(), [k@10165]), sk(x0@10166)), #tS@10164);
    @constraint #tA@10167 - #t1@10168 >= 0;
    @constraint #tA@10167 - #t0@10170 >= 0;
    @constraint -$pd + #tS@10164 - #t1@10169 >= 0;
    @constraint -$pd + #tS@10164 - #tA@10167 >= 0;
    @constraint -#tS@10164 + $pa + #tA@10167 >= 0;
};
Rule deleted: 
@rule{
    @premise new(*[k@10135], gen(), tuple3(A(), x0@10136, #tA@10138));
    @premise initS(*A(), *x0@10136, *[k@10135], *#tS@10134);
    @premise initA(*A(), *x0@10136, *[k@10135], *#tA@10138);
    @premise know(*A(), #t0@10140);
    @premise know(*#tA@10138, #t1@10139);
    @premise know(*#tS@10134, #t1@10141);
    @premise know(*x0@10136, #t0@10137);
    @conclusion know(*senc(tuple3(#tS@10134, A(), [k@10135]), sk(x0@10136)), #tS@10134);
    @constraint #tA@10138 - #t1@10139 >= 0;
    @constraint #tA@10138 - #t0@10137 >= 0;
    @constraint -$pd + #tS@10134 - #t0@10140 >= 0;
    @constraint -$pd + #tS@10134 - #t1@10141 >= 0;
    @constraint -$pd + #tS@10134 - #tA@10138 >= 0;
    @constraint -#tS@10134 + $pa + #tA@10138 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*senc(m@10016, k@10017), #t1@10018);
    @premise know(*k@10017, #t2@10019);
    @conclusion know(*m@10016, #t@10020);
    @constraint -#t1@10018 + #t@10020 >= 0;
    @constraint #t@10020 - #t2@10019 >= 0;
};
Rule in cache: 1
Rule staged: 27
Rule before check and clean: 
@rule{
    @premise new(*[k@10185], gen(), tuple3(A(), x0@10187, #tA@10188));
    @premise initS(*A(), *x0@10187, *[k@10185], *#tS@10184);
    @premise initA(*A(), *x0@10187, *[k@10185], *#tA@10188);
    @premise know(*#tA@10188, #t1@10189);
    @premise know(*#tS@10184, #t1@10190);
    @premise know(*x0@10187, #t0@10191);
    @premise know(*sk(x0@10187), #t2@10192);
    @conclusion know(*tuple3(#tS@10184, A(), [k@10185]), #t@10186);
    @constraint #tA@10188 - #t1@10189 >= 0;
    @constraint #t@10186 - #tS@10184 >= 0;
    @constraint #tA@10188 - #t0@10191 >= 0;
    @constraint -$pd + #tS@10184 - #t1@10190 >= 0;
    @constraint -$pd + #tS@10184 - #tA@10188 >= 0;
    @constraint #t@10186 - #t2@10192 >= 0;
    @constraint -#tS@10184 + $pa + #tA@10188 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10185], gen(), tuple3(A(), x0@10187, #tA@10188));
    @premise initS(*A(), *x0@10187, *[k@10185], *#tS@10184);
    @premise initA(*A(), *x0@10187, *[k@10185], *#tA@10188);
    @premise know(*sk(x0@10187), #t2@10192);
    @premise know(*#tS@10184, #t1@10190);
    @premise know(*#tA@10188, #t1@10189);
    @premise know(*x0@10187, #t0@10191);
    @conclusion know(*tuple3(#tS@10184, A(), [k@10185]), #t@10186);
    @constraint #tA@10188 - #t1@10189 >= 0;
    @constraint #t@10186 - #tS@10184 >= 0;
    @constraint #tA@10188 - #t0@10191 >= 0;
    @constraint -$pd + #tS@10184 - #t1@10190 >= 0;
    @constraint -$pd + #tS@10184 - #tA@10188 >= 0;
    @constraint #t@10186 - #t2@10192 >= 0;
    @constraint -#tS@10184 + $pa + #tA@10188 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*senc(tuple3(#tS@10032, A(), k@10033), sk(B())), #t@10034);
    @conclusion accept(*A(), *B(), *k@10033, *#tB@10035);
    @constraint -$pd - #t@10034 + #tB@10035 >= 0;
    @constraint -#tB@10035 + $pa + #tS@10032 >= 0;
};
Rule in cache: 2
Rule staged: 27
Rule before check and clean: 
@rule{
    @premise new(*[k@10193], gen(), tuple3(A(), B(), #tA@10195));
    @premise initS(*A(), *B(), *[k@10193], *#tS@10196);
    @premise initA(*A(), *B(), *[k@10193], *#tA@10195);
    @premise know(*#tA@10195, #t1@10197);
    @premise know(*#tS@10196, #t1@10198);
    @premise know(*B(), #t0@10199);
    @conclusion accept(*A(), *B(), *[k@10193], *#tB@10194);
    @constraint #tA@10195 - #t0@10199 >= 0;
    @constraint -$pd + #tS@10196 - #t1@10198 >= 0;
    @constraint #tA@10195 - #t1@10197 >= 0;
    @constraint -$pd + #tB@10194 - #tS@10196 >= 0;
    @constraint $pa - #tS@10196 + #tA@10195 >= 0;
    @constraint -#tB@10194 + $pa + #tS@10196 >= 0;
    @constraint -$pd + #tS@10196 - #tA@10195 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10193], gen(), tuple3(A(), B(), #tA@10195));
    @premise initS(*A(), *B(), *[k@10193], *#tS@10196);
    @premise initA(*A(), *B(), *[k@10193], *#tA@10195);
    @premise know(*B(), #t0@10199);
    @premise know(*#tA@10195, #t1@10197);
    @premise know(*#tS@10196, #t1@10198);
    @conclusion accept(*A(), *B(), *[k@10193], *#tB@10194);
    @constraint #tA@10195 - #t0@10199 >= 0;
    @constraint -$pd + #tS@10196 - #t1@10198 >= 0;
    @constraint #tA@10195 - #t1@10197 >= 0;
    @constraint -$pd + #tB@10194 - #tS@10196 >= 0;
    @constraint $pa - #tS@10196 + #tA@10195 >= 0;
    @constraint -#tB@10194 + $pa + #tS@10196 >= 0;
    @constraint -$pd + #tS@10196 - #tA@10195 >= 0;
};

Compose to at 1 : 
@rule{
    @premise know(*x0@10087, #t0@10090);
    @premise know(*senc(tuple3(#tI@10091, R@10089, k@10088), sk(x0@10087)), #t1@10092);
    @premise know(*#tS@10086, #t1@10093);
    @premise initS(*x0@10087, *R@10089, *k@10088, *#tS@10086);
    @conclusion know(*senc(tuple3(#tS@10086, x0@10087, k@10088), sk(R@10089)), #tS@10086);
    @constraint -$pd + #tS@10086 - #t1@10093 >= 0;
    @constraint -#tS@10086 + $pa + #tI@10091 >= 0;
    @constraint -$pd + #tS@10086 - #t0@10090 >= 0;
    @constraint -$pd + #tS@10086 - #t1@10092 >= 0;
};
Rule in cache: 3
Rule staged: 27
Rule before check and clean: 
@rule{
    @premise new(*[k@10202], gen(), tuple3(A(), x0@10201, #tA@10203));
    @premise initS(*A(), *x0@10201, *[k@10202], *#tS@10204);
    @premise initA(*A(), *x0@10201, *[k@10202], *#tA@10203);
    @premise know(*#tA@10203, #t1@10205);
    @premise know(*#tS@10204, #t1@10206);
    @premise know(*x0@10201, #t0@10207);
    @premise know(*x0@10201, #t0@10208);
    @premise know(*#tS@10200, #t1@10209);
    @premise initS(*x0@10201, *A(), *[k@10202], *#tS@10200);
    @conclusion know(*senc(tuple3(#tS@10200, x0@10201, [k@10202]), sk(A())), #tS@10200);
    @constraint #tA@10203 - #t0@10207 >= 0;
    @constraint -$pd + #tS@10204 - #t1@10206 >= 0;
    @constraint -$pd + #tS@10200 - #t0@10208 >= 0;
    @constraint -$pd + #tS@10200 - #t1@10209 >= 0;
    @constraint #tA@10203 - #t1@10205 >= 0;
    @constraint -$pd + #tS@10200 - #tS@10204 >= 0;
    @constraint $pa - #tS@10204 + #tA@10203 >= 0;
    @constraint -#tS@10200 + $pa + #tS@10204 >= 0;
    @constraint -$pd + #tS@10204 - #tA@10203 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10202], gen(), tuple3(A(), x0@10201, #tA@10203));
    @premise initS(*A(), *x0@10201, *[k@10202], *#tS@10204);
    @premise initA(*A(), *x0@10201, *[k@10202], *#tA@10203);
    @premise initS(*x0@10201, *A(), *[k@10202], *#tS@10200);
    @premise know(*#tA@10203, #t1@10205);
    @premise know(*#tS@10200, #t1@10209);
    @premise know(*#tS@10204, #t1@10206);
    @premise know(*x0@10201, #t0@10207);
    @conclusion know(*senc(tuple3(#tS@10200, x0@10201, [k@10202]), sk(A())), #tS@10200);
    @constraint -$pd + #tS@10200 - #t0@10207 >= 0;
    @constraint #tA@10203 - #t1@10205 >= 0;
    @constraint -$pd + #tS@10204 - #t1@10206 >= 0;
    @constraint -$pd + #tS@10200 - #t1@10209 >= 0;
    @constraint #tA@10203 - #t0@10207 >= 0;
    @constraint -#tS@10200 + $pa + #tS@10204 >= 0;
    @constraint $pa - #tS@10204 + #tA@10203 >= 0;
    @constraint -$pd + #tS@10200 - #tS@10204 >= 0;
    @constraint -$pd + #tS@10204 - #tA@10203 >= 0;
};

Stage rule: 
@rule{
    @guard c@10172 != A();
    @guard c@10172 != B();
    @premise initS(*c@10172, *x1@10174, *x2@10173, *#tS@10171);
    @premise know(*#tS@10171, #t1@10176);
    @premise know(*c@10172, #t1@10175);
    @premise know(*x1@10174, #t1@10177);
    @premise know(*x2@10173, #t2@10178);
    @conclusion know(*senc(tuple3(#tS@10171, c@10172, x2@10173), sk(x1@10174)), #tS@10171);
    @constraint -$pd + #tS@10171 - #t2@10178 >= 0;
    @constraint -$pd + #tS@10171 - #t1@10177 >= 0;
    @constraint -$pd + #tS@10171 - #t1@10176 >= 0;
    @constraint -$pd + #tS@10171 - #t1@10175 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*senc(m@10016, k@10017), #t1@10018);
    @premise know(*k@10017, #t2@10019);
    @conclusion know(*m@10016, #t@10020);
    @constraint -#t1@10018 + #t@10020 >= 0;
    @constraint #t@10020 - #t2@10019 >= 0;
};
Rule in cache: 3
Rule staged: 28
Rule before check and clean: 
@rule{
    @guard c@10211 != A();
    @guard c@10211 != B();
    @premise initS(*c@10211, *x1@10214, *x2@10212, *#tS@10210);
    @premise know(*#tS@10210, #t1@10215);
    @premise know(*c@10211, #t1@10216);
    @premise know(*x1@10214, #t1@10217);
    @premise know(*x2@10212, #t2@10218);
    @premise know(*sk(x1@10214), #t2@10219);
    @conclusion know(*tuple3(#tS@10210, c@10211, x2@10212), #t@10213);
    @constraint #t@10213 - #tS@10210 >= 0;
    @constraint -$pd + #tS@10210 - #t2@10218 >= 0;
    @constraint -$pd + #tS@10210 - #t1@10217 >= 0;
    @constraint -$pd + #tS@10210 - #t1@10215 >= 0;
    @constraint -$pd + #tS@10210 - #t1@10216 >= 0;
    @constraint #t@10213 - #t2@10219 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10211 != A();
    @guard c@10211 != B();
    @premise know(*sk(x1@10214), #t2@10219);
    @premise initS(*c@10211, *x1@10214, *x2@10212, *#tS@10210);
    @premise know(*#tS@10210, #t1@10215);
    @premise know(*c@10211, #t1@10216);
    @premise know(*x1@10214, #t1@10217);
    @premise know(*x2@10212, #t2@10218);
    @conclusion know(*tuple3(#tS@10210, c@10211, x2@10212), #t@10213);
    @constraint #t@10213 - #tS@10210 >= 0;
    @constraint -$pd + #tS@10210 - #t2@10218 >= 0;
    @constraint -$pd + #tS@10210 - #t1@10217 >= 0;
    @constraint -$pd + #tS@10210 - #t1@10215 >= 0;
    @constraint -$pd + #tS@10210 - #t1@10216 >= 0;
    @constraint #t@10213 - #t2@10219 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*senc(tuple3(#tS@10032, A(), k@10033), sk(B())), #t@10034);
    @conclusion accept(*A(), *B(), *k@10033, *#tB@10035);
    @constraint -$pd - #t@10034 + #tB@10035 >= 0;
    @constraint -#tB@10035 + $pa + #tS@10032 >= 0;
};
Rule in cache: 4
Rule staged: 28
Rule before check and clean: 
@rule{
    @guard A() != A();
    @guard A() != B();
    @premise initS(*A(), *B(), *x2@10220, *#tS@10222);
    @premise know(*#tS@10222, #t1@10223);
    @premise know(*A(), #t1@10224);
    @premise know(*B(), #t1@10225);
    @premise know(*x2@10220, #t2@10226);
    @conclusion accept(*A(), *B(), *x2@10220, *#tB@10221);
    @constraint -$pd + #tS@10222 - #t1@10224 >= 0;
    @constraint -$pd + #tS@10222 - #t2@10226 >= 0;
    @constraint -$pd + #tS@10222 - #t1@10225 >= 0;
    @constraint -$pd + #tS@10222 - #t1@10223 >= 0;
    @constraint -$pd + #tB@10221 - #tS@10222 >= 0;
    @constraint -#tB@10221 + $pa + #tS@10222 >= 0;
};
Rule invalid. 

Compose to at 1 : 
@rule{
    @premise know(*x0@10087, #t0@10090);
    @premise know(*senc(tuple3(#tI@10091, R@10089, k@10088), sk(x0@10087)), #t1@10092);
    @premise know(*#tS@10086, #t1@10093);
    @premise initS(*x0@10087, *R@10089, *k@10088, *#tS@10086);
    @conclusion know(*senc(tuple3(#tS@10086, x0@10087, k@10088), sk(R@10089)), #tS@10086);
    @constraint -$pd + #tS@10086 - #t1@10093 >= 0;
    @constraint -#tS@10086 + $pa + #tI@10091 >= 0;
    @constraint -$pd + #tS@10086 - #t0@10090 >= 0;
    @constraint -$pd + #tS@10086 - #t1@10092 >= 0;
};
Rule in cache: 4
Rule staged: 28
Rule before check and clean: 
@rule{
    @guard c@10230 != A();
    @guard c@10230 != B();
    @premise initS(*c@10230, *x1@10228, *x2@10229, *#tS@10231);
    @premise know(*#tS@10231, #t1@10232);
    @premise know(*c@10230, #t1@10233);
    @premise know(*x1@10228, #t1@10234);
    @premise know(*x2@10229, #t2@10235);
    @premise know(*x1@10228, #t0@10236);
    @premise know(*#tS@10227, #t1@10237);
    @premise initS(*x1@10228, *c@10230, *x2@10229, *#tS@10227);
    @conclusion know(*senc(tuple3(#tS@10227, x1@10228, x2@10229), sk(c@10230)), #tS@10227);
    @constraint -$pd + #tS@10227 - #tS@10231 >= 0;
    @constraint -#tS@10227 + $pa + #tS@10231 >= 0;
    @constraint -$pd + #tS@10231 - #t2@10235 >= 0;
    @constraint -$pd + #tS@10231 - #t1@10234 >= 0;
    @constraint -$pd + #tS@10231 - #t1@10232 >= 0;
    @constraint -$pd + #tS@10227 - #t0@10236 >= 0;
    @constraint -$pd + #tS@10227 - #t1@10237 >= 0;
    @constraint -$pd + #tS@10231 - #t1@10233 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10230 != A();
    @guard c@10230 != B();
    @premise initS(*c@10230, *x1@10228, *x2@10229, *#tS@10231);
    @premise initS(*x1@10228, *c@10230, *x2@10229, *#tS@10227);
    @premise know(*#tS@10231, #t1@10232);
    @premise know(*#tS@10227, #t1@10237);
    @premise know(*c@10230, #t1@10233);
    @premise know(*x2@10229, #t2@10235);
    @premise know(*x1@10228, #t1@10234);
    @conclusion know(*senc(tuple3(#tS@10227, x1@10228, x2@10229), sk(c@10230)), #tS@10227);
    @constraint -$pd + #tS@10227 - #t1@10234 >= 0;
    @constraint -#tS@10227 + $pa + #tS@10231 >= 0;
    @constraint -$pd + #tS@10231 - #t1@10233 >= 0;
    @constraint -$pd + #tS@10231 - #t2@10235 >= 0;
    @constraint -$pd + #tS@10231 - #t1@10232 >= 0;
    @constraint -$pd + #tS@10227 - #t1@10237 >= 0;
    @constraint -$pd + #tS@10227 - #tS@10231 >= 0;
    @constraint -$pd + #tS@10231 - #t1@10234 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[k@10185], gen(), tuple3(A(), x0@10187, #tA@10188));
    @premise initS(*A(), *x0@10187, *[k@10185], *#tS@10184);
    @premise initA(*A(), *x0@10187, *[k@10185], *#tA@10188);
    @premise know(*sk(x0@10187), #t2@10192);
    @premise know(*#tS@10184, #t1@10190);
    @premise know(*#tA@10188, #t1@10189);
    @premise know(*x0@10187, #t0@10191);
    @conclusion know(*tuple3(#tS@10184, A(), [k@10185]), #t@10186);
    @constraint #tA@10188 - #t1@10189 >= 0;
    @constraint #t@10186 - #tS@10184 >= 0;
    @constraint #tA@10188 - #t0@10191 >= 0;
    @constraint -$pd + #tS@10184 - #t1@10190 >= 0;
    @constraint -$pd + #tS@10184 - #tA@10188 >= 0;
    @constraint #t@10186 - #t2@10192 >= 0;
    @constraint -#tS@10184 + $pa + #tA@10188 >= 0;
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @guard c@10007 != A();
    @guard c@10007 != B();
    @premise know(*c@10007, #t1@10008);
    @conclusion know(*sk(c@10007), #t@10009);
    @constraint -#t1@10008 + #t@10009 >= 0;
};
Rule in cache: 4
Rule staged: 29
Rule before check and clean: 
@rule{
    @guard c@10241 != A();
    @guard c@10241 != B();
    @premise know(*c@10241, #t1@10242);
    @premise new(*[k@10239], gen(), tuple3(A(), c@10241, #tA@10243));
    @premise initS(*A(), *c@10241, *[k@10239], *#tS@10238);
    @premise initA(*A(), *c@10241, *[k@10239], *#tA@10243);
    @premise know(*#tS@10238, #t1@10244);
    @premise know(*#tA@10243, #t1@10245);
    @premise know(*c@10241, #t0@10246);
    @conclusion know(*tuple3(#tS@10238, A(), [k@10239]), #t@10240);
    @constraint #t@10240 - #t@10009 >= 0;
    @constraint -#tS@10238 + $pa + #tA@10243 >= 0;
    @constraint -$pd + #tS@10238 - #tA@10243 >= 0;
    @constraint -#t1@10242 + #t@10009 >= 0;
    @constraint #tA@10243 - #t1@10245 >= 0;
    @constraint #tA@10243 - #t0@10246 >= 0;
    @constraint -$pd + #tS@10238 - #t1@10244 >= 0;
    @constraint #t@10240 - #tS@10238 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10241 != A();
    @guard c@10241 != B();
    @premise new(*[k@10239], gen(), tuple3(A(), c@10241, #tA@10243));
    @premise initS(*A(), *c@10241, *[k@10239], *#tS@10238);
    @premise initA(*A(), *c@10241, *[k@10239], *#tA@10243);
    @premise know(*#tS@10238, #t1@10244);
    @premise know(*#tA@10243, #t1@10245);
    @premise know(*c@10241, #t1@10242);
    @conclusion know(*tuple3(#tS@10238, A(), [k@10239]), #t@10240);
    @constraint #t@10240 - #t1@10242 >= 0;
    @constraint #tA@10243 - #t1@10245 >= 0;
    @constraint -#tS@10238 + $pa + #tA@10243 >= 0;
    @constraint -$pd + #tS@10238 - #t1@10244 >= 0;
    @constraint -$pd + #tS@10238 - #tA@10243 >= 0;
    @constraint #t@10240 - #tS@10238 >= 0;
    @constraint #tA@10243 - #t1@10242 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[k@10193], gen(), tuple3(A(), B(), #tA@10195));
    @premise initS(*A(), *B(), *[k@10193], *#tS@10196);
    @premise initA(*A(), *B(), *[k@10193], *#tA@10195);
    @premise know(*B(), #t0@10199);
    @premise know(*#tA@10195, #t1@10197);
    @premise know(*#tS@10196, #t1@10198);
    @conclusion accept(*A(), *B(), *[k@10193], *#tB@10194);
    @constraint #tA@10195 - #t0@10199 >= 0;
    @constraint -$pd + #tS@10196 - #t1@10198 >= 0;
    @constraint #tA@10195 - #t1@10197 >= 0;
    @constraint -$pd + #tB@10194 - #tS@10196 >= 0;
    @constraint $pa - #tS@10196 + #tA@10195 >= 0;
    @constraint -#tB@10194 + $pa + #tS@10196 >= 0;
    @constraint -$pd + #tS@10196 - #tA@10195 >= 0;
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @conclusion know(*B(), #t@10005);
};
Rule in cache: 4
Rule staged: 30
Rule before check and clean: 
@rule{
    @premise new(*[k@10247], gen(), tuple3(A(), B(), #tA@10249));
    @premise initS(*A(), *B(), *[k@10247], *#tS@10250);
    @premise initA(*A(), *B(), *[k@10247], *#tA@10249);
    @premise know(*#tA@10249, #t1@10251);
    @premise know(*#tS@10250, #t1@10252);
    @conclusion accept(*A(), *B(), *[k@10247], *#tB@10248);
    @constraint -$pd + #tS@10250 - #t1@10252 >= 0;
    @constraint -$pd + #tS@10250 - #tA@10249 >= 0;
    @constraint -$pd + #tB@10248 - #tS@10250 >= 0;
    @constraint -#tB@10248 + $pa + #tS@10250 >= 0;
    @constraint #tA@10249 - #t@10005 >= 0;
    @constraint #tA@10249 - #t1@10251 >= 0;
    @constraint $pa - #tS@10250 + #tA@10249 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10247], gen(), tuple3(A(), B(), #tA@10249));
    @premise initS(*A(), *B(), *[k@10247], *#tS@10250);
    @premise initA(*A(), *B(), *[k@10247], *#tA@10249);
    @premise know(*#tA@10249, #t1@10251);
    @premise know(*#tS@10250, #t1@10252);
    @conclusion accept(*A(), *B(), *[k@10247], *#tB@10248);
    @constraint #tA@10249 - #t1@10251 >= 0;
    @constraint -$pd + #tS@10250 - #t1@10252 >= 0;
    @constraint $pa - #tS@10250 + #tA@10249 >= 0;
    @constraint -$pd + #tB@10248 - #tS@10250 >= 0;
    @constraint -$pd + #tS@10250 - #tA@10249 >= 0;
    @constraint -#tB@10248 + $pa + #tS@10250 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[k@10202], gen(), tuple3(A(), x0@10201, #tA@10203));
    @premise initS(*A(), *x0@10201, *[k@10202], *#tS@10204);
    @premise initA(*A(), *x0@10201, *[k@10202], *#tA@10203);
    @premise initS(*x0@10201, *A(), *[k@10202], *#tS@10200);
    @premise know(*#tA@10203, #t1@10205);
    @premise know(*#tS@10200, #t1@10209);
    @premise know(*#tS@10204, #t1@10206);
    @premise know(*x0@10201, #t0@10207);
    @conclusion know(*senc(tuple3(#tS@10200, x0@10201, [k@10202]), sk(A())), #tS@10200);
    @constraint -$pd + #tS@10200 - #t0@10207 >= 0;
    @constraint #tA@10203 - #t1@10205 >= 0;
    @constraint -$pd + #tS@10204 - #t1@10206 >= 0;
    @constraint -$pd + #tS@10200 - #t1@10209 >= 0;
    @constraint #tA@10203 - #t0@10207 >= 0;
    @constraint -#tS@10200 + $pa + #tS@10204 >= 0;
    @constraint $pa - #tS@10204 + #tA@10203 >= 0;
    @constraint -$pd + #tS@10200 - #tS@10204 >= 0;
    @constraint -$pd + #tS@10204 - #tA@10203 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*senc(m@10016, k@10017), #t1@10018);
    @premise know(*k@10017, #t2@10019);
    @conclusion know(*m@10016, #t@10020);
    @constraint -#t1@10018 + #t@10020 >= 0;
    @constraint #t@10020 - #t2@10019 >= 0;
};
Rule in cache: 4
Rule staged: 31
Rule before check and clean: 
@rule{
    @premise new(*[k@10255], gen(), tuple3(A(), x0@10254, #tA@10257));
    @premise initS(*A(), *x0@10254, *[k@10255], *#tS@10258);
    @premise initA(*A(), *x0@10254, *[k@10255], *#tA@10257);
    @premise initS(*x0@10254, *A(), *[k@10255], *#tS@10253);
    @premise know(*#tA@10257, #t1@10259);
    @premise know(*#tS@10253, #t1@10260);
    @premise know(*#tS@10258, #t1@10261);
    @premise know(*x0@10254, #t0@10262);
    @premise know(*sk(A()), #t2@10263);
    @conclusion know(*tuple3(#tS@10253, x0@10254, [k@10255]), #t@10256);
    @constraint -$pd + #tS@10253 - #t0@10262 >= 0;
    @constraint #tA@10257 - #t1@10259 >= 0;
    @constraint #t@10256 - #tS@10253 >= 0;
    @constraint -$pd + #tS@10258 - #t1@10261 >= 0;
    @constraint -$pd + #tS@10253 - #t1@10260 >= 0;
    @constraint #t@10256 - #t2@10263 >= 0;
    @constraint #tA@10257 - #t0@10262 >= 0;
    @constraint $pa - #tS@10258 + #tA@10257 >= 0;
    @constraint -#tS@10253 + $pa + #tS@10258 >= 0;
    @constraint -$pd + #tS@10258 - #tA@10257 >= 0;
    @constraint -$pd + #tS@10253 - #tS@10258 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10255], gen(), tuple3(A(), x0@10254, #tA@10257));
    @premise know(*sk(A()), #t2@10263);
    @premise initA(*A(), *x0@10254, *[k@10255], *#tA@10257);
    @premise initS(*x0@10254, *A(), *[k@10255], *#tS@10253);
    @premise initS(*A(), *x0@10254, *[k@10255], *#tS@10258);
    @premise know(*#tS@10253, #t1@10260);
    @premise know(*#tS@10258, #t1@10261);
    @premise know(*#tA@10257, #t1@10259);
    @premise know(*x0@10254, #t0@10262);
    @conclusion know(*tuple3(#tS@10253, x0@10254, [k@10255]), #t@10256);
    @constraint -$pd + #tS@10253 - #t0@10262 >= 0;
    @constraint #tA@10257 - #t1@10259 >= 0;
    @constraint #t@10256 - #tS@10253 >= 0;
    @constraint -$pd + #tS@10258 - #t1@10261 >= 0;
    @constraint -$pd + #tS@10253 - #t1@10260 >= 0;
    @constraint #t@10256 - #t2@10263 >= 0;
    @constraint #tA@10257 - #t0@10262 >= 0;
    @constraint $pa - #tS@10258 + #tA@10257 >= 0;
    @constraint -#tS@10253 + $pa + #tS@10258 >= 0;
    @constraint -$pd + #tS@10258 - #tA@10257 >= 0;
    @constraint -$pd + #tS@10253 - #tS@10258 >= 0;
};

Compose to at 1 : 
@rule{
    @premise know(*x0@10087, #t0@10090);
    @premise know(*senc(tuple3(#tI@10091, R@10089, k@10088), sk(x0@10087)), #t1@10092);
    @premise know(*#tS@10086, #t1@10093);
    @premise initS(*x0@10087, *R@10089, *k@10088, *#tS@10086);
    @conclusion know(*senc(tuple3(#tS@10086, x0@10087, k@10088), sk(R@10089)), #tS@10086);
    @constraint -$pd + #tS@10086 - #t1@10093 >= 0;
    @constraint -#tS@10086 + $pa + #tI@10091 >= 0;
    @constraint -$pd + #tS@10086 - #t0@10090 >= 0;
    @constraint -$pd + #tS@10086 - #t1@10092 >= 0;
};
Rule in cache: 5
Rule staged: 31
Rule before check and clean: 
@rule{
    @premise new(*[k@10265], gen(), tuple3(A(), x0@10266, #tA@10267));
    @premise initS(*A(), *x0@10266, *[k@10265], *#tS@10268);
    @premise initA(*A(), *x0@10266, *[k@10265], *#tA@10267);
    @premise initS(*x0@10266, *A(), *[k@10265], *#tS@10269);
    @premise know(*#tA@10267, #t1@10270);
    @premise know(*#tS@10269, #t1@10271);
    @premise know(*#tS@10268, #t1@10272);
    @premise know(*x0@10266, #t0@10273);
    @premise know(*A(), #t0@10274);
    @premise know(*#tS@10264, #t1@10275);
    @premise initS(*A(), *x0@10266, *[k@10265], *#tS@10264);
    @conclusion know(*senc(tuple3(#tS@10264, A(), [k@10265]), sk(x0@10266)), #tS@10264);
    @constraint -$pd + #tS@10269 - #t0@10273 >= 0;
    @constraint #tA@10267 - #t1@10270 >= 0;
    @constraint -$pd + #tS@10268 - #t1@10272 >= 0;
    @constraint -$pd + #tS@10269 - #t1@10271 >= 0;
    @constraint -$pd + #tS@10264 - #t0@10274 >= 0;
    @constraint -$pd + #tS@10264 - #t1@10275 >= 0;
    @constraint #tA@10267 - #t0@10273 >= 0;
    @constraint -#tS@10264 + $pa + #tS@10269 >= 0;
    @constraint -$pd + #tS@10268 - #tA@10267 >= 0;
    @constraint -$pd + #tS@10269 - #tS@10268 >= 0;
    @constraint $pa - #tS@10269 + #tS@10268 >= 0;
    @constraint -$pd + #tS@10264 - #tS@10269 >= 0;
    @constraint $pa - #tS@10268 + #tA@10267 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10265], gen(), tuple3(A(), x0@10266, #tA@10267));
    @premise initS(*A(), *x0@10266, *[k@10265], *#tS@10268);
    @premise initA(*A(), *x0@10266, *[k@10265], *#tA@10267);
    @premise initS(*x0@10266, *A(), *[k@10265], *#tS@10269);
    @premise initS(*A(), *x0@10266, *[k@10265], *#tS@10264);
    @premise know(*A(), #t0@10274);
    @premise know(*#tS@10268, #t1@10272);
    @premise know(*#tA@10267, #t1@10270);
    @premise know(*#tS@10264, #t1@10275);
    @premise know(*#tS@10269, #t1@10271);
    @premise know(*x0@10266, #t0@10273);
    @conclusion know(*senc(tuple3(#tS@10264, A(), [k@10265]), sk(x0@10266)), #tS@10264);
    @constraint -$pd + #tS@10269 - #t0@10273 >= 0;
    @constraint #tA@10267 - #t1@10270 >= 0;
    @constraint -$pd + #tS@10268 - #t1@10272 >= 0;
    @constraint -$pd + #tS@10269 - #t1@10271 >= 0;
    @constraint -$pd + #tS@10264 - #t0@10274 >= 0;
    @constraint -$pd + #tS@10264 - #t1@10275 >= 0;
    @constraint #tA@10267 - #t0@10273 >= 0;
    @constraint -#tS@10264 + $pa + #tS@10269 >= 0;
    @constraint -$pd + #tS@10268 - #tA@10267 >= 0;
    @constraint -$pd + #tS@10269 - #tS@10268 >= 0;
    @constraint $pa - #tS@10269 + #tS@10268 >= 0;
    @constraint -$pd + #tS@10264 - #tS@10269 >= 0;
    @constraint $pa - #tS@10268 + #tA@10267 >= 0;
};

Stage rule: 
@rule{
    @guard c@10211 != A();
    @guard c@10211 != B();
    @premise know(*sk(x1@10214), #t2@10219);
    @premise initS(*c@10211, *x1@10214, *x2@10212, *#tS@10210);
    @premise know(*#tS@10210, #t1@10215);
    @premise know(*c@10211, #t1@10216);
    @premise know(*x1@10214, #t1@10217);
    @premise know(*x2@10212, #t2@10218);
    @conclusion know(*tuple3(#tS@10210, c@10211, x2@10212), #t@10213);
    @constraint #t@10213 - #tS@10210 >= 0;
    @constraint -$pd + #tS@10210 - #t2@10218 >= 0;
    @constraint -$pd + #tS@10210 - #t1@10217 >= 0;
    @constraint -$pd + #tS@10210 - #t1@10215 >= 0;
    @constraint -$pd + #tS@10210 - #t1@10216 >= 0;
    @constraint #t@10213 - #t2@10219 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @guard c@10007 != A();
    @guard c@10007 != B();
    @premise know(*c@10007, #t1@10008);
    @conclusion know(*sk(c@10007), #t@10009);
    @constraint -#t1@10008 + #t@10009 >= 0;
};
Rule in cache: 5
Rule staged: 32
Rule before check and clean: 
@rule{
    @guard c@10280 != A();
    @guard c@10280 != B();
    @guard c@10277 != A();
    @guard c@10277 != B();
    @premise know(*c@10280, #t1@10281);
    @premise initS(*c@10277, *c@10280, *x2@10278, *#tS@10276);
    @premise know(*#tS@10276, #t1@10282);
    @premise know(*c@10277, #t1@10283);
    @premise know(*c@10280, #t1@10284);
    @premise know(*x2@10278, #t2@10285);
    @conclusion know(*tuple3(#tS@10276, c@10277, x2@10278), #t@10279);
    @constraint -#t1@10281 + #t@10009 >= 0;
    @constraint #t@10279 - #t@10009 >= 0;
    @constraint -$pd + #tS@10276 - #t1@10283 >= 0;
    @constraint -$pd + #tS@10276 - #t2@10285 >= 0;
    @constraint -$pd + #tS@10276 - #t1@10284 >= 0;
    @constraint -$pd + #tS@10276 - #t1@10282 >= 0;
    @constraint #t@10279 - #tS@10276 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10280 != A();
    @guard c@10280 != B();
    @guard c@10277 != A();
    @guard c@10277 != B();
    @premise initS(*c@10277, *c@10280, *x2@10278, *#tS@10276);
    @premise know(*#tS@10276, #t1@10282);
    @premise know(*c@10280, #t1@10281);
    @premise know(*c@10277, #t1@10283);
    @premise know(*x2@10278, #t2@10285);
    @conclusion know(*tuple3(#tS@10276, c@10277, x2@10278), #t@10279);
    @constraint #t@10279 - #t1@10281 >= 0;
    @constraint -$pd + #tS@10276 - #t1@10283 >= 0;
    @constraint -$pd + #tS@10276 - #t2@10285 >= 0;
    @constraint -$pd + #tS@10276 - #t1@10282 >= 0;
    @constraint #t@10279 - #tS@10276 >= 0;
    @constraint -$pd + #tS@10276 - #t1@10281 >= 0;
};

Stage rule: 
@rule{
    @guard c@10230 != A();
    @guard c@10230 != B();
    @premise initS(*c@10230, *x1@10228, *x2@10229, *#tS@10231);
    @premise initS(*x1@10228, *c@10230, *x2@10229, *#tS@10227);
    @premise know(*#tS@10231, #t1@10232);
    @premise know(*#tS@10227, #t1@10237);
    @premise know(*c@10230, #t1@10233);
    @premise know(*x2@10229, #t2@10235);
    @premise know(*x1@10228, #t1@10234);
    @conclusion know(*senc(tuple3(#tS@10227, x1@10228, x2@10229), sk(c@10230)), #tS@10227);
    @constraint -$pd + #tS@10227 - #t1@10234 >= 0;
    @constraint -#tS@10227 + $pa + #tS@10231 >= 0;
    @constraint -$pd + #tS@10231 - #t1@10233 >= 0;
    @constraint -$pd + #tS@10231 - #t2@10235 >= 0;
    @constraint -$pd + #tS@10231 - #t1@10232 >= 0;
    @constraint -$pd + #tS@10227 - #t1@10237 >= 0;
    @constraint -$pd + #tS@10227 - #tS@10231 >= 0;
    @constraint -$pd + #tS@10231 - #t1@10234 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*senc(m@10016, k@10017), #t1@10018);
    @premise know(*k@10017, #t2@10019);
    @conclusion know(*m@10016, #t@10020);
    @constraint -#t1@10018 + #t@10020 >= 0;
    @constraint #t@10020 - #t2@10019 >= 0;
};
Rule in cache: 5
Rule staged: 33
Rule before check and clean: 
@rule{
    @guard c@10290 != A();
    @guard c@10290 != B();
    @premise initS(*c@10290, *x1@10287, *x2@10288, *#tS@10291);
    @premise initS(*x1@10287, *c@10290, *x2@10288, *#tS@10286);
    @premise know(*#tS@10291, #t1@10292);
    @premise know(*#tS@10286, #t1@10293);
    @premise know(*c@10290, #t1@10294);
    @premise know(*x2@10288, #t2@10295);
    @premise know(*x1@10287, #t1@10296);
    @premise know(*sk(c@10290), #t2@10297);
    @conclusion know(*tuple3(#tS@10286, x1@10287, x2@10288), #t@10289);
    @constraint -$pd + #tS@10286 - #t1@10296 >= 0;
    @constraint -$pd + #tS@10291 - #t1@10294 >= 0;
    @constraint #t@10289 - #tS@10286 >= 0;
    @constraint -#tS@10286 + $pa + #tS@10291 >= 0;
    @constraint -$pd + #tS@10291 - #t2@10295 >= 0;
    @constraint -$pd + #tS@10291 - #t1@10292 >= 0;
    @constraint -$pd + #tS@10286 - #t1@10293 >= 0;
    @constraint #t@10289 - #t2@10297 >= 0;
    @constraint -$pd + #tS@10286 - #tS@10291 >= 0;
    @constraint -$pd + #tS@10291 - #t1@10296 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10290 != A();
    @guard c@10290 != B();
    @premise know(*sk(c@10290), #t2@10297);
    @premise initS(*x1@10287, *c@10290, *x2@10288, *#tS@10286);
    @premise initS(*c@10290, *x1@10287, *x2@10288, *#tS@10291);
    @premise know(*#tS@10291, #t1@10292);
    @premise know(*#tS@10286, #t1@10293);
    @premise know(*x2@10288, #t2@10295);
    @premise know(*x1@10287, #t1@10296);
    @premise know(*c@10290, #t1@10294);
    @conclusion know(*tuple3(#tS@10286, x1@10287, x2@10288), #t@10289);
    @constraint -$pd + #tS@10286 - #t1@10296 >= 0;
    @constraint -$pd + #tS@10291 - #t1@10294 >= 0;
    @constraint #t@10289 - #tS@10286 >= 0;
    @constraint -#tS@10286 + $pa + #tS@10291 >= 0;
    @constraint -$pd + #tS@10291 - #t2@10295 >= 0;
    @constraint -$pd + #tS@10291 - #t1@10292 >= 0;
    @constraint -$pd + #tS@10286 - #t1@10293 >= 0;
    @constraint #t@10289 - #t2@10297 >= 0;
    @constraint -$pd + #tS@10286 - #tS@10291 >= 0;
    @constraint -$pd + #tS@10291 - #t1@10296 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*senc(tuple3(#tS@10032, A(), k@10033), sk(B())), #t@10034);
    @conclusion accept(*A(), *B(), *k@10033, *#tB@10035);
    @constraint -$pd - #t@10034 + #tB@10035 >= 0;
    @constraint -#tB@10035 + $pa + #tS@10032 >= 0;
};
Rule in cache: 6
Rule staged: 33
Rule before check and clean: 
@rule{
    @guard B() != A();
    @guard B() != B();
    @premise initS(*B(), *A(), *x2@10298, *#tS@10300);
    @premise initS(*A(), *B(), *x2@10298, *#tS@10301);
    @premise know(*#tS@10300, #t1@10302);
    @premise know(*#tS@10301, #t1@10303);
    @premise know(*B(), #t1@10304);
    @premise know(*x2@10298, #t2@10305);
    @premise know(*A(), #t1@10306);
    @conclusion accept(*A(), *B(), *x2@10298, *#tB@10299);
    @constraint -$pd + #tS@10301 - #t1@10306 >= 0;
    @constraint -$pd + #tS@10300 - #t1@10304 >= 0;
    @constraint -$pd + #tS@10300 - #t2@10305 >= 0;
    @constraint -$pd + #tS@10300 - #t1@10302 >= 0;
    @constraint -$pd + #tS@10301 - #t1@10303 >= 0;
    @constraint -$pd + #tS@10300 - #t1@10306 >= 0;
    @constraint -$pd + #tB@10299 - #tS@10301 >= 0;
    @constraint $pa - #tS@10301 + #tS@10300 >= 0;
    @constraint -#tB@10299 + $pa + #tS@10301 >= 0;
    @constraint -$pd + #tS@10301 - #tS@10300 >= 0;
};
Rule invalid. 

Compose to at 1 : 
@rule{
    @premise know(*x0@10087, #t0@10090);
    @premise know(*senc(tuple3(#tI@10091, R@10089, k@10088), sk(x0@10087)), #t1@10092);
    @premise know(*#tS@10086, #t1@10093);
    @premise initS(*x0@10087, *R@10089, *k@10088, *#tS@10086);
    @conclusion know(*senc(tuple3(#tS@10086, x0@10087, k@10088), sk(R@10089)), #tS@10086);
    @constraint -$pd + #tS@10086 - #t1@10093 >= 0;
    @constraint -#tS@10086 + $pa + #tI@10091 >= 0;
    @constraint -$pd + #tS@10086 - #t0@10090 >= 0;
    @constraint -$pd + #tS@10086 - #t1@10092 >= 0;
};
Rule in cache: 6
Rule staged: 33
Rule before check and clean: 
@rule{
    @guard c@10308 != A();
    @guard c@10308 != B();
    @premise initS(*c@10308, *x1@10310, *x2@10309, *#tS@10311);
    @premise initS(*x1@10310, *c@10308, *x2@10309, *#tS@10312);
    @premise know(*#tS@10311, #t1@10313);
    @premise know(*#tS@10312, #t1@10314);
    @premise know(*c@10308, #t1@10315);
    @premise know(*x2@10309, #t2@10316);
    @premise know(*x1@10310, #t1@10317);
    @premise know(*c@10308, #t0@10318);
    @premise know(*#tS@10307, #t1@10319);
    @premise initS(*c@10308, *x1@10310, *x2@10309, *#tS@10307);
    @conclusion know(*senc(tuple3(#tS@10307, c@10308, x2@10309), sk(x1@10310)), #tS@10307);
    @constraint -$pd + #tS@10312 - #t1@10317 >= 0;
    @constraint -$pd + #tS@10311 - #t1@10315 >= 0;
    @constraint -$pd + #tS@10311 - #t2@10316 >= 0;
    @constraint -$pd + #tS@10311 - #t1@10313 >= 0;
    @constraint -$pd + #tS@10312 - #t1@10314 >= 0;
    @constraint -$pd + #tS@10307 - #t0@10318 >= 0;
    @constraint -$pd + #tS@10307 - #t1@10319 >= 0;
    @constraint -$pd + #tS@10311 - #t1@10317 >= 0;
    @constraint -$pd + #tS@10307 - #tS@10312 >= 0;
    @constraint $pa - #tS@10312 + #tS@10311 >= 0;
    @constraint -#tS@10307 + $pa + #tS@10312 >= 0;
    @constraint -$pd + #tS@10312 - #tS@10311 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10308 != A();
    @guard c@10308 != B();
    @premise initS(*c@10308, *x1@10310, *x2@10309, *#tS@10311);
    @premise initS(*x1@10310, *c@10308, *x2@10309, *#tS@10312);
    @premise initS(*c@10308, *x1@10310, *x2@10309, *#tS@10307);
    @premise know(*#tS@10312, #t1@10314);
    @premise know(*#tS@10311, #t1@10313);
    @premise know(*#tS@10307, #t1@10319);
    @premise know(*x2@10309, #t2@10316);
    @premise know(*x1@10310, #t1@10317);
    @premise know(*c@10308, #t1@10315);
    @conclusion know(*senc(tuple3(#tS@10307, c@10308, x2@10309), sk(x1@10310)), #tS@10307);
    @constraint -$pd + #tS@10311 - #t2@10316 >= 0;
    @constraint -$pd + #tS@10311 - #t1@10313 >= 0;
    @constraint -$pd + #tS@10312 - #t1@10314 >= 0;
    @constraint -$pd + #tS@10307 - #t1@10319 >= 0;
    @constraint -$pd + #tS@10312 - #tS@10311 >= 0;
    @constraint -#tS@10307 + $pa + #tS@10312 >= 0;
    @constraint -$pd + #tS@10311 - #t1@10317 >= 0;
    @constraint $pa - #tS@10312 + #tS@10311 >= 0;
    @constraint -$pd + #tS@10307 - #tS@10312 >= 0;
    @constraint -$pd + #tS@10311 - #t1@10315 >= 0;
    @constraint -$pd + #tS@10307 - #t1@10315 >= 0;
    @constraint -$pd + #tS@10312 - #t1@10317 >= 0;
};

Stage rule: 
@rule{
    @guard c@10241 != A();
    @guard c@10241 != B();
    @premise new(*[k@10239], gen(), tuple3(A(), c@10241, #tA@10243));
    @premise initS(*A(), *c@10241, *[k@10239], *#tS@10238);
    @premise initA(*A(), *c@10241, *[k@10239], *#tA@10243);
    @premise know(*#tS@10238, #t1@10244);
    @premise know(*#tA@10243, #t1@10245);
    @premise know(*c@10241, #t1@10242);
    @conclusion know(*tuple3(#tS@10238, A(), [k@10239]), #t@10240);
    @constraint #t@10240 - #t1@10242 >= 0;
    @constraint #tA@10243 - #t1@10245 >= 0;
    @constraint -#tS@10238 + $pa + #tA@10243 >= 0;
    @constraint -$pd + #tS@10238 - #t1@10244 >= 0;
    @constraint -$pd + #tS@10238 - #tA@10243 >= 0;
    @constraint #t@10240 - #tS@10238 >= 0;
    @constraint #tA@10243 - #t1@10242 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@34, x1@35, x2@36), #t@37);
    @conclusion know(*x0@34, #t0@38);
    @constraint -#t@37 + #t0@38 >= 0;
};
Rule in cache: 6
Rule staged: 34
Rule before check and clean: 
@rule{
    @guard c@10323 != A();
    @guard c@10323 != B();
    @premise new(*[k@10322], gen(), tuple3(A(), c@10323, #tA@10324));
    @premise initS(*A(), *c@10323, *[k@10322], *#tS@10320);
    @premise initA(*A(), *c@10323, *[k@10322], *#tA@10324);
    @premise know(*#tS@10320, #t1@10325);
    @premise know(*#tA@10324, #t1@10326);
    @premise know(*c@10323, #t1@10327);
    @conclusion know(*#tS@10320, #t0@10321);
    @constraint #t@10240 - #t1@10327 >= 0;
    @constraint #t0@10321 - #t@10240 >= 0;
    @constraint -#tS@10320 + $pa + #tA@10324 >= 0;
    @constraint #tA@10324 - #t1@10326 >= 0;
    @constraint -$pd + #tS@10320 - #t1@10325 >= 0;
    @constraint -$pd + #tS@10320 - #tA@10324 >= 0;
    @constraint #tA@10324 - #t1@10327 >= 0;
    @constraint #t@10240 - #tS@10320 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@39, x1@40, x2@41), #t@42);
    @conclusion know(*x1@40, #t1@43);
    @constraint -#t@42 + #t1@43 >= 0;
};
Rule in cache: 6
Rule staged: 34
Rule before check and clean: 
@rule{
    @guard c@10330 != A();
    @guard c@10330 != B();
    @premise new(*[k@10329], gen(), tuple3(A(), c@10330, #tA@10331));
    @premise initS(*A(), *c@10330, *[k@10329], *#tS@10332);
    @premise initA(*A(), *c@10330, *[k@10329], *#tA@10331);
    @premise know(*#tS@10332, #t1@10333);
    @premise know(*#tA@10331, #t1@10334);
    @premise know(*c@10330, #t1@10335);
    @conclusion know(*A(), #t1@10328);
    @constraint #t@10240 - #t1@10335 >= 0;
    @constraint #t1@10328 - #t@10240 >= 0;
    @constraint -#tS@10332 + $pa + #tA@10331 >= 0;
    @constraint #tA@10331 - #t1@10334 >= 0;
    @constraint -$pd + #tS@10332 - #t1@10333 >= 0;
    @constraint -$pd + #tS@10332 - #tA@10331 >= 0;
    @constraint #tA@10331 - #t1@10335 >= 0;
    @constraint #t@10240 - #tS@10332 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10330 != A();
    @guard c@10330 != B();
    @premise new(*[k@10329], gen(), tuple3(A(), c@10330, #tA@10331));
    @premise initS(*A(), *c@10330, *[k@10329], *#tS@10332);
    @premise initA(*A(), *c@10330, *[k@10329], *#tA@10331);
    @premise know(*#tS@10332, #t1@10333);
    @premise know(*#tA@10331, #t1@10334);
    @premise know(*c@10330, #t1@10335);
    @conclusion know(*A(), #t1@10328);
    @constraint -#tS@10332 + $pa + #tA@10331 >= 0;
    @constraint #tA@10331 - #t1@10334 >= 0;
    @constraint -$pd + #tS@10332 - #t1@10333 >= 0;
    @constraint -$pd + #tS@10332 - #tA@10331 >= 0;
    @constraint #tA@10331 - #t1@10335 >= 0;
    @constraint #t1@10328 - #t1@10335 >= 0;
    @constraint #t1@10328 - #tS@10332 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@44, x1@45, x2@46), #t@47);
    @conclusion know(*x2@46, #t2@48);
    @constraint -#t@47 + #t2@48 >= 0;
};
Rule in cache: 7
Rule staged: 34
Rule before check and clean: 
@rule{
    @guard c@10338 != A();
    @guard c@10338 != B();
    @premise new(*[k@10336], gen(), tuple3(A(), c@10338, #tA@10339));
    @premise initS(*A(), *c@10338, *[k@10336], *#tS@10340);
    @premise initA(*A(), *c@10338, *[k@10336], *#tA@10339);
    @premise know(*#tS@10340, #t1@10341);
    @premise know(*#tA@10339, #t1@10342);
    @premise know(*c@10338, #t1@10343);
    @conclusion know(*[k@10336], #t2@10337);
    @constraint #t@10240 - #t1@10343 >= 0;
    @constraint #t2@10337 - #t@10240 >= 0;
    @constraint -#tS@10340 + $pa + #tA@10339 >= 0;
    @constraint #tA@10339 - #t1@10342 >= 0;
    @constraint -$pd + #tS@10340 - #t1@10341 >= 0;
    @constraint -$pd + #tS@10340 - #tA@10339 >= 0;
    @constraint #tA@10339 - #t1@10343 >= 0;
    @constraint #t@10240 - #tS@10340 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10338 != A();
    @guard c@10338 != B();
    @premise new(*[k@10336], gen(), tuple3(A(), c@10338, #tA@10339));
    @premise initS(*A(), *c@10338, *[k@10336], *#tS@10340);
    @premise initA(*A(), *c@10338, *[k@10336], *#tA@10339);
    @premise know(*#tS@10340, #t1@10341);
    @premise know(*#tA@10339, #t1@10342);
    @premise know(*c@10338, #t1@10343);
    @conclusion know(*[k@10336], #t2@10337);
    @constraint -#tS@10340 + $pa + #tA@10339 >= 0;
    @constraint #tA@10339 - #t1@10342 >= 0;
    @constraint -$pd + #tS@10340 - #t1@10341 >= 0;
    @constraint -$pd + #tS@10340 - #tA@10339 >= 0;
    @constraint #tA@10339 - #t1@10343 >= 0;
    @constraint #t2@10337 - #t1@10343 >= 0;
    @constraint #t2@10337 - #tS@10340 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[k@10247], gen(), tuple3(A(), B(), #tA@10249));
    @premise initS(*A(), *B(), *[k@10247], *#tS@10250);
    @premise initA(*A(), *B(), *[k@10247], *#tA@10249);
    @premise know(*#tA@10249, #t1@10251);
    @premise know(*#tS@10250, #t1@10252);
    @conclusion accept(*A(), *B(), *[k@10247], *#tB@10248);
    @constraint #tA@10249 - #t1@10251 >= 0;
    @constraint -$pd + #tS@10250 - #t1@10252 >= 0;
    @constraint $pa - #tS@10250 + #tA@10249 >= 0;
    @constraint -$pd + #tB@10248 - #tS@10250 >= 0;
    @constraint -$pd + #tS@10250 - #tA@10249 >= 0;
    @constraint -#tB@10248 + $pa + #tS@10250 >= 0;
};
Rule deleted: 
@rule{
    @premise new(*[k@10193], gen(), tuple3(A(), B(), #tA@10195));
    @premise initS(*A(), *B(), *[k@10193], *#tS@10196);
    @premise initA(*A(), *B(), *[k@10193], *#tA@10195);
    @premise know(*B(), #t0@10199);
    @premise know(*#tA@10195, #t1@10197);
    @premise know(*#tS@10196, #t1@10198);
    @conclusion accept(*A(), *B(), *[k@10193], *#tB@10194);
    @constraint #tA@10195 - #t0@10199 >= 0;
    @constraint -$pd + #tS@10196 - #t1@10198 >= 0;
    @constraint #tA@10195 - #t1@10197 >= 0;
    @constraint -$pd + #tB@10194 - #tS@10196 >= 0;
    @constraint $pa - #tS@10196 + #tA@10195 >= 0;
    @constraint -#tB@10194 + $pa + #tS@10196 >= 0;
    @constraint -$pd + #tS@10196 - #tA@10195 >= 0;
};
Rule added.

Check rule against queries: 
@rule{
    @premise new(*[k@10247], gen(), tuple3(A(), B(), #tA@10249));
    @premise initS(*A(), *B(), *[k@10247], *#tS@10250);
    @premise initA(*A(), *B(), *[k@10247], *#tA@10249);
    @premise know(*#tA@10249, #t1@10251);
    @premise know(*#tS@10250, #t1@10252);
    @conclusion accept(*A(), *B(), *[k@10247], *#tB@10248);
    @constraint #tA@10249 - #t1@10251 >= 0;
    @constraint -$pd + #tS@10250 - #t1@10252 >= 0;
    @constraint $pa - #tS@10250 + #tA@10249 >= 0;
    @constraint -$pd + #tB@10248 - #tS@10250 >= 0;
    @constraint -$pd + #tS@10250 - #tA@10249 >= 0;
    @constraint -#tB@10248 + $pa + #tS@10250 >= 0;
};
Before checking:
0. Requested parameter relation:
$pd > 0

After checking:
0. Requested parameter relation:
$pd > 0


Stage rule: 
@rule{
    @premise new(*[k@10255], gen(), tuple3(A(), x0@10254, #tA@10257));
    @premise know(*sk(A()), #t2@10263);
    @premise initA(*A(), *x0@10254, *[k@10255], *#tA@10257);
    @premise initS(*x0@10254, *A(), *[k@10255], *#tS@10253);
    @premise initS(*A(), *x0@10254, *[k@10255], *#tS@10258);
    @premise know(*#tS@10253, #t1@10260);
    @premise know(*#tS@10258, #t1@10261);
    @premise know(*#tA@10257, #t1@10259);
    @premise know(*x0@10254, #t0@10262);
    @conclusion know(*tuple3(#tS@10253, x0@10254, [k@10255]), #t@10256);
    @constraint -$pd + #tS@10253 - #t0@10262 >= 0;
    @constraint #tA@10257 - #t1@10259 >= 0;
    @constraint #t@10256 - #tS@10253 >= 0;
    @constraint -$pd + #tS@10258 - #t1@10261 >= 0;
    @constraint -$pd + #tS@10253 - #t1@10260 >= 0;
    @constraint #t@10256 - #t2@10263 >= 0;
    @constraint #tA@10257 - #t0@10262 >= 0;
    @constraint $pa - #tS@10258 + #tA@10257 >= 0;
    @constraint -#tS@10253 + $pa + #tS@10258 >= 0;
    @constraint -$pd + #tS@10258 - #tA@10257 >= 0;
    @constraint -$pd + #tS@10253 - #tS@10258 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @guard c@10007 != A();
    @guard c@10007 != B();
    @premise know(*c@10007, #t1@10008);
    @conclusion know(*sk(c@10007), #t@10009);
    @constraint -#t1@10008 + #t@10009 >= 0;
};
Rule in cache: 6
Rule staged: 36
Rule before check and clean: 
@rule{
    @guard A() != A();
    @guard A() != B();
    @premise know(*A(), #t1@10348);
    @premise new(*[k@10346], gen(), tuple3(A(), x0@10345, #tA@10349));
    @premise initA(*A(), *x0@10345, *[k@10346], *#tA@10349);
    @premise initS(*x0@10345, *A(), *[k@10346], *#tS@10344);
    @premise initS(*A(), *x0@10345, *[k@10346], *#tS@10350);
    @premise know(*#tS@10344, #t1@10351);
    @premise know(*#tS@10350, #t1@10352);
    @premise know(*#tA@10349, #t1@10353);
    @premise know(*x0@10345, #t0@10354);
    @conclusion know(*tuple3(#tS@10344, x0@10345, [k@10346]), #t@10347);
    @constraint #t@10347 - #tS@10344 >= 0;
    @constraint -$pd + #tS@10344 - #t0@10354 >= 0;
    @constraint -#t1@10348 + #t@10009 >= 0;
    @constraint #t@10347 - #t@10009 >= 0;
    @constraint #tA@10349 - #t1@10353 >= 0;
    @constraint -$pd + #tS@10350 - #t1@10352 >= 0;
    @constraint -$pd + #tS@10344 - #t1@10351 >= 0;
    @constraint #tA@10349 - #t0@10354 >= 0;
    @constraint $pa - #tS@10350 + #tA@10349 >= 0;
    @constraint -#tS@10344 + $pa + #tS@10350 >= 0;
    @constraint -$pd + #tS@10350 - #tA@10349 >= 0;
    @constraint -$pd + #tS@10344 - #tS@10350 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise new(*[k@10265], gen(), tuple3(A(), x0@10266, #tA@10267));
    @premise initS(*A(), *x0@10266, *[k@10265], *#tS@10268);
    @premise initA(*A(), *x0@10266, *[k@10265], *#tA@10267);
    @premise initS(*x0@10266, *A(), *[k@10265], *#tS@10269);
    @premise initS(*A(), *x0@10266, *[k@10265], *#tS@10264);
    @premise know(*A(), #t0@10274);
    @premise know(*#tS@10268, #t1@10272);
    @premise know(*#tA@10267, #t1@10270);
    @premise know(*#tS@10264, #t1@10275);
    @premise know(*#tS@10269, #t1@10271);
    @premise know(*x0@10266, #t0@10273);
    @conclusion know(*senc(tuple3(#tS@10264, A(), [k@10265]), sk(x0@10266)), #tS@10264);
    @constraint -$pd + #tS@10269 - #t0@10273 >= 0;
    @constraint #tA@10267 - #t1@10270 >= 0;
    @constraint -$pd + #tS@10268 - #t1@10272 >= 0;
    @constraint -$pd + #tS@10269 - #t1@10271 >= 0;
    @constraint -$pd + #tS@10264 - #t0@10274 >= 0;
    @constraint -$pd + #tS@10264 - #t1@10275 >= 0;
    @constraint #tA@10267 - #t0@10273 >= 0;
    @constraint -#tS@10264 + $pa + #tS@10269 >= 0;
    @constraint -$pd + #tS@10268 - #tA@10267 >= 0;
    @constraint -$pd + #tS@10269 - #tS@10268 >= 0;
    @constraint $pa - #tS@10269 + #tS@10268 >= 0;
    @constraint -$pd + #tS@10264 - #tS@10269 >= 0;
    @constraint $pa - #tS@10268 + #tA@10267 >= 0;
};
Rule added at 5.

Compose by at 5 : 
@rule{
    @conclusion know(*A(), #t@10004);
};
Rule in cache: 5
Rule staged: 37
Rule before check and clean: 
@rule{
    @premise new(*[k@10356], gen(), tuple3(A(), x0@10357, #tA@10358));
    @premise initS(*A(), *x0@10357, *[k@10356], *#tS@10359);
    @premise initA(*A(), *x0@10357, *[k@10356], *#tA@10358);
    @premise initS(*x0@10357, *A(), *[k@10356], *#tS@10360);
    @premise initS(*A(), *x0@10357, *[k@10356], *#tS@10355);
    @premise know(*#tS@10359, #t1@10361);
    @premise know(*#tA@10358, #t1@10362);
    @premise know(*#tS@10355, #t1@10363);
    @premise know(*#tS@10360, #t1@10364);
    @premise know(*x0@10357, #t0@10365);
    @conclusion know(*senc(tuple3(#tS@10355, A(), [k@10356]), sk(x0@10357)), #tS@10355);
    @constraint -$pd + #tS@10359 - #t1@10361 >= 0;
    @constraint -$pd + #tS@10359 - #tA@10358 >= 0;
    @constraint -$pd + #tS@10360 - #t1@10364 >= 0;
    @constraint -$pd + #tS@10360 - #tS@10359 >= 0;
    @constraint -$pd + #tS@10360 - #t0@10365 >= 0;
    @constraint -$pd + #tS@10355 - #t1@10363 >= 0;
    @constraint -$pd + #tS@10355 - #t@10004 >= 0;
    @constraint -$pd + #tS@10355 - #tS@10360 >= 0;
    @constraint -#tS@10355 + $pa + #tS@10360 >= 0;
    @constraint #tA@10358 - #t0@10365 >= 0;
    @constraint #tA@10358 - #t1@10362 >= 0;
    @constraint $pa - #tS@10360 + #tS@10359 >= 0;
    @constraint $pa - #tS@10359 + #tA@10358 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10356], gen(), tuple3(A(), x0@10357, #tA@10358));
    @premise initS(*A(), *x0@10357, *[k@10356], *#tS@10359);
    @premise initA(*A(), *x0@10357, *[k@10356], *#tA@10358);
    @premise initS(*x0@10357, *A(), *[k@10356], *#tS@10360);
    @premise initS(*A(), *x0@10357, *[k@10356], *#tS@10355);
    @premise know(*#tS@10359, #t1@10361);
    @premise know(*#tA@10358, #t1@10362);
    @premise know(*#tS@10355, #t1@10363);
    @premise know(*#tS@10360, #t1@10364);
    @premise know(*x0@10357, #t0@10365);
    @conclusion know(*senc(tuple3(#tS@10355, A(), [k@10356]), sk(x0@10357)), #tS@10355);
    @constraint -$pd + #tS@10360 - #t0@10365 >= 0;
    @constraint #tA@10358 - #t1@10362 >= 0;
    @constraint -$pd + #tS@10359 - #t1@10361 >= 0;
    @constraint -$pd + #tS@10360 - #t1@10364 >= 0;
    @constraint -$pd + #tS@10355 - #t1@10363 >= 0;
    @constraint #tA@10358 - #t0@10365 >= 0;
    @constraint -$pd + #tS@10355 - #tS@10360 >= 0;
    @constraint -$pd + #tS@10359 - #tA@10358 >= 0;
    @constraint -$pd + #tS@10360 - #tS@10359 >= 0;
    @constraint $pa - #tS@10360 + #tS@10359 >= 0;
    @constraint -#tS@10355 + $pa + #tS@10360 >= 0;
    @constraint $pa - #tS@10359 + #tA@10358 >= 0;
};

Stage rule: 
@rule{
    @guard c@10280 != A();
    @guard c@10280 != B();
    @guard c@10277 != A();
    @guard c@10277 != B();
    @premise initS(*c@10277, *c@10280, *x2@10278, *#tS@10276);
    @premise know(*#tS@10276, #t1@10282);
    @premise know(*c@10280, #t1@10281);
    @premise know(*c@10277, #t1@10283);
    @premise know(*x2@10278, #t2@10285);
    @conclusion know(*tuple3(#tS@10276, c@10277, x2@10278), #t@10279);
    @constraint #t@10279 - #t1@10281 >= 0;
    @constraint -$pd + #tS@10276 - #t1@10283 >= 0;
    @constraint -$pd + #tS@10276 - #t2@10285 >= 0;
    @constraint -$pd + #tS@10276 - #t1@10282 >= 0;
    @constraint #t@10279 - #tS@10276 >= 0;
    @constraint -$pd + #tS@10276 - #t1@10281 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@34, x1@35, x2@36), #t@37);
    @conclusion know(*x0@34, #t0@38);
    @constraint -#t@37 + #t0@38 >= 0;
};
Rule in cache: 5
Rule staged: 38
Rule before check and clean: 
@rule{
    @guard c@10369 != A();
    @guard c@10369 != B();
    @guard c@10368 != A();
    @guard c@10368 != B();
    @premise initS(*c@10368, *c@10369, *x2@10370, *#tS@10366);
    @premise know(*#tS@10366, #t1@10371);
    @premise know(*c@10369, #t1@10372);
    @premise know(*c@10368, #t1@10373);
    @premise know(*x2@10370, #t2@10374);
    @conclusion know(*#tS@10366, #t0@10367);
    @constraint #t@10279 - #t1@10372 >= 0;
    @constraint #t0@10367 - #t@10279 >= 0;
    @constraint -$pd + #tS@10366 - #t1@10373 >= 0;
    @constraint -$pd + #tS@10366 - #t2@10374 >= 0;
    @constraint -$pd + #tS@10366 - #t1@10371 >= 0;
    @constraint -$pd + #tS@10366 - #t1@10372 >= 0;
    @constraint #t@10279 - #tS@10366 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@39, x1@40, x2@41), #t@42);
    @conclusion know(*x1@40, #t1@43);
    @constraint -#t@42 + #t1@43 >= 0;
};
Rule in cache: 5
Rule staged: 38
Rule before check and clean: 
@rule{
    @guard c@10377 != A();
    @guard c@10377 != B();
    @guard c@10375 != A();
    @guard c@10375 != B();
    @premise initS(*c@10375, *c@10377, *x2@10378, *#tS@10379);
    @premise know(*#tS@10379, #t1@10380);
    @premise know(*c@10377, #t1@10381);
    @premise know(*c@10375, #t1@10382);
    @premise know(*x2@10378, #t2@10383);
    @conclusion know(*c@10375, #t1@10376);
    @constraint #t@10279 - #t1@10381 >= 0;
    @constraint #t1@10376 - #t@10279 >= 0;
    @constraint -$pd + #tS@10379 - #t1@10382 >= 0;
    @constraint -$pd + #tS@10379 - #t2@10383 >= 0;
    @constraint -$pd + #tS@10379 - #t1@10380 >= 0;
    @constraint -$pd + #tS@10379 - #t1@10381 >= 0;
    @constraint #t@10279 - #tS@10379 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@44, x1@45, x2@46), #t@47);
    @conclusion know(*x2@46, #t2@48);
    @constraint -#t@47 + #t2@48 >= 0;
};
Rule in cache: 5
Rule staged: 38
Rule before check and clean: 
@rule{
    @guard c@10387 != A();
    @guard c@10387 != B();
    @guard c@10386 != A();
    @guard c@10386 != B();
    @premise initS(*c@10386, *c@10387, *x2@10384, *#tS@10388);
    @premise know(*#tS@10388, #t1@10389);
    @premise know(*c@10387, #t1@10390);
    @premise know(*c@10386, #t1@10391);
    @premise know(*x2@10384, #t2@10392);
    @conclusion know(*x2@10384, #t2@10385);
    @constraint #t@10279 - #t1@10390 >= 0;
    @constraint #t2@10385 - #t@10279 >= 0;
    @constraint -$pd + #tS@10388 - #t1@10391 >= 0;
    @constraint -$pd + #tS@10388 - #t2@10392 >= 0;
    @constraint -$pd + #tS@10388 - #t1@10389 >= 0;
    @constraint -$pd + #tS@10388 - #t1@10390 >= 0;
    @constraint #t@10279 - #tS@10388 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @guard c@10290 != A();
    @guard c@10290 != B();
    @premise know(*sk(c@10290), #t2@10297);
    @premise initS(*x1@10287, *c@10290, *x2@10288, *#tS@10286);
    @premise initS(*c@10290, *x1@10287, *x2@10288, *#tS@10291);
    @premise know(*#tS@10291, #t1@10292);
    @premise know(*#tS@10286, #t1@10293);
    @premise know(*x2@10288, #t2@10295);
    @premise know(*x1@10287, #t1@10296);
    @premise know(*c@10290, #t1@10294);
    @conclusion know(*tuple3(#tS@10286, x1@10287, x2@10288), #t@10289);
    @constraint -$pd + #tS@10286 - #t1@10296 >= 0;
    @constraint -$pd + #tS@10291 - #t1@10294 >= 0;
    @constraint #t@10289 - #tS@10286 >= 0;
    @constraint -#tS@10286 + $pa + #tS@10291 >= 0;
    @constraint -$pd + #tS@10291 - #t2@10295 >= 0;
    @constraint -$pd + #tS@10291 - #t1@10292 >= 0;
    @constraint -$pd + #tS@10286 - #t1@10293 >= 0;
    @constraint #t@10289 - #t2@10297 >= 0;
    @constraint -$pd + #tS@10286 - #tS@10291 >= 0;
    @constraint -$pd + #tS@10291 - #t1@10296 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @guard c@10007 != A();
    @guard c@10007 != B();
    @premise know(*c@10007, #t1@10008);
    @conclusion know(*sk(c@10007), #t@10009);
    @constraint -#t1@10008 + #t@10009 >= 0;
};
Rule in cache: 4
Rule staged: 39
Rule before check and clean: 
@rule{
    @guard c@10397 != A();
    @guard c@10397 != B();
    @guard c@10397 != A();
    @guard c@10397 != B();
    @premise know(*c@10397, #t1@10398);
    @premise initS(*x1@10394, *c@10397, *x2@10395, *#tS@10393);
    @premise initS(*c@10397, *x1@10394, *x2@10395, *#tS@10399);
    @premise know(*#tS@10399, #t1@10400);
    @premise know(*#tS@10393, #t1@10401);
    @premise know(*x2@10395, #t2@10402);
    @premise know(*x1@10394, #t1@10403);
    @premise know(*c@10397, #t1@10404);
    @conclusion know(*tuple3(#tS@10393, x1@10394, x2@10395), #t@10396);
    @constraint -$pd + #tS@10393 - #t1@10403 >= 0;
    @constraint #t@10396 - #tS@10393 >= 0;
    @constraint -#tS@10393 + $pa + #tS@10399 >= 0;
    @constraint -#t1@10398 + #t@10009 >= 0;
    @constraint #t@10396 - #t@10009 >= 0;
    @constraint -$pd + #tS@10399 - #t1@10404 >= 0;
    @constraint -$pd + #tS@10399 - #t2@10402 >= 0;
    @constraint -$pd + #tS@10399 - #t1@10400 >= 0;
    @constraint -$pd + #tS@10393 - #t1@10401 >= 0;
    @constraint -$pd + #tS@10393 - #tS@10399 >= 0;
    @constraint -$pd + #tS@10399 - #t1@10403 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10397 != A();
    @guard c@10397 != B();
    @premise initS(*x1@10394, *c@10397, *x2@10395, *#tS@10393);
    @premise initS(*c@10397, *x1@10394, *x2@10395, *#tS@10399);
    @premise know(*#tS@10399, #t1@10400);
    @premise know(*#tS@10393, #t1@10401);
    @premise know(*c@10397, #t1@10398);
    @premise know(*x2@10395, #t2@10402);
    @premise know(*x1@10394, #t1@10403);
    @conclusion know(*tuple3(#tS@10393, x1@10394, x2@10395), #t@10396);
    @constraint -#tS@10393 + $pa + #tS@10399 >= 0;
    @constraint -$pd + #tS@10399 - #t2@10402 >= 0;
    @constraint -$pd + #tS@10399 - #t1@10400 >= 0;
    @constraint -$pd + #tS@10393 - #t1@10401 >= 0;
    @constraint -$pd + #tS@10393 - #tS@10399 >= 0;
    @constraint -$pd + #tS@10399 - #t1@10403 >= 0;
    @constraint #t@10396 - #tS@10393 >= 0;
    @constraint -$pd + #tS@10399 - #t1@10398 >= 0;
    @constraint #t@10396 - #t1@10398 >= 0;
    @constraint -$pd + #tS@10393 - #t1@10403 >= 0;
};

Stage rule: 
@rule{
    @guard c@10308 != A();
    @guard c@10308 != B();
    @premise initS(*c@10308, *x1@10310, *x2@10309, *#tS@10311);
    @premise initS(*x1@10310, *c@10308, *x2@10309, *#tS@10312);
    @premise initS(*c@10308, *x1@10310, *x2@10309, *#tS@10307);
    @premise know(*#tS@10312, #t1@10314);
    @premise know(*#tS@10311, #t1@10313);
    @premise know(*#tS@10307, #t1@10319);
    @premise know(*x2@10309, #t2@10316);
    @premise know(*x1@10310, #t1@10317);
    @premise know(*c@10308, #t1@10315);
    @conclusion know(*senc(tuple3(#tS@10307, c@10308, x2@10309), sk(x1@10310)), #tS@10307);
    @constraint -$pd + #tS@10311 - #t2@10316 >= 0;
    @constraint -$pd + #tS@10311 - #t1@10313 >= 0;
    @constraint -$pd + #tS@10312 - #t1@10314 >= 0;
    @constraint -$pd + #tS@10307 - #t1@10319 >= 0;
    @constraint -$pd + #tS@10312 - #tS@10311 >= 0;
    @constraint -#tS@10307 + $pa + #tS@10312 >= 0;
    @constraint -$pd + #tS@10311 - #t1@10317 >= 0;
    @constraint $pa - #tS@10312 + #tS@10311 >= 0;
    @constraint -$pd + #tS@10307 - #tS@10312 >= 0;
    @constraint -$pd + #tS@10311 - #t1@10315 >= 0;
    @constraint -$pd + #tS@10307 - #t1@10315 >= 0;
    @constraint -$pd + #tS@10312 - #t1@10317 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*senc(m@10016, k@10017), #t1@10018);
    @premise know(*k@10017, #t2@10019);
    @conclusion know(*m@10016, #t@10020);
    @constraint -#t1@10018 + #t@10020 >= 0;
    @constraint #t@10020 - #t2@10019 >= 0;
};
Rule in cache: 4
Rule staged: 40
Rule before check and clean: 
@rule{
    @guard c@10406 != A();
    @guard c@10406 != B();
    @premise initS(*c@10406, *x1@10409, *x2@10407, *#tS@10410);
    @premise initS(*x1@10409, *c@10406, *x2@10407, *#tS@10411);
    @premise initS(*c@10406, *x1@10409, *x2@10407, *#tS@10405);
    @premise know(*#tS@10411, #t1@10412);
    @premise know(*#tS@10410, #t1@10413);
    @premise know(*#tS@10405, #t1@10414);
    @premise know(*x2@10407, #t2@10415);
    @premise know(*x1@10409, #t1@10416);
    @premise know(*c@10406, #t1@10417);
    @premise know(*sk(x1@10409), #t2@10418);
    @conclusion know(*tuple3(#tS@10405, c@10406, x2@10407), #t@10408);
    @constraint #t@10408 - #tS@10405 >= 0;
    @constraint -$pd + #tS@10410 - #t2@10415 >= 0;
    @constraint -$pd + #tS@10410 - #t1@10413 >= 0;
    @constraint -$pd + #tS@10411 - #t1@10412 >= 0;
    @constraint -$pd + #tS@10405 - #t1@10414 >= 0;
    @constraint #t@10408 - #t2@10418 >= 0;
    @constraint -$pd + #tS@10411 - #tS@10410 >= 0;
    @constraint -#tS@10405 + $pa + #tS@10411 >= 0;
    @constraint -$pd + #tS@10410 - #t1@10416 >= 0;
    @constraint $pa - #tS@10411 + #tS@10410 >= 0;
    @constraint -$pd + #tS@10405 - #tS@10411 >= 0;
    @constraint -$pd + #tS@10410 - #t1@10417 >= 0;
    @constraint -$pd + #tS@10405 - #t1@10417 >= 0;
    @constraint -$pd + #tS@10411 - #t1@10416 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10406 != A();
    @guard c@10406 != B();
    @premise know(*sk(x1@10409), #t2@10418);
    @premise initS(*x1@10409, *c@10406, *x2@10407, *#tS@10411);
    @premise initS(*c@10406, *x1@10409, *x2@10407, *#tS@10405);
    @premise initS(*c@10406, *x1@10409, *x2@10407, *#tS@10410);
    @premise know(*#tS@10410, #t1@10413);
    @premise know(*#tS@10411, #t1@10412);
    @premise know(*#tS@10405, #t1@10414);
    @premise know(*x1@10409, #t1@10416);
    @premise know(*c@10406, #t1@10417);
    @premise know(*x2@10407, #t2@10415);
    @conclusion know(*tuple3(#tS@10405, c@10406, x2@10407), #t@10408);
    @constraint #t@10408 - #tS@10405 >= 0;
    @constraint -$pd + #tS@10410 - #t2@10415 >= 0;
    @constraint -$pd + #tS@10410 - #t1@10413 >= 0;
    @constraint -$pd + #tS@10411 - #t1@10412 >= 0;
    @constraint -$pd + #tS@10405 - #t1@10414 >= 0;
    @constraint #t@10408 - #t2@10418 >= 0;
    @constraint -$pd + #tS@10411 - #tS@10410 >= 0;
    @constraint -#tS@10405 + $pa + #tS@10411 >= 0;
    @constraint -$pd + #tS@10410 - #t1@10416 >= 0;
    @constraint $pa - #tS@10411 + #tS@10410 >= 0;
    @constraint -$pd + #tS@10405 - #tS@10411 >= 0;
    @constraint -$pd + #tS@10410 - #t1@10417 >= 0;
    @constraint -$pd + #tS@10405 - #t1@10417 >= 0;
    @constraint -$pd + #tS@10411 - #t1@10416 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*senc(tuple3(#tS@10032, A(), k@10033), sk(B())), #t@10034);
    @conclusion accept(*A(), *B(), *k@10033, *#tB@10035);
    @constraint -$pd - #t@10034 + #tB@10035 >= 0;
    @constraint -#tB@10035 + $pa + #tS@10032 >= 0;
};
Rule in cache: 5
Rule staged: 40
Rule before check and clean: 
@rule{
    @guard A() != A();
    @guard A() != B();
    @premise initS(*A(), *B(), *x2@10419, *#tS@10421);
    @premise initS(*B(), *A(), *x2@10419, *#tS@10422);
    @premise initS(*A(), *B(), *x2@10419, *#tS@10423);
    @premise know(*#tS@10422, #t1@10424);
    @premise know(*#tS@10421, #t1@10425);
    @premise know(*#tS@10423, #t1@10426);
    @premise know(*x2@10419, #t2@10427);
    @premise know(*B(), #t1@10428);
    @premise know(*A(), #t1@10429);
    @conclusion accept(*A(), *B(), *x2@10419, *#tB@10420);
    @constraint -$pd + #tS@10421 - #t2@10427 >= 0;
    @constraint -$pd + #tS@10421 - #t1@10425 >= 0;
    @constraint -$pd + #tS@10422 - #t1@10424 >= 0;
    @constraint -$pd + #tS@10423 - #t1@10426 >= 0;
    @constraint -$pd + #tS@10421 - #t1@10428 >= 0;
    @constraint -$pd + #tS@10422 - #tS@10421 >= 0;
    @constraint $pa - #tS@10423 + #tS@10422 >= 0;
    @constraint -#tB@10420 + $pa + #tS@10423 >= 0;
    @constraint -$pd + #tB@10420 - #tS@10423 >= 0;
    @constraint -$pd + #tS@10421 - #t1@10429 >= 0;
    @constraint -$pd + #tS@10423 - #tS@10422 >= 0;
    @constraint $pa - #tS@10422 + #tS@10421 >= 0;
    @constraint -$pd + #tS@10423 - #t1@10429 >= 0;
    @constraint -$pd + #tS@10422 - #t1@10428 >= 0;
};
Rule invalid. 

Compose to at 1 : 
@rule{
    @premise know(*x0@10087, #t0@10090);
    @premise know(*senc(tuple3(#tI@10091, R@10089, k@10088), sk(x0@10087)), #t1@10092);
    @premise know(*#tS@10086, #t1@10093);
    @premise initS(*x0@10087, *R@10089, *k@10088, *#tS@10086);
    @conclusion know(*senc(tuple3(#tS@10086, x0@10087, k@10088), sk(R@10089)), #tS@10086);
    @constraint -$pd + #tS@10086 - #t1@10093 >= 0;
    @constraint -#tS@10086 + $pa + #tI@10091 >= 0;
    @constraint -$pd + #tS@10086 - #t0@10090 >= 0;
    @constraint -$pd + #tS@10086 - #t1@10092 >= 0;
};
Rule in cache: 5
Rule staged: 40
Rule before check and clean: 
@rule{
    @guard c@10433 != A();
    @guard c@10433 != B();
    @premise initS(*c@10433, *x1@10431, *x2@10432, *#tS@10434);
    @premise initS(*x1@10431, *c@10433, *x2@10432, *#tS@10435);
    @premise initS(*c@10433, *x1@10431, *x2@10432, *#tS@10436);
    @premise know(*#tS@10435, #t1@10437);
    @premise know(*#tS@10434, #t1@10438);
    @premise know(*#tS@10436, #t1@10439);
    @premise know(*x2@10432, #t2@10440);
    @premise know(*x1@10431, #t1@10441);
    @premise know(*c@10433, #t1@10442);
    @premise know(*x1@10431, #t0@10443);
    @premise know(*#tS@10430, #t1@10444);
    @premise initS(*x1@10431, *c@10433, *x2@10432, *#tS@10430);
    @conclusion know(*senc(tuple3(#tS@10430, x1@10431, x2@10432), sk(c@10433)), #tS@10430);
    @constraint -$pd + #tS@10434 - #t2@10440 >= 0;
    @constraint -$pd + #tS@10434 - #t1@10438 >= 0;
    @constraint -$pd + #tS@10435 - #t1@10437 >= 0;
    @constraint -$pd + #tS@10436 - #t1@10439 >= 0;
    @constraint -$pd + #tS@10430 - #t0@10443 >= 0;
    @constraint -$pd + #tS@10430 - #t1@10444 >= 0;
    @constraint -$pd + #tS@10434 - #t1@10441 >= 0;
    @constraint -$pd + #tS@10435 - #tS@10434 >= 0;
    @constraint $pa - #tS@10436 + #tS@10435 >= 0;
    @constraint -#tS@10430 + $pa + #tS@10436 >= 0;
    @constraint -$pd + #tS@10430 - #tS@10436 >= 0;
    @constraint -$pd + #tS@10434 - #t1@10442 >= 0;
    @constraint -$pd + #tS@10436 - #tS@10435 >= 0;
    @constraint $pa - #tS@10435 + #tS@10434 >= 0;
    @constraint -$pd + #tS@10436 - #t1@10442 >= 0;
    @constraint -$pd + #tS@10435 - #t1@10441 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10433 != A();
    @guard c@10433 != B();
    @premise initS(*c@10433, *x1@10431, *x2@10432, *#tS@10434);
    @premise initS(*x1@10431, *c@10433, *x2@10432, *#tS@10435);
    @premise initS(*c@10433, *x1@10431, *x2@10432, *#tS@10436);
    @premise initS(*x1@10431, *c@10433, *x2@10432, *#tS@10430);
    @premise know(*#tS@10434, #t1@10438);
    @premise know(*#tS@10435, #t1@10437);
    @premise know(*#tS@10430, #t1@10444);
    @premise know(*#tS@10436, #t1@10439);
    @premise know(*c@10433, #t1@10442);
    @premise know(*x2@10432, #t2@10440);
    @premise know(*x1@10431, #t1@10441);
    @conclusion know(*senc(tuple3(#tS@10430, x1@10431, x2@10432), sk(c@10433)), #tS@10430);
    @constraint -$pd + #tS@10434 - #t2@10440 >= 0;
    @constraint -$pd + #tS@10434 - #t1@10438 >= 0;
    @constraint -$pd + #tS@10435 - #t1@10437 >= 0;
    @constraint -$pd + #tS@10436 - #t1@10439 >= 0;
    @constraint -$pd + #tS@10430 - #t1@10444 >= 0;
    @constraint -$pd + #tS@10434 - #t1@10441 >= 0;
    @constraint -$pd + #tS@10434 - #t1@10442 >= 0;
    @constraint -$pd + #tS@10435 - #tS@10434 >= 0;
    @constraint $pa - #tS@10436 + #tS@10435 >= 0;
    @constraint -#tS@10430 + $pa + #tS@10436 >= 0;
    @constraint -$pd + #tS@10436 - #tS@10435 >= 0;
    @constraint -$pd + #tS@10430 - #tS@10436 >= 0;
    @constraint $pa - #tS@10435 + #tS@10434 >= 0;
    @constraint -$pd + #tS@10430 - #t1@10441 >= 0;
    @constraint -$pd + #tS@10435 - #t1@10441 >= 0;
    @constraint -$pd + #tS@10436 - #t1@10442 >= 0;
};

Stage rule: 
@rule{
    @guard c@10330 != A();
    @guard c@10330 != B();
    @premise new(*[k@10329], gen(), tuple3(A(), c@10330, #tA@10331));
    @premise initS(*A(), *c@10330, *[k@10329], *#tS@10332);
    @premise initA(*A(), *c@10330, *[k@10329], *#tA@10331);
    @premise know(*#tS@10332, #t1@10333);
    @premise know(*#tA@10331, #t1@10334);
    @premise know(*c@10330, #t1@10335);
    @conclusion know(*A(), #t1@10328);
    @constraint -#tS@10332 + $pa + #tA@10331 >= 0;
    @constraint #tA@10331 - #t1@10334 >= 0;
    @constraint -$pd + #tS@10332 - #t1@10333 >= 0;
    @constraint -$pd + #tS@10332 - #tA@10331 >= 0;
    @constraint #tA@10331 - #t1@10335 >= 0;
    @constraint #t1@10328 - #t1@10335 >= 0;
    @constraint #t1@10328 - #tS@10332 >= 0;
};
Rule implied by: 
@rule{
    @conclusion know(*A(), #t@10004);
};
Rule not added.

Stage rule: 
@rule{
    @guard c@10338 != A();
    @guard c@10338 != B();
    @premise new(*[k@10336], gen(), tuple3(A(), c@10338, #tA@10339));
    @premise initS(*A(), *c@10338, *[k@10336], *#tS@10340);
    @premise initA(*A(), *c@10338, *[k@10336], *#tA@10339);
    @premise know(*#tS@10340, #t1@10341);
    @premise know(*#tA@10339, #t1@10342);
    @premise know(*c@10338, #t1@10343);
    @conclusion know(*[k@10336], #t2@10337);
    @constraint -#tS@10340 + $pa + #tA@10339 >= 0;
    @constraint #tA@10339 - #t1@10342 >= 0;
    @constraint -$pd + #tS@10340 - #t1@10341 >= 0;
    @constraint -$pd + #tS@10340 - #tA@10339 >= 0;
    @constraint #tA@10339 - #t1@10343 >= 0;
    @constraint #t2@10337 - #t1@10343 >= 0;
    @constraint #t2@10337 - #tS@10340 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise new(*[k@10036], gen(), tuple3(A(), B(), #tA@10037));
    @premise know(*[k@10036], #t@10038);
    @conclusion leak(*[k@10036]);
};
Rule in cache: 4
Rule staged: 41
Rule before check and clean: 
@rule{
    @guard c@10446 != A();
    @guard c@10446 != B();
    @premise new(*[k@10445], gen(), tuple3(A(), c@10446, #tA@10447));
    @premise initS(*A(), *c@10446, *[k@10445], *#tS@10448);
    @premise initA(*A(), *c@10446, *[k@10445], *#tA@10447);
    @premise know(*#tS@10448, #t1@10449);
    @premise know(*#tA@10447, #t1@10450);
    @premise know(*c@10446, #t1@10451);
    @premise new(*[k@10445], gen(), tuple3(A(), B(), #tA@10452));
    @conclusion leak(*[k@10445]);
    @constraint -$pd + #tS@10448 - #t1@10449 >= 0;
    @constraint -$pd + #tS@10448 - #tA@10447 >= 0;
    @constraint -#tS@10448 + $pa + #tA@10447 >= 0;
    @constraint #tA@10447 - #t1@10450 >= 0;
    @constraint #tA@10447 - #t1@10451 >= 0;
    @constraint #t2@10337 - #tS@10448 >= 0;
    @constraint #t2@10337 - #t1@10451 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise new(*[k@10356], gen(), tuple3(A(), x0@10357, #tA@10358));
    @premise initS(*A(), *x0@10357, *[k@10356], *#tS@10359);
    @premise initA(*A(), *x0@10357, *[k@10356], *#tA@10358);
    @premise initS(*x0@10357, *A(), *[k@10356], *#tS@10360);
    @premise initS(*A(), *x0@10357, *[k@10356], *#tS@10355);
    @premise know(*#tS@10359, #t1@10361);
    @premise know(*#tA@10358, #t1@10362);
    @premise know(*#tS@10355, #t1@10363);
    @premise know(*#tS@10360, #t1@10364);
    @premise know(*x0@10357, #t0@10365);
    @conclusion know(*senc(tuple3(#tS@10355, A(), [k@10356]), sk(x0@10357)), #tS@10355);
    @constraint -$pd + #tS@10360 - #t0@10365 >= 0;
    @constraint #tA@10358 - #t1@10362 >= 0;
    @constraint -$pd + #tS@10359 - #t1@10361 >= 0;
    @constraint -$pd + #tS@10360 - #t1@10364 >= 0;
    @constraint -$pd + #tS@10355 - #t1@10363 >= 0;
    @constraint #tA@10358 - #t0@10365 >= 0;
    @constraint -$pd + #tS@10355 - #tS@10360 >= 0;
    @constraint -$pd + #tS@10359 - #tA@10358 >= 0;
    @constraint -$pd + #tS@10360 - #tS@10359 >= 0;
    @constraint $pa - #tS@10360 + #tS@10359 >= 0;
    @constraint -#tS@10355 + $pa + #tS@10360 >= 0;
    @constraint $pa - #tS@10359 + #tA@10358 >= 0;
};
Rule deleted: 
@rule{
    @premise new(*[k@10265], gen(), tuple3(A(), x0@10266, #tA@10267));
    @premise initS(*A(), *x0@10266, *[k@10265], *#tS@10268);
    @premise initA(*A(), *x0@10266, *[k@10265], *#tA@10267);
    @premise initS(*x0@10266, *A(), *[k@10265], *#tS@10269);
    @premise initS(*A(), *x0@10266, *[k@10265], *#tS@10264);
    @premise know(*A(), #t0@10274);
    @premise know(*#tS@10268, #t1@10272);
    @premise know(*#tA@10267, #t1@10270);
    @premise know(*#tS@10264, #t1@10275);
    @premise know(*#tS@10269, #t1@10271);
    @premise know(*x0@10266, #t0@10273);
    @conclusion know(*senc(tuple3(#tS@10264, A(), [k@10265]), sk(x0@10266)), #tS@10264);
    @constraint -$pd + #tS@10269 - #t0@10273 >= 0;
    @constraint #tA@10267 - #t1@10270 >= 0;
    @constraint -$pd + #tS@10268 - #t1@10272 >= 0;
    @constraint -$pd + #tS@10269 - #t1@10271 >= 0;
    @constraint -$pd + #tS@10264 - #t0@10274 >= 0;
    @constraint -$pd + #tS@10264 - #t1@10275 >= 0;
    @constraint #tA@10267 - #t0@10273 >= 0;
    @constraint -#tS@10264 + $pa + #tS@10269 >= 0;
    @constraint -$pd + #tS@10268 - #tA@10267 >= 0;
    @constraint -$pd + #tS@10269 - #tS@10268 >= 0;
    @constraint $pa - #tS@10269 + #tS@10268 >= 0;
    @constraint -$pd + #tS@10264 - #tS@10269 >= 0;
    @constraint $pa - #tS@10268 + #tA@10267 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*senc(m@10016, k@10017), #t1@10018);
    @premise know(*k@10017, #t2@10019);
    @conclusion know(*m@10016, #t@10020);
    @constraint -#t1@10018 + #t@10020 >= 0;
    @constraint #t@10020 - #t2@10019 >= 0;
};
Rule in cache: 3
Rule staged: 42
Rule before check and clean: 
@rule{
    @premise new(*[k@10454], gen(), tuple3(A(), x0@10456, #tA@10457));
    @premise initS(*A(), *x0@10456, *[k@10454], *#tS@10458);
    @premise initA(*A(), *x0@10456, *[k@10454], *#tA@10457);
    @premise initS(*x0@10456, *A(), *[k@10454], *#tS@10459);
    @premise initS(*A(), *x0@10456, *[k@10454], *#tS@10453);
    @premise know(*#tS@10458, #t1@10460);
    @premise know(*#tA@10457, #t1@10461);
    @premise know(*#tS@10453, #t1@10462);
    @premise know(*#tS@10459, #t1@10463);
    @premise know(*x0@10456, #t0@10464);
    @premise know(*sk(x0@10456), #t2@10465);
    @conclusion know(*tuple3(#tS@10453, A(), [k@10454]), #t@10455);
    @constraint -$pd + #tS@10459 - #t0@10464 >= 0;
    @constraint #tA@10457 - #t1@10461 >= 0;
    @constraint #t@10455 - #tS@10453 >= 0;
    @constraint -$pd + #tS@10458 - #t1@10460 >= 0;
    @constraint -$pd + #tS@10459 - #t1@10463 >= 0;
    @constraint -$pd + #tS@10453 - #t1@10462 >= 0;
    @constraint #t@10455 - #t2@10465 >= 0;
    @constraint #tA@10457 - #t0@10464 >= 0;
    @constraint -#tS@10453 + $pa + #tS@10459 >= 0;
    @constraint -$pd + #tS@10458 - #tA@10457 >= 0;
    @constraint -$pd + #tS@10459 - #tS@10458 >= 0;
    @constraint $pa - #tS@10459 + #tS@10458 >= 0;
    @constraint -$pd + #tS@10453 - #tS@10459 >= 0;
    @constraint $pa - #tS@10458 + #tA@10457 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10454], gen(), tuple3(A(), x0@10456, #tA@10457));
    @premise initS(*A(), *x0@10456, *[k@10454], *#tS@10458);
    @premise initA(*A(), *x0@10456, *[k@10454], *#tA@10457);
    @premise initS(*x0@10456, *A(), *[k@10454], *#tS@10459);
    @premise initS(*A(), *x0@10456, *[k@10454], *#tS@10453);
    @premise know(*sk(x0@10456), #t2@10465);
    @premise know(*#tA@10457, #t1@10461);
    @premise know(*#tS@10453, #t1@10462);
    @premise know(*#tS@10459, #t1@10463);
    @premise know(*#tS@10458, #t1@10460);
    @premise know(*x0@10456, #t0@10464);
    @conclusion know(*tuple3(#tS@10453, A(), [k@10454]), #t@10455);
    @constraint -$pd + #tS@10459 - #t0@10464 >= 0;
    @constraint #tA@10457 - #t1@10461 >= 0;
    @constraint #t@10455 - #tS@10453 >= 0;
    @constraint -$pd + #tS@10458 - #t1@10460 >= 0;
    @constraint -$pd + #tS@10459 - #t1@10463 >= 0;
    @constraint -$pd + #tS@10453 - #t1@10462 >= 0;
    @constraint #t@10455 - #t2@10465 >= 0;
    @constraint #tA@10457 - #t0@10464 >= 0;
    @constraint -#tS@10453 + $pa + #tS@10459 >= 0;
    @constraint -$pd + #tS@10458 - #tA@10457 >= 0;
    @constraint -$pd + #tS@10459 - #tS@10458 >= 0;
    @constraint $pa - #tS@10459 + #tS@10458 >= 0;
    @constraint -$pd + #tS@10453 - #tS@10459 >= 0;
    @constraint $pa - #tS@10458 + #tA@10457 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*senc(tuple3(#tS@10032, A(), k@10033), sk(B())), #t@10034);
    @conclusion accept(*A(), *B(), *k@10033, *#tB@10035);
    @constraint -$pd - #t@10034 + #tB@10035 >= 0;
    @constraint -#tB@10035 + $pa + #tS@10032 >= 0;
};
Rule in cache: 4
Rule staged: 42
Rule before check and clean: 
@rule{
    @premise new(*[k@10466], gen(), tuple3(A(), B(), #tA@10468));
    @premise initS(*A(), *B(), *[k@10466], *#tS@10469);
    @premise initA(*A(), *B(), *[k@10466], *#tA@10468);
    @premise initS(*B(), *A(), *[k@10466], *#tS@10470);
    @premise initS(*A(), *B(), *[k@10466], *#tS@10471);
    @premise know(*#tS@10469, #t1@10472);
    @premise know(*#tA@10468, #t1@10473);
    @premise know(*#tS@10471, #t1@10474);
    @premise know(*#tS@10470, #t1@10475);
    @premise know(*B(), #t0@10476);
    @conclusion accept(*A(), *B(), *[k@10466], *#tB@10467);
    @constraint -$pd + #tS@10470 - #t0@10476 >= 0;
    @constraint #tA@10468 - #t1@10473 >= 0;
    @constraint -$pd + #tS@10469 - #t1@10472 >= 0;
    @constraint -$pd + #tS@10470 - #t1@10475 >= 0;
    @constraint -$pd + #tS@10471 - #t1@10474 >= 0;
    @constraint #tA@10468 - #t0@10476 >= 0;
    @constraint -$pd + #tS@10469 - #tA@10468 >= 0;
    @constraint $pa - #tS@10471 + #tS@10470 >= 0;
    @constraint -$pd + #tS@10470 - #tS@10469 >= 0;
    @constraint -#tB@10467 + $pa + #tS@10471 >= 0;
    @constraint -$pd + #tS@10471 - #tS@10470 >= 0;
    @constraint $pa - #tS@10470 + #tS@10469 >= 0;
    @constraint -$pd + #tB@10467 - #tS@10471 >= 0;
    @constraint $pa - #tS@10469 + #tA@10468 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10466], gen(), tuple3(A(), B(), #tA@10468));
    @premise initS(*A(), *B(), *[k@10466], *#tS@10469);
    @premise initA(*A(), *B(), *[k@10466], *#tA@10468);
    @premise initS(*B(), *A(), *[k@10466], *#tS@10470);
    @premise initS(*A(), *B(), *[k@10466], *#tS@10471);
    @premise know(*B(), #t0@10476);
    @premise know(*#tA@10468, #t1@10473);
    @premise know(*#tS@10471, #t1@10474);
    @premise know(*#tS@10470, #t1@10475);
    @premise know(*#tS@10469, #t1@10472);
    @conclusion accept(*A(), *B(), *[k@10466], *#tB@10467);
    @constraint -$pd + #tS@10470 - #t0@10476 >= 0;
    @constraint #tA@10468 - #t1@10473 >= 0;
    @constraint -$pd + #tS@10469 - #t1@10472 >= 0;
    @constraint -$pd + #tS@10470 - #t1@10475 >= 0;
    @constraint -$pd + #tS@10471 - #t1@10474 >= 0;
    @constraint #tA@10468 - #t0@10476 >= 0;
    @constraint -$pd + #tS@10469 - #tA@10468 >= 0;
    @constraint $pa - #tS@10471 + #tS@10470 >= 0;
    @constraint -$pd + #tS@10470 - #tS@10469 >= 0;
    @constraint -#tB@10467 + $pa + #tS@10471 >= 0;
    @constraint -$pd + #tS@10471 - #tS@10470 >= 0;
    @constraint $pa - #tS@10470 + #tS@10469 >= 0;
    @constraint -$pd + #tB@10467 - #tS@10471 >= 0;
    @constraint $pa - #tS@10469 + #tA@10468 >= 0;
};

Compose to at 1 : 
@rule{
    @premise know(*x0@10087, #t0@10090);
    @premise know(*senc(tuple3(#tI@10091, R@10089, k@10088), sk(x0@10087)), #t1@10092);
    @premise know(*#tS@10086, #t1@10093);
    @premise initS(*x0@10087, *R@10089, *k@10088, *#tS@10086);
    @conclusion know(*senc(tuple3(#tS@10086, x0@10087, k@10088), sk(R@10089)), #tS@10086);
    @constraint -$pd + #tS@10086 - #t1@10093 >= 0;
    @constraint -#tS@10086 + $pa + #tI@10091 >= 0;
    @constraint -$pd + #tS@10086 - #t0@10090 >= 0;
    @constraint -$pd + #tS@10086 - #t1@10092 >= 0;
};
Rule in cache: 5
Rule staged: 42
Rule before check and clean: 
@rule{
    @premise new(*[k@10479], gen(), tuple3(A(), x0@10478, #tA@10480));
    @premise initS(*A(), *x0@10478, *[k@10479], *#tS@10481);
    @premise initA(*A(), *x0@10478, *[k@10479], *#tA@10480);
    @premise initS(*x0@10478, *A(), *[k@10479], *#tS@10482);
    @premise initS(*A(), *x0@10478, *[k@10479], *#tS@10483);
    @premise know(*#tS@10481, #t1@10484);
    @premise know(*#tA@10480, #t1@10485);
    @premise know(*#tS@10483, #t1@10486);
    @premise know(*#tS@10482, #t1@10487);
    @premise know(*x0@10478, #t0@10488);
    @premise know(*x0@10478, #t0@10489);
    @premise know(*#tS@10477, #t1@10490);
    @premise initS(*x0@10478, *A(), *[k@10479], *#tS@10477);
    @conclusion know(*senc(tuple3(#tS@10477, x0@10478, [k@10479]), sk(A())), #tS@10477);
    @constraint -$pd + #tS@10482 - #t0@10488 >= 0;
    @constraint #tA@10480 - #t1@10485 >= 0;
    @constraint -$pd + #tS@10481 - #t1@10484 >= 0;
    @constraint -$pd + #tS@10482 - #t1@10487 >= 0;
    @constraint -$pd + #tS@10483 - #t1@10486 >= 0;
    @constraint -$pd + #tS@10477 - #t0@10489 >= 0;
    @constraint -$pd + #tS@10477 - #t1@10490 >= 0;
    @constraint #tA@10480 - #t0@10488 >= 0;
    @constraint -$pd + #tS@10481 - #tA@10480 >= 0;
    @constraint $pa - #tS@10483 + #tS@10482 >= 0;
    @constraint -$pd + #tS@10482 - #tS@10481 >= 0;
    @constraint -#tS@10477 + $pa + #tS@10483 >= 0;
    @constraint -$pd + #tS@10483 - #tS@10482 >= 0;
    @constraint $pa - #tS@10482 + #tS@10481 >= 0;
    @constraint -$pd + #tS@10477 - #tS@10483 >= 0;
    @constraint $pa - #tS@10481 + #tA@10480 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10479], gen(), tuple3(A(), x0@10478, #tA@10480));
    @premise initS(*A(), *x0@10478, *[k@10479], *#tS@10481);
    @premise initA(*A(), *x0@10478, *[k@10479], *#tA@10480);
    @premise initS(*x0@10478, *A(), *[k@10479], *#tS@10482);
    @premise initS(*A(), *x0@10478, *[k@10479], *#tS@10483);
    @premise initS(*x0@10478, *A(), *[k@10479], *#tS@10477);
    @premise know(*#tS@10481, #t1@10484);
    @premise know(*#tS@10483, #t1@10486);
    @premise know(*#tS@10482, #t1@10487);
    @premise know(*#tS@10477, #t1@10490);
    @premise know(*#tA@10480, #t1@10485);
    @premise know(*x0@10478, #t0@10488);
    @conclusion know(*senc(tuple3(#tS@10477, x0@10478, [k@10479]), sk(A())), #tS@10477);
    @constraint #tA@10480 - #t1@10485 >= 0;
    @constraint -$pd + #tS@10481 - #t1@10484 >= 0;
    @constraint -$pd + #tS@10482 - #t1@10487 >= 0;
    @constraint -$pd + #tS@10483 - #t1@10486 >= 0;
    @constraint -$pd + #tS@10477 - #t1@10490 >= 0;
    @constraint #tA@10480 - #t0@10488 >= 0;
    @constraint -$pd + #tS@10482 - #tS@10481 >= 0;
    @constraint -$pd + #tS@10481 - #tA@10480 >= 0;
    @constraint $pa - #tS@10483 + #tS@10482 >= 0;
    @constraint -#tS@10477 + $pa + #tS@10483 >= 0;
    @constraint -$pd + #tS@10483 - #tS@10482 >= 0;
    @constraint -$pd + #tS@10477 - #tS@10483 >= 0;
    @constraint -$pd + #tS@10482 - #t0@10488 >= 0;
    @constraint -$pd + #tS@10477 - #t0@10488 >= 0;
    @constraint $pa - #tS@10482 + #tS@10481 >= 0;
    @constraint $pa - #tS@10481 + #tA@10480 >= 0;
};

Stage rule: 
@rule{
    @guard c@10397 != A();
    @guard c@10397 != B();
    @premise initS(*x1@10394, *c@10397, *x2@10395, *#tS@10393);
    @premise initS(*c@10397, *x1@10394, *x2@10395, *#tS@10399);
    @premise know(*#tS@10399, #t1@10400);
    @premise know(*#tS@10393, #t1@10401);
    @premise know(*c@10397, #t1@10398);
    @premise know(*x2@10395, #t2@10402);
    @premise know(*x1@10394, #t1@10403);
    @conclusion know(*tuple3(#tS@10393, x1@10394, x2@10395), #t@10396);
    @constraint -#tS@10393 + $pa + #tS@10399 >= 0;
    @constraint -$pd + #tS@10399 - #t2@10402 >= 0;
    @constraint -$pd + #tS@10399 - #t1@10400 >= 0;
    @constraint -$pd + #tS@10393 - #t1@10401 >= 0;
    @constraint -$pd + #tS@10393 - #tS@10399 >= 0;
    @constraint -$pd + #tS@10399 - #t1@10403 >= 0;
    @constraint #t@10396 - #tS@10393 >= 0;
    @constraint -$pd + #tS@10399 - #t1@10398 >= 0;
    @constraint #t@10396 - #t1@10398 >= 0;
    @constraint -$pd + #tS@10393 - #t1@10403 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@34, x1@35, x2@36), #t@37);
    @conclusion know(*x0@34, #t0@38);
    @constraint -#t@37 + #t0@38 >= 0;
};
Rule in cache: 5
Rule staged: 43
Rule before check and clean: 
@rule{
    @guard c@10494 != A();
    @guard c@10494 != B();
    @premise initS(*x1@10493, *c@10494, *x2@10495, *#tS@10491);
    @premise initS(*c@10494, *x1@10493, *x2@10495, *#tS@10496);
    @premise know(*#tS@10496, #t1@10497);
    @premise know(*#tS@10491, #t1@10498);
    @premise know(*c@10494, #t1@10499);
    @premise know(*x2@10495, #t2@10500);
    @premise know(*x1@10493, #t1@10501);
    @conclusion know(*#tS@10491, #t0@10492);
    @constraint #t0@10492 - #t@10396 >= 0;
    @constraint -#tS@10491 + $pa + #tS@10496 >= 0;
    @constraint -$pd + #tS@10496 - #t2@10500 >= 0;
    @constraint -$pd + #tS@10496 - #t1@10497 >= 0;
    @constraint -$pd + #tS@10491 - #t1@10498 >= 0;
    @constraint -$pd + #tS@10491 - #tS@10496 >= 0;
    @constraint -$pd + #tS@10496 - #t1@10501 >= 0;
    @constraint -$pd + #tS@10496 - #t1@10499 >= 0;
    @constraint #t@10396 - #tS@10491 >= 0;
    @constraint #t@10396 - #t1@10499 >= 0;
    @constraint -$pd + #tS@10491 - #t1@10501 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@39, x1@40, x2@41), #t@42);
    @conclusion know(*x1@40, #t1@43);
    @constraint -#t@42 + #t1@43 >= 0;
};
Rule in cache: 5
Rule staged: 43
Rule before check and clean: 
@rule{
    @guard c@10504 != A();
    @guard c@10504 != B();
    @premise initS(*x1@10502, *c@10504, *x2@10505, *#tS@10506);
    @premise initS(*c@10504, *x1@10502, *x2@10505, *#tS@10507);
    @premise know(*#tS@10507, #t1@10508);
    @premise know(*#tS@10506, #t1@10509);
    @premise know(*c@10504, #t1@10510);
    @premise know(*x2@10505, #t2@10511);
    @premise know(*x1@10502, #t1@10512);
    @conclusion know(*x1@10502, #t1@10503);
    @constraint #t1@10503 - #t@10396 >= 0;
    @constraint -#tS@10506 + $pa + #tS@10507 >= 0;
    @constraint -$pd + #tS@10507 - #t2@10511 >= 0;
    @constraint -$pd + #tS@10507 - #t1@10508 >= 0;
    @constraint -$pd + #tS@10506 - #t1@10509 >= 0;
    @constraint -$pd + #tS@10506 - #tS@10507 >= 0;
    @constraint -$pd + #tS@10507 - #t1@10512 >= 0;
    @constraint -$pd + #tS@10507 - #t1@10510 >= 0;
    @constraint #t@10396 - #tS@10506 >= 0;
    @constraint #t@10396 - #t1@10510 >= 0;
    @constraint -$pd + #tS@10506 - #t1@10512 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@44, x1@45, x2@46), #t@47);
    @conclusion know(*x2@46, #t2@48);
    @constraint -#t@47 + #t2@48 >= 0;
};
Rule in cache: 5
Rule staged: 43
Rule before check and clean: 
@rule{
    @guard c@10516 != A();
    @guard c@10516 != B();
    @premise initS(*x1@10515, *c@10516, *x2@10513, *#tS@10517);
    @premise initS(*c@10516, *x1@10515, *x2@10513, *#tS@10518);
    @premise know(*#tS@10518, #t1@10519);
    @premise know(*#tS@10517, #t1@10520);
    @premise know(*c@10516, #t1@10521);
    @premise know(*x2@10513, #t2@10522);
    @premise know(*x1@10515, #t1@10523);
    @conclusion know(*x2@10513, #t2@10514);
    @constraint #t2@10514 - #t@10396 >= 0;
    @constraint -#tS@10517 + $pa + #tS@10518 >= 0;
    @constraint -$pd + #tS@10518 - #t2@10522 >= 0;
    @constraint -$pd + #tS@10518 - #t1@10519 >= 0;
    @constraint -$pd + #tS@10517 - #t1@10520 >= 0;
    @constraint -$pd + #tS@10517 - #tS@10518 >= 0;
    @constraint -$pd + #tS@10518 - #t1@10523 >= 0;
    @constraint -$pd + #tS@10518 - #t1@10521 >= 0;
    @constraint #t@10396 - #tS@10517 >= 0;
    @constraint #t@10396 - #t1@10521 >= 0;
    @constraint -$pd + #tS@10517 - #t1@10523 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @guard c@10406 != A();
    @guard c@10406 != B();
    @premise know(*sk(x1@10409), #t2@10418);
    @premise initS(*x1@10409, *c@10406, *x2@10407, *#tS@10411);
    @premise initS(*c@10406, *x1@10409, *x2@10407, *#tS@10405);
    @premise initS(*c@10406, *x1@10409, *x2@10407, *#tS@10410);
    @premise know(*#tS@10410, #t1@10413);
    @premise know(*#tS@10411, #t1@10412);
    @premise know(*#tS@10405, #t1@10414);
    @premise know(*x1@10409, #t1@10416);
    @premise know(*c@10406, #t1@10417);
    @premise know(*x2@10407, #t2@10415);
    @conclusion know(*tuple3(#tS@10405, c@10406, x2@10407), #t@10408);
    @constraint #t@10408 - #tS@10405 >= 0;
    @constraint -$pd + #tS@10410 - #t2@10415 >= 0;
    @constraint -$pd + #tS@10410 - #t1@10413 >= 0;
    @constraint -$pd + #tS@10411 - #t1@10412 >= 0;
    @constraint -$pd + #tS@10405 - #t1@10414 >= 0;
    @constraint #t@10408 - #t2@10418 >= 0;
    @constraint -$pd + #tS@10411 - #tS@10410 >= 0;
    @constraint -#tS@10405 + $pa + #tS@10411 >= 0;
    @constraint -$pd + #tS@10410 - #t1@10416 >= 0;
    @constraint $pa - #tS@10411 + #tS@10410 >= 0;
    @constraint -$pd + #tS@10405 - #tS@10411 >= 0;
    @constraint -$pd + #tS@10410 - #t1@10417 >= 0;
    @constraint -$pd + #tS@10405 - #t1@10417 >= 0;
    @constraint -$pd + #tS@10411 - #t1@10416 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @guard c@10007 != A();
    @guard c@10007 != B();
    @premise know(*c@10007, #t1@10008);
    @conclusion know(*sk(c@10007), #t@10009);
    @constraint -#t1@10008 + #t@10009 >= 0;
};
Rule in cache: 4
Rule staged: 44
Rule before check and clean: 
@rule{
    @guard c@10528 != A();
    @guard c@10528 != B();
    @guard c@10525 != A();
    @guard c@10525 != B();
    @premise know(*c@10528, #t1@10529);
    @premise initS(*c@10528, *c@10525, *x2@10526, *#tS@10530);
    @premise initS(*c@10525, *c@10528, *x2@10526, *#tS@10524);
    @premise initS(*c@10525, *c@10528, *x2@10526, *#tS@10531);
    @premise know(*#tS@10531, #t1@10532);
    @premise know(*#tS@10530, #t1@10533);
    @premise know(*#tS@10524, #t1@10534);
    @premise know(*c@10528, #t1@10535);
    @premise know(*c@10525, #t1@10536);
    @premise know(*x2@10526, #t2@10537);
    @conclusion know(*tuple3(#tS@10524, c@10525, x2@10526), #t@10527);
    @constraint -$pd + #tS@10524 - #t1@10534 >= 0;
    @constraint #t@10527 - #tS@10524 >= 0;
    @constraint -#t1@10529 + #t@10009 >= 0;
    @constraint #t@10527 - #t@10009 >= 0;
    @constraint -$pd + #tS@10531 - #t2@10537 >= 0;
    @constraint -$pd + #tS@10531 - #t1@10532 >= 0;
    @constraint -$pd + #tS@10530 - #t1@10533 >= 0;
    @constraint -$pd + #tS@10531 - #t1@10535 >= 0;
    @constraint -$pd + #tS@10531 - #t1@10536 >= 0;
    @constraint -#tS@10524 + $pa + #tS@10530 >= 0;
    @constraint -$pd + #tS@10530 - #tS@10531 >= 0;
    @constraint $pa - #tS@10530 + #tS@10531 >= 0;
    @constraint -$pd + #tS@10524 - #tS@10530 >= 0;
    @constraint -$pd + #tS@10524 - #t1@10536 >= 0;
    @constraint -$pd + #tS@10530 - #t1@10535 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10528 != A();
    @guard c@10528 != B();
    @guard c@10525 != A();
    @guard c@10525 != B();
    @premise initS(*c@10528, *c@10525, *x2@10526, *#tS@10530);
    @premise initS(*c@10525, *c@10528, *x2@10526, *#tS@10524);
    @premise initS(*c@10525, *c@10528, *x2@10526, *#tS@10531);
    @premise know(*#tS@10531, #t1@10532);
    @premise know(*#tS@10524, #t1@10534);
    @premise know(*#tS@10530, #t1@10533);
    @premise know(*c@10528, #t1@10529);
    @premise know(*c@10525, #t1@10536);
    @premise know(*x2@10526, #t2@10537);
    @conclusion know(*tuple3(#tS@10524, c@10525, x2@10526), #t@10527);
    @constraint -$pd + #tS@10531 - #t2@10537 >= 0;
    @constraint -$pd + #tS@10531 - #t1@10532 >= 0;
    @constraint -$pd + #tS@10530 - #t1@10533 >= 0;
    @constraint -$pd + #tS@10524 - #t1@10534 >= 0;
    @constraint -$pd + #tS@10531 - #t1@10536 >= 0;
    @constraint -#tS@10524 + $pa + #tS@10530 >= 0;
    @constraint -$pd + #tS@10530 - #tS@10531 >= 0;
    @constraint #t@10527 - #tS@10524 >= 0;
    @constraint -$pd + #tS@10531 - #t1@10529 >= 0;
    @constraint $pa - #tS@10530 + #tS@10531 >= 0;
    @constraint -$pd + #tS@10524 - #tS@10530 >= 0;
    @constraint -$pd + #tS@10530 - #t1@10529 >= 0;
    @constraint -$pd + #tS@10524 - #t1@10536 >= 0;
    @constraint #t@10527 - #t1@10529 >= 0;
};

Stage rule: 
@rule{
    @guard c@10433 != A();
    @guard c@10433 != B();
    @premise initS(*c@10433, *x1@10431, *x2@10432, *#tS@10434);
    @premise initS(*x1@10431, *c@10433, *x2@10432, *#tS@10435);
    @premise initS(*c@10433, *x1@10431, *x2@10432, *#tS@10436);
    @premise initS(*x1@10431, *c@10433, *x2@10432, *#tS@10430);
    @premise know(*#tS@10434, #t1@10438);
    @premise know(*#tS@10435, #t1@10437);
    @premise know(*#tS@10430, #t1@10444);
    @premise know(*#tS@10436, #t1@10439);
    @premise know(*c@10433, #t1@10442);
    @premise know(*x2@10432, #t2@10440);
    @premise know(*x1@10431, #t1@10441);
    @conclusion know(*senc(tuple3(#tS@10430, x1@10431, x2@10432), sk(c@10433)), #tS@10430);
    @constraint -$pd + #tS@10434 - #t2@10440 >= 0;
    @constraint -$pd + #tS@10434 - #t1@10438 >= 0;
    @constraint -$pd + #tS@10435 - #t1@10437 >= 0;
    @constraint -$pd + #tS@10436 - #t1@10439 >= 0;
    @constraint -$pd + #tS@10430 - #t1@10444 >= 0;
    @constraint -$pd + #tS@10434 - #t1@10441 >= 0;
    @constraint -$pd + #tS@10434 - #t1@10442 >= 0;
    @constraint -$pd + #tS@10435 - #tS@10434 >= 0;
    @constraint $pa - #tS@10436 + #tS@10435 >= 0;
    @constraint -#tS@10430 + $pa + #tS@10436 >= 0;
    @constraint -$pd + #tS@10436 - #tS@10435 >= 0;
    @constraint -$pd + #tS@10430 - #tS@10436 >= 0;
    @constraint $pa - #tS@10435 + #tS@10434 >= 0;
    @constraint -$pd + #tS@10430 - #t1@10441 >= 0;
    @constraint -$pd + #tS@10435 - #t1@10441 >= 0;
    @constraint -$pd + #tS@10436 - #t1@10442 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*senc(m@10016, k@10017), #t1@10018);
    @premise know(*k@10017, #t2@10019);
    @conclusion know(*m@10016, #t@10020);
    @constraint -#t1@10018 + #t@10020 >= 0;
    @constraint #t@10020 - #t2@10019 >= 0;
};
Rule in cache: 4
Rule staged: 45
Rule before check and clean: 
@rule{
    @guard c@10542 != A();
    @guard c@10542 != B();
    @premise initS(*c@10542, *x1@10539, *x2@10540, *#tS@10543);
    @premise initS(*x1@10539, *c@10542, *x2@10540, *#tS@10544);
    @premise initS(*c@10542, *x1@10539, *x2@10540, *#tS@10545);
    @premise initS(*x1@10539, *c@10542, *x2@10540, *#tS@10538);
    @premise know(*#tS@10543, #t1@10546);
    @premise know(*#tS@10544, #t1@10547);
    @premise know(*#tS@10538, #t1@10548);
    @premise know(*#tS@10545, #t1@10549);
    @premise know(*c@10542, #t1@10550);
    @premise know(*x2@10540, #t2@10551);
    @premise know(*x1@10539, #t1@10552);
    @premise know(*sk(c@10542), #t2@10553);
    @conclusion know(*tuple3(#tS@10538, x1@10539, x2@10540), #t@10541);
    @constraint #t@10541 - #tS@10538 >= 0;
    @constraint -$pd + #tS@10543 - #t2@10551 >= 0;
    @constraint -$pd + #tS@10543 - #t1@10546 >= 0;
    @constraint -$pd + #tS@10544 - #t1@10547 >= 0;
    @constraint -$pd + #tS@10545 - #t1@10549 >= 0;
    @constraint -$pd + #tS@10538 - #t1@10548 >= 0;
    @constraint #t@10541 - #t2@10553 >= 0;
    @constraint $pa - #tS@10545 + #tS@10544 >= 0;
    @constraint -$pd + #tS@10543 - #t1@10552 >= 0;
    @constraint -$pd + #tS@10543 - #t1@10550 >= 0;
    @constraint -$pd + #tS@10544 - #tS@10543 >= 0;
    @constraint -#tS@10538 + $pa + #tS@10545 >= 0;
    @constraint $pa - #tS@10544 + #tS@10543 >= 0;
    @constraint -$pd + #tS@10538 - #tS@10545 >= 0;
    @constraint -$pd + #tS@10545 - #tS@10544 >= 0;
    @constraint -$pd + #tS@10544 - #t1@10552 >= 0;
    @constraint -$pd + #tS@10538 - #t1@10552 >= 0;
    @constraint -$pd + #tS@10545 - #t1@10550 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10542 != A();
    @guard c@10542 != B();
    @premise know(*sk(c@10542), #t2@10553);
    @premise initS(*x1@10539, *c@10542, *x2@10540, *#tS@10544);
    @premise initS(*c@10542, *x1@10539, *x2@10540, *#tS@10545);
    @premise initS(*x1@10539, *c@10542, *x2@10540, *#tS@10538);
    @premise initS(*c@10542, *x1@10539, *x2@10540, *#tS@10543);
    @premise know(*#tS@10544, #t1@10547);
    @premise know(*#tS@10543, #t1@10546);
    @premise know(*#tS@10545, #t1@10549);
    @premise know(*#tS@10538, #t1@10548);
    @premise know(*c@10542, #t1@10550);
    @premise know(*x2@10540, #t2@10551);
    @premise know(*x1@10539, #t1@10552);
    @conclusion know(*tuple3(#tS@10538, x1@10539, x2@10540), #t@10541);
    @constraint #t@10541 - #tS@10538 >= 0;
    @constraint -$pd + #tS@10543 - #t2@10551 >= 0;
    @constraint -$pd + #tS@10543 - #t1@10546 >= 0;
    @constraint -$pd + #tS@10544 - #t1@10547 >= 0;
    @constraint -$pd + #tS@10545 - #t1@10549 >= 0;
    @constraint -$pd + #tS@10538 - #t1@10548 >= 0;
    @constraint #t@10541 - #t2@10553 >= 0;
    @constraint $pa - #tS@10545 + #tS@10544 >= 0;
    @constraint -$pd + #tS@10543 - #t1@10552 >= 0;
    @constraint -$pd + #tS@10543 - #t1@10550 >= 0;
    @constraint -$pd + #tS@10544 - #tS@10543 >= 0;
    @constraint -#tS@10538 + $pa + #tS@10545 >= 0;
    @constraint $pa - #tS@10544 + #tS@10543 >= 0;
    @constraint -$pd + #tS@10538 - #tS@10545 >= 0;
    @constraint -$pd + #tS@10545 - #tS@10544 >= 0;
    @constraint -$pd + #tS@10544 - #t1@10552 >= 0;
    @constraint -$pd + #tS@10538 - #t1@10552 >= 0;
    @constraint -$pd + #tS@10545 - #t1@10550 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*senc(tuple3(#tS@10032, A(), k@10033), sk(B())), #t@10034);
    @conclusion accept(*A(), *B(), *k@10033, *#tB@10035);
    @constraint -$pd - #t@10034 + #tB@10035 >= 0;
    @constraint -#tB@10035 + $pa + #tS@10032 >= 0;
};
Rule in cache: 5
Rule staged: 45
Rule before check and clean: 
@rule{
    @guard B() != A();
    @guard B() != B();
    @premise initS(*B(), *A(), *x2@10554, *#tS@10556);
    @premise initS(*A(), *B(), *x2@10554, *#tS@10557);
    @premise initS(*B(), *A(), *x2@10554, *#tS@10558);
    @premise initS(*A(), *B(), *x2@10554, *#tS@10559);
    @premise know(*#tS@10556, #t1@10560);
    @premise know(*#tS@10557, #t1@10561);
    @premise know(*#tS@10559, #t1@10562);
    @premise know(*#tS@10558, #t1@10563);
    @premise know(*B(), #t1@10564);
    @premise know(*x2@10554, #t2@10565);
    @premise know(*A(), #t1@10566);
    @conclusion accept(*A(), *B(), *x2@10554, *#tB@10555);
    @constraint -$pd + #tS@10556 - #t2@10565 >= 0;
    @constraint -$pd + #tS@10556 - #t1@10560 >= 0;
    @constraint -$pd + #tS@10557 - #t1@10561 >= 0;
    @constraint -$pd + #tS@10558 - #t1@10563 >= 0;
    @constraint -$pd + #tS@10559 - #t1@10562 >= 0;
    @constraint -$pd + #tS@10556 - #t1@10566 >= 0;
    @constraint -$pd + #tS@10557 - #tS@10556 >= 0;
    @constraint -$pd + #tS@10556 - #t1@10564 >= 0;
    @constraint -$pd + #tS@10558 - #tS@10557 >= 0;
    @constraint $pa - #tS@10558 + #tS@10557 >= 0;
    @constraint $pa - #tS@10559 + #tS@10558 >= 0;
    @constraint -#tB@10555 + $pa + #tS@10559 >= 0;
    @constraint -$pd + #tS@10559 - #tS@10558 >= 0;
    @constraint -$pd + #tB@10555 - #tS@10559 >= 0;
    @constraint $pa - #tS@10557 + #tS@10556 >= 0;
    @constraint -$pd + #tS@10558 - #t1@10564 >= 0;
    @constraint -$pd + #tS@10559 - #t1@10566 >= 0;
    @constraint -$pd + #tS@10557 - #t1@10566 >= 0;
};
Rule invalid. 

Compose to at 1 : 
@rule{
    @premise know(*x0@10087, #t0@10090);
    @premise know(*senc(tuple3(#tI@10091, R@10089, k@10088), sk(x0@10087)), #t1@10092);
    @premise know(*#tS@10086, #t1@10093);
    @premise initS(*x0@10087, *R@10089, *k@10088, *#tS@10086);
    @conclusion know(*senc(tuple3(#tS@10086, x0@10087, k@10088), sk(R@10089)), #tS@10086);
    @constraint -$pd + #tS@10086 - #t1@10093 >= 0;
    @constraint -#tS@10086 + $pa + #tI@10091 >= 0;
    @constraint -$pd + #tS@10086 - #t0@10090 >= 0;
    @constraint -$pd + #tS@10086 - #t1@10092 >= 0;
};
Rule in cache: 5
Rule staged: 45
Rule before check and clean: 
@rule{
    @guard c@10568 != A();
    @guard c@10568 != B();
    @premise initS(*c@10568, *x1@10570, *x2@10569, *#tS@10571);
    @premise initS(*x1@10570, *c@10568, *x2@10569, *#tS@10572);
    @premise initS(*c@10568, *x1@10570, *x2@10569, *#tS@10573);
    @premise initS(*x1@10570, *c@10568, *x2@10569, *#tS@10574);
    @premise know(*#tS@10571, #t1@10575);
    @premise know(*#tS@10572, #t1@10576);
    @premise know(*#tS@10574, #t1@10577);
    @premise know(*#tS@10573, #t1@10578);
    @premise know(*c@10568, #t1@10579);
    @premise know(*x2@10569, #t2@10580);
    @premise know(*x1@10570, #t1@10581);
    @premise know(*c@10568, #t0@10582);
    @premise know(*#tS@10567, #t1@10583);
    @premise initS(*c@10568, *x1@10570, *x2@10569, *#tS@10567);
    @conclusion know(*senc(tuple3(#tS@10567, c@10568, x2@10569), sk(x1@10570)), #tS@10567);
    @constraint -$pd + #tS@10571 - #t2@10580 >= 0;
    @constraint -$pd + #tS@10571 - #t1@10575 >= 0;
    @constraint -$pd + #tS@10572 - #t1@10576 >= 0;
    @constraint -$pd + #tS@10573 - #t1@10578 >= 0;
    @constraint -$pd + #tS@10574 - #t1@10577 >= 0;
    @constraint -$pd + #tS@10567 - #t0@10582 >= 0;
    @constraint -$pd + #tS@10567 - #t1@10583 >= 0;
    @constraint -$pd + #tS@10571 - #t1@10581 >= 0;
    @constraint -$pd + #tS@10572 - #tS@10571 >= 0;
    @constraint -$pd + #tS@10571 - #t1@10579 >= 0;
    @constraint -$pd + #tS@10573 - #tS@10572 >= 0;
    @constraint $pa - #tS@10573 + #tS@10572 >= 0;
    @constraint $pa - #tS@10574 + #tS@10573 >= 0;
    @constraint -#tS@10567 + $pa + #tS@10574 >= 0;
    @constraint -$pd + #tS@10574 - #tS@10573 >= 0;
    @constraint -$pd + #tS@10567 - #tS@10574 >= 0;
    @constraint $pa - #tS@10572 + #tS@10571 >= 0;
    @constraint -$pd + #tS@10573 - #t1@10579 >= 0;
    @constraint -$pd + #tS@10574 - #t1@10581 >= 0;
    @constraint -$pd + #tS@10572 - #t1@10581 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10568 != A();
    @guard c@10568 != B();
    @premise initS(*c@10568, *x1@10570, *x2@10569, *#tS@10571);
    @premise initS(*x1@10570, *c@10568, *x2@10569, *#tS@10572);
    @premise initS(*c@10568, *x1@10570, *x2@10569, *#tS@10573);
    @premise initS(*x1@10570, *c@10568, *x2@10569, *#tS@10574);
    @premise initS(*c@10568, *x1@10570, *x2@10569, *#tS@10567);
    @premise know(*#tS@10572, #t1@10576);
    @premise know(*#tS@10571, #t1@10575);
    @premise know(*#tS@10573, #t1@10578);
    @premise know(*#tS@10567, #t1@10583);
    @premise know(*#tS@10574, #t1@10577);
    @premise know(*x1@10570, #t1@10581);
    @premise know(*c@10568, #t1@10579);
    @premise know(*x2@10569, #t2@10580);
    @conclusion know(*senc(tuple3(#tS@10567, c@10568, x2@10569), sk(x1@10570)), #tS@10567);
    @constraint -$pd + #tS@10571 - #t2@10580 >= 0;
    @constraint -$pd + #tS@10571 - #t1@10575 >= 0;
    @constraint -$pd + #tS@10572 - #t1@10576 >= 0;
    @constraint -$pd + #tS@10573 - #t1@10578 >= 0;
    @constraint -$pd + #tS@10574 - #t1@10577 >= 0;
    @constraint -$pd + #tS@10567 - #t1@10583 >= 0;
    @constraint -$pd + #tS@10572 - #tS@10571 >= 0;
    @constraint -$pd + #tS@10571 - #t1@10581 >= 0;
    @constraint -$pd + #tS@10571 - #t1@10579 >= 0;
    @constraint $pa - #tS@10573 + #tS@10572 >= 0;
    @constraint -$pd + #tS@10574 - #tS@10573 >= 0;
    @constraint -$pd + #tS@10573 - #tS@10572 >= 0;
    @constraint $pa - #tS@10574 + #tS@10573 >= 0;
    @constraint $pa - #tS@10572 + #tS@10571 >= 0;
    @constraint -#tS@10567 + $pa + #tS@10574 >= 0;
    @constraint -$pd + #tS@10567 - #tS@10574 >= 0;
    @constraint -$pd + #tS@10573 - #t1@10579 >= 0;
    @constraint -$pd + #tS@10574 - #t1@10581 >= 0;
    @constraint -$pd + #tS@10567 - #t1@10579 >= 0;
    @constraint -$pd + #tS@10572 - #t1@10581 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[k@10454], gen(), tuple3(A(), x0@10456, #tA@10457));
    @premise initS(*A(), *x0@10456, *[k@10454], *#tS@10458);
    @premise initA(*A(), *x0@10456, *[k@10454], *#tA@10457);
    @premise initS(*x0@10456, *A(), *[k@10454], *#tS@10459);
    @premise initS(*A(), *x0@10456, *[k@10454], *#tS@10453);
    @premise know(*sk(x0@10456), #t2@10465);
    @premise know(*#tA@10457, #t1@10461);
    @premise know(*#tS@10453, #t1@10462);
    @premise know(*#tS@10459, #t1@10463);
    @premise know(*#tS@10458, #t1@10460);
    @premise know(*x0@10456, #t0@10464);
    @conclusion know(*tuple3(#tS@10453, A(), [k@10454]), #t@10455);
    @constraint -$pd + #tS@10459 - #t0@10464 >= 0;
    @constraint #tA@10457 - #t1@10461 >= 0;
    @constraint #t@10455 - #tS@10453 >= 0;
    @constraint -$pd + #tS@10458 - #t1@10460 >= 0;
    @constraint -$pd + #tS@10459 - #t1@10463 >= 0;
    @constraint -$pd + #tS@10453 - #t1@10462 >= 0;
    @constraint #t@10455 - #t2@10465 >= 0;
    @constraint #tA@10457 - #t0@10464 >= 0;
    @constraint -#tS@10453 + $pa + #tS@10459 >= 0;
    @constraint -$pd + #tS@10458 - #tA@10457 >= 0;
    @constraint -$pd + #tS@10459 - #tS@10458 >= 0;
    @constraint $pa - #tS@10459 + #tS@10458 >= 0;
    @constraint -$pd + #tS@10453 - #tS@10459 >= 0;
    @constraint $pa - #tS@10458 + #tA@10457 >= 0;
};
Rule added at 5.

Compose by at 5 : 
@rule{
    @guard c@10007 != A();
    @guard c@10007 != B();
    @premise know(*c@10007, #t1@10008);
    @conclusion know(*sk(c@10007), #t@10009);
    @constraint -#t1@10008 + #t@10009 >= 0;
};
Rule in cache: 5
Rule staged: 46
Rule before check and clean: 
@rule{
    @guard c@10587 != A();
    @guard c@10587 != B();
    @premise know(*c@10587, #t1@10588);
    @premise new(*[k@10585], gen(), tuple3(A(), c@10587, #tA@10589));
    @premise initS(*A(), *c@10587, *[k@10585], *#tS@10590);
    @premise initA(*A(), *c@10587, *[k@10585], *#tA@10589);
    @premise initS(*c@10587, *A(), *[k@10585], *#tS@10591);
    @premise initS(*A(), *c@10587, *[k@10585], *#tS@10584);
    @premise know(*#tA@10589, #t1@10592);
    @premise know(*#tS@10584, #t1@10593);
    @premise know(*#tS@10591, #t1@10594);
    @premise know(*#tS@10590, #t1@10595);
    @premise know(*c@10587, #t0@10596);
    @conclusion know(*tuple3(#tS@10584, A(), [k@10585]), #t@10586);
    @constraint -$pd + #tS@10591 - #t0@10596 >= 0;
    @constraint #t@10586 - #tS@10584 >= 0;
    @constraint -#t1@10588 + #t@10009 >= 0;
    @constraint #t@10586 - #t@10009 >= 0;
    @constraint #tA@10589 - #t1@10592 >= 0;
    @constraint -$pd + #tS@10590 - #t1@10595 >= 0;
    @constraint -$pd + #tS@10591 - #t1@10594 >= 0;
    @constraint -$pd + #tS@10584 - #t1@10593 >= 0;
    @constraint #tA@10589 - #t0@10596 >= 0;
    @constraint -#tS@10584 + $pa + #tS@10591 >= 0;
    @constraint -$pd + #tS@10590 - #tA@10589 >= 0;
    @constraint -$pd + #tS@10591 - #tS@10590 >= 0;
    @constraint $pa - #tS@10591 + #tS@10590 >= 0;
    @constraint -$pd + #tS@10584 - #tS@10591 >= 0;
    @constraint $pa - #tS@10590 + #tA@10589 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10587 != A();
    @guard c@10587 != B();
    @premise new(*[k@10585], gen(), tuple3(A(), c@10587, #tA@10589));
    @premise initS(*A(), *c@10587, *[k@10585], *#tS@10584);
    @premise initS(*A(), *c@10587, *[k@10585], *#tS@10590);
    @premise initA(*A(), *c@10587, *[k@10585], *#tA@10589);
    @premise initS(*c@10587, *A(), *[k@10585], *#tS@10591);
    @premise know(*#tS@10590, #t1@10595);
    @premise know(*#tA@10589, #t1@10592);
    @premise know(*#tS@10584, #t1@10593);
    @premise know(*#tS@10591, #t1@10594);
    @premise know(*c@10587, #t1@10588);
    @conclusion know(*tuple3(#tS@10584, A(), [k@10585]), #t@10586);
    @constraint #tA@10589 - #t1@10592 >= 0;
    @constraint -$pd + #tS@10590 - #t1@10595 >= 0;
    @constraint -$pd + #tS@10591 - #t1@10594 >= 0;
    @constraint -$pd + #tS@10584 - #t1@10593 >= 0;
    @constraint #tA@10589 - #t1@10588 >= 0;
    @constraint -$pd + #tS@10591 - #tS@10590 >= 0;
    @constraint -$pd + #tS@10590 - #tA@10589 >= 0;
    @constraint -#tS@10584 + $pa + #tS@10591 >= 0;
    @constraint #t@10586 - #tS@10584 >= 0;
    @constraint $pa - #tS@10591 + #tS@10590 >= 0;
    @constraint $pa - #tS@10590 + #tA@10589 >= 0;
    @constraint -$pd + #tS@10584 - #tS@10591 >= 0;
    @constraint #t@10586 - #t1@10588 >= 0;
    @constraint -$pd + #tS@10591 - #t1@10588 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[k@10466], gen(), tuple3(A(), B(), #tA@10468));
    @premise initS(*A(), *B(), *[k@10466], *#tS@10469);
    @premise initA(*A(), *B(), *[k@10466], *#tA@10468);
    @premise initS(*B(), *A(), *[k@10466], *#tS@10470);
    @premise initS(*A(), *B(), *[k@10466], *#tS@10471);
    @premise know(*B(), #t0@10476);
    @premise know(*#tA@10468, #t1@10473);
    @premise know(*#tS@10471, #t1@10474);
    @premise know(*#tS@10470, #t1@10475);
    @premise know(*#tS@10469, #t1@10472);
    @conclusion accept(*A(), *B(), *[k@10466], *#tB@10467);
    @constraint -$pd + #tS@10470 - #t0@10476 >= 0;
    @constraint #tA@10468 - #t1@10473 >= 0;
    @constraint -$pd + #tS@10469 - #t1@10472 >= 0;
    @constraint -$pd + #tS@10470 - #t1@10475 >= 0;
    @constraint -$pd + #tS@10471 - #t1@10474 >= 0;
    @constraint #tA@10468 - #t0@10476 >= 0;
    @constraint -$pd + #tS@10469 - #tA@10468 >= 0;
    @constraint $pa - #tS@10471 + #tS@10470 >= 0;
    @constraint -$pd + #tS@10470 - #tS@10469 >= 0;
    @constraint -#tB@10467 + $pa + #tS@10471 >= 0;
    @constraint -$pd + #tS@10471 - #tS@10470 >= 0;
    @constraint $pa - #tS@10470 + #tS@10469 >= 0;
    @constraint -$pd + #tB@10467 - #tS@10471 >= 0;
    @constraint $pa - #tS@10469 + #tA@10468 >= 0;
};
Rule added at 5.

Compose by at 5 : 
@rule{
    @conclusion know(*B(), #t@10005);
};
Rule in cache: 5
Rule staged: 47
Rule before check and clean: 
@rule{
    @premise new(*[k@10597], gen(), tuple3(A(), B(), #tA@10599));
    @premise initS(*A(), *B(), *[k@10597], *#tS@10600);
    @premise initA(*A(), *B(), *[k@10597], *#tA@10599);
    @premise initS(*B(), *A(), *[k@10597], *#tS@10601);
    @premise initS(*A(), *B(), *[k@10597], *#tS@10602);
    @premise know(*#tA@10599, #t1@10603);
    @premise know(*#tS@10602, #t1@10604);
    @premise know(*#tS@10601, #t1@10605);
    @premise know(*#tS@10600, #t1@10606);
    @conclusion accept(*A(), *B(), *[k@10597], *#tB@10598);
    @constraint -$pd + #tS@10600 - #t1@10606 >= 0;
    @constraint -$pd + #tS@10600 - #tA@10599 >= 0;
    @constraint -$pd + #tS@10601 - #t1@10605 >= 0;
    @constraint -$pd + #tS@10601 - #tS@10600 >= 0;
    @constraint -$pd + #tS@10601 - #t@10005 >= 0;
    @constraint -$pd + #tS@10602 - #t1@10604 >= 0;
    @constraint -$pd + #tS@10602 - #tS@10601 >= 0;
    @constraint -$pd + #tB@10598 - #tS@10602 >= 0;
    @constraint -#tB@10598 + $pa + #tS@10602 >= 0;
    @constraint #tA@10599 - #t@10005 >= 0;
    @constraint #tA@10599 - #t1@10603 >= 0;
    @constraint $pa - #tS@10602 + #tS@10601 >= 0;
    @constraint $pa - #tS@10601 + #tS@10600 >= 0;
    @constraint $pa - #tS@10600 + #tA@10599 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10597], gen(), tuple3(A(), B(), #tA@10599));
    @premise initS(*A(), *B(), *[k@10597], *#tS@10600);
    @premise initA(*A(), *B(), *[k@10597], *#tA@10599);
    @premise initS(*B(), *A(), *[k@10597], *#tS@10601);
    @premise initS(*A(), *B(), *[k@10597], *#tS@10602);
    @premise know(*#tA@10599, #t1@10603);
    @premise know(*#tS@10602, #t1@10604);
    @premise know(*#tS@10601, #t1@10605);
    @premise know(*#tS@10600, #t1@10606);
    @conclusion accept(*A(), *B(), *[k@10597], *#tB@10598);
    @constraint -$pd + #tS@10602 - #t1@10604 >= 0;
    @constraint #tA@10599 - #t1@10603 >= 0;
    @constraint -$pd + #tS@10600 - #t1@10606 >= 0;
    @constraint -$pd + #tS@10601 - #t1@10605 >= 0;
    @constraint $pa - #tS@10600 + #tA@10599 >= 0;
    @constraint -$pd + #tS@10600 - #tA@10599 >= 0;
    @constraint -#tB@10598 + $pa + #tS@10602 >= 0;
    @constraint -$pd + #tS@10601 - #tS@10600 >= 0;
    @constraint -$pd + #tS@10602 - #tS@10601 >= 0;
    @constraint -$pd + #tB@10598 - #tS@10602 >= 0;
    @constraint $pa - #tS@10601 + #tS@10600 >= 0;
    @constraint $pa - #tS@10602 + #tS@10601 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[k@10479], gen(), tuple3(A(), x0@10478, #tA@10480));
    @premise initS(*A(), *x0@10478, *[k@10479], *#tS@10481);
    @premise initA(*A(), *x0@10478, *[k@10479], *#tA@10480);
    @premise initS(*x0@10478, *A(), *[k@10479], *#tS@10482);
    @premise initS(*A(), *x0@10478, *[k@10479], *#tS@10483);
    @premise initS(*x0@10478, *A(), *[k@10479], *#tS@10477);
    @premise know(*#tS@10481, #t1@10484);
    @premise know(*#tS@10483, #t1@10486);
    @premise know(*#tS@10482, #t1@10487);
    @premise know(*#tS@10477, #t1@10490);
    @premise know(*#tA@10480, #t1@10485);
    @premise know(*x0@10478, #t0@10488);
    @conclusion know(*senc(tuple3(#tS@10477, x0@10478, [k@10479]), sk(A())), #tS@10477);
    @constraint #tA@10480 - #t1@10485 >= 0;
    @constraint -$pd + #tS@10481 - #t1@10484 >= 0;
    @constraint -$pd + #tS@10482 - #t1@10487 >= 0;
    @constraint -$pd + #tS@10483 - #t1@10486 >= 0;
    @constraint -$pd + #tS@10477 - #t1@10490 >= 0;
    @constraint #tA@10480 - #t0@10488 >= 0;
    @constraint -$pd + #tS@10482 - #tS@10481 >= 0;
    @constraint -$pd + #tS@10481 - #tA@10480 >= 0;
    @constraint $pa - #tS@10483 + #tS@10482 >= 0;
    @constraint -#tS@10477 + $pa + #tS@10483 >= 0;
    @constraint -$pd + #tS@10483 - #tS@10482 >= 0;
    @constraint -$pd + #tS@10477 - #tS@10483 >= 0;
    @constraint -$pd + #tS@10482 - #t0@10488 >= 0;
    @constraint -$pd + #tS@10477 - #t0@10488 >= 0;
    @constraint $pa - #tS@10482 + #tS@10481 >= 0;
    @constraint $pa - #tS@10481 + #tA@10480 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*senc(m@10016, k@10017), #t1@10018);
    @premise know(*k@10017, #t2@10019);
    @conclusion know(*m@10016, #t@10020);
    @constraint -#t1@10018 + #t@10020 >= 0;
    @constraint #t@10020 - #t2@10019 >= 0;
};
Rule in cache: 5
Rule staged: 48
Rule before check and clean: 
@rule{
    @premise new(*[k@10609], gen(), tuple3(A(), x0@10608, #tA@10611));
    @premise initS(*A(), *x0@10608, *[k@10609], *#tS@10612);
    @premise initA(*A(), *x0@10608, *[k@10609], *#tA@10611);
    @premise initS(*x0@10608, *A(), *[k@10609], *#tS@10613);
    @premise initS(*A(), *x0@10608, *[k@10609], *#tS@10614);
    @premise initS(*x0@10608, *A(), *[k@10609], *#tS@10607);
    @premise know(*#tS@10612, #t1@10615);
    @premise know(*#tS@10614, #t1@10616);
    @premise know(*#tS@10613, #t1@10617);
    @premise know(*#tS@10607, #t1@10618);
    @premise know(*#tA@10611, #t1@10619);
    @premise know(*x0@10608, #t0@10620);
    @premise know(*sk(A()), #t2@10621);
    @conclusion know(*tuple3(#tS@10607, x0@10608, [k@10609]), #t@10610);
    @constraint #tA@10611 - #t1@10619 >= 0;
    @constraint #t@10610 - #tS@10607 >= 0;
    @constraint -$pd + #tS@10612 - #t1@10615 >= 0;
    @constraint -$pd + #tS@10613 - #t1@10617 >= 0;
    @constraint -$pd + #tS@10614 - #t1@10616 >= 0;
    @constraint -$pd + #tS@10607 - #t1@10618 >= 0;
    @constraint #t@10610 - #t2@10621 >= 0;
    @constraint #tA@10611 - #t0@10620 >= 0;
    @constraint -$pd + #tS@10613 - #tS@10612 >= 0;
    @constraint -$pd + #tS@10612 - #tA@10611 >= 0;
    @constraint $pa - #tS@10614 + #tS@10613 >= 0;
    @constraint -#tS@10607 + $pa + #tS@10614 >= 0;
    @constraint -$pd + #tS@10614 - #tS@10613 >= 0;
    @constraint -$pd + #tS@10607 - #tS@10614 >= 0;
    @constraint -$pd + #tS@10613 - #t0@10620 >= 0;
    @constraint -$pd + #tS@10607 - #t0@10620 >= 0;
    @constraint $pa - #tS@10612 + #tA@10611 >= 0;
    @constraint $pa - #tS@10613 + #tS@10612 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10609], gen(), tuple3(A(), x0@10608, #tA@10611));
    @premise know(*sk(A()), #t2@10621);
    @premise initA(*A(), *x0@10608, *[k@10609], *#tA@10611);
    @premise initS(*x0@10608, *A(), *[k@10609], *#tS@10613);
    @premise initS(*A(), *x0@10608, *[k@10609], *#tS@10614);
    @premise initS(*x0@10608, *A(), *[k@10609], *#tS@10607);
    @premise initS(*A(), *x0@10608, *[k@10609], *#tS@10612);
    @premise know(*#tS@10614, #t1@10616);
    @premise know(*#tS@10613, #t1@10617);
    @premise know(*#tS@10607, #t1@10618);
    @premise know(*#tA@10611, #t1@10619);
    @premise know(*#tS@10612, #t1@10615);
    @premise know(*x0@10608, #t0@10620);
    @conclusion know(*tuple3(#tS@10607, x0@10608, [k@10609]), #t@10610);
    @constraint #tA@10611 - #t1@10619 >= 0;
    @constraint #t@10610 - #tS@10607 >= 0;
    @constraint -$pd + #tS@10612 - #t1@10615 >= 0;
    @constraint -$pd + #tS@10613 - #t1@10617 >= 0;
    @constraint -$pd + #tS@10614 - #t1@10616 >= 0;
    @constraint -$pd + #tS@10607 - #t1@10618 >= 0;
    @constraint #t@10610 - #t2@10621 >= 0;
    @constraint #tA@10611 - #t0@10620 >= 0;
    @constraint -$pd + #tS@10613 - #tS@10612 >= 0;
    @constraint -$pd + #tS@10612 - #tA@10611 >= 0;
    @constraint $pa - #tS@10614 + #tS@10613 >= 0;
    @constraint -#tS@10607 + $pa + #tS@10614 >= 0;
    @constraint -$pd + #tS@10614 - #tS@10613 >= 0;
    @constraint -$pd + #tS@10607 - #tS@10614 >= 0;
    @constraint -$pd + #tS@10613 - #t0@10620 >= 0;
    @constraint -$pd + #tS@10607 - #t0@10620 >= 0;
    @constraint $pa - #tS@10612 + #tA@10611 >= 0;
    @constraint $pa - #tS@10613 + #tS@10612 >= 0;
};

Compose to at 1 : 
@rule{
    @premise know(*x0@10087, #t0@10090);
    @premise know(*senc(tuple3(#tI@10091, R@10089, k@10088), sk(x0@10087)), #t1@10092);
    @premise know(*#tS@10086, #t1@10093);
    @premise initS(*x0@10087, *R@10089, *k@10088, *#tS@10086);
    @conclusion know(*senc(tuple3(#tS@10086, x0@10087, k@10088), sk(R@10089)), #tS@10086);
    @constraint -$pd + #tS@10086 - #t1@10093 >= 0;
    @constraint -#tS@10086 + $pa + #tI@10091 >= 0;
    @constraint -$pd + #tS@10086 - #t0@10090 >= 0;
    @constraint -$pd + #tS@10086 - #t1@10092 >= 0;
};
Rule in cache: 6
Rule staged: 48
Rule before check and clean: 
@rule{
    @premise new(*[k@10623], gen(), tuple3(A(), x0@10624, #tA@10625));
    @premise initS(*A(), *x0@10624, *[k@10623], *#tS@10626);
    @premise initA(*A(), *x0@10624, *[k@10623], *#tA@10625);
    @premise initS(*x0@10624, *A(), *[k@10623], *#tS@10627);
    @premise initS(*A(), *x0@10624, *[k@10623], *#tS@10628);
    @premise initS(*x0@10624, *A(), *[k@10623], *#tS@10629);
    @premise know(*#tS@10626, #t1@10630);
    @premise know(*#tS@10628, #t1@10631);
    @premise know(*#tS@10627, #t1@10632);
    @premise know(*#tS@10629, #t1@10633);
    @premise know(*#tA@10625, #t1@10634);
    @premise know(*x0@10624, #t0@10635);
    @premise know(*A(), #t0@10636);
    @premise know(*#tS@10622, #t1@10637);
    @premise initS(*A(), *x0@10624, *[k@10623], *#tS@10622);
    @conclusion know(*senc(tuple3(#tS@10622, A(), [k@10623]), sk(x0@10624)), #tS@10622);
    @constraint #tA@10625 - #t1@10634 >= 0;
    @constraint -$pd + #tS@10626 - #t1@10630 >= 0;
    @constraint -$pd + #tS@10627 - #t1@10632 >= 0;
    @constraint -$pd + #tS@10628 - #t1@10631 >= 0;
    @constraint -$pd + #tS@10629 - #t1@10633 >= 0;
    @constraint -$pd + #tS@10622 - #t0@10636 >= 0;
    @constraint -$pd + #tS@10622 - #t1@10637 >= 0;
    @constraint #tA@10625 - #t0@10635 >= 0;
    @constraint -$pd + #tS@10627 - #tS@10626 >= 0;
    @constraint -$pd + #tS@10626 - #tA@10625 >= 0;
    @constraint $pa - #tS@10629 + #tS@10628 >= 0;
    @constraint -$pd + #tS@10629 - #tS@10628 >= 0;
    @constraint $pa - #tS@10628 + #tS@10627 >= 0;
    @constraint -#tS@10622 + $pa + #tS@10629 >= 0;
    @constraint -$pd + #tS@10628 - #tS@10627 >= 0;
    @constraint -$pd + #tS@10622 - #tS@10629 >= 0;
    @constraint -$pd + #tS@10629 - #t0@10635 >= 0;
    @constraint -$pd + #tS@10627 - #t0@10635 >= 0;
    @constraint $pa - #tS@10626 + #tA@10625 >= 0;
    @constraint $pa - #tS@10627 + #tS@10626 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[k@10623], gen(), tuple3(A(), x0@10624, #tA@10625));
    @premise initS(*A(), *x0@10624, *[k@10623], *#tS@10626);
    @premise initA(*A(), *x0@10624, *[k@10623], *#tA@10625);
    @premise initS(*x0@10624, *A(), *[k@10623], *#tS@10627);
    @premise initS(*A(), *x0@10624, *[k@10623], *#tS@10628);
    @premise initS(*x0@10624, *A(), *[k@10623], *#tS@10629);
    @premise initS(*A(), *x0@10624, *[k@10623], *#tS@10622);
    @premise know(*A(), #t0@10636);
    @premise know(*#tS@10627, #t1@10632);
    @premise know(*#tS@10629, #t1@10633);
    @premise know(*#tA@10625, #t1@10634);
    @premise know(*#tS@10626, #t1@10630);
    @premise know(*#tS@10622, #t1@10637);
    @premise know(*#tS@10628, #t1@10631);
    @premise know(*x0@10624, #t0@10635);
    @conclusion know(*senc(tuple3(#tS@10622, A(), [k@10623]), sk(x0@10624)), #tS@10622);
    @constraint #tA@10625 - #t1@10634 >= 0;
    @constraint -$pd + #tS@10626 - #t1@10630 >= 0;
    @constraint -$pd + #tS@10627 - #t1@10632 >= 0;
    @constraint -$pd + #tS@10628 - #t1@10631 >= 0;
    @constraint -$pd + #tS@10629 - #t1@10633 >= 0;
    @constraint -$pd + #tS@10622 - #t0@10636 >= 0;
    @constraint -$pd + #tS@10622 - #t1@10637 >= 0;
    @constraint #tA@10625 - #t0@10635 >= 0;
    @constraint -$pd + #tS@10627 - #tS@10626 >= 0;
    @constraint -$pd + #tS@10626 - #tA@10625 >= 0;
    @constraint $pa - #tS@10629 + #tS@10628 >= 0;
    @constraint -$pd + #tS@10629 - #tS@10628 >= 0;
    @constraint $pa - #tS@10628 + #tS@10627 >= 0;
    @constraint -#tS@10622 + $pa + #tS@10629 >= 0;
    @constraint -$pd + #tS@10628 - #tS@10627 >= 0;
    @constraint -$pd + #tS@10622 - #tS@10629 >= 0;
    @constraint -$pd + #tS@10629 - #t0@10635 >= 0;
    @constraint -$pd + #tS@10627 - #t0@10635 >= 0;
    @constraint $pa - #tS@10626 + #tA@10625 >= 0;
    @constraint $pa - #tS@10627 + #tS@10626 >= 0;
};

Stage rule: 
@rule{
    @guard c@10528 != A();
    @guard c@10528 != B();
    @guard c@10525 != A();
    @guard c@10525 != B();
    @premise initS(*c@10528, *c@10525, *x2@10526, *#tS@10530);
    @premise initS(*c@10525, *c@10528, *x2@10526, *#tS@10524);
    @premise initS(*c@10525, *c@10528, *x2@10526, *#tS@10531);
    @premise know(*#tS@10531, #t1@10532);
    @premise know(*#tS@10524, #t1@10534);
    @premise know(*#tS@10530, #t1@10533);
    @premise know(*c@10528, #t1@10529);
    @premise know(*c@10525, #t1@10536);
    @premise know(*x2@10526, #t2@10537);
    @conclusion know(*tuple3(#tS@10524, c@10525, x2@10526), #t@10527);
    @constraint -$pd + #tS@10531 - #t2@10537 >= 0;
    @constraint -$pd + #tS@10531 - #t1@10532 >= 0;
    @constraint -$pd + #tS@10530 - #t1@10533 >= 0;
    @constraint -$pd + #tS@10524 - #t1@10534 >= 0;
    @constraint -$pd + #tS@10531 - #t1@10536 >= 0;
    @constraint -#tS@10524 + $pa + #tS@10530 >= 0;
    @constraint -$pd + #tS@10530 - #tS@10531 >= 0;
    @constraint #t@10527 - #tS@10524 >= 0;
    @constraint -$pd + #tS@10531 - #t1@10529 >= 0;
    @constraint $pa - #tS@10530 + #tS@10531 >= 0;
    @constraint -$pd + #tS@10524 - #tS@10530 >= 0;
    @constraint -$pd + #tS@10530 - #t1@10529 >= 0;
    @constraint -$pd + #tS@10524 - #t1@10536 >= 0;
    @constraint #t@10527 - #t1@10529 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@34, x1@35, x2@36), #t@37);
    @conclusion know(*x0@34, #t0@38);
    @constraint -#t@37 + #t0@38 >= 0;
};
Rule in cache: 6
Rule staged: 49
Rule before check and clean: 
@rule{
    @guard c@10640 != A();
    @guard c@10640 != B();
    @guard c@10641 != A();
    @guard c@10641 != B();
    @premise initS(*c@10640, *c@10641, *x2@10642, *#tS@10643);
    @premise initS(*c@10641, *c@10640, *x2@10642, *#tS@10638);
    @premise initS(*c@10641, *c@10640, *x2@10642, *#tS@10644);
    @premise know(*#tS@10644, #t1@10645);
    @premise know(*#tS@10638, #t1@10646);
    @premise know(*#tS@10643, #t1@10647);
    @premise know(*c@10640, #t1@10648);
    @premise know(*c@10641, #t1@10649);
    @premise know(*x2@10642, #t2@10650);
    @conclusion know(*#tS@10638, #t0@10639);
    @constraint #t0@10639 - #t@10527 >= 0;
    @constraint -$pd + #tS@10644 - #t2@10650 >= 0;
    @constraint -$pd + #tS@10644 - #t1@10645 >= 0;
    @constraint -$pd + #tS@10643 - #t1@10647 >= 0;
    @constraint -$pd + #tS@10638 - #t1@10646 >= 0;
    @constraint -$pd + #tS@10643 - #tS@10644 >= 0;
    @constraint -$pd + #tS@10644 - #t1@10649 >= 0;
    @constraint -#tS@10638 + $pa + #tS@10643 >= 0;
    @constraint -$pd + #tS@10644 - #t1@10648 >= 0;
    @constraint #t@10527 - #tS@10638 >= 0;
    @constraint $pa - #tS@10643 + #tS@10644 >= 0;
    @constraint -$pd + #tS@10638 - #tS@10643 >= 0;
    @constraint -$pd + #tS@10638 - #t1@10649 >= 0;
    @constraint -$pd + #tS@10643 - #t1@10648 >= 0;
    @constraint #t@10527 - #t1@10648 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@39, x1@40, x2@41), #t@42);
    @conclusion know(*x1@40, #t1@43);
    @constraint -#t@42 + #t1@43 >= 0;
};
Rule in cache: 6
Rule staged: 49
Rule before check and clean: 
@rule{
    @guard c@10653 != A();
    @guard c@10653 != B();
    @guard c@10651 != A();
    @guard c@10651 != B();
    @premise initS(*c@10653, *c@10651, *x2@10654, *#tS@10655);
    @premise initS(*c@10651, *c@10653, *x2@10654, *#tS@10656);
    @premise initS(*c@10651, *c@10653, *x2@10654, *#tS@10657);
    @premise know(*#tS@10657, #t1@10658);
    @premise know(*#tS@10656, #t1@10659);
    @premise know(*#tS@10655, #t1@10660);
    @premise know(*c@10653, #t1@10661);
    @premise know(*c@10651, #t1@10662);
    @premise know(*x2@10654, #t2@10663);
    @conclusion know(*c@10651, #t1@10652);
    @constraint #t1@10652 - #t@10527 >= 0;
    @constraint -$pd + #tS@10657 - #t2@10663 >= 0;
    @constraint -$pd + #tS@10657 - #t1@10658 >= 0;
    @constraint -$pd + #tS@10655 - #t1@10660 >= 0;
    @constraint -$pd + #tS@10656 - #t1@10659 >= 0;
    @constraint -$pd + #tS@10655 - #tS@10657 >= 0;
    @constraint -$pd + #tS@10657 - #t1@10662 >= 0;
    @constraint -#tS@10656 + $pa + #tS@10655 >= 0;
    @constraint -$pd + #tS@10657 - #t1@10661 >= 0;
    @constraint #t@10527 - #tS@10656 >= 0;
    @constraint $pa - #tS@10655 + #tS@10657 >= 0;
    @constraint -$pd + #tS@10656 - #tS@10655 >= 0;
    @constraint -$pd + #tS@10656 - #t1@10662 >= 0;
    @constraint -$pd + #tS@10655 - #t1@10661 >= 0;
    @constraint #t@10527 - #t1@10661 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@44, x1@45, x2@46), #t@47);
    @conclusion know(*x2@46, #t2@48);
    @constraint -#t@47 + #t2@48 >= 0;
};
Rule in cache: 6
Rule staged: 49
Rule before check and clean: 
@rule{
    @guard c@10666 != A();
    @guard c@10666 != B();
    @guard c@10667 != A();
    @guard c@10667 != B();
    @premise initS(*c@10666, *c@10667, *x2@10664, *#tS@10668);
    @premise initS(*c@10667, *c@10666, *x2@10664, *#tS@10669);
    @premise initS(*c@10667, *c@10666, *x2@10664, *#tS@10670);
    @premise know(*#tS@10670, #t1@10671);
    @premise know(*#tS@10669, #t1@10672);
    @premise know(*#tS@10668, #t1@10673);
    @premise know(*c@10666, #t1@10674);
    @premise know(*c@10667, #t1@10675);
    @premise know(*x2@10664, #t2@10676);
    @conclusion know(*x2@10664, #t2@10665);
    @constraint #t2@10665 - #t@10527 >= 0;
    @constraint -$pd + #tS@10670 - #t2@10676 >= 0;
    @constraint -$pd + #tS@10670 - #t1@10671 >= 0;
    @constraint -$pd + #tS@10668 - #t1@10673 >= 0;
    @constraint -$pd + #tS@10669 - #t1@10672 >= 0;
    @constraint -$pd + #tS@10668 - #tS@10670 >= 0;
    @constraint -$pd + #tS@10670 - #t1@10675 >= 0;
    @constraint -#tS@10669 + $pa + #tS@10668 >= 0;
    @constraint -$pd + #tS@10670 - #t1@10674 >= 0;
    @constraint #t@10527 - #tS@10669 >= 0;
    @constraint $pa - #tS@10668 + #tS@10670 >= 0;
    @constraint -$pd + #tS@10669 - #tS@10668 >= 0;
    @constraint -$pd + #tS@10669 - #t1@10675 >= 0;
    @constraint -$pd + #tS@10668 - #t1@10674 >= 0;
    @constraint #t@10527 - #t1@10674 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @guard c@10542 != A();
    @guard c@10542 != B();
    @premise know(*sk(c@10542), #t2@10553);
    @premise initS(*x1@10539, *c@10542, *x2@10540, *#tS@10544);
    @premise initS(*c@10542, *x1@10539, *x2@10540, *#tS@10545);
    @premise initS(*x1@10539, *c@10542, *x2@10540, *#tS@10538);
    @premise initS(*c@10542, *x1@10539, *x2@10540, *#tS@10543);
    @premise know(*#tS@10544, #t1@10547);
    @premise know(*#tS@10543, #t1@10546);
    @premise know(*#tS@10545, #t1@10549);
    @premise know(*#tS@10538, #t1@10548);
    @premise know(*c@10542, #t1@10550);
    @premise know(*x2@10540, #t2@10551);
    @premise know(*x1@10539, #t1@10552);
    @conclusion know(*tuple3(#tS@10538, x1@10539, x2@10540), #t@10541);
    @constraint #t@10541 - #tS@10538 >= 0;
    @constraint -$pd + #tS@10543 - #t2@10551 >= 0;
    @constraint -$pd + #tS@10543 - #t1@10546 >= 0;
    @constraint -$pd + #tS@10544 - #t1@10547 >= 0;
    @constraint -$pd + #tS@10545 - #t1@10549 >= 0;
    @constraint -$pd + #tS@10538 - #t1@10548 >= 0;
    @constraint #t@10541 - #t2@10553 >= 0;
    @constraint $pa - #tS@10545 + #tS@10544 >= 0;
    @constraint -$pd + #tS@10543 - #t1@10552 >= 0;
    @constraint -$pd + #tS@10543 - #t1@10550 >= 0;
    @constraint -$pd + #tS@10544 - #tS@10543 >= 0;
    @constraint -#tS@10538 + $pa + #tS@10545 >= 0;
    @constraint $pa - #tS@10544 + #tS@10543 >= 0;
    @constraint -$pd + #tS@10538 - #tS@10545 >= 0;
    @constraint -$pd + #tS@10545 - #tS@10544 >= 0;
    @constraint -$pd + #tS@10544 - #t1@10552 >= 0;
    @constraint -$pd + #tS@10538 - #t1@10552 >= 0;
    @constraint -$pd + #tS@10545 - #t1@10550 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @guard c@10007 != A();
    @guard c@10007 != B();
    @premise know(*c@10007, #t1@10008);
    @conclusion know(*sk(c@10007), #t@10009);
    @constraint -#t1@10008 + #t@10009 >= 0;
};
Rule in cache: 5
Rule staged: 50
Rule before check and clean: 
@rule{
    @guard c@10681 != A();
    @guard c@10681 != B();
    @guard c@10681 != A();
    @guard c@10681 != B();
    @premise know(*c@10681, #t1@10682);
    @premise initS(*x1@10678, *c@10681, *x2@10679, *#tS@10683);
    @premise initS(*c@10681, *x1@10678, *x2@10679, *#tS@10684);
    @premise initS(*x1@10678, *c@10681, *x2@10679, *#tS@10677);
    @premise initS(*c@10681, *x1@10678, *x2@10679, *#tS@10685);
    @premise know(*#tS@10683, #t1@10686);
    @premise know(*#tS@10685, #t1@10687);
    @premise know(*#tS@10684, #t1@10688);
    @premise know(*#tS@10677, #t1@10689);
    @premise know(*c@10681, #t1@10690);
    @premise know(*x2@10679, #t2@10691);
    @premise know(*x1@10678, #t1@10692);
    @conclusion know(*tuple3(#tS@10677, x1@10678, x2@10679), #t@10680);
    @constraint -$pd + #tS@10677 - #t1@10689 >= 0;
    @constraint #t@10680 - #tS@10677 >= 0;
    @constraint -#t1@10682 + #t@10009 >= 0;
    @constraint #t@10680 - #t@10009 >= 0;
    @constraint -$pd + #tS@10685 - #t2@10691 >= 0;
    @constraint -$pd + #tS@10685 - #t1@10687 >= 0;
    @constraint -$pd + #tS@10683 - #t1@10686 >= 0;
    @constraint -$pd + #tS@10684 - #t1@10688 >= 0;
    @constraint -$pd + #tS@10685 - #t1@10692 >= 0;
    @constraint -$pd + #tS@10683 - #tS@10685 >= 0;
    @constraint -$pd + #tS@10685 - #t1@10690 >= 0;
    @constraint -$pd + #tS@10677 - #tS@10684 >= 0;
    @constraint $pa - #tS@10683 + #tS@10685 >= 0;
    @constraint -$pd + #tS@10684 - #tS@10683 >= 0;
    @constraint $pa - #tS@10684 + #tS@10683 >= 0;
    @constraint -#tS@10677 + $pa + #tS@10684 >= 0;
    @constraint -$pd + #tS@10677 - #t1@10692 >= 0;
    @constraint -$pd + #tS@10683 - #t1@10692 >= 0;
    @constraint -$pd + #tS@10684 - #t1@10690 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10681 != A();
    @guard c@10681 != B();
    @premise initS(*c@10681, *x1@10678, *x2@10679, *#tS@10685);
    @premise initS(*x1@10678, *c@10681, *x2@10679, *#tS@10683);
    @premise initS(*c@10681, *x1@10678, *x2@10679, *#tS@10684);
    @premise initS(*x1@10678, *c@10681, *x2@10679, *#tS@10677);
    @premise know(*#tS@10683, #t1@10686);
    @premise know(*#tS@10677, #t1@10689);
    @premise know(*#tS@10685, #t1@10687);
    @premise know(*#tS@10684, #t1@10688);
    @premise know(*c@10681, #t1@10682);
    @premise know(*x2@10679, #t2@10691);
    @premise know(*x1@10678, #t1@10692);
    @conclusion know(*tuple3(#tS@10677, x1@10678, x2@10679), #t@10680);
    @constraint -$pd + #tS@10685 - #t2@10691 >= 0;
    @constraint -$pd + #tS@10685 - #t1@10687 >= 0;
    @constraint -$pd + #tS@10683 - #t1@10686 >= 0;
    @constraint -$pd + #tS@10684 - #t1@10688 >= 0;
    @constraint -$pd + #tS@10677 - #t1@10689 >= 0;
    @constraint -$pd + #tS@10683 - #tS@10685 >= 0;
    @constraint -$pd + #tS@10685 - #t1@10692 >= 0;
    @constraint #t@10680 - #tS@10677 >= 0;
    @constraint -$pd + #tS@10685 - #t1@10682 >= 0;
    @constraint $pa - #tS@10684 + #tS@10683 >= 0;
    @constraint -#tS@10677 + $pa + #tS@10684 >= 0;
    @constraint -$pd + #tS@10677 - #tS@10684 >= 0;
    @constraint $pa - #tS@10683 + #tS@10685 >= 0;
    @constraint -$pd + #tS@10684 - #tS@10683 >= 0;
    @constraint -$pd + #tS@10683 - #t1@10692 >= 0;
    @constraint -$pd + #tS@10684 - #t1@10682 >= 0;
    @constraint #t@10680 - #t1@10682 >= 0;
    @constraint -$pd + #tS@10677 - #t1@10692 >= 0;
};

Stage rule: 
@rule{
    @guard c@10568 != A();
    @guard c@10568 != B();
    @premise initS(*c@10568, *x1@10570, *x2@10569, *#tS@10571);
    @premise initS(*x1@10570, *c@10568, *x2@10569, *#tS@10572);
    @premise initS(*c@10568, *x1@10570, *x2@10569, *#tS@10573);
    @premise initS(*x1@10570, *c@10568, *x2@10569, *#tS@10574);
    @premise initS(*c@10568, *x1@10570, *x2@10569, *#tS@10567);
    @premise know(*#tS@10572, #t1@10576);
    @premise know(*#tS@10571, #t1@10575);
    @premise know(*#tS@10573, #t1@10578);
    @premise know(*#tS@10567, #t1@10583);
    @premise know(*#tS@10574, #t1@10577);
    @premise know(*x1@10570, #t1@10581);
    @premise know(*c@10568, #t1@10579);
    @premise know(*x2@10569, #t2@10580);
    @conclusion know(*senc(tuple3(#tS@10567, c@10568, x2@10569), sk(x1@10570)), #tS@10567);
    @constraint -$pd + #tS@10571 - #t2@10580 >= 0;
    @constraint -$pd + #tS@10571 - #t1@10575 >= 0;
    @constraint -$pd + #tS@10572 - #t1@10576 >= 0;
    @constraint -$pd + #tS@10573 - #t1@10578 >= 0;
    @constraint -$pd + #tS@10574 - #t1@10577 >= 0;
    @constraint -$pd + #tS@10567 - #t1@10583 >= 0;
    @constraint -$pd + #tS@10572 - #tS@10571 >= 0;
    @constraint -$pd + #tS@10571 - #t1@10581 >= 0;
    @constraint -$pd + #tS@10571 - #t1@10579 >= 0;
    @constraint $pa - #tS@10573 + #tS@10572 >= 0;
    @constraint -$pd + #tS@10574 - #tS@10573 >= 0;
    @constraint -$pd + #tS@10573 - #tS@10572 >= 0;
    @constraint $pa - #tS@10574 + #tS@10573 >= 0;
    @constraint $pa - #tS@10572 + #tS@10571 >= 0;
    @constraint -#tS@10567 + $pa + #tS@10574 >= 0;
    @constraint -$pd + #tS@10567 - #tS@10574 >= 0;
    @constraint -$pd + #tS@10573 - #t1@10579 >= 0;
    @constraint -$pd + #tS@10574 - #t1@10581 >= 0;
    @constraint -$pd + #tS@10567 - #t1@10579 >= 0;
    @constraint -$pd + #tS@10572 - #t1@10581 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*senc(m@10016, k@10017), #t1@10018);
    @premise know(*k@10017, #t2@10019);
    @conclusion know(*m@10016, #t@10020);
    @constraint -#t1@10018 + #t@10020 >= 0;
    @constraint #t@10020 - #t2@10019 >= 0;
};
Rule in cache: 5
Rule staged: 51
Rule before check and clean: 
@rule{
    @guard c@10694 != A();
    @guard c@10694 != B();
    @premise initS(*c@10694, *x1@10697, *x2@10695, *#tS@10698);
    @premise initS(*x1@10697, *c@10694, *x2@10695, *#tS@10699);
    @premise initS(*c@10694, *x1@10697, *x2@10695, *#tS@10700);
    @premise initS(*x1@10697, *c@10694, *x2@10695, *#tS@10701);
    @premise initS(*c@10694, *x1@10697, *x2@10695, *#tS@10693);
    @premise know(*#tS@10699, #t1@10702);
    @premise know(*#tS@10698, #t1@10703);
    @premise know(*#tS@10700, #t1@10704);
    @premise know(*#tS@10693, #t1@10705);
    @premise know(*#tS@10701, #t1@10706);
    @premise know(*x1@10697, #t1@10707);
    @premise know(*c@10694, #t1@10708);
    @premise know(*x2@10695, #t2@10709);
    @premise know(*sk(x1@10697), #t2@10710);
    @conclusion know(*tuple3(#tS@10693, c@10694, x2@10695), #t@10696);
    @constraint #t@10696 - #tS@10693 >= 0;
    @constraint -$pd + #tS@10698 - #t2@10709 >= 0;
    @constraint -$pd + #tS@10698 - #t1@10703 >= 0;
    @constraint -$pd + #tS@10699 - #t1@10702 >= 0;
    @constraint -$pd + #tS@10700 - #t1@10704 >= 0;
    @constraint -$pd + #tS@10701 - #t1@10706 >= 0;
    @constraint -$pd + #tS@10693 - #t1@10705 >= 0;
    @constraint #t@10696 - #t2@10710 >= 0;
    @constraint -$pd + #tS@10698 - #t1@10707 >= 0;
    @constraint -$pd + #tS@10699 - #tS@10698 >= 0;
    @constraint -$pd + #tS@10698 - #t1@10708 >= 0;
    @constraint $pa - #tS@10700 + #tS@10699 >= 0;
    @constraint $pa - #tS@10701 + #tS@10700 >= 0;
    @constraint -#tS@10693 + $pa + #tS@10701 >= 0;
    @constraint -$pd + #tS@10701 - #tS@10700 >= 0;
    @constraint -$pd + #tS@10700 - #tS@10699 >= 0;
    @constraint -$pd + #tS@10693 - #tS@10701 >= 0;
    @constraint $pa - #tS@10699 + #tS@10698 >= 0;
    @constraint -$pd + #tS@10700 - #t1@10708 >= 0;
    @constraint -$pd + #tS@10701 - #t1@10707 >= 0;
    @constraint -$pd + #tS@10693 - #t1@10708 >= 0;
    @constraint -$pd + #tS@10699 - #t1@10707 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10694 != A();
    @guard c@10694 != B();
    @premise know(*sk(x1@10697), #t2@10710);
    @premise initS(*x1@10697, *c@10694, *x2@10695, *#tS@10699);
    @premise initS(*c@10694, *x1@10697, *x2@10695, *#tS@10700);
    @premise initS(*x1@10697, *c@10694, *x2@10695, *#tS@10701);
    @premise initS(*c@10694, *x1@10697, *x2@10695, *#tS@10693);
    @premise initS(*c@10694, *x1@10697, *x2@10695, *#tS@10698);
    @premise know(*#tS@10698, #t1@10703);
    @premise know(*#tS@10699, #t1@10702);
    @premise know(*#tS@10693, #t1@10705);
    @premise know(*#tS@10701, #t1@10706);
    @premise know(*#tS@10700, #t1@10704);
    @premise know(*c@10694, #t1@10708);
    @premise know(*x2@10695, #t2@10709);
    @premise know(*x1@10697, #t1@10707);
    @conclusion know(*tuple3(#tS@10693, c@10694, x2@10695), #t@10696);
    @constraint #t@10696 - #tS@10693 >= 0;
    @constraint -$pd + #tS@10698 - #t2@10709 >= 0;
    @constraint -$pd + #tS@10698 - #t1@10703 >= 0;
    @constraint -$pd + #tS@10699 - #t1@10702 >= 0;
    @constraint -$pd + #tS@10700 - #t1@10704 >= 0;
    @constraint -$pd + #tS@10701 - #t1@10706 >= 0;
    @constraint -$pd + #tS@10693 - #t1@10705 >= 0;
    @constraint #t@10696 - #t2@10710 >= 0;
    @constraint -$pd + #tS@10698 - #t1@10707 >= 0;
    @constraint -$pd + #tS@10699 - #tS@10698 >= 0;
    @constraint -$pd + #tS@10698 - #t1@10708 >= 0;
    @constraint $pa - #tS@10700 + #tS@10699 >= 0;
    @constraint $pa - #tS@10701 + #tS@10700 >= 0;
    @constraint -#tS@10693 + $pa + #tS@10701 >= 0;
    @constraint -$pd + #tS@10701 - #tS@10700 >= 0;
    @constraint -$pd + #tS@10700 - #tS@10699 >= 0;
    @constraint -$pd + #tS@10693 - #tS@10701 >= 0;
    @constraint $pa - #tS@10699 + #tS@10698 >= 0;
    @constraint -$pd + #tS@10700 - #t1@10708 >= 0;
    @constraint -$pd + #tS@10701 - #t1@10707 >= 0;
    @constraint -$pd + #tS@10693 - #t1@10708 >= 0;
    @constraint -$pd + #tS@10699 - #t1@10707 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*senc(tuple3(#tS@10032, A(), k@10033), sk(B())), #t@10034);
    @conclusion accept(*A(), *B(), *k@10033, *#tB@10035);
    @constraint -$pd - #t@10034 + #tB@10035 >= 0;
    @constraint -#tB@10035 + $pa + #tS@10032 >= 0;
};
Rule in cache: 6
Rule staged: 51
Rule before check and clean: 
@rule{
    @guard A() != A();
    @guard A() != B();
    @premise initS(*A(), *B(), *x2@10711, *#tS@10713);
    @premise initS(*B(), *A(), *x2@10711, *#tS@10714);
    @premise initS(*A(), *B(), *x2@10711, *#tS@10715);
    @premise initS(*B(), *A(), *x2@10711, *#tS@10716);
    @premise initS(*A(), *B(), *x2@10711, *#tS@10717);
    @premise know(*#tS@10714, #t1@10718);
    @premise know(*#tS@10713, #t1@10719);
    @premise know(*#tS@10715, #t1@10720);
    @premise know(*#tS@10717, #t1@10721);
    @premise know(*#tS@10716, #t1@10722);
    @premise know(*B(), #t1@10723);
    @premise know(*A(), #t1@10724);
    @premise know(*x2@10711, #t2@10725);
    @conclusion accept(*A(), *B(), *x2@10711, *#tB@10712);
    @constraint -$pd + #tS@10713 - #t2@10725 >= 0;
    @constraint -$pd + #tS@10713 - #t1@10719 >= 0;
    @constraint -$pd + #tS@10714 - #t1@10718 >= 0;
    @constraint -$pd + #tS@10715 - #t1@10720 >= 0;
    @constraint -$pd + #tS@10716 - #t1@10722 >= 0;
    @constraint -$pd + #tS@10717 - #t1@10721 >= 0;
    @constraint -$pd + #tS@10714 - #tS@10713 >= 0;
    @constraint -$pd + #tS@10713 - #t1@10723 >= 0;
    @constraint -$pd + #tS@10713 - #t1@10724 >= 0;
    @constraint -$pd + #tB@10712 - #tS@10717 >= 0;
    @constraint $pa - #tS@10717 + #tS@10716 >= 0;
    @constraint -$pd + #tS@10716 - #tS@10715 >= 0;
    @constraint $pa - #tS@10715 + #tS@10714 >= 0;
    @constraint $pa - #tS@10714 + #tS@10713 >= 0;
    @constraint -$pd + #tS@10715 - #tS@10714 >= 0;
    @constraint $pa - #tS@10716 + #tS@10715 >= 0;
    @constraint -#tB@10712 + $pa + #tS@10717 >= 0;
    @constraint -$pd + #tS@10717 - #tS@10716 >= 0;
    @constraint -$pd + #tS@10714 - #t1@10723 >= 0;
    @constraint -$pd + #tS@10715 - #t1@10724 >= 0;
    @constraint -$pd + #tS@10716 - #t1@10723 >= 0;
    @constraint -$pd + #tS@10717 - #t1@10724 >= 0;
};
Rule invalid. 

Compose to at 1 : 
@rule{
    @premise know(*x0@10087, #t0@10090);
    @premise know(*senc(tuple3(#tI@10091, R@10089, k@10088), sk(x0@10087)), #t1@10092);
    @premise know(*#tS@10086, #t1@10093);
    @premise initS(*x0@10087, *R@10089, *k@10088, *#tS@10086);
    @conclusion know(*senc(tuple3(#tS@10086, x0@10087, k@10088), sk(R@10089)), #tS@10086);
    @constraint -$pd + #tS@10086 - #t1@10093 >= 0;
    @constraint -#tS@10086 + $pa + #tI@10091 >= 0;
    @constraint -$pd + #tS@10086 - #t0@10090 >= 0;
    @constraint -$pd + #tS@10086 - #t1@10092 >= 0;
};
Rule in cache: 6
Rule staged: 51
Rule before check and clean: 
@rule{
    @guard c@10729 != A();
    @guard c@10729 != B();
    @premise initS(*c@10729, *x1@10727, *x2@10728, *#tS@10730);
    @premise initS(*x1@10727, *c@10729, *x2@10728, *#tS@10731);
    @premise initS(*c@10729, *x1@10727, *x2@10728, *#tS@10732);
    @premise initS(*x1@10727, *c@10729, *x2@10728, *#tS@10733);
    @premise initS(*c@10729, *x1@10727, *x2@10728, *#tS@10734);
    @premise know(*#tS@10731, #t1@10735);
    @premise know(*#tS@10730, #t1@10736);
    @premise know(*#tS@10732, #t1@10737);
    @premise know(*#tS@10734, #t1@10738);
    @premise know(*#tS@10733, #t1@10739);
    @premise know(*x1@10727, #t1@10740);
    @premise know(*c@10729, #t1@10741);
    @premise know(*x2@10728, #t2@10742);
    @premise know(*x1@10727, #t0@10743);
    @premise know(*#tS@10726, #t1@10744);
    @premise initS(*x1@10727, *c@10729, *x2@10728, *#tS@10726);
    @conclusion know(*senc(tuple3(#tS@10726, x1@10727, x2@10728), sk(c@10729)), #tS@10726);
    @constraint -$pd + #tS@10730 - #t2@10742 >= 0;
    @constraint -$pd + #tS@10730 - #t1@10736 >= 0;
    @constraint -$pd + #tS@10731 - #t1@10735 >= 0;
    @constraint -$pd + #tS@10732 - #t1@10737 >= 0;
    @constraint -$pd + #tS@10733 - #t1@10739 >= 0;
    @constraint -$pd + #tS@10734 - #t1@10738 >= 0;
    @constraint -$pd + #tS@10726 - #t0@10743 >= 0;
    @constraint -$pd + #tS@10726 - #t1@10744 >= 0;
    @constraint -$pd + #tS@10731 - #tS@10730 >= 0;
    @constraint -$pd + #tS@10730 - #t1@10740 >= 0;
    @constraint -$pd + #tS@10730 - #t1@10741 >= 0;
    @constraint -$pd + #tS@10726 - #tS@10734 >= 0;
    @constraint $pa - #tS@10734 + #tS@10733 >= 0;
    @constraint -$pd + #tS@10733 - #tS@10732 >= 0;
    @constraint $pa - #tS@10732 + #tS@10731 >= 0;
    @constraint $pa - #tS@10731 + #tS@10730 >= 0;
    @constraint -$pd + #tS@10732 - #tS@10731 >= 0;
    @constraint $pa - #tS@10733 + #tS@10732 >= 0;
    @constraint -#tS@10726 + $pa + #tS@10734 >= 0;
    @constraint -$pd + #tS@10734 - #tS@10733 >= 0;
    @constraint -$pd + #tS@10731 - #t1@10740 >= 0;
    @constraint -$pd + #tS@10732 - #t1@10741 >= 0;
    @constraint -$pd + #tS@10733 - #t1@10740 >= 0;
    @constraint -$pd + #tS@10734 - #t1@10741 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10729 != A();
    @guard c@10729 != B();
    @premise initS(*c@10729, *x1@10727, *x2@10728, *#tS@10730);
    @premise initS(*x1@10727, *c@10729, *x2@10728, *#tS@10731);
    @premise initS(*c@10729, *x1@10727, *x2@10728, *#tS@10732);
    @premise initS(*x1@10727, *c@10729, *x2@10728, *#tS@10733);
    @premise initS(*c@10729, *x1@10727, *x2@10728, *#tS@10734);
    @premise initS(*x1@10727, *c@10729, *x2@10728, *#tS@10726);
    @premise know(*#tS@10730, #t1@10736);
    @premise know(*#tS@10731, #t1@10735);
    @premise know(*#tS@10734, #t1@10738);
    @premise know(*#tS@10733, #t1@10739);
    @premise know(*#tS@10732, #t1@10737);
    @premise know(*#tS@10726, #t1@10744);
    @premise know(*x2@10728, #t2@10742);
    @premise know(*c@10729, #t1@10741);
    @premise know(*x1@10727, #t1@10740);
    @conclusion know(*senc(tuple3(#tS@10726, x1@10727, x2@10728), sk(c@10729)), #tS@10726);
    @constraint -$pd + #tS@10730 - #t2@10742 >= 0;
    @constraint -$pd + #tS@10730 - #t1@10736 >= 0;
    @constraint -$pd + #tS@10731 - #t1@10735 >= 0;
    @constraint -$pd + #tS@10732 - #t1@10737 >= 0;
    @constraint -$pd + #tS@10733 - #t1@10739 >= 0;
    @constraint -$pd + #tS@10734 - #t1@10738 >= 0;
    @constraint -$pd + #tS@10726 - #t1@10744 >= 0;
    @constraint -$pd + #tS@10731 - #tS@10730 >= 0;
    @constraint -$pd + #tS@10730 - #t1@10740 >= 0;
    @constraint -$pd + #tS@10730 - #t1@10741 >= 0;
    @constraint -$pd + #tS@10726 - #tS@10734 >= 0;
    @constraint -$pd + #tS@10733 - #tS@10732 >= 0;
    @constraint $pa - #tS@10732 + #tS@10731 >= 0;
    @constraint -$pd + #tS@10732 - #tS@10731 >= 0;
    @constraint $pa - #tS@10733 + #tS@10732 >= 0;
    @constraint -$pd + #tS@10734 - #tS@10733 >= 0;
    @constraint $pa - #tS@10731 + #tS@10730 >= 0;
    @constraint $pa - #tS@10734 + #tS@10733 >= 0;
    @constraint -#tS@10726 + $pa + #tS@10734 >= 0;
    @constraint -$pd + #tS@10731 - #t1@10740 >= 0;
    @constraint -$pd + #tS@10726 - #t1@10740 >= 0;
    @constraint -$pd + #tS@10734 - #t1@10741 >= 0;
    @constraint -$pd + #tS@10733 - #t1@10740 >= 0;
    @constraint -$pd + #tS@10732 - #t1@10741 >= 0;
};

Stage rule: 
@rule{
    @guard c@10587 != A();
    @guard c@10587 != B();
    @premise new(*[k@10585], gen(), tuple3(A(), c@10587, #tA@10589));
    @premise initS(*A(), *c@10587, *[k@10585], *#tS@10584);
    @premise initS(*A(), *c@10587, *[k@10585], *#tS@10590);
    @premise initA(*A(), *c@10587, *[k@10585], *#tA@10589);
    @premise initS(*c@10587, *A(), *[k@10585], *#tS@10591);
    @premise know(*#tS@10590, #t1@10595);
    @premise know(*#tA@10589, #t1@10592);
    @premise know(*#tS@10584, #t1@10593);
    @premise know(*#tS@10591, #t1@10594);
    @premise know(*c@10587, #t1@10588);
    @conclusion know(*tuple3(#tS@10584, A(), [k@10585]), #t@10586);
    @constraint #tA@10589 - #t1@10592 >= 0;
    @constraint -$pd + #tS@10590 - #t1@10595 >= 0;
    @constraint -$pd + #tS@10591 - #t1@10594 >= 0;
    @constraint -$pd + #tS@10584 - #t1@10593 >= 0;
    @constraint #tA@10589 - #t1@10588 >= 0;
    @constraint -$pd + #tS@10591 - #tS@10590 >= 0;
    @constraint -$pd + #tS@10590 - #tA@10589 >= 0;
    @constraint -#tS@10584 + $pa + #tS@10591 >= 0;
    @constraint #t@10586 - #tS@10584 >= 0;
    @constraint $pa - #tS@10591 + #tS@10590 >= 0;
    @constraint $pa - #tS@10590 + #tA@10589 >= 0;
    @constraint -$pd + #tS@10584 - #tS@10591 >= 0;
    @constraint #t@10586 - #t1@10588 >= 0;
    @constraint -$pd + #tS@10591 - #t1@10588 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@34, x1@35, x2@36), #t@37);
    @conclusion know(*x0@34, #t0@38);
    @constraint -#t@37 + #t0@38 >= 0;
};
Rule in cache: 6
Rule staged: 52
Rule before check and clean: 
@rule{
    @guard c@10748 != A();
    @guard c@10748 != B();
    @premise new(*[k@10747], gen(), tuple3(A(), c@10748, #tA@10749));
    @premise initS(*A(), *c@10748, *[k@10747], *#tS@10745);
    @premise initS(*A(), *c@10748, *[k@10747], *#tS@10750);
    @premise initA(*A(), *c@10748, *[k@10747], *#tA@10749);
    @premise initS(*c@10748, *A(), *[k@10747], *#tS@10751);
    @premise know(*#tS@10750, #t1@10752);
    @premise know(*#tA@10749, #t1@10753);
    @premise know(*#tS@10745, #t1@10754);
    @premise know(*#tS@10751, #t1@10755);
    @premise know(*c@10748, #t1@10756);
    @conclusion know(*#tS@10745, #t0@10746);
    @constraint #t0@10746 - #t@10586 >= 0;
    @constraint #tA@10749 - #t1@10753 >= 0;
    @constraint -$pd + #tS@10750 - #t1@10752 >= 0;
    @constraint -$pd + #tS@10751 - #t1@10755 >= 0;
    @constraint -$pd + #tS@10745 - #t1@10754 >= 0;
    @constraint #tA@10749 - #t1@10756 >= 0;
    @constraint -$pd + #tS@10751 - #tS@10750 >= 0;
    @constraint -$pd + #tS@10750 - #tA@10749 >= 0;
    @constraint -#tS@10745 + $pa + #tS@10751 >= 0;
    @constraint $pa - #tS@10751 + #tS@10750 >= 0;
    @constraint $pa - #tS@10750 + #tA@10749 >= 0;
    @constraint -$pd + #tS@10745 - #tS@10751 >= 0;
    @constraint #t@10586 - #tS@10745 >= 0;
    @constraint -$pd + #tS@10751 - #t1@10756 >= 0;
    @constraint #t@10586 - #t1@10756 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@39, x1@40, x2@41), #t@42);
    @conclusion know(*x1@40, #t1@43);
    @constraint -#t@42 + #t1@43 >= 0;
};
Rule in cache: 6
Rule staged: 52
Rule before check and clean: 
@rule{
    @guard c@10759 != A();
    @guard c@10759 != B();
    @premise new(*[k@10758], gen(), tuple3(A(), c@10759, #tA@10760));
    @premise initS(*A(), *c@10759, *[k@10758], *#tS@10761);
    @premise initS(*A(), *c@10759, *[k@10758], *#tS@10762);
    @premise initA(*A(), *c@10759, *[k@10758], *#tA@10760);
    @premise initS(*c@10759, *A(), *[k@10758], *#tS@10763);
    @premise know(*#tS@10762, #t1@10764);
    @premise know(*#tA@10760, #t1@10765);
    @premise know(*#tS@10761, #t1@10766);
    @premise know(*#tS@10763, #t1@10767);
    @premise know(*c@10759, #t1@10768);
    @conclusion know(*A(), #t1@10757);
    @constraint #t1@10757 - #t@10586 >= 0;
    @constraint #tA@10760 - #t1@10765 >= 0;
    @constraint -$pd + #tS@10762 - #t1@10764 >= 0;
    @constraint -$pd + #tS@10763 - #t1@10767 >= 0;
    @constraint -$pd + #tS@10761 - #t1@10766 >= 0;
    @constraint #tA@10760 - #t1@10768 >= 0;
    @constraint -$pd + #tS@10763 - #tS@10762 >= 0;
    @constraint -$pd + #tS@10762 - #tA@10760 >= 0;
    @constraint -#tS@10761 + $pa + #tS@10763 >= 0;
    @constraint $pa - #tS@10763 + #tS@10762 >= 0;
    @constraint $pa - #tS@10762 + #tA@10760 >= 0;
    @constraint -$pd + #tS@10761 - #tS@10763 >= 0;
    @constraint #t@10586 - #tS@10761 >= 0;
    @constraint -$pd + #tS@10763 - #t1@10768 >= 0;
    @constraint #t@10586 - #t1@10768 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10759 != A();
    @guard c@10759 != B();
    @premise new(*[k@10758], gen(), tuple3(A(), c@10759, #tA@10760));
    @premise initS(*A(), *c@10759, *[k@10758], *#tS@10761);
    @premise initS(*A(), *c@10759, *[k@10758], *#tS@10762);
    @premise initA(*A(), *c@10759, *[k@10758], *#tA@10760);
    @premise initS(*c@10759, *A(), *[k@10758], *#tS@10763);
    @premise know(*#tS@10762, #t1@10764);
    @premise know(*#tA@10760, #t1@10765);
    @premise know(*#tS@10761, #t1@10766);
    @premise know(*#tS@10763, #t1@10767);
    @premise know(*c@10759, #t1@10768);
    @conclusion know(*A(), #t1@10757);
    @constraint #tA@10760 - #t1@10765 >= 0;
    @constraint -$pd + #tS@10762 - #t1@10764 >= 0;
    @constraint -$pd + #tS@10763 - #t1@10767 >= 0;
    @constraint -$pd + #tS@10761 - #t1@10766 >= 0;
    @constraint #tA@10760 - #t1@10768 >= 0;
    @constraint -$pd + #tS@10763 - #tS@10762 >= 0;
    @constraint -$pd + #tS@10762 - #tA@10760 >= 0;
    @constraint -#tS@10761 + $pa + #tS@10763 >= 0;
    @constraint -$pd + #tS@10761 - #tS@10763 >= 0;
    @constraint $pa - #tS@10762 + #tA@10760 >= 0;
    @constraint $pa - #tS@10763 + #tS@10762 >= 0;
    @constraint #t1@10757 - #tS@10761 >= 0;
    @constraint -$pd + #tS@10763 - #t1@10768 >= 0;
    @constraint #t1@10757 - #t1@10768 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple3(x0@44, x1@45, x2@46), #t@47);
    @conclusion know(*x2@46, #t2@48);
    @constraint -#t@47 + #t2@48 >= 0;
};
Rule in cache: 7
Rule staged: 52
Rule before check and clean: 
@rule{
    @guard c@10771 != A();
    @guard c@10771 != B();
    @premise new(*[k@10769], gen(), tuple3(A(), c@10771, #tA@10772));
    @premise initS(*A(), *c@10771, *[k@10769], *#tS@10773);
    @premise initS(*A(), *c@10771, *[k@10769], *#tS@10774);
    @premise initA(*A(), *c@10771, *[k@10769], *#tA@10772);
    @premise initS(*c@10771, *A(), *[k@10769], *#tS@10775);
    @premise know(*#tS@10774, #t1@10776);
    @premise know(*#tA@10772, #t1@10777);
    @premise know(*#tS@10773, #t1@10778);
    @premise know(*#tS@10775, #t1@10779);
    @premise know(*c@10771, #t1@10780);
    @conclusion know(*[k@10769], #t2@10770);
    @constraint #t2@10770 - #t@10586 >= 0;
    @constraint #tA@10772 - #t1@10777 >= 0;
    @constraint -$pd + #tS@10774 - #t1@10776 >= 0;
    @constraint -$pd + #tS@10775 - #t1@10779 >= 0;
    @constraint -$pd + #tS@10773 - #t1@10778 >= 0;
    @constraint #tA@10772 - #t1@10780 >= 0;
    @constraint -$pd + #tS@10775 - #tS@10774 >= 0;
    @constraint -$pd + #tS@10774 - #tA@10772 >= 0;
    @constraint -#tS@10773 + $pa + #tS@10775 >= 0;
    @constraint $pa - #tS@10775 + #tS@10774 >= 0;
    @constraint $pa - #tS@10774 + #tA@10772 >= 0;
    @constraint -$pd + #tS@10773 - #tS@10775 >= 0;
    @constraint #t@10586 - #tS@10773 >= 0;
    @constraint -$pd + #tS@10775 - #t1@10780 >= 0;
    @constraint #t@10586 - #t1@10780 >= 0;
};
Rule cached at priority 1: 
@rule{
    @guard c@10771 != A();
    @guard c@10771 != B();
    @premise new(*[k@10769], gen(), tuple3(A(), c@10771, #tA@10772));
    @premise initS(*A(), *c@10771, *[k@10769], *#tS@10773);
    @premise initS(*A(), *c@10771, *[k@10769], *#tS@10774);
    @premise initA(*A(), *c@10771, *[k@10769], *#tA@10772);
    @premise initS(*c@10771, *A(), *[k@10769], *#tS@10775);
    @premise know(*#tS@10774, #t1@10776);
    @premise know(*#tA@10772, #t1@10777);
    @premise know(*#tS@10773, #t1@10778);
    @premise know(*#tS@10775, #t1@10779);
    @premise know(*c@10771, #t1@10780);
    @conclusion know(*[k@10769], #t2@10770);
    @constraint #tA@10772 - #t1@10777 >= 0;
    @constraint -$pd + #tS@10774 - #t1@10776 >= 0;
    @constraint -$pd + #tS@10775 - #t1@10779 >= 0;
    @constraint -$pd + #tS@10773 - #t1@10778 >= 0;
    @constraint #tA@10772 - #t1@10780 >= 0;
    @constraint -$pd + #tS@10775 - #tS@10774 >= 0;
    @constraint -$pd + #tS@10774 - #tA@10772 >= 0;
    @constraint -#tS@10773 + $pa + #tS@10775 >= 0;
    @constraint -$pd + #tS@10773 - #tS@10775 >= 0;
    @constraint $pa - #tS@10774 + #tA@10772 >= 0;
    @constraint $pa - #tS@10775 + #tS@10774 >= 0;
    @constraint #t2@10770 - #tS@10773 >= 0;
    @constraint -$pd + #tS@10775 - #t1@10780 >= 0;
    @constraint #t2@10770 - #t1@10780 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[k@10597], gen(), tuple3(A(), B(), #tA@10599));
    @premise initS(*A(), *B(), *[k@10597], *#tS@10600);
    @premise initA(*A(), *B(), *[k@10597], *#tA@10599);
    @premise initS(*B(), *A(), *[k@10597], *#tS@10601);
    @premise initS(*A(), *B(), *[k@10597], *#tS@10602);
    @premise know(*#tA@10599, #t1@10603);
    @premise know(*#tS@10602, #t1@10604);
    @premise know(*#tS@10601, #t1@10605);
    @premise know(*#tS@10600, #t1@10606);
    @conclusion accept(*A(), *B(), *[k@10597], *#tB@10598);
    @constraint -$pd + #tS@10602 - #t1@10604 >= 0;
    @constraint #tA@10599 - #t1@10603 >= 0;
    @constraint -$pd + #tS@10600 - #t1@10606 >= 0;
    @constraint -$pd + #tS@10601 - #t1@10605 >= 0;
    @constraint $pa - #tS@10600 + #tA@10599 >= 0;
    @constraint -$pd + #tS@10600 - #tA@10599 >= 0;
    @constraint -#tB@10598 + $pa + #tS@10602 >= 0;
    @constraint -$pd + #tS@10601 - #tS@10600 >= 0;
    @constraint -$pd + #tS@10602 - #tS@10601 >= 0;
    @constraint -$pd + #tB@10598 - #tS@10602 >= 0;
    @constraint $pa - #tS@10601 + #tS@10600 >= 0;
    @constraint $pa - #tS@10602 + #tS@10601 >= 0;
};
Rule deleted: 
@rule{
    @premise new(*[k@10466], gen(), tuple3(A(), B(), #tA@10468));
    @premise initS(*A(), *B(), *[k@10466], *#tS@10469);
    @premise initA(*A(), *B(), *[k@10466], *#tA@10468);
    @premise initS(*B(), *A(), *[k@10466], *#tS@10470);
    @premise initS(*A(), *B(), *[k@10466], *#tS@10471);
    @premise know(*B(), #t0@10476);
    @premise know(*#tA@10468, #t1@10473);
    @premise know(*#tS@10471, #t1@10474);
    @premise know(*#tS@10470, #t1@10475);
    @premise know(*#tS@10469, #t1@10472);
    @conclusion accept(*A(), *B(), *[k@10466], *#tB@10467);
    @constraint -$pd + #tS@10470 - #t0@10476 >= 0;
    @constraint #tA@10468 - #t1@10473 >= 0;
    @constraint -$pd + #tS@10469 - #t1@10472 >= 0;
    @constraint -$pd + #tS@10470 - #t1@10475 >= 0;
    @constraint -$pd + #tS@10471 - #t1@10474 >= 0;
    @constraint #tA@10468 - #t0@10476 >= 0;
    @constraint -$pd + #tS@10469 - #tA@10468 >= 0;
    @constraint $pa - #tS@10471 + #tS@10470 >= 0;
    @constraint -$pd + #tS@10470 - #tS@10469 >= 0;
    @constraint -#tB@10467 + $pa + #tS@10471 >= 0;
    @constraint -$pd + #tS@10471 - #tS@10470 >= 0;
    @constraint $pa - #tS@10470 + #tS@10469 >= 0;
    @constraint -$pd + #tB@10467 - #tS@10471 >= 0;
    @constraint $pa - #tS@10469 + #tA@10468 >= 0;
};
Rule added.

Check rule against queries: 
@rule{
    @premise new(*[k@10597], gen(), tuple3(A(), B(), #tA@10599));
    @premise initS(*A(), *B(), *[k@10597], *#tS@10600);
    @premise initA(*A(), *B(), *[k@10597], *#tA@10599);
    @premise initS(*B(), *A(), *[k@10597], *#tS@10601);
    @premise initS(*A(), *B(), *[k@10597], *#tS@10602);
    @premise know(*#tA@10599, #t1@10603);
    @premise know(*#tS@10602, #t1@10604);
    @premise know(*#tS@10601, #t1@10605);
    @premise know(*#tS@10600, #t1@10606);
    @conclusion accept(*A(), *B(), *[k@10597], *#tB@10598);
    @constraint -$pd + #tS@10602 - #t1@10604 >= 0;
    @constraint #tA@10599 - #t1@10603 >= 0;
    @constraint -$pd + #tS@10600 - #t1@10606 >= 0;
    @constraint -$pd + #tS@10601 - #t1@10605 >= 0;
    @constraint $pa - #tS@10600 + #tA@10599 >= 0;
    @constraint -$pd + #tS@10600 - #tA@10599 >= 0;
    @constraint -#tB@10598 + $pa + #tS@10602 >= 0;
    @constraint -$pd + #tS@10601 - #tS@10600 >= 0;
    @constraint -$pd + #tS@10602 - #tS@10601 >= 0;
    @constraint -$pd + #tB@10598 - #tS@10602 >= 0;
    @constraint $pa - #tS@10601 + #tS@10600 >= 0;
    @constraint $pa - #tS@10602 + #tS@10601 >= 0;
};
Before checking:
0. Requested parameter relation:
$pd > 0

After checking:
0. Requested parameter relation:
$pd > 0
-$pa >= 0

1. Requested parameter relation:
$pd > 0
$pd - $pa > 0


Stage rule: 
@rule{
    @premise new(*[k@10609], gen(), tuple3(A(), x0@10608, #tA@10611));
    @premise know(*sk(A()), #t2@10621);
    @premise initA(*A(), *x0@10608, *[k@10609], *#tA@10611);
    @premise initS(*x0@10608, *A(), *[k@10609], *#tS@10613);
    @premise initS(*A(), *x0@10608, *[k@10609], *#tS@10614);
    @premise initS(*x0@10608, *A(), *[k@10609], *#tS@10607);
    @premise initS(*A(), *x0@10608, *[k@10609], *#tS@10612);
    @premise know(*#tS@10614, #t1@10616);
    @premise know(*#tS@10613, #t1@10617);
    @premise know(*#tS@10607, #t1@10618);
    @premise know(*#tA@10611, #t1@10619);
    @premise know(*#tS@10612, #t1@10615);
    @premise know(*x0@10608, #t0@10620);
    @conclusion know(*tuple3(#tS@10607, x0@10608, [k@10609]), #t@10610);
    @constraint #tA@10611 - #t1@10619 >= 0;
    @constraint #t@10610 - #tS@10607 >= 0;
    @constraint -$pd + #tS@10612 - #t1@10615 >= 0;
    @constraint -$pd + #tS@10613 - #t1@10617 >= 0;
    @constraint -$pd + #tS@10614 - #t1@10616 >= 0;
    @constraint -$pd + #tS@10607 - #t1@10618 >= 0;
    @constraint #t@10610 - #t2@10621 >= 0;
    @constraint #tA@10611 - #t0@10620 >= 0;
    @constraint -$pd + #tS@10613 - #tS@10612 >= 0;
    @constraint -$pd + #tS@10612 - #tA@10611 >= 0;
    @constraint $pa - #tS@10614 + #tS@10613 >= 0;
    @constraint -#tS@10607 + $pa + #tS@10614 >= 0;
    @constraint -$pd + #tS@10614 - #tS@10613 >= 0;
    @constraint -$pd + #tS@10607 - #tS@10614 >= 0;
    @constraint -$pd + #tS@10613 - #t0@10620 >= 0;
    @constraint -$pd + #tS@10607 - #t0@10620 >= 0;
    @constraint $pa - #tS@10612 + #tA@10611 >= 0;
    @constraint $pa - #tS@10613 + #tS@10612 >= 0;
};
Rule's zone is empty considering the global zones: 
Rule not added.

Stage rule: 
@rule{
    @premise new(*[k@10623], gen(), tuple3(A(), x0@10624, #tA@10625));
    @premise initS(*A(), *x0@10624, *[k@10623], *#tS@10626);
    @premise initA(*A(), *x0@10624, *[k@10623], *#tA@10625);
    @premise initS(*x0@10624, *A(), *[k@10623], *#tS@10627);
    @premise initS(*A(), *x0@10624, *[k@10623], *#tS@10628);
    @premise initS(*x0@10624, *A(), *[k@10623], *#tS@10629);
    @premise initS(*A(), *x0@10624, *[k@10623], *#tS@10622);
    @premise know(*A(), #t0@10636);
    @premise know(*#tS@10627, #t1@10632);
    @premise know(*#tS@10629, #t1@10633);
    @premise know(*#tA@10625, #t1@10634);
    @premise know(*#tS@10626, #t1@10630);
    @premise know(*#tS@10622, #t1@10637);
    @premise know(*#tS@10628, #t1@10631);
    @premise know(*x0@10624, #t0@10635);
    @conclusion know(*senc(tuple3(#tS@10622, A(), [k@10623]), sk(x0@10624)), #tS@10622);
    @constraint #tA@10625 - #t1@10634 >= 0;
    @constraint -$pd + #tS@10626 - #t1@10630 >= 0;
    @constraint -$pd + #tS@10627 - #t1@10632 >= 0;
    @constraint -$pd + #tS@10628 - #t1@10631 >= 0;
    @constraint -$pd + #tS@10629 - #t1@10633 >= 0;
    @constraint -$pd + #tS@10622 - #t0@10636 >= 0;
    @constraint -$pd + #tS@10622 - #t1@10637 >= 0;
    @constraint #tA@10625 - #t0@10635 >= 0;
    @constraint -$pd + #tS@10627 - #tS@10626 >= 0;
    @constraint -$pd + #tS@10626 - #tA@10625 >= 0;
    @constraint $pa - #tS@10629 + #tS@10628 >= 0;
    @constraint -$pd + #tS@10629 - #tS@10628 >= 0;
    @constraint $pa - #tS@10628 + #tS@10627 >= 0;
    @constraint -#tS@10622 + $pa + #tS@10629 >= 0;
    @constraint -$pd + #tS@10628 - #tS@10627 >= 0;
    @constraint -$pd + #tS@10622 - #tS@10629 >= 0;
    @constraint -$pd + #tS@10629 - #t0@10635 >= 0;
    @constraint -$pd + #tS@10627 - #t0@10635 >= 0;
    @constraint $pa - #tS@10626 + #tA@10625 >= 0;
    @constraint $pa - #tS@10627 + #tS@10626 >= 0;
};
Rule's zone is empty considering the global zones: 
Rule not added.

Stage rule: 
@rule{
    @guard c@10681 != A();
    @guard c@10681 != B();
    @premise initS(*c@10681, *x1@10678, *x2@10679, *#tS@10685);
    @premise initS(*x1@10678, *c@10681, *x2@10679, *#tS@10683);
    @premise initS(*c@10681, *x1@10678, *x2@10679, *#tS@10684);
    @premise initS(*x1@10678, *c@10681, *x2@10679, *#tS@10677);
    @premise know(*#tS@10683, #t1@10686);
    @premise know(*#tS@10677, #t1@10689);
    @premise know(*#tS@10685, #t1@10687);
    @premise know(*#tS@10684, #t1@10688);
    @premise know(*c@10681, #t1@10682);
    @premise know(*x2@10679, #t2@10691);
    @premise know(*x1@10678, #t1@10692);
    @conclusion know(*tuple3(#tS@10677, x1@10678, x2@10679), #t@10680);
    @constraint -$pd + #tS@10685 - #t2@10691 >= 0;
    @constraint -$pd + #tS@10685 - #t1@10687 >= 0;
    @constraint -$pd + #tS@10683 - #t1@10686 >= 0;
    @constraint -$pd + #tS@10684 - #t1@10688 >= 0;
    @constraint -$pd + #tS@10677 - #t1@10689 >= 0;
    @constraint -$pd + #tS@10683 - #tS@10685 >= 0;
    @constraint -$pd + #tS@10685 - #t1@10692 >= 0;
    @constraint #t@10680 - #tS@10677 >= 0;
    @constraint -$pd + #tS@10685 - #t1@10682 >= 0;
    @constraint $pa - #tS@10684 + #tS@10683 >= 0;
    @constraint -#tS@10677 + $pa + #tS@10684 >= 0;
    @constraint -$pd + #tS@10677 - #tS@10684 >= 0;
    @constraint $pa - #tS@10683 + #tS@10685 >= 0;
    @constraint -$pd + #tS@10684 - #tS@10683 >= 0;
    @constraint -$pd + #tS@10683 - #t1@10692 >= 0;
    @constraint -$pd + #tS@10684 - #t1@10682 >= 0;
    @constraint #t@10680 - #t1@10682 >= 0;
    @constraint -$pd + #tS@10677 - #t1@10692 >= 0;
};
Rule's zone is empty considering the global zones: 
Rule not added.

Stage rule: 
@rule{
    @guard c@10694 != A();
    @guard c@10694 != B();
    @premise know(*sk(x1@10697), #t2@10710);
    @premise initS(*x1@10697, *c@10694, *x2@10695, *#tS@10699);
    @premise initS(*c@10694, *x1@10697, *x2@10695, *#tS@10700);
    @premise initS(*x1@10697, *c@10694, *x2@10695, *#tS@10701);
    @premise initS(*c@10694, *x1@10697, *x2@10695, *#tS@10693);
    @premise initS(*c@10694, *x1@10697, *x2@10695, *#tS@10698);
    @premise know(*#tS@10698, #t1@10703);
    @premise know(*#tS@10699, #t1@10702);
    @premise know(*#tS@10693, #t1@10705);
    @premise know(*#tS@10701, #t1@10706);
    @premise know(*#tS@10700, #t1@10704);
    @premise know(*c@10694, #t1@10708);
    @premise know(*x2@10695, #t2@10709);
    @premise know(*x1@10697, #t1@10707);
    @conclusion know(*tuple3(#tS@10693, c@10694, x2@10695), #t@10696);
    @constraint #t@10696 - #tS@10693 >= 0;
    @constraint -$pd + #tS@10698 - #t2@10709 >= 0;
    @constraint -$pd + #tS@10698 - #t1@10703 >= 0;
    @constraint -$pd + #tS@10699 - #t1@10702 >= 0;
    @constraint -$pd + #tS@10700 - #t1@10704 >= 0;
    @constraint -$pd + #tS@10701 - #t1@10706 >= 0;
    @constraint -$pd + #tS@10693 - #t1@10705 >= 0;
    @constraint #t@10696 - #t2@10710 >= 0;
    @constraint -$pd + #tS@10698 - #t1@10707 >= 0;
    @constraint -$pd + #tS@10699 - #tS@10698 >= 0;
    @constraint -$pd + #tS@10698 - #t1@10708 >= 0;
    @constraint $pa - #tS@10700 + #tS@10699 >= 0;
    @constraint $pa - #tS@10701 + #tS@10700 >= 0;
    @constraint -#tS@10693 + $pa + #tS@10701 >= 0;
    @constraint -$pd + #tS@10701 - #tS@10700 >= 0;
    @constraint -$pd + #tS@10700 - #tS@10699 >= 0;
    @constraint -$pd + #tS@10693 - #tS@10701 >= 0;
    @constraint $pa - #tS@10699 + #tS@10698 >= 0;
    @constraint -$pd + #tS@10700 - #t1@10708 >= 0;
    @constraint -$pd + #tS@10701 - #t1@10707 >= 0;
    @constraint -$pd + #tS@10693 - #t1@10708 >= 0;
    @constraint -$pd + #tS@10699 - #t1@10707 >= 0;
};
Rule's zone is empty considering the global zones: 
Rule not added.

Stage rule: 
@rule{
    @guard c@10729 != A();
    @guard c@10729 != B();
    @premise initS(*c@10729, *x1@10727, *x2@10728, *#tS@10730);
    @premise initS(*x1@10727, *c@10729, *x2@10728, *#tS@10731);
    @premise initS(*c@10729, *x1@10727, *x2@10728, *#tS@10732);
    @premise initS(*x1@10727, *c@10729, *x2@10728, *#tS@10733);
    @premise initS(*c@10729, *x1@10727, *x2@10728, *#tS@10734);
    @premise initS(*x1@10727, *c@10729, *x2@10728, *#tS@10726);
    @premise know(*#tS@10730, #t1@10736);
    @premise know(*#tS@10731, #t1@10735);
    @premise know(*#tS@10734, #t1@10738);
    @premise know(*#tS@10733, #t1@10739);
    @premise know(*#tS@10732, #t1@10737);
    @premise know(*#tS@10726, #t1@10744);
    @premise know(*x2@10728, #t2@10742);
    @premise know(*c@10729, #t1@10741);
    @premise know(*x1@10727, #t1@10740);
    @conclusion know(*senc(tuple3(#tS@10726, x1@10727, x2@10728), sk(c@10729)), #tS@10726);
    @constraint -$pd + #tS@10730 - #t2@10742 >= 0;
    @constraint -$pd + #tS@10730 - #t1@10736 >= 0;
    @constraint -$pd + #tS@10731 - #t1@10735 >= 0;
    @constraint -$pd + #tS@10732 - #t1@10737 >= 0;
    @constraint -$pd + #tS@10733 - #t1@10739 >= 0;
    @constraint -$pd + #tS@10734 - #t1@10738 >= 0;
    @constraint -$pd + #tS@10726 - #t1@10744 >= 0;
    @constraint -$pd + #tS@10731 - #tS@10730 >= 0;
    @constraint -$pd + #tS@10730 - #t1@10740 >= 0;
    @constraint -$pd + #tS@10730 - #t1@10741 >= 0;
    @constraint -$pd + #tS@10726 - #tS@10734 >= 0;
    @constraint -$pd + #tS@10733 - #tS@10732 >= 0;
    @constraint $pa - #tS@10732 + #tS@10731 >= 0;
    @constraint -$pd + #tS@10732 - #tS@10731 >= 0;
    @constraint $pa - #tS@10733 + #tS@10732 >= 0;
    @constraint -$pd + #tS@10734 - #tS@10733 >= 0;
    @constraint $pa - #tS@10731 + #tS@10730 >= 0;
    @constraint $pa - #tS@10734 + #tS@10733 >= 0;
    @constraint -#tS@10726 + $pa + #tS@10734 >= 0;
    @constraint -$pd + #tS@10731 - #t1@10740 >= 0;
    @constraint -$pd + #tS@10726 - #t1@10740 >= 0;
    @constraint -$pd + #tS@10734 - #t1@10741 >= 0;
    @constraint -$pd + #tS@10733 - #t1@10740 >= 0;
    @constraint -$pd + #tS@10732 - #t1@10741 >= 0;
};
Rule's zone is empty considering the global zones: 
Rule not added.

Stage rule: 
@rule{
    @guard c@10759 != A();
    @guard c@10759 != B();
    @premise new(*[k@10758], gen(), tuple3(A(), c@10759, #tA@10760));
    @premise initS(*A(), *c@10759, *[k@10758], *#tS@10761);
    @premise initS(*A(), *c@10759, *[k@10758], *#tS@10762);
    @premise initA(*A(), *c@10759, *[k@10758], *#tA@10760);
    @premise initS(*c@10759, *A(), *[k@10758], *#tS@10763);
    @premise know(*#tS@10762, #t1@10764);
    @premise know(*#tA@10760, #t1@10765);
    @premise know(*#tS@10761, #t1@10766);
    @premise know(*#tS@10763, #t1@10767);
    @premise know(*c@10759, #t1@10768);
    @conclusion know(*A(), #t1@10757);
    @constraint #tA@10760 - #t1@10765 >= 0;
    @constraint -$pd + #tS@10762 - #t1@10764 >= 0;
    @constraint -$pd + #tS@10763 - #t1@10767 >= 0;
    @constraint -$pd + #tS@10761 - #t1@10766 >= 0;
    @constraint #tA@10760 - #t1@10768 >= 0;
    @constraint -$pd + #tS@10763 - #tS@10762 >= 0;
    @constraint -$pd + #tS@10762 - #tA@10760 >= 0;
    @constraint -#tS@10761 + $pa + #tS@10763 >= 0;
    @constraint -$pd + #tS@10761 - #tS@10763 >= 0;
    @constraint $pa - #tS@10762 + #tA@10760 >= 0;
    @constraint $pa - #tS@10763 + #tS@10762 >= 0;
    @constraint #t1@10757 - #tS@10761 >= 0;
    @constraint -$pd + #tS@10763 - #t1@10768 >= 0;
    @constraint #t1@10757 - #t1@10768 >= 0;
};
Rule's zone is empty considering the global zones: 
Rule not added.

Stage rule: 
@rule{
    @guard c@10771 != A();
    @guard c@10771 != B();
    @premise new(*[k@10769], gen(), tuple3(A(), c@10771, #tA@10772));
    @premise initS(*A(), *c@10771, *[k@10769], *#tS@10773);
    @premise initS(*A(), *c@10771, *[k@10769], *#tS@10774);
    @premise initA(*A(), *c@10771, *[k@10769], *#tA@10772);
    @premise initS(*c@10771, *A(), *[k@10769], *#tS@10775);
    @premise know(*#tS@10774, #t1@10776);
    @premise know(*#tA@10772, #t1@10777);
    @premise know(*#tS@10773, #t1@10778);
    @premise know(*#tS@10775, #t1@10779);
    @premise know(*c@10771, #t1@10780);
    @conclusion know(*[k@10769], #t2@10770);
    @constraint #tA@10772 - #t1@10777 >= 0;
    @constraint -$pd + #tS@10774 - #t1@10776 >= 0;
    @constraint -$pd + #tS@10775 - #t1@10779 >= 0;
    @constraint -$pd + #tS@10773 - #t1@10778 >= 0;
    @constraint #tA@10772 - #t1@10780 >= 0;
    @constraint -$pd + #tS@10775 - #tS@10774 >= 0;
    @constraint -$pd + #tS@10774 - #tA@10772 >= 0;
    @constraint -#tS@10773 + $pa + #tS@10775 >= 0;
    @constraint -$pd + #tS@10773 - #tS@10775 >= 0;
    @constraint $pa - #tS@10774 + #tA@10772 >= 0;
    @constraint $pa - #tS@10775 + #tS@10774 >= 0;
    @constraint #t2@10770 - #tS@10773 >= 0;
    @constraint -$pd + #tS@10775 - #t1@10780 >= 0;
    @constraint #t2@10770 - #t1@10780 >= 0;
};
Rule's zone is empty considering the global zones: 
Rule not added.

Details:
General Rules: 
Rule No. [0.0]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@13, #t0@14);
    @premise know(*x1@15, #t1@16);
    @conclusion know(*tuple2(x0@13, x1@15), #t@17);
    @constraint -#t0@14 + #t@17 >= 0;
    @constraint #t@17 - #t1@16 >= 0;
};

Rule No. [0.1]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple2(x0@18, x1@19), #t@20);
    @conclusion know(*x0@18, #t0@21);
    @constraint -#t@20 + #t0@21 >= 0;
};

Rule No. [0.2]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple2(x0@22, x1@23), #t@24);
    @conclusion know(*x1@23, #t1@25);
    @constraint -#t@24 + #t1@25 >= 0;
};

Rule No. [0.3]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@27, #t0@28);
    @premise know(*x1@29, #t1@30);
    @premise know(*x2@31, #t2@32);
    @conclusion know(*tuple3(x0@27, x1@29, x2@31), #t@33);
    @constraint -#t0@28 + #t@33 >= 0;
    @constraint #t@33 - #t1@30 >= 0;
    @constraint #t@33 - #t2@32 >= 0;
};

Rule No. [0.4]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple3(x0@34, x1@35, x2@36), #t@37);
    @conclusion know(*x0@34, #t0@38);
    @constraint -#t@37 + #t0@38 >= 0;
};

Rule No. [0.5]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple3(x0@39, x1@40, x2@41), #t@42);
    @conclusion know(*x1@40, #t1@43);
    @constraint -#t@42 + #t1@43 >= 0;
};

Rule No. [0.6]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple3(x0@44, x1@45, x2@46), #t@47);
    @conclusion know(*x2@46, #t2@48);
    @constraint -#t@47 + #t2@48 >= 0;
};

Rule No. [1.0]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @conclusion know(*A(), #t@10004);
};

Rule No. [1.1]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @conclusion know(*B(), #t@10005);
};

Rule No. [1.2]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @guard c@10007 != A();
    @guard c@10007 != B();
    @premise know(*c@10007, #t1@10008);
    @conclusion know(*sk(c@10007), #t@10009);
    @constraint -#t1@10008 + #t@10009 >= 0;
};

Rule No. [1.3]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*m@10011, #t1@10012);
    @premise know(*k@10013, #t2@10014);
    @conclusion know(*senc(m@10011, k@10013), #t@10015);
    @constraint -#t1@10012 + #t@10015 >= 0;
    @constraint #t@10015 - #t2@10014 >= 0;
};

Rule No. [1.4]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*senc(m@10016, k@10017), #t1@10018);
    @premise know(*k@10017, #t2@10019);
    @conclusion know(*m@10016, #t@10020);
    @constraint -#t1@10018 + #t@10020 >= 0;
    @constraint #t@10020 - #t2@10019 >= 0;
};

Rule No. [1.5]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple2(R@10021, #tA@10022), #t@10023);
    @premise new(*[k@10024], gen(), tuple3(A(), R@10021, #tA@10022));
    @premise initA(*A(), *R@10021, *[k@10024], *#tA@10022);
    @conclusion know(*tuple2(A(), senc(tuple3(#tA@10022, R@10021, [k@10024]), sk(A()))), #tA@10022);
    @constraint #tA@10022 - #t@10023 >= 0;
};

Rule No. [1.6]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise know(*#tS@10025, #t1@10026);
    @premise know(*tuple2(I@10027, senc(tuple3(#tI@10028, R@10029, k@10030), sk(I@10027))), #t2@10031);
    @premise initS(*I@10027, *R@10029, *k@10030, *#tS@10025);
    @conclusion know(*senc(tuple3(#tS@10025, I@10027, k@10030), sk(R@10029)), #tS@10025);
    @constraint -$pd + #tS@10025 - #t1@10026 >= 0;
    @constraint -$pd + #tS@10025 - #t2@10031 >= 0;
    @constraint -#tS@10025 + $pa + #tI@10028 >= 0;
};

Rule No. [1.7]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*senc(tuple3(#tS@10032, A(), k@10033), sk(B())), #t@10034);
    @conclusion accept(*A(), *B(), *k@10033, *#tB@10035);
    @constraint -$pd - #t@10034 + #tB@10035 >= 0;
    @constraint -#tB@10035 + $pa + #tS@10032 >= 0;
};

Rule No. [1.8]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise new(*[k@10036], gen(), tuple3(A(), B(), #tA@10037));
    @premise know(*[k@10036], #t@10038);
    @conclusion leak(*[k@10036]);
};

Rule No. [1.9]
Valid Rule
Composed by Rule [0.0] and [1.5]
Not Selectable : 
@rule{
    @premise know(*x0@10082, #t0@10084);
    @premise know(*#tA@10081, #t1@10085);
    @premise new(*[k@10083], gen(), tuple3(A(), x0@10082, #tA@10081));
    @premise initA(*A(), *x0@10082, *[k@10083], *#tA@10081);
    @conclusion know(*tuple2(A(), senc(tuple3(#tA@10081, x0@10082, [k@10083]), sk(A()))), #tA@10081);
    @constraint #tA@10081 - #t1@10085 >= 0;
    @constraint #tA@10081 - #t0@10084 >= 0;
};

Rule No. [1.10]
Valid Rule
Composed by Rule [0.0] and [1.6]
Selectable at 1:
@rule{
    @premise know(*x0@10087, #t0@10090);
    @premise know(*senc(tuple3(#tI@10091, R@10089, k@10088), sk(x0@10087)), #t1@10092);
    @premise know(*#tS@10086, #t1@10093);
    @premise initS(*x0@10087, *R@10089, *k@10088, *#tS@10086);
    @conclusion know(*senc(tuple3(#tS@10086, x0@10087, k@10088), sk(R@10089)), #tS@10086);
    @constraint -$pd + #tS@10086 - #t1@10093 >= 0;
    @constraint -#tS@10086 + $pa + #tI@10091 >= 0;
    @constraint -$pd + #tS@10086 - #t0@10090 >= 0;
    @constraint -$pd + #tS@10086 - #t1@10092 >= 0;
};

Rule No. [1.11]
Valid Rule
Composed by Rule [1.3] and [1.7]
Selectable at 0:
@rule{
    @premise know(*tuple3(#tS@10096, A(), k@10094), #t1@10097);
    @premise know(*sk(B()), #t2@10098);
    @conclusion accept(*A(), *B(), *k@10094, *#tB@10095);
    @constraint -#tB@10095 + $pa + #tS@10096 >= 0;
    @constraint -$pd + #tB@10095 - #t1@10097 >= 0;
    @constraint -$pd + #tB@10095 - #t2@10098 >= 0;
};

Rule No. [1.12]
Valid Rule
Composed by Rule [1.9] and [0.2]
Not Selectable : 
@rule{
    @premise know(*x0@10106, #t0@10109);
    @premise know(*#tA@10105, #t1@10110);
    @premise new(*[k@10107], gen(), tuple3(A(), x0@10106, #tA@10105));
    @premise initA(*A(), *x0@10106, *[k@10107], *#tA@10105);
    @conclusion know(*senc(tuple3(#tA@10105, x0@10106, [k@10107]), sk(A())), #t1@10108);
    @constraint #tA@10105 - #t1@10110 >= 0;
    @constraint #t1@10108 - #tA@10105 >= 0;
    @constraint #tA@10105 - #t0@10109 >= 0;
};

Rule No. [1.13]
Valid Rule
Composed by Rule [1.3] and [1.10]
Selectable at 0:
@rule{
    @premise know(*tuple3(#tI@10115, R@10114, k@10113), #t1@10116);
    @premise know(*sk(x0@10112), #t2@10117);
    @premise initS(*x0@10112, *R@10114, *k@10113, *#tS@10111);
    @premise know(*#tS@10111, #t1@10119);
    @premise know(*x0@10112, #t0@10118);
    @conclusion know(*senc(tuple3(#tS@10111, x0@10112, k@10113), sk(R@10114)), #tS@10111);
    @constraint -$pd + #tS@10111 - #t0@10118 >= 0;
    @constraint -$pd + #tS@10111 - #t1@10119 >= 0;
    @constraint -#tS@10111 + $pa + #tI@10115 >= 0;
    @constraint -$pd + #tS@10111 - #t1@10116 >= 0;
    @constraint -$pd + #tS@10111 - #t2@10117 >= 0;
};

Rule No. [1.14]
Replaced by Rule [1.18]
Composed by Rule [0.3] and [1.11]
Selectable at 0:
@rule{
    @premise know(*A(), #t1@10124);
    @premise know(*x2@10120, #t2@10125);
    @premise know(*sk(B()), #t2@10126);
    @conclusion accept(*A(), *B(), *x2@10120, *#tB@10121);
    @constraint -$pd + #tB@10121 - #t2@10126 >= 0;
    @constraint -$pd + #tB@10121 - #t1@10124 >= 0;
    @constraint -$pd + #tB@10121 - #t2@10125 >= 0;
};

Rule No. [1.15]
Valid Rule
Composed by Rule [1.12] and [1.4]
Selectable at 1:
@rule{
    @premise new(*[k@10129], gen(), tuple3(A(), x0@10128, #tA@10127));
    @premise know(*sk(A()), #t2@10133);
    @premise initA(*A(), *x0@10128, *[k@10129], *#tA@10127);
    @premise know(*#tA@10127, #t1@10132);
    @premise know(*x0@10128, #t0@10131);
    @conclusion know(*tuple3(#tA@10127, x0@10128, [k@10129]), #t@10130);
    @constraint #tA@10127 - #t1@10132 >= 0;
    @constraint #tA@10127 - #t0@10131 >= 0;
    @constraint #t@10130 - #t2@10133 >= 0;
    @constraint #t@10130 - #tA@10127 >= 0;
};

Rule No. [1.16]
Replaced by Rule [1.19]
Composed by Rule [1.12] and [1.10]
Selectable at 3:
@rule{
    @premise new(*[k@10135], gen(), tuple3(A(), x0@10136, #tA@10138));
    @premise initS(*A(), *x0@10136, *[k@10135], *#tS@10134);
    @premise initA(*A(), *x0@10136, *[k@10135], *#tA@10138);
    @premise know(*A(), #t0@10140);
    @premise know(*#tA@10138, #t1@10139);
    @premise know(*#tS@10134, #t1@10141);
    @premise know(*x0@10136, #t0@10137);
    @conclusion know(*senc(tuple3(#tS@10134, A(), [k@10135]), sk(x0@10136)), #tS@10134);
    @constraint #tA@10138 - #t1@10139 >= 0;
    @constraint #tA@10138 - #t0@10137 >= 0;
    @constraint -$pd + #tS@10134 - #t0@10140 >= 0;
    @constraint -$pd + #tS@10134 - #t1@10141 >= 0;
    @constraint -$pd + #tS@10134 - #tA@10138 >= 0;
    @constraint -#tS@10134 + $pa + #tA@10138 >= 0;
};

Rule No. [1.17]
Valid Rule
Composed by Rule [0.3] and [1.13]
Selectable at 0:
@rule{
    @premise know(*sk(x0@10143), #t2@10150);
    @premise initS(*x0@10143, *x1@10145, *x2@10144, *#tS@10142);
    @premise know(*#tS@10142, #t1@10151);
    @premise know(*x1@10145, #t1@10148);
    @premise know(*x2@10144, #t2@10149);
    @premise know(*x0@10143, #t0@10152);
    @conclusion know(*senc(tuple3(#tS@10142, x0@10143, x2@10144), sk(x1@10145)), #tS@10142);
    @constraint -$pd + #tS@10142 - #t2@10150 >= 0;
    @constraint -$pd + #tS@10142 - #t0@10152 >= 0;
    @constraint -$pd + #tS@10142 - #t1@10151 >= 0;
    @constraint -$pd + #tS@10142 - #t1@10148 >= 0;
    @constraint -$pd + #tS@10142 - #t2@10149 >= 0;
};

Rule No. [1.18]
Valid Rule
Composed by Rule [1.0] and [1.14]
Selectable at 1:
@rule{
    @premise know(*x2@10153, #t2@10155);
    @premise know(*sk(B()), #t2@10156);
    @conclusion accept(*A(), *B(), *x2@10153, *#tB@10154);
    @constraint -$pd + #tB@10154 - #t2@10155 >= 0;
    @constraint -$pd + #tB@10154 - #t2@10156 >= 0;
};

Rule No. [1.19]
Valid Rule
Composed by Rule [1.0] and [1.16]
Not Selectable : 
@rule{
    @premise new(*[k@10165], gen(), tuple3(A(), x0@10166, #tA@10167));
    @premise initS(*A(), *x0@10166, *[k@10165], *#tS@10164);
    @premise initA(*A(), *x0@10166, *[k@10165], *#tA@10167);
    @premise know(*#tA@10167, #t1@10168);
    @premise know(*#tS@10164, #t1@10169);
    @premise know(*x0@10166, #t0@10170);
    @conclusion know(*senc(tuple3(#tS@10164, A(), [k@10165]), sk(x0@10166)), #tS@10164);
    @constraint #tA@10167 - #t1@10168 >= 0;
    @constraint #tA@10167 - #t0@10170 >= 0;
    @constraint -$pd + #tS@10164 - #t1@10169 >= 0;
    @constraint -$pd + #tS@10164 - #tA@10167 >= 0;
    @constraint -#tS@10164 + $pa + #tA@10167 >= 0;
};

Rule No. [1.20]
Valid Rule
Composed by Rule [1.2] and [1.17]
Not Selectable : 
@rule{
    @guard c@10172 != A();
    @guard c@10172 != B();
    @premise initS(*c@10172, *x1@10174, *x2@10173, *#tS@10171);
    @premise know(*#tS@10171, #t1@10176);
    @premise know(*c@10172, #t1@10175);
    @premise know(*x1@10174, #t1@10177);
    @premise know(*x2@10173, #t2@10178);
    @conclusion know(*senc(tuple3(#tS@10171, c@10172, x2@10173), sk(x1@10174)), #tS@10171);
    @constraint -$pd + #tS@10171 - #t2@10178 >= 0;
    @constraint -$pd + #tS@10171 - #t1@10177 >= 0;
    @constraint -$pd + #tS@10171 - #t1@10176 >= 0;
    @constraint -$pd + #tS@10171 - #t1@10175 >= 0;
};

Rule No. [1.21]
Valid Rule
Composed by Rule [1.19] and [1.4]
Selectable at 3:
@rule{
    @premise new(*[k@10185], gen(), tuple3(A(), x0@10187, #tA@10188));
    @premise initS(*A(), *x0@10187, *[k@10185], *#tS@10184);
    @premise initA(*A(), *x0@10187, *[k@10185], *#tA@10188);
    @premise know(*sk(x0@10187), #t2@10192);
    @premise know(*#tS@10184, #t1@10190);
    @premise know(*#tA@10188, #t1@10189);
    @premise know(*x0@10187, #t0@10191);
    @conclusion know(*tuple3(#tS@10184, A(), [k@10185]), #t@10186);
    @constraint #tA@10188 - #t1@10189 >= 0;
    @constraint #t@10186 - #tS@10184 >= 0;
    @constraint #tA@10188 - #t0@10191 >= 0;
    @constraint -$pd + #tS@10184 - #t1@10190 >= 0;
    @constraint -$pd + #tS@10184 - #tA@10188 >= 0;
    @constraint #t@10186 - #t2@10192 >= 0;
    @constraint -#tS@10184 + $pa + #tA@10188 >= 0;
};

Rule No. [1.22]
Replaced by Rule [1.27]
Composed by Rule [1.19] and [1.7]
Selectable at 3:
@rule{
    @premise new(*[k@10193], gen(), tuple3(A(), B(), #tA@10195));
    @premise initS(*A(), *B(), *[k@10193], *#tS@10196);
    @premise initA(*A(), *B(), *[k@10193], *#tA@10195);
    @premise know(*B(), #t0@10199);
    @premise know(*#tA@10195, #t1@10197);
    @premise know(*#tS@10196, #t1@10198);
    @conclusion accept(*A(), *B(), *[k@10193], *#tB@10194);
    @constraint #tA@10195 - #t0@10199 >= 0;
    @constraint -$pd + #tS@10196 - #t1@10198 >= 0;
    @constraint #tA@10195 - #t1@10197 >= 0;
    @constraint -$pd + #tB@10194 - #tS@10196 >= 0;
    @constraint $pa - #tS@10196 + #tA@10195 >= 0;
    @constraint -#tB@10194 + $pa + #tS@10196 >= 0;
    @constraint -$pd + #tS@10196 - #tA@10195 >= 0;
};

Rule No. [1.23]
Valid Rule
Composed by Rule [1.19] and [1.10]
Not Selectable : 
@rule{
    @premise new(*[k@10202], gen(), tuple3(A(), x0@10201, #tA@10203));
    @premise initS(*A(), *x0@10201, *[k@10202], *#tS@10204);
    @premise initA(*A(), *x0@10201, *[k@10202], *#tA@10203);
    @premise initS(*x0@10201, *A(), *[k@10202], *#tS@10200);
    @premise know(*#tA@10203, #t1@10205);
    @premise know(*#tS@10200, #t1@10209);
    @premise know(*#tS@10204, #t1@10206);
    @premise know(*x0@10201, #t0@10207);
    @conclusion know(*senc(tuple3(#tS@10200, x0@10201, [k@10202]), sk(A())), #tS@10200);
    @constraint -$pd + #tS@10200 - #t0@10207 >= 0;
    @constraint #tA@10203 - #t1@10205 >= 0;
    @constraint -$pd + #tS@10204 - #t1@10206 >= 0;
    @constraint -$pd + #tS@10200 - #t1@10209 >= 0;
    @constraint #tA@10203 - #t0@10207 >= 0;
    @constraint -#tS@10200 + $pa + #tS@10204 >= 0;
    @constraint $pa - #tS@10204 + #tA@10203 >= 0;
    @constraint -$pd + #tS@10200 - #tS@10204 >= 0;
    @constraint -$pd + #tS@10204 - #tA@10203 >= 0;
};

Rule No. [1.24]
Valid Rule
Composed by Rule [1.20] and [1.4]
Selectable at 0:
@rule{
    @guard c@10211 != A();
    @guard c@10211 != B();
    @premise know(*sk(x1@10214), #t2@10219);
    @premise initS(*c@10211, *x1@10214, *x2@10212, *#tS@10210);
    @premise know(*#tS@10210, #t1@10215);
    @premise know(*c@10211, #t1@10216);
    @premise know(*x1@10214, #t1@10217);
    @premise know(*x2@10212, #t2@10218);
    @conclusion know(*tuple3(#tS@10210, c@10211, x2@10212), #t@10213);
    @constraint #t@10213 - #tS@10210 >= 0;
    @constraint -$pd + #tS@10210 - #t2@10218 >= 0;
    @constraint -$pd + #tS@10210 - #t1@10217 >= 0;
    @constraint -$pd + #tS@10210 - #t1@10215 >= 0;
    @constraint -$pd + #tS@10210 - #t1@10216 >= 0;
    @constraint #t@10213 - #t2@10219 >= 0;
};

Rule No. [1.25]
Valid Rule
Composed by Rule [1.20] and [1.10]
Not Selectable : 
@rule{
    @guard c@10230 != A();
    @guard c@10230 != B();
    @premise initS(*c@10230, *x1@10228, *x2@10229, *#tS@10231);
    @premise initS(*x1@10228, *c@10230, *x2@10229, *#tS@10227);
    @premise know(*#tS@10231, #t1@10232);
    @premise know(*#tS@10227, #t1@10237);
    @premise know(*c@10230, #t1@10233);
    @premise know(*x2@10229, #t2@10235);
    @premise know(*x1@10228, #t1@10234);
    @conclusion know(*senc(tuple3(#tS@10227, x1@10228, x2@10229), sk(c@10230)), #tS@10227);
    @constraint -$pd + #tS@10227 - #t1@10234 >= 0;
    @constraint -#tS@10227 + $pa + #tS@10231 >= 0;
    @constraint -$pd + #tS@10231 - #t1@10233 >= 0;
    @constraint -$pd + #tS@10231 - #t2@10235 >= 0;
    @constraint -$pd + #tS@10231 - #t1@10232 >= 0;
    @constraint -$pd + #tS@10227 - #t1@10237 >= 0;
    @constraint -$pd + #tS@10227 - #tS@10231 >= 0;
    @constraint -$pd + #tS@10231 - #t1@10234 >= 0;
};

Rule No. [1.26]
Valid Rule
Composed by Rule [1.2] and [1.21]
Not Selectable : 
@rule{
    @guard c@10241 != A();
    @guard c@10241 != B();
    @premise new(*[k@10239], gen(), tuple3(A(), c@10241, #tA@10243));
    @premise initS(*A(), *c@10241, *[k@10239], *#tS@10238);
    @premise initA(*A(), *c@10241, *[k@10239], *#tA@10243);
    @premise know(*#tS@10238, #t1@10244);
    @premise know(*#tA@10243, #t1@10245);
    @premise know(*c@10241, #t1@10242);
    @conclusion know(*tuple3(#tS@10238, A(), [k@10239]), #t@10240);
    @constraint #t@10240 - #t1@10242 >= 0;
    @constraint #tA@10243 - #t1@10245 >= 0;
    @constraint -#tS@10238 + $pa + #tA@10243 >= 0;
    @constraint -$pd + #tS@10238 - #t1@10244 >= 0;
    @constraint -$pd + #tS@10238 - #tA@10243 >= 0;
    @constraint #t@10240 - #tS@10238 >= 0;
    @constraint #tA@10243 - #t1@10242 >= 0;
};

Rule No. [1.28]
Valid Rule
Composed by Rule [1.23] and [1.4]
Selectable at 1:
@rule{
    @premise new(*[k@10255], gen(), tuple3(A(), x0@10254, #tA@10257));
    @premise know(*sk(A()), #t2@10263);
    @premise initA(*A(), *x0@10254, *[k@10255], *#tA@10257);
    @premise initS(*x0@10254, *A(), *[k@10255], *#tS@10253);
    @premise initS(*A(), *x0@10254, *[k@10255], *#tS@10258);
    @premise know(*#tS@10253, #t1@10260);
    @premise know(*#tS@10258, #t1@10261);
    @premise know(*#tA@10257, #t1@10259);
    @premise know(*x0@10254, #t0@10262);
    @conclusion know(*tuple3(#tS@10253, x0@10254, [k@10255]), #t@10256);
    @constraint -$pd + #tS@10253 - #t0@10262 >= 0;
    @constraint #tA@10257 - #t1@10259 >= 0;
    @constraint #t@10256 - #tS@10253 >= 0;
    @constraint -$pd + #tS@10258 - #t1@10261 >= 0;
    @constraint -$pd + #tS@10253 - #t1@10260 >= 0;
    @constraint #t@10256 - #t2@10263 >= 0;
    @constraint #tA@10257 - #t0@10262 >= 0;
    @constraint $pa - #tS@10258 + #tA@10257 >= 0;
    @constraint -#tS@10253 + $pa + #tS@10258 >= 0;
    @constraint -$pd + #tS@10258 - #tA@10257 >= 0;
    @constraint -$pd + #tS@10253 - #tS@10258 >= 0;
};

Rule No. [1.29]
Replaced by Rule [1.34]
Composed by Rule [1.23] and [1.10]
Selectable at 5:
@rule{
    @premise new(*[k@10265], gen(), tuple3(A(), x0@10266, #tA@10267));
    @premise initS(*A(), *x0@10266, *[k@10265], *#tS@10268);
    @premise initA(*A(), *x0@10266, *[k@10265], *#tA@10267);
    @premise initS(*x0@10266, *A(), *[k@10265], *#tS@10269);
    @premise initS(*A(), *x0@10266, *[k@10265], *#tS@10264);
    @premise know(*A(), #t0@10274);
    @premise know(*#tS@10268, #t1@10272);
    @premise know(*#tA@10267, #t1@10270);
    @premise know(*#tS@10264, #t1@10275);
    @premise know(*#tS@10269, #t1@10271);
    @premise know(*x0@10266, #t0@10273);
    @conclusion know(*senc(tuple3(#tS@10264, A(), [k@10265]), sk(x0@10266)), #tS@10264);
    @constraint -$pd + #tS@10269 - #t0@10273 >= 0;
    @constraint #tA@10267 - #t1@10270 >= 0;
    @constraint -$pd + #tS@10268 - #t1@10272 >= 0;
    @constraint -$pd + #tS@10269 - #t1@10271 >= 0;
    @constraint -$pd + #tS@10264 - #t0@10274 >= 0;
    @constraint -$pd + #tS@10264 - #t1@10275 >= 0;
    @constraint #tA@10267 - #t0@10273 >= 0;
    @constraint -#tS@10264 + $pa + #tS@10269 >= 0;
    @constraint -$pd + #tS@10268 - #tA@10267 >= 0;
    @constraint -$pd + #tS@10269 - #tS@10268 >= 0;
    @constraint $pa - #tS@10269 + #tS@10268 >= 0;
    @constraint -$pd + #tS@10264 - #tS@10269 >= 0;
    @constraint $pa - #tS@10268 + #tA@10267 >= 0;
};

Rule No. [1.30]
Valid Rule
Composed by Rule [1.2] and [1.24]
Not Selectable : 
@rule{
    @guard c@10280 != A();
    @guard c@10280 != B();
    @guard c@10277 != A();
    @guard c@10277 != B();
    @premise initS(*c@10277, *c@10280, *x2@10278, *#tS@10276);
    @premise know(*#tS@10276, #t1@10282);
    @premise know(*c@10280, #t1@10281);
    @premise know(*c@10277, #t1@10283);
    @premise know(*x2@10278, #t2@10285);
    @conclusion know(*tuple3(#tS@10276, c@10277, x2@10278), #t@10279);
    @constraint #t@10279 - #t1@10281 >= 0;
    @constraint -$pd + #tS@10276 - #t1@10283 >= 0;
    @constraint -$pd + #tS@10276 - #t2@10285 >= 0;
    @constraint -$pd + #tS@10276 - #t1@10282 >= 0;
    @constraint #t@10279 - #tS@10276 >= 0;
    @constraint -$pd + #tS@10276 - #t1@10281 >= 0;
};

Rule No. [1.31]
Valid Rule
Composed by Rule [1.25] and [1.4]
Selectable at 0:
@rule{
    @guard c@10290 != A();
    @guard c@10290 != B();
    @premise know(*sk(c@10290), #t2@10297);
    @premise initS(*x1@10287, *c@10290, *x2@10288, *#tS@10286);
    @premise initS(*c@10290, *x1@10287, *x2@10288, *#tS@10291);
    @premise know(*#tS@10291, #t1@10292);
    @premise know(*#tS@10286, #t1@10293);
    @premise know(*x2@10288, #t2@10295);
    @premise know(*x1@10287, #t1@10296);
    @premise know(*c@10290, #t1@10294);
    @conclusion know(*tuple3(#tS@10286, x1@10287, x2@10288), #t@10289);
    @constraint -$pd + #tS@10286 - #t1@10296 >= 0;
    @constraint -$pd + #tS@10291 - #t1@10294 >= 0;
    @constraint #t@10289 - #tS@10286 >= 0;
    @constraint -#tS@10286 + $pa + #tS@10291 >= 0;
    @constraint -$pd + #tS@10291 - #t2@10295 >= 0;
    @constraint -$pd + #tS@10291 - #t1@10292 >= 0;
    @constraint -$pd + #tS@10286 - #t1@10293 >= 0;
    @constraint #t@10289 - #t2@10297 >= 0;
    @constraint -$pd + #tS@10286 - #tS@10291 >= 0;
    @constraint -$pd + #tS@10291 - #t1@10296 >= 0;
};

Rule No. [1.32]
Valid Rule
Composed by Rule [1.25] and [1.10]
Not Selectable : 
@rule{
    @guard c@10308 != A();
    @guard c@10308 != B();
    @premise initS(*c@10308, *x1@10310, *x2@10309, *#tS@10311);
    @premise initS(*x1@10310, *c@10308, *x2@10309, *#tS@10312);
    @premise initS(*c@10308, *x1@10310, *x2@10309, *#tS@10307);
    @premise know(*#tS@10312, #t1@10314);
    @premise know(*#tS@10311, #t1@10313);
    @premise know(*#tS@10307, #t1@10319);
    @premise know(*x2@10309, #t2@10316);
    @premise know(*x1@10310, #t1@10317);
    @premise know(*c@10308, #t1@10315);
    @conclusion know(*senc(tuple3(#tS@10307, c@10308, x2@10309), sk(x1@10310)), #tS@10307);
    @constraint -$pd + #tS@10311 - #t2@10316 >= 0;
    @constraint -$pd + #tS@10311 - #t1@10313 >= 0;
    @constraint -$pd + #tS@10312 - #t1@10314 >= 0;
    @constraint -$pd + #tS@10307 - #t1@10319 >= 0;
    @constraint -$pd + #tS@10312 - #tS@10311 >= 0;
    @constraint -#tS@10307 + $pa + #tS@10312 >= 0;
    @constraint -$pd + #tS@10311 - #t1@10317 >= 0;
    @constraint $pa - #tS@10312 + #tS@10311 >= 0;
    @constraint -$pd + #tS@10307 - #tS@10312 >= 0;
    @constraint -$pd + #tS@10311 - #t1@10315 >= 0;
    @constraint -$pd + #tS@10307 - #t1@10315 >= 0;
    @constraint -$pd + #tS@10312 - #t1@10317 >= 0;
};

Rule No. [1.33]
Valid Rule
Composed by Rule [1.26] and [0.6]
Not Selectable : 
@rule{
    @guard c@10338 != A();
    @guard c@10338 != B();
    @premise new(*[k@10336], gen(), tuple3(A(), c@10338, #tA@10339));
    @premise initS(*A(), *c@10338, *[k@10336], *#tS@10340);
    @premise initA(*A(), *c@10338, *[k@10336], *#tA@10339);
    @premise know(*#tS@10340, #t1@10341);
    @premise know(*#tA@10339, #t1@10342);
    @premise know(*c@10338, #t1@10343);
    @conclusion know(*[k@10336], #t2@10337);
    @constraint -#tS@10340 + $pa + #tA@10339 >= 0;
    @constraint #tA@10339 - #t1@10342 >= 0;
    @constraint -$pd + #tS@10340 - #t1@10341 >= 0;
    @constraint -$pd + #tS@10340 - #tA@10339 >= 0;
    @constraint #tA@10339 - #t1@10343 >= 0;
    @constraint #t2@10337 - #t1@10343 >= 0;
    @constraint #t2@10337 - #tS@10340 >= 0;
};

Rule No. [1.34]
Valid Rule
Composed by Rule [1.0] and [1.29]
Not Selectable : 
@rule{
    @premise new(*[k@10356], gen(), tuple3(A(), x0@10357, #tA@10358));
    @premise initS(*A(), *x0@10357, *[k@10356], *#tS@10359);
    @premise initA(*A(), *x0@10357, *[k@10356], *#tA@10358);
    @premise initS(*x0@10357, *A(), *[k@10356], *#tS@10360);
    @premise initS(*A(), *x0@10357, *[k@10356], *#tS@10355);
    @premise know(*#tS@10359, #t1@10361);
    @premise know(*#tA@10358, #t1@10362);
    @premise know(*#tS@10355, #t1@10363);
    @premise know(*#tS@10360, #t1@10364);
    @premise know(*x0@10357, #t0@10365);
    @conclusion know(*senc(tuple3(#tS@10355, A(), [k@10356]), sk(x0@10357)), #tS@10355);
    @constraint -$pd + #tS@10360 - #t0@10365 >= 0;
    @constraint #tA@10358 - #t1@10362 >= 0;
    @constraint -$pd + #tS@10359 - #t1@10361 >= 0;
    @constraint -$pd + #tS@10360 - #t1@10364 >= 0;
    @constraint -$pd + #tS@10355 - #t1@10363 >= 0;
    @constraint #tA@10358 - #t0@10365 >= 0;
    @constraint -$pd + #tS@10355 - #tS@10360 >= 0;
    @constraint -$pd + #tS@10359 - #tA@10358 >= 0;
    @constraint -$pd + #tS@10360 - #tS@10359 >= 0;
    @constraint $pa - #tS@10360 + #tS@10359 >= 0;
    @constraint -#tS@10355 + $pa + #tS@10360 >= 0;
    @constraint $pa - #tS@10359 + #tA@10358 >= 0;
};

Rule No. [1.35]
Valid Rule
Composed by Rule [1.2] and [1.31]
Not Selectable : 
@rule{
    @guard c@10397 != A();
    @guard c@10397 != B();
    @premise initS(*x1@10394, *c@10397, *x2@10395, *#tS@10393);
    @premise initS(*c@10397, *x1@10394, *x2@10395, *#tS@10399);
    @premise know(*#tS@10399, #t1@10400);
    @premise know(*#tS@10393, #t1@10401);
    @premise know(*c@10397, #t1@10398);
    @premise know(*x2@10395, #t2@10402);
    @premise know(*x1@10394, #t1@10403);
    @conclusion know(*tuple3(#tS@10393, x1@10394, x2@10395), #t@10396);
    @constraint -#tS@10393 + $pa + #tS@10399 >= 0;
    @constraint -$pd + #tS@10399 - #t2@10402 >= 0;
    @constraint -$pd + #tS@10399 - #t1@10400 >= 0;
    @constraint -$pd + #tS@10393 - #t1@10401 >= 0;
    @constraint -$pd + #tS@10393 - #tS@10399 >= 0;
    @constraint -$pd + #tS@10399 - #t1@10403 >= 0;
    @constraint #t@10396 - #tS@10393 >= 0;
    @constraint -$pd + #tS@10399 - #t1@10398 >= 0;
    @constraint #t@10396 - #t1@10398 >= 0;
    @constraint -$pd + #tS@10393 - #t1@10403 >= 0;
};

Rule No. [1.36]
Valid Rule
Composed by Rule [1.32] and [1.4]
Selectable at 0:
@rule{
    @guard c@10406 != A();
    @guard c@10406 != B();
    @premise know(*sk(x1@10409), #t2@10418);
    @premise initS(*x1@10409, *c@10406, *x2@10407, *#tS@10411);
    @premise initS(*c@10406, *x1@10409, *x2@10407, *#tS@10405);
    @premise initS(*c@10406, *x1@10409, *x2@10407, *#tS@10410);
    @premise know(*#tS@10410, #t1@10413);
    @premise know(*#tS@10411, #t1@10412);
    @premise know(*#tS@10405, #t1@10414);
    @premise know(*x1@10409, #t1@10416);
    @premise know(*c@10406, #t1@10417);
    @premise know(*x2@10407, #t2@10415);
    @conclusion know(*tuple3(#tS@10405, c@10406, x2@10407), #t@10408);
    @constraint #t@10408 - #tS@10405 >= 0;
    @constraint -$pd + #tS@10410 - #t2@10415 >= 0;
    @constraint -$pd + #tS@10410 - #t1@10413 >= 0;
    @constraint -$pd + #tS@10411 - #t1@10412 >= 0;
    @constraint -$pd + #tS@10405 - #t1@10414 >= 0;
    @constraint #t@10408 - #t2@10418 >= 0;
    @constraint -$pd + #tS@10411 - #tS@10410 >= 0;
    @constraint -#tS@10405 + $pa + #tS@10411 >= 0;
    @constraint -$pd + #tS@10410 - #t1@10416 >= 0;
    @constraint $pa - #tS@10411 + #tS@10410 >= 0;
    @constraint -$pd + #tS@10405 - #tS@10411 >= 0;
    @constraint -$pd + #tS@10410 - #t1@10417 >= 0;
    @constraint -$pd + #tS@10405 - #t1@10417 >= 0;
    @constraint -$pd + #tS@10411 - #t1@10416 >= 0;
};

Rule No. [1.37]
Valid Rule
Composed by Rule [1.32] and [1.10]
Not Selectable : 
@rule{
    @guard c@10433 != A();
    @guard c@10433 != B();
    @premise initS(*c@10433, *x1@10431, *x2@10432, *#tS@10434);
    @premise initS(*x1@10431, *c@10433, *x2@10432, *#tS@10435);
    @premise initS(*c@10433, *x1@10431, *x2@10432, *#tS@10436);
    @premise initS(*x1@10431, *c@10433, *x2@10432, *#tS@10430);
    @premise know(*#tS@10434, #t1@10438);
    @premise know(*#tS@10435, #t1@10437);
    @premise know(*#tS@10430, #t1@10444);
    @premise know(*#tS@10436, #t1@10439);
    @premise know(*c@10433, #t1@10442);
    @premise know(*x2@10432, #t2@10440);
    @premise know(*x1@10431, #t1@10441);
    @conclusion know(*senc(tuple3(#tS@10430, x1@10431, x2@10432), sk(c@10433)), #tS@10430);
    @constraint -$pd + #tS@10434 - #t2@10440 >= 0;
    @constraint -$pd + #tS@10434 - #t1@10438 >= 0;
    @constraint -$pd + #tS@10435 - #t1@10437 >= 0;
    @constraint -$pd + #tS@10436 - #t1@10439 >= 0;
    @constraint -$pd + #tS@10430 - #t1@10444 >= 0;
    @constraint -$pd + #tS@10434 - #t1@10441 >= 0;
    @constraint -$pd + #tS@10434 - #t1@10442 >= 0;
    @constraint -$pd + #tS@10435 - #tS@10434 >= 0;
    @constraint $pa - #tS@10436 + #tS@10435 >= 0;
    @constraint -#tS@10430 + $pa + #tS@10436 >= 0;
    @constraint -$pd + #tS@10436 - #tS@10435 >= 0;
    @constraint -$pd + #tS@10430 - #tS@10436 >= 0;
    @constraint $pa - #tS@10435 + #tS@10434 >= 0;
    @constraint -$pd + #tS@10430 - #t1@10441 >= 0;
    @constraint -$pd + #tS@10435 - #t1@10441 >= 0;
    @constraint -$pd + #tS@10436 - #t1@10442 >= 0;
};

Rule No. [1.38]
Valid Rule
Composed by Rule [1.34] and [1.4]
Selectable at 5:
@rule{
    @premise new(*[k@10454], gen(), tuple3(A(), x0@10456, #tA@10457));
    @premise initS(*A(), *x0@10456, *[k@10454], *#tS@10458);
    @premise initA(*A(), *x0@10456, *[k@10454], *#tA@10457);
    @premise initS(*x0@10456, *A(), *[k@10454], *#tS@10459);
    @premise initS(*A(), *x0@10456, *[k@10454], *#tS@10453);
    @premise know(*sk(x0@10456), #t2@10465);
    @premise know(*#tA@10457, #t1@10461);
    @premise know(*#tS@10453, #t1@10462);
    @premise know(*#tS@10459, #t1@10463);
    @premise know(*#tS@10458, #t1@10460);
    @premise know(*x0@10456, #t0@10464);
    @conclusion know(*tuple3(#tS@10453, A(), [k@10454]), #t@10455);
    @constraint -$pd + #tS@10459 - #t0@10464 >= 0;
    @constraint #tA@10457 - #t1@10461 >= 0;
    @constraint #t@10455 - #tS@10453 >= 0;
    @constraint -$pd + #tS@10458 - #t1@10460 >= 0;
    @constraint -$pd + #tS@10459 - #t1@10463 >= 0;
    @constraint -$pd + #tS@10453 - #t1@10462 >= 0;
    @constraint #t@10455 - #t2@10465 >= 0;
    @constraint #tA@10457 - #t0@10464 >= 0;
    @constraint -#tS@10453 + $pa + #tS@10459 >= 0;
    @constraint -$pd + #tS@10458 - #tA@10457 >= 0;
    @constraint -$pd + #tS@10459 - #tS@10458 >= 0;
    @constraint $pa - #tS@10459 + #tS@10458 >= 0;
    @constraint -$pd + #tS@10453 - #tS@10459 >= 0;
    @constraint $pa - #tS@10458 + #tA@10457 >= 0;
};

Rule No. [1.39]
Replaced by Rule [1.45]
Composed by Rule [1.34] and [1.7]
Selectable at 5:
@rule{
    @premise new(*[k@10466], gen(), tuple3(A(), B(), #tA@10468));
    @premise initS(*A(), *B(), *[k@10466], *#tS@10469);
    @premise initA(*A(), *B(), *[k@10466], *#tA@10468);
    @premise initS(*B(), *A(), *[k@10466], *#tS@10470);
    @premise initS(*A(), *B(), *[k@10466], *#tS@10471);
    @premise know(*B(), #t0@10476);
    @premise know(*#tA@10468, #t1@10473);
    @premise know(*#tS@10471, #t1@10474);
    @premise know(*#tS@10470, #t1@10475);
    @premise know(*#tS@10469, #t1@10472);
    @conclusion accept(*A(), *B(), *[k@10466], *#tB@10467);
    @constraint -$pd + #tS@10470 - #t0@10476 >= 0;
    @constraint #tA@10468 - #t1@10473 >= 0;
    @constraint -$pd + #tS@10469 - #t1@10472 >= 0;
    @constraint -$pd + #tS@10470 - #t1@10475 >= 0;
    @constraint -$pd + #tS@10471 - #t1@10474 >= 0;
    @constraint #tA@10468 - #t0@10476 >= 0;
    @constraint -$pd + #tS@10469 - #tA@10468 >= 0;
    @constraint $pa - #tS@10471 + #tS@10470 >= 0;
    @constraint -$pd + #tS@10470 - #tS@10469 >= 0;
    @constraint -#tB@10467 + $pa + #tS@10471 >= 0;
    @constraint -$pd + #tS@10471 - #tS@10470 >= 0;
    @constraint $pa - #tS@10470 + #tS@10469 >= 0;
    @constraint -$pd + #tB@10467 - #tS@10471 >= 0;
    @constraint $pa - #tS@10469 + #tA@10468 >= 0;
};

Rule No. [1.40]
Valid Rule
Composed by Rule [1.34] and [1.10]
Not Selectable : 
@rule{
    @premise new(*[k@10479], gen(), tuple3(A(), x0@10478, #tA@10480));
    @premise initS(*A(), *x0@10478, *[k@10479], *#tS@10481);
    @premise initA(*A(), *x0@10478, *[k@10479], *#tA@10480);
    @premise initS(*x0@10478, *A(), *[k@10479], *#tS@10482);
    @premise initS(*A(), *x0@10478, *[k@10479], *#tS@10483);
    @premise initS(*x0@10478, *A(), *[k@10479], *#tS@10477);
    @premise know(*#tS@10481, #t1@10484);
    @premise know(*#tS@10483, #t1@10486);
    @premise know(*#tS@10482, #t1@10487);
    @premise know(*#tS@10477, #t1@10490);
    @premise know(*#tA@10480, #t1@10485);
    @premise know(*x0@10478, #t0@10488);
    @conclusion know(*senc(tuple3(#tS@10477, x0@10478, [k@10479]), sk(A())), #tS@10477);
    @constraint #tA@10480 - #t1@10485 >= 0;
    @constraint -$pd + #tS@10481 - #t1@10484 >= 0;
    @constraint -$pd + #tS@10482 - #t1@10487 >= 0;
    @constraint -$pd + #tS@10483 - #t1@10486 >= 0;
    @constraint -$pd + #tS@10477 - #t1@10490 >= 0;
    @constraint #tA@10480 - #t0@10488 >= 0;
    @constraint -$pd + #tS@10482 - #tS@10481 >= 0;
    @constraint -$pd + #tS@10481 - #tA@10480 >= 0;
    @constraint $pa - #tS@10483 + #tS@10482 >= 0;
    @constraint -#tS@10477 + $pa + #tS@10483 >= 0;
    @constraint -$pd + #tS@10483 - #tS@10482 >= 0;
    @constraint -$pd + #tS@10477 - #tS@10483 >= 0;
    @constraint -$pd + #tS@10482 - #t0@10488 >= 0;
    @constraint -$pd + #tS@10477 - #t0@10488 >= 0;
    @constraint $pa - #tS@10482 + #tS@10481 >= 0;
    @constraint $pa - #tS@10481 + #tA@10480 >= 0;
};

Rule No. [1.41]
Valid Rule
Composed by Rule [1.2] and [1.36]
Not Selectable : 
@rule{
    @guard c@10528 != A();
    @guard c@10528 != B();
    @guard c@10525 != A();
    @guard c@10525 != B();
    @premise initS(*c@10528, *c@10525, *x2@10526, *#tS@10530);
    @premise initS(*c@10525, *c@10528, *x2@10526, *#tS@10524);
    @premise initS(*c@10525, *c@10528, *x2@10526, *#tS@10531);
    @premise know(*#tS@10531, #t1@10532);
    @premise know(*#tS@10524, #t1@10534);
    @premise know(*#tS@10530, #t1@10533);
    @premise know(*c@10528, #t1@10529);
    @premise know(*c@10525, #t1@10536);
    @premise know(*x2@10526, #t2@10537);
    @conclusion know(*tuple3(#tS@10524, c@10525, x2@10526), #t@10527);
    @constraint -$pd + #tS@10531 - #t2@10537 >= 0;
    @constraint -$pd + #tS@10531 - #t1@10532 >= 0;
    @constraint -$pd + #tS@10530 - #t1@10533 >= 0;
    @constraint -$pd + #tS@10524 - #t1@10534 >= 0;
    @constraint -$pd + #tS@10531 - #t1@10536 >= 0;
    @constraint -#tS@10524 + $pa + #tS@10530 >= 0;
    @constraint -$pd + #tS@10530 - #tS@10531 >= 0;
    @constraint #t@10527 - #tS@10524 >= 0;
    @constraint -$pd + #tS@10531 - #t1@10529 >= 0;
    @constraint $pa - #tS@10530 + #tS@10531 >= 0;
    @constraint -$pd + #tS@10524 - #tS@10530 >= 0;
    @constraint -$pd + #tS@10530 - #t1@10529 >= 0;
    @constraint -$pd + #tS@10524 - #t1@10536 >= 0;
    @constraint #t@10527 - #t1@10529 >= 0;
};

Rule No. [1.42]
Valid Rule
Composed by Rule [1.37] and [1.4]
Selectable at 0:
@rule{
    @guard c@10542 != A();
    @guard c@10542 != B();
    @premise know(*sk(c@10542), #t2@10553);
    @premise initS(*x1@10539, *c@10542, *x2@10540, *#tS@10544);
    @premise initS(*c@10542, *x1@10539, *x2@10540, *#tS@10545);
    @premise initS(*x1@10539, *c@10542, *x2@10540, *#tS@10538);
    @premise initS(*c@10542, *x1@10539, *x2@10540, *#tS@10543);
    @premise know(*#tS@10544, #t1@10547);
    @premise know(*#tS@10543, #t1@10546);
    @premise know(*#tS@10545, #t1@10549);
    @premise know(*#tS@10538, #t1@10548);
    @premise know(*c@10542, #t1@10550);
    @premise know(*x2@10540, #t2@10551);
    @premise know(*x1@10539, #t1@10552);
    @conclusion know(*tuple3(#tS@10538, x1@10539, x2@10540), #t@10541);
    @constraint #t@10541 - #tS@10538 >= 0;
    @constraint -$pd + #tS@10543 - #t2@10551 >= 0;
    @constraint -$pd + #tS@10543 - #t1@10546 >= 0;
    @constraint -$pd + #tS@10544 - #t1@10547 >= 0;
    @constraint -$pd + #tS@10545 - #t1@10549 >= 0;
    @constraint -$pd + #tS@10538 - #t1@10548 >= 0;
    @constraint #t@10541 - #t2@10553 >= 0;
    @constraint $pa - #tS@10545 + #tS@10544 >= 0;
    @constraint -$pd + #tS@10543 - #t1@10552 >= 0;
    @constraint -$pd + #tS@10543 - #t1@10550 >= 0;
    @constraint -$pd + #tS@10544 - #tS@10543 >= 0;
    @constraint -#tS@10538 + $pa + #tS@10545 >= 0;
    @constraint $pa - #tS@10544 + #tS@10543 >= 0;
    @constraint -$pd + #tS@10538 - #tS@10545 >= 0;
    @constraint -$pd + #tS@10545 - #tS@10544 >= 0;
    @constraint -$pd + #tS@10544 - #t1@10552 >= 0;
    @constraint -$pd + #tS@10538 - #t1@10552 >= 0;
    @constraint -$pd + #tS@10545 - #t1@10550 >= 0;
};

Rule No. [1.43]
Valid Rule
Composed by Rule [1.37] and [1.10]
Not Selectable : 
@rule{
    @guard c@10568 != A();
    @guard c@10568 != B();
    @premise initS(*c@10568, *x1@10570, *x2@10569, *#tS@10571);
    @premise initS(*x1@10570, *c@10568, *x2@10569, *#tS@10572);
    @premise initS(*c@10568, *x1@10570, *x2@10569, *#tS@10573);
    @premise initS(*x1@10570, *c@10568, *x2@10569, *#tS@10574);
    @premise initS(*c@10568, *x1@10570, *x2@10569, *#tS@10567);
    @premise know(*#tS@10572, #t1@10576);
    @premise know(*#tS@10571, #t1@10575);
    @premise know(*#tS@10573, #t1@10578);
    @premise know(*#tS@10567, #t1@10583);
    @premise know(*#tS@10574, #t1@10577);
    @premise know(*x1@10570, #t1@10581);
    @premise know(*c@10568, #t1@10579);
    @premise know(*x2@10569, #t2@10580);
    @conclusion know(*senc(tuple3(#tS@10567, c@10568, x2@10569), sk(x1@10570)), #tS@10567);
    @constraint -$pd + #tS@10571 - #t2@10580 >= 0;
    @constraint -$pd + #tS@10571 - #t1@10575 >= 0;
    @constraint -$pd + #tS@10572 - #t1@10576 >= 0;
    @constraint -$pd + #tS@10573 - #t1@10578 >= 0;
    @constraint -$pd + #tS@10574 - #t1@10577 >= 0;
    @constraint -$pd + #tS@10567 - #t1@10583 >= 0;
    @constraint -$pd + #tS@10572 - #tS@10571 >= 0;
    @constraint -$pd + #tS@10571 - #t1@10581 >= 0;
    @constraint -$pd + #tS@10571 - #t1@10579 >= 0;
    @constraint $pa - #tS@10573 + #tS@10572 >= 0;
    @constraint -$pd + #tS@10574 - #tS@10573 >= 0;
    @constraint -$pd + #tS@10573 - #tS@10572 >= 0;
    @constraint $pa - #tS@10574 + #tS@10573 >= 0;
    @constraint $pa - #tS@10572 + #tS@10571 >= 0;
    @constraint -#tS@10567 + $pa + #tS@10574 >= 0;
    @constraint -$pd + #tS@10567 - #tS@10574 >= 0;
    @constraint -$pd + #tS@10573 - #t1@10579 >= 0;
    @constraint -$pd + #tS@10574 - #t1@10581 >= 0;
    @constraint -$pd + #tS@10567 - #t1@10579 >= 0;
    @constraint -$pd + #tS@10572 - #t1@10581 >= 0;
};

Rule No. [1.44]
Valid Rule
Composed by Rule [1.2] and [1.38]
Not Selectable : 
@rule{
    @guard c@10587 != A();
    @guard c@10587 != B();
    @premise new(*[k@10585], gen(), tuple3(A(), c@10587, #tA@10589));
    @premise initS(*A(), *c@10587, *[k@10585], *#tS@10584);
    @premise initS(*A(), *c@10587, *[k@10585], *#tS@10590);
    @premise initA(*A(), *c@10587, *[k@10585], *#tA@10589);
    @premise initS(*c@10587, *A(), *[k@10585], *#tS@10591);
    @premise know(*#tS@10590, #t1@10595);
    @premise know(*#tA@10589, #t1@10592);
    @premise know(*#tS@10584, #t1@10593);
    @premise know(*#tS@10591, #t1@10594);
    @premise know(*c@10587, #t1@10588);
    @conclusion know(*tuple3(#tS@10584, A(), [k@10585]), #t@10586);
    @constraint #tA@10589 - #t1@10592 >= 0;
    @constraint -$pd + #tS@10590 - #t1@10595 >= 0;
    @constraint -$pd + #tS@10591 - #t1@10594 >= 0;
    @constraint -$pd + #tS@10584 - #t1@10593 >= 0;
    @constraint #tA@10589 - #t1@10588 >= 0;
    @constraint -$pd + #tS@10591 - #tS@10590 >= 0;
    @constraint -$pd + #tS@10590 - #tA@10589 >= 0;
    @constraint -#tS@10584 + $pa + #tS@10591 >= 0;
    @constraint #t@10586 - #tS@10584 >= 0;
    @constraint $pa - #tS@10591 + #tS@10590 >= 0;
    @constraint $pa - #tS@10590 + #tA@10589 >= 0;
    @constraint -$pd + #tS@10584 - #tS@10591 >= 0;
    @constraint #t@10586 - #t1@10588 >= 0;
    @constraint -$pd + #tS@10591 - #t1@10588 >= 0;
};


Final Rules: 
Rule No. [1.27]
Valid Rule
Composed by Rule [1.1] and [1.22]
@rule{
    @premise new(*[k@10247], gen(), tuple3(A(), B(), #tA@10249));
    @premise initS(*A(), *B(), *[k@10247], *#tS@10250);
    @premise initA(*A(), *B(), *[k@10247], *#tA@10249);
    @premise know(*#tA@10249, #t1@10251);
    @premise know(*#tS@10250, #t1@10252);
    @conclusion accept(*A(), *B(), *[k@10247], *#tB@10248);
    @constraint #tA@10249 - #t1@10251 >= 0;
    @constraint -$pd + #tS@10250 - #t1@10252 >= 0;
    @constraint $pa - #tS@10250 + #tA@10249 >= 0;
    @constraint -$pd + #tB@10248 - #tS@10250 >= 0;
    @constraint -$pd + #tS@10250 - #tA@10249 >= 0;
    @constraint -#tB@10248 + $pa + #tS@10250 >= 0;
};
with parameter relation:
-$pd + $pa >= 0

Rule No. [1.45]
Valid Rule
Composed by Rule [1.1] and [1.39]
@rule{
    @premise new(*[k@10597], gen(), tuple3(A(), B(), #tA@10599));
    @premise initS(*A(), *B(), *[k@10597], *#tS@10600);
    @premise initA(*A(), *B(), *[k@10597], *#tA@10599);
    @premise initS(*B(), *A(), *[k@10597], *#tS@10601);
    @premise initS(*A(), *B(), *[k@10597], *#tS@10602);
    @premise know(*#tA@10599, #t1@10603);
    @premise know(*#tS@10602, #t1@10604);
    @premise know(*#tS@10601, #t1@10605);
    @premise know(*#tS@10600, #t1@10606);
    @conclusion accept(*A(), *B(), *[k@10597], *#tB@10598);
    @constraint -$pd + #tS@10602 - #t1@10604 >= 0;
    @constraint #tA@10599 - #t1@10603 >= 0;
    @constraint -$pd + #tS@10600 - #t1@10606 >= 0;
    @constraint -$pd + #tS@10601 - #t1@10605 >= 0;
    @constraint $pa - #tS@10600 + #tA@10599 >= 0;
    @constraint -$pd + #tS@10600 - #tA@10599 >= 0;
    @constraint -#tB@10598 + $pa + #tS@10602 >= 0;
    @constraint -$pd + #tS@10601 - #tS@10600 >= 0;
    @constraint -$pd + #tS@10602 - #tS@10601 >= 0;
    @constraint -$pd + #tB@10598 - #tS@10602 >= 0;
    @constraint $pa - #tS@10601 + #tS@10600 >= 0;
    @constraint $pa - #tS@10602 + #tS@10601 >= 0;
};
with parameter relation:
-$pd + $pa >= 0


0. Requested parameter relation:
$pd > 0
-$pa >= 0

1. Requested parameter relation:
$pd > 0
$pd - $pa > 0


Overall generated rule count : 88
Basis size : 53
Verification time: 1281

An attack exists.

