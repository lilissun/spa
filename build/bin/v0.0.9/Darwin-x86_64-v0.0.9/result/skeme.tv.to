Rule in cache: 0
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};

Rule in cache: 1
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};

Rule in cache: 2
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};

Rule in cache: 3
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};

Rule in cache: 4
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple3(x0@32, x1@33, x2@34), #t@35);
    @conclusion know(*x0@32, #t0@36);
    @constraint -#t@35 + #t0@36 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple3(x0@32, x1@33, x2@34), #t@35);
    @conclusion know(*x0@32, #t0@36);
    @constraint -#t@35 + #t0@36 >= 0;
};

Rule in cache: 5
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple3(x0@37, x1@38, x2@39), #t@40);
    @conclusion know(*x1@38, #t1@41);
    @constraint -#t@40 + #t1@41 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple3(x0@37, x1@38, x2@39), #t@40);
    @conclusion know(*x1@38, #t1@41);
    @constraint -#t@40 + #t1@41 >= 0;
};

Rule in cache: 6
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple3(x0@42, x1@43, x2@44), #t@45);
    @conclusion know(*x2@44, #t2@46);
    @constraint -#t@45 + #t2@46 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple3(x0@42, x1@43, x2@44), #t@45);
    @conclusion know(*x2@44, #t2@46);
    @constraint -#t@45 + #t2@46 >= 0;
};

Rule in cache: 7
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};

Rule in cache: 8
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};

Rule in cache: 9
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};

Rule in cache: 10
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};

Rule in cache: 11
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};

Rule in cache: 12
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};

Rule in cache: 13
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};

Rule in cache: 14
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m@92, #t1@93);
    @premise know(*sk@94, #t2@95);
    @conclusion know(*sign(m@92, sk@94), #t@96);
    @constraint -#t1@93 + #t@96 >= 0;
    @constraint #t@96 - #t2@95 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@92, #t1@93);
    @premise know(*sk@94, #t2@95);
    @conclusion know(*sign(m@92, sk@94), #t@96);
    @constraint -#t1@93 + #t@96 >= 0;
    @constraint #t@96 - #t2@95 >= 0;
};

Rule in cache: 15
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sign(m@97, sk@98), #t1@99);
    @conclusion know(*m@97, #t@100);
    @constraint -#t1@99 + #t@100 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sign(m@97, sk@98), #t1@99);
    @conclusion know(*m@97, #t@100);
    @constraint -#t1@99 + #t@100 >= 0;
};

Rule in cache: 16
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m@102, #t1@103);
    @premise know(*pk(sk@104), #t2@105);
    @conclusion know(*aenc(m@102, pk(sk@104)), #t@106);
    @constraint -#t1@103 + #t@106 >= 0;
    @constraint #t@106 - #t2@105 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@102, #t1@103);
    @premise know(*pk(sk@104), #t2@105);
    @conclusion know(*aenc(m@102, pk(sk@104)), #t@106);
    @constraint -#t1@103 + #t@106 >= 0;
    @constraint #t@106 - #t2@105 >= 0;
};

Rule in cache: 17
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sk@107, #t1@108);
    @premise know(*aenc(m@109, pk(sk@107)), #t2@110);
    @conclusion know(*m@109, #t@111);
    @constraint -#t1@108 + #t@111 >= 0;
    @constraint #t@111 - #t2@110 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@107, #t1@108);
    @premise know(*aenc(m@109, pk(sk@107)), #t2@110);
    @conclusion know(*m@109, #t@111);
    @constraint -#t1@108 + #t@111 >= 0;
    @constraint #t@111 - #t2@110 >= 0;
};

Rule in cache: 18
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m@113, #t1@114);
    @premise know(*k@115, #t2@116);
    @conclusion know(*senc(m@113, k@115), #t@117);
    @constraint -#t1@114 + #t@117 >= 0;
    @constraint #t@117 - #t2@116 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@113, #t1@114);
    @premise know(*k@115, #t2@116);
    @conclusion know(*senc(m@113, k@115), #t@117);
    @constraint -#t1@114 + #t@117 >= 0;
    @constraint #t@117 - #t2@116 >= 0;
};

Rule in cache: 19
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*k@118, #t1@119);
    @premise know(*senc(m@120, k@118), #t2@121);
    @conclusion know(*m@120, #t@122);
    @constraint -#t1@119 + #t@122 >= 0;
    @constraint #t@122 - #t2@121 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*k@118, #t1@119);
    @premise know(*senc(m@120, k@118), #t2@121);
    @conclusion know(*m@120, #t@122);
    @constraint -#t1@119 + #t@122 >= 0;
    @constraint #t@122 - #t2@121 >= 0;
};

Rule in cache: 20
Rule staged: 0
Rule before check and clean: 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};

Rule in cache: 21
Rule staged: 0
Rule before check and clean: 
@rule{
    @conclusion know(*pk(skB()), #t@126);
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*pk(skB()), #t@126);
};

Rule in cache: 22
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise new(*[Ka@129], Ak(), tuple2(pkR@130, [Na@131]));
    @premise new(*[Na@131], An(), tuple2(pkR@130, [Ka@129]));
    @conclusion know(*tuple2(aenc(tuple2(pk(skA()), [Ka@129]), pkR@130), [Na@131]), #t@132);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Ka@129], Ak(), tuple2(pkR@130, [Na@131]));
    @premise new(*[Na@131], An(), tuple2(pkR@130, [Ka@129]));
    @conclusion know(*tuple2(aenc(tuple2(pk(skA()), [Ka@129]), pkR@130), [Na@131]), #t@132);
};

Rule in cache: 23
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise new(*[Kb@135], Bk(), tuple4(pkI@136, [Nb@137], Ki@138, Ni@139));
    @premise new(*[Nb@137], Bn(), tuple4(pkI@136, [Ka@140], Ki@138, Ni@139));
    @premise know(*aenc(tuple2(pkI@136, Ki@138), pk(skB())), #t1@141);
    @premise know(*Ni@139, #t2@142);
    @conclusion know(*aenc([Kb@135], pkI@136), #t@143);
    @constraint -#t1@141 + #t@143 >= 0;
    @constraint #t@143 - #t2@142 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@135], Bk(), tuple4(pkI@136, [Nb@137], Ki@138, Ni@139));
    @premise new(*[Nb@137], Bn(), tuple4(pkI@136, [Ka@140], Ki@138, Ni@139));
    @premise know(*aenc(tuple2(pkI@136, Ki@138), pk(skB())), #t1@141);
    @premise know(*Ni@139, #t2@142);
    @conclusion know(*aenc([Kb@135], pkI@136), #t@143);
    @constraint -#t1@141 + #t@143 >= 0;
    @constraint #t@143 - #t2@142 >= 0;
};

Rule in cache: 24
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise new(*[Kb@144], Bk(), tuple4(pkI@145, [Nb@146], Ki@147, Ni@148));
    @premise new(*[Nb@146], Bn(), tuple4(pkI@145, [Ka@149], Ki@147, Ni@148));
    @premise know(*aenc(tuple2(pkI@145, Ki@147), pk(skB())), #t1@150);
    @premise know(*Ni@148, #t2@151);
    @conclusion know(*[Nb@146], #t@152);
    @constraint -#t1@150 + #t@152 >= 0;
    @constraint #t@152 - #t2@151 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@144], Bk(), tuple4(pkI@145, [Nb@146], Ki@147, Ni@148));
    @premise new(*[Nb@146], Bn(), tuple4(pkI@145, [Ka@149], Ki@147, Ni@148));
    @premise know(*aenc(tuple2(pkI@145, Ki@147), pk(skB())), #t1@150);
    @premise know(*Ni@148, #t2@151);
    @conclusion know(*[Nb@146], #t@152);
    @constraint -#t1@150 + #t@152 >= 0;
    @constraint #t@152 - #t2@151 >= 0;
};

Rule in cache: 25
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise new(*[Kb@153], Bk(), tuple4(pkI@154, [Nb@155], Ki@156, Ni@157));
    @premise new(*[Nb@155], Bn(), tuple4(pkI@154, [Ka@158], Ki@156, Ni@157));
    @premise know(*aenc(tuple2(pkI@154, Ki@156), pk(skB())), #t1@159);
    @premise know(*Ni@157, #t2@160);
    @conclusion know(*senc(tuple4(Ni@157, [Nb@155], pk(skB()), pkI@154), hash(Ki@156, [Kb@153])), #t@161);
    @constraint -#t1@159 + #t@161 >= 0;
    @constraint #t@161 - #t2@160 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@153], Bk(), tuple4(pkI@154, [Nb@155], Ki@156, Ni@157));
    @premise new(*[Nb@155], Bn(), tuple4(pkI@154, [Ka@158], Ki@156, Ni@157));
    @premise know(*aenc(tuple2(pkI@154, Ki@156), pk(skB())), #t1@159);
    @premise know(*Ni@157, #t2@160);
    @conclusion know(*senc(tuple4(Ni@157, [Nb@155], pk(skB()), pkI@154), hash(Ki@156, [Kb@153])), #t@161);
    @constraint -#t1@159 + #t@161 >= 0;
    @constraint #t@161 - #t2@160 >= 0;
};

Rule in cache: 26
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *pkR@162, *senc(senc(tuple4(Nr@163, [Na@164], pk(skA()), pkR@162), hash([Ka@165], Kr@166)), hash([Ka@165], Kr@166)));
    @premise new(*[Ka@165], Ak(), tuple2(pkR@162, [Na@164]));
    @premise new(*[Na@164], An(), tuple2(pkR@162, [Ka@165]));
    @premise know(*aenc(Kr@166, pk(skA())), #t1@167);
    @premise know(*Nr@163, #t2@168);
    @premise know(*senc(tuple4([Na@164], Nr@163, pkR@162, pk(skA())), hash([Ka@165], Kr@166)), #t3@169);
    @conclusion know(*senc(tuple4(Nr@163, [Na@164], pk(skA()), pkR@162), hash([Ka@165], Kr@166)), #t@170);
    @constraint -#t1@167 + #t@170 >= 0;
    @constraint #t@170 - #t2@168 >= 0;
    @constraint #t@170 - #t3@169 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pkR@162, *senc(senc(tuple4(Nr@163, [Na@164], pk(skA()), pkR@162), hash([Ka@165], Kr@166)), hash([Ka@165], Kr@166)));
    @premise know(*senc(tuple4([Na@164], Nr@163, pkR@162, pk(skA())), hash([Ka@165], Kr@166)), #t3@169);
    @premise know(*aenc(Kr@166, pk(skA())), #t1@167);
    @premise new(*[Ka@165], Ak(), tuple2(pkR@162, [Na@164]));
    @premise new(*[Na@164], An(), tuple2(pkR@162, [Ka@165]));
    @premise know(*Nr@163, #t2@168);
    @conclusion know(*senc(tuple4(Nr@163, [Na@164], pk(skA()), pkR@162), hash([Ka@165], Kr@166)), #t@170);
    @constraint -#t1@167 + #t@170 >= 0;
    @constraint #t@170 - #t2@168 >= 0;
    @constraint #t@170 - #t3@169 >= 0;
};

Rule in cache: 27
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise new(*[Kb@171], Bk(), tuple4(pk(skA()), [Nb@172], Ki@173, Ni@174));
    @premise new(*[Nb@172], Bn(), tuple4(pk(skA()), [Ka@175], Ki@173, Ni@174));
    @premise know(*senc(tuple4([Nb@172], Ni@174, pk(skA()), pk(skB())), hash(Kr@176, [Kb@171])), #t1@177);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@172], Ni@174, pk(skA()), pk(skB())), hash(Ki@173, [Kb@171])), hash(Ki@173, [Kb@171])));
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@171], Bk(), tuple4(pk(skA()), [Nb@172], Ki@173, Ni@174));
    @premise new(*[Nb@172], Bn(), tuple4(pk(skA()), [Ka@175], Ki@173, Ni@174));
    @premise know(*senc(tuple4([Nb@172], Ni@174, pk(skA()), pk(skB())), hash(Kr@176, [Kb@171])), #t1@177);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@172], Ni@174, pk(skA()), pk(skB())), hash(Ki@173, [Kb@171])), hash(Ki@173, [Kb@171])));
};

Stage rule: 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule in cache: 26
Rule staged: 2
Rule before check and clean: 
@rule{
    @premise know(*x0@181, #t0@183);
    @premise know(*x1@184, #t1@185);
    @conclusion know(*x0@181, #t0@182);
    @constraint #t0@182 - #t@15 >= 0;
    @constraint #t@15 - #t1@185 >= 0;
    @constraint -#t0@183 + #t@15 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule in cache: 25
Rule staged: 3
Rule before check and clean: 
@rule{
    @premise know(*x0@188, #t0@189);
    @premise know(*x1@186, #t1@190);
    @conclusion know(*x1@186, #t1@187);
    @constraint #t1@187 - #t@15 >= 0;
    @constraint #t@15 - #t1@190 >= 0;
    @constraint -#t0@189 + #t@15 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple3(x0@32, x1@33, x2@34), #t@35);
    @conclusion know(*x0@32, #t0@36);
    @constraint -#t@35 + #t0@36 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule in cache: 23
Rule staged: 5
Rule before check and clean: 
@rule{
    @premise know(*x0@191, #t0@193);
    @premise know(*x1@194, #t1@195);
    @premise know(*x2@196, #t2@197);
    @conclusion know(*x0@191, #t0@192);
    @constraint #t0@192 - #t@31 >= 0;
    @constraint #t@31 - #t2@197 >= 0;
    @constraint #t@31 - #t1@195 >= 0;
    @constraint -#t0@193 + #t@31 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple3(x0@37, x1@38, x2@39), #t@40);
    @conclusion know(*x1@38, #t1@41);
    @constraint -#t@40 + #t1@41 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule in cache: 22
Rule staged: 6
Rule before check and clean: 
@rule{
    @premise know(*x0@200, #t0@201);
    @premise know(*x1@198, #t1@202);
    @premise know(*x2@203, #t2@204);
    @conclusion know(*x1@198, #t1@199);
    @constraint #t1@199 - #t@31 >= 0;
    @constraint #t@31 - #t2@204 >= 0;
    @constraint #t@31 - #t1@202 >= 0;
    @constraint -#t0@201 + #t@31 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple3(x0@42, x1@43, x2@44), #t@45);
    @conclusion know(*x2@44, #t2@46);
    @constraint -#t@45 + #t2@46 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule in cache: 21
Rule staged: 7
Rule before check and clean: 
@rule{
    @premise know(*x0@207, #t0@208);
    @premise know(*x1@209, #t1@210);
    @premise know(*x2@205, #t2@211);
    @conclusion know(*x2@205, #t2@206);
    @constraint #t2@206 - #t@31 >= 0;
    @constraint #t@31 - #t2@211 >= 0;
    @constraint #t@31 - #t1@210 >= 0;
    @constraint -#t0@208 + #t@31 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 19
Rule staged: 9
Rule before check and clean: 
@rule{
    @premise know(*x0@212, #t0@214);
    @premise know(*x1@215, #t1@216);
    @premise know(*x2@217, #t2@218);
    @premise know(*x3@219, #t3@220);
    @conclusion know(*x0@212, #t0@213);
    @constraint #t@56 - #t1@216 >= 0;
    @constraint #t0@213 - #t@56 >= 0;
    @constraint #t@56 - #t3@220 >= 0;
    @constraint #t@56 - #t2@218 >= 0;
    @constraint -#t0@214 + #t@56 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 18
Rule staged: 10
Rule before check and clean: 
@rule{
    @premise know(*x0@223, #t0@224);
    @premise know(*x1@221, #t1@225);
    @premise know(*x2@226, #t2@227);
    @premise know(*x3@228, #t3@229);
    @conclusion know(*x1@221, #t1@222);
    @constraint #t@56 - #t1@225 >= 0;
    @constraint #t1@222 - #t@56 >= 0;
    @constraint #t@56 - #t3@229 >= 0;
    @constraint #t@56 - #t2@227 >= 0;
    @constraint -#t0@224 + #t@56 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 17
Rule staged: 11
Rule before check and clean: 
@rule{
    @premise know(*x0@232, #t0@233);
    @premise know(*x1@234, #t1@235);
    @premise know(*x2@230, #t2@236);
    @premise know(*x3@237, #t3@238);
    @conclusion know(*x2@230, #t2@231);
    @constraint #t@56 - #t1@235 >= 0;
    @constraint #t2@231 - #t@56 >= 0;
    @constraint #t@56 - #t3@238 >= 0;
    @constraint #t@56 - #t2@236 >= 0;
    @constraint -#t0@233 + #t@56 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 16
Rule staged: 12
Rule before check and clean: 
@rule{
    @premise know(*x0@241, #t0@242);
    @premise know(*x1@243, #t1@244);
    @premise know(*x2@245, #t2@246);
    @premise know(*x3@239, #t3@247);
    @conclusion know(*x3@239, #t3@240);
    @constraint #t@56 - #t1@244 >= 0;
    @constraint #t3@240 - #t@56 >= 0;
    @constraint #t@56 - #t3@247 >= 0;
    @constraint #t@56 - #t2@246 >= 0;
    @constraint -#t0@242 + #t@56 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*m@92, #t1@93);
    @premise know(*sk@94, #t2@95);
    @conclusion know(*sign(m@92, sk@94), #t@96);
    @constraint -#t1@93 + #t@96 >= 0;
    @constraint #t@96 - #t2@95 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*sign(m@97, sk@98), #t1@99);
    @conclusion know(*m@97, #t@100);
    @constraint -#t1@99 + #t@100 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*m@92, #t1@93);
    @premise know(*sk@94, #t2@95);
    @conclusion know(*sign(m@92, sk@94), #t@96);
    @constraint -#t1@93 + #t@96 >= 0;
    @constraint #t@96 - #t2@95 >= 0;
};
Rule in cache: 12
Rule staged: 16
Rule before check and clean: 
@rule{
    @premise know(*m@248, #t1@250);
    @premise know(*sk@251, #t2@252);
    @conclusion know(*m@248, #t@249);
    @constraint #t@249 - #t@96 >= 0;
    @constraint #t@96 - #t2@252 >= 0;
    @constraint -#t1@250 + #t@96 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*m@102, #t1@103);
    @premise know(*pk(sk@104), #t2@105);
    @conclusion know(*aenc(m@102, pk(sk@104)), #t@106);
    @constraint -#t1@103 + #t@106 >= 0;
    @constraint #t@106 - #t2@105 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule in cache: 11
Rule staged: 17
Rule before check and clean: 
@rule{
    @premise know(*sk@254, #t1@256);
    @premise know(*m@253, #t1@257);
    @conclusion know(*aenc(m@253, pk(sk@254)), #t@255);
    @constraint -#t1@257 + #t@255 >= 0;
    @constraint -#t1@256 + #t@90 >= 0;
    @constraint #t@255 - #t@90 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@254, #t1@256);
    @premise know(*m@253, #t1@257);
    @conclusion know(*aenc(m@253, pk(sk@254)), #t@255);
    @constraint -#t1@257 + #t@255 >= 0;
    @constraint #t@255 - #t1@256 >= 0;
};

Stage rule: 
@rule{
    @premise know(*sk@107, #t1@108);
    @premise know(*aenc(m@109, pk(sk@107)), #t2@110);
    @conclusion know(*m@109, #t@111);
    @constraint -#t1@108 + #t@111 >= 0;
    @constraint #t@111 - #t2@110 >= 0;
};
Rule added at 1.

Stage rule: 
@rule{
    @premise know(*m@113, #t1@114);
    @premise know(*k@115, #t2@116);
    @conclusion know(*senc(m@113, k@115), #t@117);
    @constraint -#t1@114 + #t@117 >= 0;
    @constraint #t@117 - #t2@116 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*k@118, #t1@119);
    @premise know(*senc(m@120, k@118), #t2@121);
    @conclusion know(*m@120, #t@122);
    @constraint -#t1@119 + #t@122 >= 0;
    @constraint #t@122 - #t2@121 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*m@113, #t1@114);
    @premise know(*k@115, #t2@116);
    @conclusion know(*senc(m@113, k@115), #t@117);
    @constraint -#t1@114 + #t@117 >= 0;
    @constraint #t@117 - #t2@116 >= 0;
};
Rule in cache: 9
Rule staged: 20
Rule before check and clean: 
@rule{
    @premise know(*m@258, #t1@260);
    @premise know(*k@261, #t2@262);
    @premise know(*k@261, #t1@263);
    @conclusion know(*m@258, #t@259);
    @constraint -#t1@263 + #t@259 >= 0;
    @constraint #t@117 - #t2@262 >= 0;
    @constraint -#t1@260 + #t@117 >= 0;
    @constraint #t@259 - #t@117 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*m@102, #t1@103);
    @premise know(*pk(sk@104), #t2@105);
    @conclusion know(*aenc(m@102, pk(sk@104)), #t@106);
    @constraint -#t1@103 + #t@106 >= 0;
    @constraint #t@106 - #t2@105 >= 0;
};
Rule in cache: 8
Rule staged: 21
Rule before check and clean: 
@rule{
    @premise know(*m@264, #t1@266);
    @conclusion know(*aenc(m@264, pk(skA())), #t@265);
    @constraint -#t1@266 + #t@265 >= 0;
    @constraint #t@265 - #t@125 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@264, #t1@266);
    @conclusion know(*aenc(m@264, pk(skA())), #t@265);
    @constraint -#t1@266 + #t@265 >= 0;
};

Stage rule: 
@rule{
    @conclusion know(*pk(skB()), #t@126);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*m@102, #t1@103);
    @premise know(*pk(sk@104), #t2@105);
    @conclusion know(*aenc(m@102, pk(sk@104)), #t@106);
    @constraint -#t1@103 + #t@106 >= 0;
    @constraint #t@106 - #t2@105 >= 0;
};
Rule in cache: 8
Rule staged: 22
Rule before check and clean: 
@rule{
    @premise know(*m@267, #t1@269);
    @conclusion know(*aenc(m@267, pk(skB())), #t@268);
    @constraint -#t1@269 + #t@268 >= 0;
    @constraint #t@268 - #t@126 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@267, #t1@269);
    @conclusion know(*aenc(m@267, pk(skB())), #t@268);
    @constraint -#t1@269 + #t@268 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Ka@129], Ak(), tuple2(pkR@130, [Na@131]));
    @premise new(*[Na@131], An(), tuple2(pkR@130, [Ka@129]));
    @conclusion know(*tuple2(aenc(tuple2(pk(skA()), [Ka@129]), pkR@130), [Na@131]), #t@132);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};
Rule in cache: 8
Rule staged: 23
Rule before check and clean: 
@rule{
    @premise new(*[Ka@270], Ak(), tuple2(pkR@271, [Na@273]));
    @premise new(*[Na@273], An(), tuple2(pkR@271, [Ka@270]));
    @conclusion know(*aenc(tuple2(pk(skA()), [Ka@270]), pkR@271), #t0@272);
    @constraint -#t@132 + #t0@272 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Ka@270], Ak(), tuple2(pkR@271, [Na@273]));
    @premise new(*[Na@273], An(), tuple2(pkR@271, [Ka@270]));
    @conclusion know(*aenc(tuple2(pk(skA()), [Ka@270]), pkR@271), #t0@272);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};
Rule in cache: 9
Rule staged: 23
Rule before check and clean: 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
    @constraint -#t@132 + #t1@275 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};

Stage rule: 
@rule{
    @premise new(*[Kb@135], Bk(), tuple4(pkI@136, [Nb@137], Ki@138, Ni@139));
    @premise new(*[Nb@137], Bn(), tuple4(pkI@136, [Ka@140], Ki@138, Ni@139));
    @premise know(*aenc(tuple2(pkI@136, Ki@138), pk(skB())), #t1@141);
    @premise know(*Ni@139, #t2@142);
    @conclusion know(*aenc([Kb@135], pkI@136), #t@143);
    @constraint -#t1@141 + #t@143 >= 0;
    @constraint #t@143 - #t2@142 >= 0;
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Kb@144], Bk(), tuple4(pkI@145, [Nb@146], Ki@147, Ni@148));
    @premise new(*[Nb@146], Bn(), tuple4(pkI@145, [Ka@149], Ki@147, Ni@148));
    @premise know(*aenc(tuple2(pkI@145, Ki@147), pk(skB())), #t1@150);
    @premise know(*Ni@148, #t2@151);
    @conclusion know(*[Nb@146], #t@152);
    @constraint -#t1@150 + #t@152 >= 0;
    @constraint #t@152 - #t2@151 >= 0;
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Kb@153], Bk(), tuple4(pkI@154, [Nb@155], Ki@156, Ni@157));
    @premise new(*[Nb@155], Bn(), tuple4(pkI@154, [Ka@158], Ki@156, Ni@157));
    @premise know(*aenc(tuple2(pkI@154, Ki@156), pk(skB())), #t1@159);
    @premise know(*Ni@157, #t2@160);
    @conclusion know(*senc(tuple4(Ni@157, [Nb@155], pk(skB()), pkI@154), hash(Ki@156, [Kb@153])), #t@161);
    @constraint -#t1@159 + #t@161 >= 0;
    @constraint #t@161 - #t2@160 >= 0;
};
Rule added at 2.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pkR@162, *senc(senc(tuple4(Nr@163, [Na@164], pk(skA()), pkR@162), hash([Ka@165], Kr@166)), hash([Ka@165], Kr@166)));
    @premise know(*senc(tuple4([Na@164], Nr@163, pkR@162, pk(skA())), hash([Ka@165], Kr@166)), #t3@169);
    @premise know(*aenc(Kr@166, pk(skA())), #t1@167);
    @premise new(*[Ka@165], Ak(), tuple2(pkR@162, [Na@164]));
    @premise new(*[Na@164], An(), tuple2(pkR@162, [Ka@165]));
    @premise know(*Nr@163, #t2@168);
    @conclusion know(*senc(tuple4(Nr@163, [Na@164], pk(skA()), pkR@162), hash([Ka@165], Kr@166)), #t@170);
    @constraint -#t1@167 + #t@170 >= 0;
    @constraint #t@170 - #t2@168 >= 0;
    @constraint #t@170 - #t3@169 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*m@113, #t1@114);
    @premise know(*k@115, #t2@116);
    @conclusion know(*senc(m@113, k@115), #t@117);
    @constraint -#t1@114 + #t@117 >= 0;
    @constraint #t@117 - #t2@116 >= 0;
};
Rule in cache: 6
Rule staged: 27
Rule before check and clean: 
@rule{
    @premise know(*tuple4([Na@279], Nr@278, pkR@280, pk(skA())), #t1@284);
    @premise know(*hash([Ka@281], Kr@282), #t2@285);
    @premise init(*pk(skA()), *pkR@280, *senc(senc(tuple4(Nr@278, [Na@279], pk(skA()), pkR@280), hash([Ka@281], Kr@282)), hash([Ka@281], Kr@282)));
    @premise know(*aenc(Kr@282, pk(skA())), #t1@286);
    @premise new(*[Ka@281], Ak(), tuple2(pkR@280, [Na@279]));
    @premise new(*[Na@279], An(), tuple2(pkR@280, [Ka@281]));
    @premise know(*Nr@278, #t2@287);
    @conclusion know(*senc(tuple4(Nr@278, [Na@279], pk(skA()), pkR@280), hash([Ka@281], Kr@282)), #t@283);
    @constraint -#t1@286 + #t@283 >= 0;
    @constraint #t@117 - #t2@285 >= 0;
    @constraint -#t1@284 + #t@117 >= 0;
    @constraint #t@283 - #t@117 >= 0;
    @constraint #t@283 - #t2@287 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pkR@280, *senc(senc(tuple4(Nr@278, [Na@279], pk(skA()), pkR@280), hash([Ka@281], Kr@282)), hash([Ka@281], Kr@282)));
    @premise know(*tuple4([Na@279], Nr@278, pkR@280, pk(skA())), #t1@284);
    @premise know(*aenc(Kr@282, pk(skA())), #t1@286);
    @premise new(*[Ka@281], Ak(), tuple2(pkR@280, [Na@279]));
    @premise new(*[Na@279], An(), tuple2(pkR@280, [Ka@281]));
    @premise know(*hash([Ka@281], Kr@282), #t2@285);
    @premise know(*Nr@278, #t2@287);
    @conclusion know(*senc(tuple4(Nr@278, [Na@279], pk(skA()), pkR@280), hash([Ka@281], Kr@282)), #t@283);
    @constraint -#t1@286 + #t@283 >= 0;
    @constraint #t@283 - #t2@287 >= 0;
    @constraint #t@283 - #t2@285 >= 0;
    @constraint #t@283 - #t1@284 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Kb@171], Bk(), tuple4(pk(skA()), [Nb@172], Ki@173, Ni@174));
    @premise new(*[Nb@172], Bn(), tuple4(pk(skA()), [Ka@175], Ki@173, Ni@174));
    @premise know(*senc(tuple4([Nb@172], Ni@174, pk(skA()), pk(skB())), hash(Kr@176, [Kb@171])), #t1@177);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@172], Ni@174, pk(skA()), pk(skB())), hash(Ki@173, [Kb@171])), hash(Ki@173, [Kb@171])));
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*m@113, #t1@114);
    @premise know(*k@115, #t2@116);
    @conclusion know(*senc(m@113, k@115), #t@117);
    @constraint -#t1@114 + #t@117 >= 0;
    @constraint #t@117 - #t2@116 >= 0;
};
Rule in cache: 6
Rule staged: 28
Rule before check and clean: 
@rule{
    @premise know(*tuple4([Nb@288], Ni@289, pk(skA()), pk(skB())), #t1@292);
    @premise know(*hash(Kr@293, [Kb@291]), #t2@294);
    @premise new(*[Kb@291], Bk(), tuple4(pk(skA()), [Nb@288], Ki@290, Ni@289));
    @premise new(*[Nb@288], Bn(), tuple4(pk(skA()), [Ka@295], Ki@290, Ni@289));
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@288], Ni@289, pk(skA()), pk(skB())), hash(Ki@290, [Kb@291])), hash(Ki@290, [Kb@291])));
    @constraint -#t1@292 + #t@117 >= 0;
    @constraint #t@117 - #t2@294 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*tuple4([Nb@288], Ni@289, pk(skA()), pk(skB())), #t1@292);
    @premise know(*hash(Kr@293, [Kb@291]), #t2@294);
    @premise new(*[Kb@291], Bk(), tuple4(pk(skA()), [Nb@288], Ki@290, Ni@289));
    @premise new(*[Nb@288], Bn(), tuple4(pk(skA()), [Ka@295], Ki@290, Ni@289));
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@288], Ni@289, pk(skA()), pk(skB())), hash(Ki@290, [Kb@291])), hash(Ki@290, [Kb@291])));
};

Stage rule: 
@rule{
    @premise know(*sk@254, #t1@256);
    @premise know(*m@253, #t1@257);
    @conclusion know(*aenc(m@253, pk(sk@254)), #t@255);
    @constraint -#t1@257 + #t@255 >= 0;
    @constraint #t@255 - #t1@256 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@107, #t1@108);
    @premise know(*aenc(m@109, pk(sk@107)), #t2@110);
    @conclusion know(*m@109, #t@111);
    @constraint -#t1@108 + #t@111 >= 0;
    @constraint #t@111 - #t2@110 >= 0;
};
Rule in cache: 6
Rule staged: 29
Rule before check and clean: 
@rule{
    @premise know(*sk@298, #t1@299);
    @premise know(*m@296, #t1@300);
    @premise know(*sk@298, #t1@301);
    @conclusion know(*m@296, #t@297);
    @constraint -#t1@301 + #t@297 >= 0;
    @constraint #t@255 - #t1@299 >= 0;
    @constraint -#t1@300 + #t@255 >= 0;
    @constraint #t@297 - #t@255 >= 0;
};
Rule invalid. 

Compose to at 2 : 
@rule{
    @premise new(*[Kb@135], Bk(), tuple4(pkI@136, [Nb@137], Ki@138, Ni@139));
    @premise new(*[Nb@137], Bn(), tuple4(pkI@136, [Ka@140], Ki@138, Ni@139));
    @premise know(*aenc(tuple2(pkI@136, Ki@138), pk(skB())), #t1@141);
    @premise know(*Ni@139, #t2@142);
    @conclusion know(*aenc([Kb@135], pkI@136), #t@143);
    @constraint -#t1@141 + #t@143 >= 0;
    @constraint #t@143 - #t2@142 >= 0;
};
Rule in cache: 6
Rule staged: 29
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@305);
    @premise know(*tuple2(pkI@303, Ki@306), #t1@307);
    @premise new(*[Kb@302], Bk(), tuple4(pkI@303, [Nb@308], Ki@306, Ni@309));
    @premise new(*[Nb@308], Bn(), tuple4(pkI@303, [Ka@310], Ki@306, Ni@309));
    @premise know(*Ni@309, #t2@311);
    @conclusion know(*aenc([Kb@302], pkI@303), #t@304);
    @constraint #t@255 - #t1@305 >= 0;
    @constraint #t@304 - #t@255 >= 0;
    @constraint -#t1@307 + #t@255 >= 0;
    @constraint #t@304 - #t2@311 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@302], Bk(), tuple4(pkI@303, [Nb@308], Ki@306, Ni@309));
    @premise new(*[Nb@308], Bn(), tuple4(pkI@303, [Ka@310], Ki@306, Ni@309));
    @premise know(*tuple2(pkI@303, Ki@306), #t1@307);
    @premise know(*skB(), #t1@305);
    @premise know(*Ni@309, #t2@311);
    @conclusion know(*aenc([Kb@302], pkI@303), #t@304);
    @constraint #t@304 - #t2@311 >= 0;
    @constraint #t@304 - #t1@305 >= 0;
    @constraint #t@304 - #t1@307 >= 0;
};

Compose to at 2 : 
@rule{
    @premise new(*[Kb@144], Bk(), tuple4(pkI@145, [Nb@146], Ki@147, Ni@148));
    @premise new(*[Nb@146], Bn(), tuple4(pkI@145, [Ka@149], Ki@147, Ni@148));
    @premise know(*aenc(tuple2(pkI@145, Ki@147), pk(skB())), #t1@150);
    @premise know(*Ni@148, #t2@151);
    @conclusion know(*[Nb@146], #t@152);
    @constraint -#t1@150 + #t@152 >= 0;
    @constraint #t@152 - #t2@151 >= 0;
};
Rule in cache: 7
Rule staged: 29
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@314);
    @premise know(*tuple2(pkI@315, Ki@316), #t1@317);
    @premise new(*[Kb@318], Bk(), tuple4(pkI@315, [Nb@312], Ki@316, Ni@319));
    @premise new(*[Nb@312], Bn(), tuple4(pkI@315, [Ka@320], Ki@316, Ni@319));
    @premise know(*Ni@319, #t2@321);
    @conclusion know(*[Nb@312], #t@313);
    @constraint #t@255 - #t1@314 >= 0;
    @constraint #t@313 - #t@255 >= 0;
    @constraint -#t1@317 + #t@255 >= 0;
    @constraint #t@313 - #t2@321 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@318], Bk(), tuple4(pkI@315, [Nb@312], Ki@316, Ni@319));
    @premise new(*[Nb@312], Bn(), tuple4(pkI@315, [Ka@320], Ki@316, Ni@319));
    @premise know(*tuple2(pkI@315, Ki@316), #t1@317);
    @premise know(*skB(), #t1@314);
    @premise know(*Ni@319, #t2@321);
    @conclusion know(*[Nb@312], #t@313);
    @constraint #t@313 - #t2@321 >= 0;
    @constraint #t@313 - #t1@314 >= 0;
    @constraint #t@313 - #t1@317 >= 0;
};

Compose to at 2 : 
@rule{
    @premise new(*[Kb@153], Bk(), tuple4(pkI@154, [Nb@155], Ki@156, Ni@157));
    @premise new(*[Nb@155], Bn(), tuple4(pkI@154, [Ka@158], Ki@156, Ni@157));
    @premise know(*aenc(tuple2(pkI@154, Ki@156), pk(skB())), #t1@159);
    @premise know(*Ni@157, #t2@160);
    @conclusion know(*senc(tuple4(Ni@157, [Nb@155], pk(skB()), pkI@154), hash(Ki@156, [Kb@153])), #t@161);
    @constraint -#t1@159 + #t@161 >= 0;
    @constraint #t@161 - #t2@160 >= 0;
};
Rule in cache: 8
Rule staged: 29
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@328);
    @premise know(*tuple2(pkI@324, Ki@325), #t1@329);
    @premise new(*[Kb@326], Bk(), tuple4(pkI@324, [Nb@323], Ki@325, Ni@322));
    @premise new(*[Nb@323], Bn(), tuple4(pkI@324, [Ka@330], Ki@325, Ni@322));
    @premise know(*Ni@322, #t2@331);
    @conclusion know(*senc(tuple4(Ni@322, [Nb@323], pk(skB()), pkI@324), hash(Ki@325, [Kb@326])), #t@327);
    @constraint #t@255 - #t1@328 >= 0;
    @constraint #t@327 - #t@255 >= 0;
    @constraint -#t1@329 + #t@255 >= 0;
    @constraint #t@327 - #t2@331 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@326], Bk(), tuple4(pkI@324, [Nb@323], Ki@325, Ni@322));
    @premise new(*[Nb@323], Bn(), tuple4(pkI@324, [Ka@330], Ki@325, Ni@322));
    @premise know(*tuple2(pkI@324, Ki@325), #t1@329);
    @premise know(*skB(), #t1@328);
    @premise know(*Ni@322, #t2@331);
    @conclusion know(*senc(tuple4(Ni@322, [Nb@323], pk(skB()), pkI@324), hash(Ki@325, [Kb@326])), #t@327);
    @constraint #t@327 - #t2@331 >= 0;
    @constraint #t@327 - #t1@328 >= 0;
    @constraint #t@327 - #t1@329 >= 0;
};

Stage rule: 
@rule{
    @premise know(*m@264, #t1@266);
    @conclusion know(*aenc(m@264, pk(skA())), #t@265);
    @constraint -#t1@266 + #t@265 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@107, #t1@108);
    @premise know(*aenc(m@109, pk(sk@107)), #t2@110);
    @conclusion know(*m@109, #t@111);
    @constraint -#t1@108 + #t@111 >= 0;
    @constraint #t@111 - #t2@110 >= 0;
};
Rule in cache: 8
Rule staged: 30
Rule before check and clean: 
@rule{
    @premise know(*m@332, #t1@334);
    @premise know(*skA(), #t1@335);
    @conclusion know(*m@332, #t@333);
    @constraint -#t1@335 + #t@333 >= 0;
    @constraint -#t1@334 + #t@265 >= 0;
    @constraint #t@333 - #t@265 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*m@267, #t1@269);
    @conclusion know(*aenc(m@267, pk(skB())), #t@268);
    @constraint -#t1@269 + #t@268 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@107, #t1@108);
    @premise know(*aenc(m@109, pk(sk@107)), #t2@110);
    @conclusion know(*m@109, #t@111);
    @constraint -#t1@108 + #t@111 >= 0;
    @constraint #t@111 - #t2@110 >= 0;
};
Rule in cache: 7
Rule staged: 31
Rule before check and clean: 
@rule{
    @premise know(*m@336, #t1@338);
    @premise know(*skB(), #t1@339);
    @conclusion know(*m@336, #t@337);
    @constraint -#t1@339 + #t@337 >= 0;
    @constraint -#t1@338 + #t@268 >= 0;
    @constraint #t@337 - #t@268 >= 0;
};
Rule invalid. 

Compose to at 2 : 
@rule{
    @premise new(*[Kb@135], Bk(), tuple4(pkI@136, [Nb@137], Ki@138, Ni@139));
    @premise new(*[Nb@137], Bn(), tuple4(pkI@136, [Ka@140], Ki@138, Ni@139));
    @premise know(*aenc(tuple2(pkI@136, Ki@138), pk(skB())), #t1@141);
    @premise know(*Ni@139, #t2@142);
    @conclusion know(*aenc([Kb@135], pkI@136), #t@143);
    @constraint -#t1@141 + #t@143 >= 0;
    @constraint #t@143 - #t2@142 >= 0;
};
Rule in cache: 7
Rule staged: 31
Rule before check and clean: 
@rule{
    @premise know(*tuple2(pkI@341, Ki@343), #t1@344);
    @premise new(*[Kb@340], Bk(), tuple4(pkI@341, [Nb@345], Ki@343, Ni@346));
    @premise new(*[Nb@345], Bn(), tuple4(pkI@341, [Ka@347], Ki@343, Ni@346));
    @premise know(*Ni@346, #t2@348);
    @conclusion know(*aenc([Kb@340], pkI@341), #t@342);
    @constraint #t@342 - #t@268 >= 0;
    @constraint -#t1@344 + #t@268 >= 0;
    @constraint #t@342 - #t2@348 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*tuple2(pkI@341, Ki@343), #t1@344);
    @premise new(*[Kb@340], Bk(), tuple4(pkI@341, [Nb@345], Ki@343, Ni@346));
    @premise new(*[Nb@345], Bn(), tuple4(pkI@341, [Ka@347], Ki@343, Ni@346));
    @premise know(*Ni@346, #t2@348);
    @conclusion know(*aenc([Kb@340], pkI@341), #t@342);
    @constraint #t@342 - #t2@348 >= 0;
    @constraint #t@342 - #t1@344 >= 0;
};

Compose to at 2 : 
@rule{
    @premise new(*[Kb@144], Bk(), tuple4(pkI@145, [Nb@146], Ki@147, Ni@148));
    @premise new(*[Nb@146], Bn(), tuple4(pkI@145, [Ka@149], Ki@147, Ni@148));
    @premise know(*aenc(tuple2(pkI@145, Ki@147), pk(skB())), #t1@150);
    @premise know(*Ni@148, #t2@151);
    @conclusion know(*[Nb@146], #t@152);
    @constraint -#t1@150 + #t@152 >= 0;
    @constraint #t@152 - #t2@151 >= 0;
};
Rule in cache: 8
Rule staged: 31
Rule before check and clean: 
@rule{
    @premise know(*tuple2(pkI@351, Ki@352), #t1@353);
    @premise new(*[Kb@354], Bk(), tuple4(pkI@351, [Nb@349], Ki@352, Ni@355));
    @premise new(*[Nb@349], Bn(), tuple4(pkI@351, [Ka@356], Ki@352, Ni@355));
    @premise know(*Ni@355, #t2@357);
    @conclusion know(*[Nb@349], #t@350);
    @constraint #t@350 - #t@268 >= 0;
    @constraint -#t1@353 + #t@268 >= 0;
    @constraint #t@350 - #t2@357 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*tuple2(pkI@351, Ki@352), #t1@353);
    @premise new(*[Kb@354], Bk(), tuple4(pkI@351, [Nb@349], Ki@352, Ni@355));
    @premise new(*[Nb@349], Bn(), tuple4(pkI@351, [Ka@356], Ki@352, Ni@355));
    @premise know(*Ni@355, #t2@357);
    @conclusion know(*[Nb@349], #t@350);
    @constraint #t@350 - #t2@357 >= 0;
    @constraint #t@350 - #t1@353 >= 0;
};

Compose to at 2 : 
@rule{
    @premise new(*[Kb@153], Bk(), tuple4(pkI@154, [Nb@155], Ki@156, Ni@157));
    @premise new(*[Nb@155], Bn(), tuple4(pkI@154, [Ka@158], Ki@156, Ni@157));
    @premise know(*aenc(tuple2(pkI@154, Ki@156), pk(skB())), #t1@159);
    @premise know(*Ni@157, #t2@160);
    @conclusion know(*senc(tuple4(Ni@157, [Nb@155], pk(skB()), pkI@154), hash(Ki@156, [Kb@153])), #t@161);
    @constraint -#t1@159 + #t@161 >= 0;
    @constraint #t@161 - #t2@160 >= 0;
};
Rule in cache: 9
Rule staged: 31
Rule before check and clean: 
@rule{
    @premise know(*tuple2(pkI@360, Ki@361), #t1@364);
    @premise new(*[Kb@362], Bk(), tuple4(pkI@360, [Nb@359], Ki@361, Ni@358));
    @premise new(*[Nb@359], Bn(), tuple4(pkI@360, [Ka@365], Ki@361, Ni@358));
    @premise know(*Ni@358, #t2@366);
    @conclusion know(*senc(tuple4(Ni@358, [Nb@359], pk(skB()), pkI@360), hash(Ki@361, [Kb@362])), #t@363);
    @constraint #t@363 - #t@268 >= 0;
    @constraint -#t1@364 + #t@268 >= 0;
    @constraint #t@363 - #t2@366 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*tuple2(pkI@360, Ki@361), #t1@364);
    @premise new(*[Kb@362], Bk(), tuple4(pkI@360, [Nb@359], Ki@361, Ni@358));
    @premise new(*[Nb@359], Bn(), tuple4(pkI@360, [Ka@365], Ki@361, Ni@358));
    @premise know(*Ni@358, #t2@366);
    @conclusion know(*senc(tuple4(Ni@358, [Nb@359], pk(skB()), pkI@360), hash(Ki@361, [Kb@362])), #t@363);
    @constraint #t@363 - #t2@366 >= 0;
    @constraint #t@363 - #t1@364 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Ka@270], Ak(), tuple2(pkR@271, [Na@273]));
    @premise new(*[Na@273], An(), tuple2(pkR@271, [Ka@270]));
    @conclusion know(*aenc(tuple2(pk(skA()), [Ka@270]), pkR@271), #t0@272);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@107, #t1@108);
    @premise know(*aenc(m@109, pk(sk@107)), #t2@110);
    @conclusion know(*m@109, #t@111);
    @constraint -#t1@108 + #t@111 >= 0;
    @constraint #t@111 - #t2@110 >= 0;
};
Rule in cache: 9
Rule staged: 32
Rule before check and clean: 
@rule{
    @premise new(*[Ka@367], Ak(), tuple2(pk(sk@369), [Na@370]));
    @premise new(*[Na@370], An(), tuple2(pk(sk@369), [Ka@367]));
    @premise know(*sk@369, #t1@371);
    @conclusion know(*tuple2(pk(skA()), [Ka@367]), #t@368);
    @constraint -#t1@371 + #t@368 >= 0;
    @constraint #t@368 - #t0@272 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Ka@367], Ak(), tuple2(pk(sk@369), [Na@370]));
    @premise new(*[Na@370], An(), tuple2(pk(sk@369), [Ka@367]));
    @premise know(*sk@369, #t1@371);
    @conclusion know(*tuple2(pk(skA()), [Ka@367]), #t@368);
    @constraint -#t1@371 + #t@368 >= 0;
};

Compose to at 2 : 
@rule{
    @premise new(*[Kb@135], Bk(), tuple4(pkI@136, [Nb@137], Ki@138, Ni@139));
    @premise new(*[Nb@137], Bn(), tuple4(pkI@136, [Ka@140], Ki@138, Ni@139));
    @premise know(*aenc(tuple2(pkI@136, Ki@138), pk(skB())), #t1@141);
    @premise know(*Ni@139, #t2@142);
    @conclusion know(*aenc([Kb@135], pkI@136), #t@143);
    @constraint -#t1@141 + #t@143 >= 0;
    @constraint #t@143 - #t2@142 >= 0;
};
Rule in cache: 10
Rule staged: 32
Rule before check and clean: 
@rule{
    @premise new(*[Ka@374], Ak(), tuple2(pk(skB()), [Na@375]));
    @premise new(*[Na@375], An(), tuple2(pk(skB()), [Ka@374]));
    @premise new(*[Kb@372], Bk(), tuple4(pk(skA()), [Nb@376], [Ka@374], Ni@377));
    @premise new(*[Nb@376], Bn(), tuple4(pk(skA()), [Ka@378], [Ka@374], Ni@377));
    @premise know(*Ni@377, #t2@379);
    @conclusion know(*aenc([Kb@372], pk(skA())), #t@373);
    @constraint #t@373 - #t0@272 >= 0;
    @constraint #t@373 - #t2@379 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@372], Bk(), tuple4(pk(skA()), [Nb@376], [Ka@374], Ni@377));
    @premise new(*[Nb@376], Bn(), tuple4(pk(skA()), [Ka@378], [Ka@374], Ni@377));
    @premise new(*[Ka@374], Ak(), tuple2(pk(skB()), [Na@375]));
    @premise new(*[Na@375], An(), tuple2(pk(skB()), [Ka@374]));
    @premise know(*Ni@377, #t2@379);
    @conclusion know(*aenc([Kb@372], pk(skA())), #t@373);
    @constraint #t@373 - #t2@379 >= 0;
};

Compose to at 2 : 
@rule{
    @premise new(*[Kb@144], Bk(), tuple4(pkI@145, [Nb@146], Ki@147, Ni@148));
    @premise new(*[Nb@146], Bn(), tuple4(pkI@145, [Ka@149], Ki@147, Ni@148));
    @premise know(*aenc(tuple2(pkI@145, Ki@147), pk(skB())), #t1@150);
    @premise know(*Ni@148, #t2@151);
    @conclusion know(*[Nb@146], #t@152);
    @constraint -#t1@150 + #t@152 >= 0;
    @constraint #t@152 - #t2@151 >= 0;
};
Rule in cache: 11
Rule staged: 32
Rule before check and clean: 
@rule{
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t0@272 >= 0;
    @constraint #t@381 - #t2@387 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};

Compose to at 2 : 
@rule{
    @premise new(*[Kb@153], Bk(), tuple4(pkI@154, [Nb@155], Ki@156, Ni@157));
    @premise new(*[Nb@155], Bn(), tuple4(pkI@154, [Ka@158], Ki@156, Ni@157));
    @premise know(*aenc(tuple2(pkI@154, Ki@156), pk(skB())), #t1@159);
    @premise know(*Ni@157, #t2@160);
    @conclusion know(*senc(tuple4(Ni@157, [Nb@155], pk(skB()), pkI@154), hash(Ki@156, [Kb@153])), #t@161);
    @constraint -#t1@159 + #t@161 >= 0;
    @constraint #t@161 - #t2@160 >= 0;
};
Rule in cache: 12
Rule staged: 32
Rule before check and clean: 
@rule{
    @premise new(*[Ka@390], Ak(), tuple2(pk(skB()), [Na@393]));
    @premise new(*[Na@393], An(), tuple2(pk(skB()), [Ka@390]));
    @premise new(*[Kb@391], Bk(), tuple4(pk(skA()), [Nb@389], [Ka@390], Ni@388));
    @premise new(*[Nb@389], Bn(), tuple4(pk(skA()), [Ka@394], [Ka@390], Ni@388));
    @premise know(*Ni@388, #t2@395);
    @conclusion know(*senc(tuple4(Ni@388, [Nb@389], pk(skB()), pk(skA())), hash([Ka@390], [Kb@391])), #t@392);
    @constraint #t@392 - #t0@272 >= 0;
    @constraint #t@392 - #t2@395 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@391], Bk(), tuple4(pk(skA()), [Nb@389], [Ka@390], Ni@388));
    @premise new(*[Nb@389], Bn(), tuple4(pk(skA()), [Ka@394], [Ka@390], Ni@388));
    @premise new(*[Ka@390], Ak(), tuple2(pk(skB()), [Na@393]));
    @premise new(*[Na@393], An(), tuple2(pk(skB()), [Ka@390]));
    @premise know(*Ni@388, #t2@395);
    @conclusion know(*senc(tuple4(Ni@388, [Nb@389], pk(skB()), pk(skA())), hash([Ka@390], [Kb@391])), #t@392);
    @constraint #t@392 - #t2@395 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};
Rule added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pkR@280, *senc(senc(tuple4(Nr@278, [Na@279], pk(skA()), pkR@280), hash([Ka@281], Kr@282)), hash([Ka@281], Kr@282)));
    @premise know(*tuple4([Na@279], Nr@278, pkR@280, pk(skA())), #t1@284);
    @premise know(*aenc(Kr@282, pk(skA())), #t1@286);
    @premise new(*[Ka@281], Ak(), tuple2(pkR@280, [Na@279]));
    @premise new(*[Na@279], An(), tuple2(pkR@280, [Ka@281]));
    @premise know(*hash([Ka@281], Kr@282), #t2@285);
    @premise know(*Nr@278, #t2@287);
    @conclusion know(*senc(tuple4(Nr@278, [Na@279], pk(skA()), pkR@280), hash([Ka@281], Kr@282)), #t@283);
    @constraint -#t1@286 + #t@283 >= 0;
    @constraint #t@283 - #t2@287 >= 0;
    @constraint #t@283 - #t2@285 >= 0;
    @constraint #t@283 - #t1@284 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 11
Rule staged: 34
Rule before check and clean: 
@rule{
    @premise know(*[Na@397], #t0@402);
    @premise know(*x1@396, #t1@403);
    @premise know(*x2@398, #t2@404);
    @premise know(*pk(skA()), #t3@405);
    @premise init(*pk(skA()), *x2@398, *senc(senc(tuple4(x1@396, [Na@397], pk(skA()), x2@398), hash([Ka@399], Kr@400)), hash([Ka@399], Kr@400)));
    @premise know(*aenc(Kr@400, pk(skA())), #t1@406);
    @premise new(*[Ka@399], Ak(), tuple2(x2@398, [Na@397]));
    @premise new(*[Na@397], An(), tuple2(x2@398, [Ka@399]));
    @premise know(*hash([Ka@399], Kr@400), #t2@407);
    @premise know(*x1@396, #t2@408);
    @conclusion know(*senc(tuple4(x1@396, [Na@397], pk(skA()), x2@398), hash([Ka@399], Kr@400)), #t@401);
    @constraint -#t1@406 + #t@401 >= 0;
    @constraint #t@56 - #t3@405 >= 0;
    @constraint #t@56 - #t2@404 >= 0;
    @constraint #t@56 - #t1@403 >= 0;
    @constraint -#t0@402 + #t@56 >= 0;
    @constraint #t@401 - #t@56 >= 0;
    @constraint #t@401 - #t2@407 >= 0;
    @constraint #t@401 - #t2@408 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@398, *senc(senc(tuple4(x1@396, [Na@397], pk(skA()), x2@398), hash([Ka@399], Kr@400)), hash([Ka@399], Kr@400)));
    @premise know(*aenc(Kr@400, pk(skA())), #t1@406);
    @premise new(*[Na@397], An(), tuple2(x2@398, [Ka@399]));
    @premise new(*[Ka@399], Ak(), tuple2(x2@398, [Na@397]));
    @premise know(*pk(skA()), #t3@405);
    @premise know(*hash([Ka@399], Kr@400), #t2@407);
    @premise know(*[Na@397], #t0@402);
    @premise know(*x2@398, #t2@404);
    @premise know(*x1@396, #t1@403);
    @conclusion know(*senc(tuple4(x1@396, [Na@397], pk(skA()), x2@398), hash([Ka@399], Kr@400)), #t@401);
    @constraint -#t1@406 + #t@401 >= 0;
    @constraint #t@401 - #t2@407 >= 0;
    @constraint #t@401 - #t3@405 >= 0;
    @constraint #t@401 - #t2@404 >= 0;
    @constraint #t@401 - #t1@403 >= 0;
    @constraint #t@401 - #t0@402 >= 0;
};

Stage rule: 
@rule{
    @premise know(*tuple4([Nb@288], Ni@289, pk(skA()), pk(skB())), #t1@292);
    @premise know(*hash(Kr@293, [Kb@291]), #t2@294);
    @premise new(*[Kb@291], Bk(), tuple4(pk(skA()), [Nb@288], Ki@290, Ni@289));
    @premise new(*[Nb@288], Bn(), tuple4(pk(skA()), [Ka@295], Ki@290, Ni@289));
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@288], Ni@289, pk(skA()), pk(skB())), hash(Ki@290, [Kb@291])), hash(Ki@290, [Kb@291])));
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 11
Rule staged: 35
Rule before check and clean: 
@rule{
    @premise know(*[Nb@409], #t0@413);
    @premise know(*x1@410, #t1@414);
    @premise know(*pk(skA()), #t2@415);
    @premise know(*pk(skB()), #t3@416);
    @premise know(*hash(Kr@417, [Kb@412]), #t2@418);
    @premise new(*[Kb@412], Bk(), tuple4(pk(skA()), [Nb@409], Ki@411, x1@410));
    @premise new(*[Nb@409], Bn(), tuple4(pk(skA()), [Ka@419], Ki@411, x1@410));
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@409], x1@410, pk(skA()), pk(skB())), hash(Ki@411, [Kb@412])), hash(Ki@411, [Kb@412])));
    @constraint #t@56 - #t1@414 >= 0;
    @constraint #t@56 - #t3@416 >= 0;
    @constraint #t@56 - #t2@415 >= 0;
    @constraint -#t0@413 + #t@56 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@409], Bn(), tuple4(pk(skA()), [Ka@419], Ki@411, x1@410));
    @premise new(*[Kb@412], Bk(), tuple4(pk(skA()), [Nb@409], Ki@411, x1@410));
    @premise know(*pk(skA()), #t2@415);
    @premise know(*pk(skB()), #t3@416);
    @premise know(*hash(Kr@417, [Kb@412]), #t2@418);
    @premise know(*[Nb@409], #t0@413);
    @premise know(*x1@410, #t1@414);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@409], x1@410, pk(skA()), pk(skB())), hash(Ki@411, [Kb@412])), hash(Ki@411, [Kb@412])));
};

Stage rule: 
@rule{
    @premise new(*[Kb@302], Bk(), tuple4(pkI@303, [Nb@308], Ki@306, Ni@309));
    @premise new(*[Nb@308], Bn(), tuple4(pkI@303, [Ka@310], Ki@306, Ni@309));
    @premise know(*tuple2(pkI@303, Ki@306), #t1@307);
    @premise know(*skB(), #t1@305);
    @premise know(*Ni@309, #t2@311);
    @conclusion know(*aenc([Kb@302], pkI@303), #t@304);
    @constraint #t@304 - #t2@311 >= 0;
    @constraint #t@304 - #t1@305 >= 0;
    @constraint #t@304 - #t1@307 >= 0;
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule in cache: 11
Rule staged: 36
Rule before check and clean: 
@rule{
    @premise know(*x0@421, #t0@423);
    @premise know(*x1@424, #t1@425);
    @premise new(*[Kb@420], Bk(), tuple4(x0@421, [Nb@426], x1@424, Ni@427));
    @premise new(*[Nb@426], Bn(), tuple4(x0@421, [Ka@428], x1@424, Ni@427));
    @premise know(*skB(), #t1@429);
    @premise know(*Ni@427, #t2@430);
    @conclusion know(*aenc([Kb@420], x0@421), #t@422);
    @constraint #t@15 - #t1@425 >= 0;
    @constraint -#t0@423 + #t@15 >= 0;
    @constraint #t@422 - #t@15 >= 0;
    @constraint #t@422 - #t1@429 >= 0;
    @constraint #t@422 - #t2@430 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@420], Bk(), tuple4(x0@421, [Nb@426], x1@424, Ni@427));
    @premise new(*[Nb@426], Bn(), tuple4(x0@421, [Ka@428], x1@424, Ni@427));
    @premise know(*skB(), #t1@429);
    @premise know(*x0@421, #t0@423);
    @premise know(*x1@424, #t1@425);
    @premise know(*Ni@427, #t2@430);
    @conclusion know(*aenc([Kb@420], x0@421), #t@422);
    @constraint #t@422 - #t2@430 >= 0;
    @constraint #t@422 - #t1@429 >= 0;
    @constraint #t@422 - #t1@425 >= 0;
    @constraint #t@422 - #t0@423 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Kb@318], Bk(), tuple4(pkI@315, [Nb@312], Ki@316, Ni@319));
    @premise new(*[Nb@312], Bn(), tuple4(pkI@315, [Ka@320], Ki@316, Ni@319));
    @premise know(*tuple2(pkI@315, Ki@316), #t1@317);
    @premise know(*skB(), #t1@314);
    @premise know(*Ni@319, #t2@321);
    @conclusion know(*[Nb@312], #t@313);
    @constraint #t@313 - #t2@321 >= 0;
    @constraint #t@313 - #t1@314 >= 0;
    @constraint #t@313 - #t1@317 >= 0;
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule in cache: 11
Rule staged: 37
Rule before check and clean: 
@rule{
    @premise know(*x0@433, #t0@434);
    @premise know(*x1@435, #t1@436);
    @premise new(*[Kb@437], Bk(), tuple4(x0@433, [Nb@431], x1@435, Ni@438));
    @premise new(*[Nb@431], Bn(), tuple4(x0@433, [Ka@439], x1@435, Ni@438));
    @premise know(*skB(), #t1@440);
    @premise know(*Ni@438, #t2@441);
    @conclusion know(*[Nb@431], #t@432);
    @constraint #t@15 - #t1@436 >= 0;
    @constraint -#t0@434 + #t@15 >= 0;
    @constraint #t@432 - #t@15 >= 0;
    @constraint #t@432 - #t1@440 >= 0;
    @constraint #t@432 - #t2@441 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@437], Bk(), tuple4(x0@433, [Nb@431], x1@435, Ni@438));
    @premise new(*[Nb@431], Bn(), tuple4(x0@433, [Ka@439], x1@435, Ni@438));
    @premise know(*skB(), #t1@440);
    @premise know(*x0@433, #t0@434);
    @premise know(*x1@435, #t1@436);
    @premise know(*Ni@438, #t2@441);
    @conclusion know(*[Nb@431], #t@432);
    @constraint #t@432 - #t2@441 >= 0;
    @constraint #t@432 - #t1@440 >= 0;
    @constraint #t@432 - #t1@436 >= 0;
    @constraint #t@432 - #t0@434 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Kb@326], Bk(), tuple4(pkI@324, [Nb@323], Ki@325, Ni@322));
    @premise new(*[Nb@323], Bn(), tuple4(pkI@324, [Ka@330], Ki@325, Ni@322));
    @premise know(*tuple2(pkI@324, Ki@325), #t1@329);
    @premise know(*skB(), #t1@328);
    @premise know(*Ni@322, #t2@331);
    @conclusion know(*senc(tuple4(Ni@322, [Nb@323], pk(skB()), pkI@324), hash(Ki@325, [Kb@326])), #t@327);
    @constraint #t@327 - #t2@331 >= 0;
    @constraint #t@327 - #t1@328 >= 0;
    @constraint #t@327 - #t1@329 >= 0;
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule in cache: 11
Rule staged: 38
Rule before check and clean: 
@rule{
    @premise know(*x0@444, #t0@448);
    @premise know(*x1@445, #t1@449);
    @premise new(*[Kb@446], Bk(), tuple4(x0@444, [Nb@443], x1@445, Ni@442));
    @premise new(*[Nb@443], Bn(), tuple4(x0@444, [Ka@450], x1@445, Ni@442));
    @premise know(*skB(), #t1@451);
    @premise know(*Ni@442, #t2@452);
    @conclusion know(*senc(tuple4(Ni@442, [Nb@443], pk(skB()), x0@444), hash(x1@445, [Kb@446])), #t@447);
    @constraint #t@15 - #t1@449 >= 0;
    @constraint -#t0@448 + #t@15 >= 0;
    @constraint #t@447 - #t@15 >= 0;
    @constraint #t@447 - #t1@451 >= 0;
    @constraint #t@447 - #t2@452 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@446], Bk(), tuple4(x0@444, [Nb@443], x1@445, Ni@442));
    @premise new(*[Nb@443], Bn(), tuple4(x0@444, [Ka@450], x1@445, Ni@442));
    @premise know(*skB(), #t1@451);
    @premise know(*x0@444, #t0@448);
    @premise know(*x1@445, #t1@449);
    @premise know(*Ni@442, #t2@452);
    @conclusion know(*senc(tuple4(Ni@442, [Nb@443], pk(skB()), x0@444), hash(x1@445, [Kb@446])), #t@447);
    @constraint #t@447 - #t2@452 >= 0;
    @constraint #t@447 - #t1@451 >= 0;
    @constraint #t@447 - #t1@449 >= 0;
    @constraint #t@447 - #t0@448 >= 0;
};

Stage rule: 
@rule{
    @premise know(*tuple2(pkI@341, Ki@343), #t1@344);
    @premise new(*[Kb@340], Bk(), tuple4(pkI@341, [Nb@345], Ki@343, Ni@346));
    @premise new(*[Nb@345], Bn(), tuple4(pkI@341, [Ka@347], Ki@343, Ni@346));
    @premise know(*Ni@346, #t2@348);
    @conclusion know(*aenc([Kb@340], pkI@341), #t@342);
    @constraint #t@342 - #t2@348 >= 0;
    @constraint #t@342 - #t1@344 >= 0;
};
Rule deleted: 
@rule{
    @premise new(*[Kb@302], Bk(), tuple4(pkI@303, [Nb@308], Ki@306, Ni@309));
    @premise new(*[Nb@308], Bn(), tuple4(pkI@303, [Ka@310], Ki@306, Ni@309));
    @premise know(*tuple2(pkI@303, Ki@306), #t1@307);
    @premise know(*skB(), #t1@305);
    @premise know(*Ni@309, #t2@311);
    @conclusion know(*aenc([Kb@302], pkI@303), #t@304);
    @constraint #t@304 - #t2@311 >= 0;
    @constraint #t@304 - #t1@305 >= 0;
    @constraint #t@304 - #t1@307 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule in cache: 11
Rule staged: 39
Rule before check and clean: 
@rule{
    @premise know(*x0@454, #t0@456);
    @premise know(*x1@457, #t1@458);
    @premise new(*[Kb@453], Bk(), tuple4(x0@454, [Nb@459], x1@457, Ni@460));
    @premise new(*[Nb@459], Bn(), tuple4(x0@454, [Ka@461], x1@457, Ni@460));
    @premise know(*Ni@460, #t2@462);
    @conclusion know(*aenc([Kb@453], x0@454), #t@455);
    @constraint #t@15 - #t1@458 >= 0;
    @constraint -#t0@456 + #t@15 >= 0;
    @constraint #t@455 - #t@15 >= 0;
    @constraint #t@455 - #t2@462 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@453], Bk(), tuple4(x0@454, [Nb@459], x1@457, Ni@460));
    @premise new(*[Nb@459], Bn(), tuple4(x0@454, [Ka@461], x1@457, Ni@460));
    @premise know(*x0@454, #t0@456);
    @premise know(*x1@457, #t1@458);
    @premise know(*Ni@460, #t2@462);
    @conclusion know(*aenc([Kb@453], x0@454), #t@455);
    @constraint #t@455 - #t2@462 >= 0;
    @constraint #t@455 - #t1@458 >= 0;
    @constraint #t@455 - #t0@456 >= 0;
};

Stage rule: 
@rule{
    @premise know(*tuple2(pkI@351, Ki@352), #t1@353);
    @premise new(*[Kb@354], Bk(), tuple4(pkI@351, [Nb@349], Ki@352, Ni@355));
    @premise new(*[Nb@349], Bn(), tuple4(pkI@351, [Ka@356], Ki@352, Ni@355));
    @premise know(*Ni@355, #t2@357);
    @conclusion know(*[Nb@349], #t@350);
    @constraint #t@350 - #t2@357 >= 0;
    @constraint #t@350 - #t1@353 >= 0;
};
Rule deleted: 
@rule{
    @premise new(*[Kb@318], Bk(), tuple4(pkI@315, [Nb@312], Ki@316, Ni@319));
    @premise new(*[Nb@312], Bn(), tuple4(pkI@315, [Ka@320], Ki@316, Ni@319));
    @premise know(*tuple2(pkI@315, Ki@316), #t1@317);
    @premise know(*skB(), #t1@314);
    @premise know(*Ni@319, #t2@321);
    @conclusion know(*[Nb@312], #t@313);
    @constraint #t@313 - #t2@321 >= 0;
    @constraint #t@313 - #t1@314 >= 0;
    @constraint #t@313 - #t1@317 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule in cache: 11
Rule staged: 40
Rule before check and clean: 
@rule{
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@15 - #t1@468 >= 0;
    @constraint -#t0@466 + #t@15 >= 0;
    @constraint #t@464 - #t@15 >= 0;
    @constraint #t@464 - #t2@472 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};

Stage rule: 
@rule{
    @premise know(*tuple2(pkI@360, Ki@361), #t1@364);
    @premise new(*[Kb@362], Bk(), tuple4(pkI@360, [Nb@359], Ki@361, Ni@358));
    @premise new(*[Nb@359], Bn(), tuple4(pkI@360, [Ka@365], Ki@361, Ni@358));
    @premise know(*Ni@358, #t2@366);
    @conclusion know(*senc(tuple4(Ni@358, [Nb@359], pk(skB()), pkI@360), hash(Ki@361, [Kb@362])), #t@363);
    @constraint #t@363 - #t2@366 >= 0;
    @constraint #t@363 - #t1@364 >= 0;
};
Rule deleted: 
@rule{
    @premise new(*[Kb@326], Bk(), tuple4(pkI@324, [Nb@323], Ki@325, Ni@322));
    @premise new(*[Nb@323], Bn(), tuple4(pkI@324, [Ka@330], Ki@325, Ni@322));
    @premise know(*tuple2(pkI@324, Ki@325), #t1@329);
    @premise know(*skB(), #t1@328);
    @premise know(*Ni@322, #t2@331);
    @conclusion know(*senc(tuple4(Ni@322, [Nb@323], pk(skB()), pkI@324), hash(Ki@325, [Kb@326])), #t@327);
    @constraint #t@327 - #t2@331 >= 0;
    @constraint #t@327 - #t1@328 >= 0;
    @constraint #t@327 - #t1@329 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule in cache: 11
Rule staged: 41
Rule before check and clean: 
@rule{
    @premise know(*x0@475, #t0@479);
    @premise know(*x1@476, #t1@480);
    @premise new(*[Kb@477], Bk(), tuple4(x0@475, [Nb@474], x1@476, Ni@473));
    @premise new(*[Nb@474], Bn(), tuple4(x0@475, [Ka@481], x1@476, Ni@473));
    @premise know(*Ni@473, #t2@482);
    @conclusion know(*senc(tuple4(Ni@473, [Nb@474], pk(skB()), x0@475), hash(x1@476, [Kb@477])), #t@478);
    @constraint #t@15 - #t1@480 >= 0;
    @constraint -#t0@479 + #t@15 >= 0;
    @constraint #t@478 - #t@15 >= 0;
    @constraint #t@478 - #t2@482 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@477], Bk(), tuple4(x0@475, [Nb@474], x1@476, Ni@473));
    @premise new(*[Nb@474], Bn(), tuple4(x0@475, [Ka@481], x1@476, Ni@473));
    @premise know(*x0@475, #t0@479);
    @premise know(*x1@476, #t1@480);
    @premise know(*Ni@473, #t2@482);
    @conclusion know(*senc(tuple4(Ni@473, [Nb@474], pk(skB()), x0@475), hash(x1@476, [Kb@477])), #t@478);
    @constraint #t@478 - #t2@482 >= 0;
    @constraint #t@478 - #t1@480 >= 0;
    @constraint #t@478 - #t0@479 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Ka@367], Ak(), tuple2(pk(sk@369), [Na@370]));
    @premise new(*[Na@370], An(), tuple2(pk(sk@369), [Ka@367]));
    @premise know(*sk@369, #t1@371);
    @conclusion know(*tuple2(pk(skA()), [Ka@367]), #t@368);
    @constraint -#t1@371 + #t@368 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};
Rule in cache: 11
Rule staged: 42
Rule before check and clean: 
@rule{
    @premise new(*[Ka@484], Ak(), tuple2(pk(sk@485), [Na@486]));
    @premise new(*[Na@486], An(), tuple2(pk(sk@485), [Ka@484]));
    @premise know(*sk@485, #t1@487);
    @conclusion know(*pk(skA()), #t0@483);
    @constraint #t0@483 - #t@368 >= 0;
    @constraint -#t1@487 + #t@368 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Ka@484], Ak(), tuple2(pk(sk@485), [Na@486]));
    @premise new(*[Na@486], An(), tuple2(pk(sk@485), [Ka@484]));
    @premise know(*sk@485, #t1@487);
    @conclusion know(*pk(skA()), #t0@483);
    @constraint #t0@483 - #t1@487 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};
Rule in cache: 12
Rule staged: 42
Rule before check and clean: 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t@368 >= 0;
    @constraint -#t1@492 + #t@368 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Kb@372], Bk(), tuple4(pk(skA()), [Nb@376], [Ka@374], Ni@377));
    @premise new(*[Nb@376], Bn(), tuple4(pk(skA()), [Ka@378], [Ka@374], Ni@377));
    @premise new(*[Ka@374], Ak(), tuple2(pk(skB()), [Na@375]));
    @premise new(*[Na@375], An(), tuple2(pk(skB()), [Ka@374]));
    @premise know(*Ni@377, #t2@379);
    @conclusion know(*aenc([Kb@372], pk(skA())), #t@373);
    @constraint #t@373 - #t2@379 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@107, #t1@108);
    @premise know(*aenc(m@109, pk(sk@107)), #t2@110);
    @conclusion know(*m@109, #t@111);
    @constraint -#t1@108 + #t@111 >= 0;
    @constraint #t@111 - #t2@110 >= 0;
};
Rule in cache: 12
Rule staged: 43
Rule before check and clean: 
@rule{
    @premise new(*[Kb@493], Bk(), tuple4(pk(skA()), [Nb@495], [Ka@496], Ni@497));
    @premise new(*[Nb@495], Bn(), tuple4(pk(skA()), [Ka@498], [Ka@496], Ni@497));
    @premise new(*[Ka@496], Ak(), tuple2(pk(skB()), [Na@499]));
    @premise new(*[Na@499], An(), tuple2(pk(skB()), [Ka@496]));
    @premise know(*Ni@497, #t2@500);
    @premise know(*skA(), #t1@501);
    @conclusion know(*[Kb@493], #t@494);
    @constraint -#t1@501 + #t@494 >= 0;
    @constraint #t@373 - #t2@500 >= 0;
    @constraint #t@494 - #t@373 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@493], Bk(), tuple4(pk(skA()), [Nb@495], [Ka@496], Ni@497));
    @premise new(*[Nb@495], Bn(), tuple4(pk(skA()), [Ka@498], [Ka@496], Ni@497));
    @premise new(*[Ka@496], Ak(), tuple2(pk(skB()), [Na@499]));
    @premise new(*[Na@499], An(), tuple2(pk(skB()), [Ka@496]));
    @premise know(*skA(), #t1@501);
    @premise know(*Ni@497, #t2@500);
    @conclusion know(*[Kb@493], #t@494);
    @constraint #t@494 - #t2@500 >= 0;
    @constraint -#t1@501 + #t@494 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Kb@391], Bk(), tuple4(pk(skA()), [Nb@389], [Ka@390], Ni@388));
    @premise new(*[Nb@389], Bn(), tuple4(pk(skA()), [Ka@394], [Ka@390], Ni@388));
    @premise new(*[Ka@390], Ak(), tuple2(pk(skB()), [Na@393]));
    @premise new(*[Na@393], An(), tuple2(pk(skB()), [Ka@390]));
    @premise know(*Ni@388, #t2@395);
    @conclusion know(*senc(tuple4(Ni@388, [Nb@389], pk(skB()), pk(skA())), hash([Ka@390], [Kb@391])), #t@392);
    @constraint #t@392 - #t2@395 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*k@118, #t1@119);
    @premise know(*senc(m@120, k@118), #t2@121);
    @conclusion know(*m@120, #t@122);
    @constraint -#t1@119 + #t@122 >= 0;
    @constraint #t@122 - #t2@121 >= 0;
};
Rule in cache: 11
Rule staged: 45
Rule before check and clean: 
@rule{
    @premise new(*[Kb@505], Bk(), tuple4(pk(skA()), [Nb@503], [Ka@506], Ni@502));
    @premise new(*[Nb@503], Bn(), tuple4(pk(skA()), [Ka@507], [Ka@506], Ni@502));
    @premise new(*[Ka@506], Ak(), tuple2(pk(skB()), [Na@508]));
    @premise new(*[Na@508], An(), tuple2(pk(skB()), [Ka@506]));
    @premise know(*Ni@502, #t2@509);
    @premise know(*hash([Ka@506], [Kb@505]), #t1@510);
    @conclusion know(*tuple4(Ni@502, [Nb@503], pk(skB()), pk(skA())), #t@504);
    @constraint -#t1@510 + #t@504 >= 0;
    @constraint #t@392 - #t2@509 >= 0;
    @constraint #t@504 - #t@392 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@505], Bk(), tuple4(pk(skA()), [Nb@503], [Ka@506], Ni@502));
    @premise new(*[Nb@503], Bn(), tuple4(pk(skA()), [Ka@507], [Ka@506], Ni@502));
    @premise new(*[Ka@506], Ak(), tuple2(pk(skB()), [Na@508]));
    @premise new(*[Na@508], An(), tuple2(pk(skB()), [Ka@506]));
    @premise know(*hash([Ka@506], [Kb@505]), #t1@510);
    @premise know(*Ni@502, #t2@509);
    @conclusion know(*tuple4(Ni@502, [Nb@503], pk(skB()), pk(skA())), #t@504);
    @constraint #t@504 - #t2@509 >= 0;
    @constraint -#t1@510 + #t@504 >= 0;
};

Compose to at 1 : 
@rule{
    @premise init(*pk(skA()), *pkR@162, *senc(senc(tuple4(Nr@163, [Na@164], pk(skA()), pkR@162), hash([Ka@165], Kr@166)), hash([Ka@165], Kr@166)));
    @premise know(*senc(tuple4([Na@164], Nr@163, pkR@162, pk(skA())), hash([Ka@165], Kr@166)), #t3@169);
    @premise know(*aenc(Kr@166, pk(skA())), #t1@167);
    @premise new(*[Ka@165], Ak(), tuple2(pkR@162, [Na@164]));
    @premise new(*[Na@164], An(), tuple2(pkR@162, [Ka@165]));
    @premise know(*Nr@163, #t2@168);
    @conclusion know(*senc(tuple4(Nr@163, [Na@164], pk(skA()), pkR@162), hash([Ka@165], Kr@166)), #t@170);
    @constraint -#t1@167 + #t@170 >= 0;
    @constraint #t@170 - #t2@168 >= 0;
    @constraint #t@170 - #t3@169 >= 0;
};
Rule in cache: 12
Rule staged: 45
Rule before check and clean: 
@rule{
    @premise new(*[Kb@514], Bk(), tuple4(pk(skA()), [Nb@511], [Ka@513], [Na@512]));
    @premise new(*[Nb@511], Bn(), tuple4(pk(skA()), [Ka@516], [Ka@513], [Na@512]));
    @premise new(*[Ka@513], Ak(), tuple2(pk(skB()), [Na@517]));
    @premise new(*[Na@517], An(), tuple2(pk(skB()), [Ka@513]));
    @premise know(*[Na@512], #t2@518);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@511], [Na@512], pk(skA()), pk(skB())), hash([Ka@513], [Kb@514])), hash([Ka@513], [Kb@514])));
    @premise know(*aenc([Kb@514], pk(skA())), #t1@519);
    @premise new(*[Ka@513], Ak(), tuple2(pk(skB()), [Na@512]));
    @premise new(*[Na@512], An(), tuple2(pk(skB()), [Ka@513]));
    @premise know(*[Nb@511], #t2@520);
    @conclusion know(*senc(tuple4([Nb@511], [Na@512], pk(skA()), pk(skB())), hash([Ka@513], [Kb@514])), #t@515);
    @constraint -#t1@519 + #t@515 >= 0;
    @constraint #t@392 - #t2@518 >= 0;
    @constraint #t@515 - #t@392 >= 0;
    @constraint #t@515 - #t2@520 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@511], [Na@517], pk(skA()), pk(skB())), hash([Ka@513], [Kb@514])), hash([Ka@513], [Kb@514])));
    @premise new(*[Kb@514], Bk(), tuple4(pk(skA()), [Nb@511], [Ka@513], [Na@517]));
    @premise new(*[Nb@511], Bn(), tuple4(pk(skA()), [Ka@516], [Ka@513], [Na@517]));
    @premise new(*[Ka@513], Ak(), tuple2(pk(skB()), [Na@517]));
    @premise new(*[Na@517], An(), tuple2(pk(skB()), [Ka@513]));
    @premise know(*aenc([Kb@514], pk(skA())), #t1@519);
    @premise know(*[Na@517], #t2@518);
    @premise know(*[Nb@511], #t2@520);
    @conclusion know(*senc(tuple4([Nb@511], [Na@517], pk(skA()), pk(skB())), hash([Ka@513], [Kb@514])), #t@515);
    @constraint #t@515 - #t2@518 >= 0;
    @constraint #t@515 - #t2@520 >= 0;
    @constraint -#t1@519 + #t@515 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@398, *senc(senc(tuple4(x1@396, [Na@397], pk(skA()), x2@398), hash([Ka@399], Kr@400)), hash([Ka@399], Kr@400)));
    @premise know(*aenc(Kr@400, pk(skA())), #t1@406);
    @premise new(*[Na@397], An(), tuple2(x2@398, [Ka@399]));
    @premise new(*[Ka@399], Ak(), tuple2(x2@398, [Na@397]));
    @premise know(*pk(skA()), #t3@405);
    @premise know(*hash([Ka@399], Kr@400), #t2@407);
    @premise know(*[Na@397], #t0@402);
    @premise know(*x2@398, #t2@404);
    @premise know(*x1@396, #t1@403);
    @conclusion know(*senc(tuple4(x1@396, [Na@397], pk(skA()), x2@398), hash([Ka@399], Kr@400)), #t@401);
    @constraint -#t1@406 + #t@401 >= 0;
    @constraint #t@401 - #t2@407 >= 0;
    @constraint #t@401 - #t3@405 >= 0;
    @constraint #t@401 - #t2@404 >= 0;
    @constraint #t@401 - #t1@403 >= 0;
    @constraint #t@401 - #t0@402 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@254, #t1@256);
    @premise know(*m@253, #t1@257);
    @conclusion know(*aenc(m@253, pk(sk@254)), #t@255);
    @constraint -#t1@257 + #t@255 >= 0;
    @constraint #t@255 - #t1@256 >= 0;
};
Rule in cache: 12
Rule staged: 46
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@527);
    @premise know(*m@525, #t1@528);
    @premise init(*pk(skA()), *x2@523, *senc(senc(tuple4(x1@521, [Na@522], pk(skA()), x2@523), hash([Ka@524], m@525)), hash([Ka@524], m@525)));
    @premise new(*[Na@522], An(), tuple2(x2@523, [Ka@524]));
    @premise new(*[Ka@524], Ak(), tuple2(x2@523, [Na@522]));
    @premise know(*pk(skA()), #t3@529);
    @premise know(*hash([Ka@524], m@525), #t2@530);
    @premise know(*[Na@522], #t0@531);
    @premise know(*x2@523, #t2@532);
    @premise know(*x1@521, #t1@533);
    @conclusion know(*senc(tuple4(x1@521, [Na@522], pk(skA()), x2@523), hash([Ka@524], m@525)), #t@526);
    @constraint #t@255 - #t1@527 >= 0;
    @constraint #t@526 - #t@255 >= 0;
    @constraint -#t1@528 + #t@255 >= 0;
    @constraint #t@526 - #t3@529 >= 0;
    @constraint #t@526 - #t2@532 >= 0;
    @constraint #t@526 - #t1@533 >= 0;
    @constraint #t@526 - #t0@531 >= 0;
    @constraint #t@526 - #t2@530 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@523, *senc(senc(tuple4(x1@521, [Na@522], pk(skA()), x2@523), hash([Ka@524], m@525)), hash([Ka@524], m@525)));
    @premise new(*[Na@522], An(), tuple2(x2@523, [Ka@524]));
    @premise new(*[Ka@524], Ak(), tuple2(x2@523, [Na@522]));
    @premise know(*pk(skA()), #t3@529);
    @premise know(*hash([Ka@524], m@525), #t2@530);
    @premise know(*skA(), #t1@527);
    @premise know(*[Na@522], #t0@531);
    @premise know(*m@525, #t1@528);
    @premise know(*x2@523, #t2@532);
    @premise know(*x1@521, #t1@533);
    @conclusion know(*senc(tuple4(x1@521, [Na@522], pk(skA()), x2@523), hash([Ka@524], m@525)), #t@526);
    @constraint #t@526 - #t2@530 >= 0;
    @constraint #t@526 - #t3@529 >= 0;
    @constraint #t@526 - #t2@532 >= 0;
    @constraint #t@526 - #t1@533 >= 0;
    @constraint #t@526 - #t0@531 >= 0;
    @constraint #t@526 - #t1@527 >= 0;
    @constraint #t@526 - #t1@528 >= 0;
};

Compose by at 1 : 
@rule{
    @premise know(*m@264, #t1@266);
    @conclusion know(*aenc(m@264, pk(skA())), #t@265);
    @constraint -#t1@266 + #t@265 >= 0;
};
Rule in cache: 13
Rule staged: 46
Rule before check and clean: 
@rule{
    @premise know(*m@538, #t1@540);
    @premise init(*pk(skA()), *x2@536, *senc(senc(tuple4(x1@534, [Na@535], pk(skA()), x2@536), hash([Ka@537], m@538)), hash([Ka@537], m@538)));
    @premise new(*[Na@535], An(), tuple2(x2@536, [Ka@537]));
    @premise new(*[Ka@537], Ak(), tuple2(x2@536, [Na@535]));
    @premise know(*pk(skA()), #t3@541);
    @premise know(*hash([Ka@537], m@538), #t2@542);
    @premise know(*[Na@535], #t0@543);
    @premise know(*x2@536, #t2@544);
    @premise know(*x1@534, #t1@545);
    @conclusion know(*senc(tuple4(x1@534, [Na@535], pk(skA()), x2@536), hash([Ka@537], m@538)), #t@539);
    @constraint #t@539 - #t@265 >= 0;
    @constraint -#t1@540 + #t@265 >= 0;
    @constraint #t@539 - #t3@541 >= 0;
    @constraint #t@539 - #t2@544 >= 0;
    @constraint #t@539 - #t1@545 >= 0;
    @constraint #t@539 - #t0@543 >= 0;
    @constraint #t@539 - #t2@542 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@536, *senc(senc(tuple4(x1@534, [Na@535], pk(skA()), x2@536), hash([Ka@537], m@538)), hash([Ka@537], m@538)));
    @premise new(*[Na@535], An(), tuple2(x2@536, [Ka@537]));
    @premise new(*[Ka@537], Ak(), tuple2(x2@536, [Na@535]));
    @premise know(*pk(skA()), #t3@541);
    @premise know(*hash([Ka@537], m@538), #t2@542);
    @premise know(*[Na@535], #t0@543);
    @premise know(*m@538, #t1@540);
    @premise know(*x2@536, #t2@544);
    @premise know(*x1@534, #t1@545);
    @conclusion know(*senc(tuple4(x1@534, [Na@535], pk(skA()), x2@536), hash([Ka@537], m@538)), #t@539);
    @constraint #t@539 - #t3@541 >= 0;
    @constraint #t@539 - #t2@544 >= 0;
    @constraint #t@539 - #t1@545 >= 0;
    @constraint #t@539 - #t0@543 >= 0;
    @constraint #t@539 - #t2@542 >= 0;
    @constraint #t@539 - #t1@540 >= 0;
};

Compose by at 1 : 
@rule{
    @premise new(*[Ka@270], Ak(), tuple2(pkR@271, [Na@273]));
    @premise new(*[Na@273], An(), tuple2(pkR@271, [Ka@270]));
    @conclusion know(*aenc(tuple2(pk(skA()), [Ka@270]), pkR@271), #t0@272);
};
Rule in cache: 14
Rule staged: 46
Rule before check and clean: 
@rule{
    @premise new(*[Ka@550], Ak(), tuple2(pk(skA()), [Na@552]));
    @premise new(*[Na@552], An(), tuple2(pk(skA()), [Ka@550]));
    @premise init(*pk(skA()), *x2@548, *senc(senc(tuple4(x1@546, [Na@547], pk(skA()), x2@548), hash([Ka@549], tuple2(pk(skA()), [Ka@550]))), hash([Ka@549], tuple2(pk(skA()), [Ka@550]))));
    @premise new(*[Na@547], An(), tuple2(x2@548, [Ka@549]));
    @premise new(*[Ka@549], Ak(), tuple2(x2@548, [Na@547]));
    @premise know(*pk(skA()), #t3@553);
    @premise know(*hash([Ka@549], tuple2(pk(skA()), [Ka@550])), #t2@554);
    @premise know(*[Na@547], #t0@555);
    @premise know(*x2@548, #t2@556);
    @premise know(*x1@546, #t1@557);
    @conclusion know(*senc(tuple4(x1@546, [Na@547], pk(skA()), x2@548), hash([Ka@549], tuple2(pk(skA()), [Ka@550]))), #t@551);
    @constraint #t@551 - #t0@272 >= 0;
    @constraint #t@551 - #t3@553 >= 0;
    @constraint #t@551 - #t2@556 >= 0;
    @constraint #t@551 - #t1@557 >= 0;
    @constraint #t@551 - #t0@555 >= 0;
    @constraint #t@551 - #t2@554 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@548, *senc(senc(tuple4(x1@546, [Na@547], pk(skA()), x2@548), hash([Ka@549], tuple2(pk(skA()), [Ka@550]))), hash([Ka@549], tuple2(pk(skA()), [Ka@550]))));
    @premise know(*hash([Ka@549], tuple2(pk(skA()), [Ka@550])), #t2@554);
    @premise new(*[Ka@550], Ak(), tuple2(pk(skA()), [Na@552]));
    @premise new(*[Na@552], An(), tuple2(pk(skA()), [Ka@550]));
    @premise new(*[Na@547], An(), tuple2(x2@548, [Ka@549]));
    @premise new(*[Ka@549], Ak(), tuple2(x2@548, [Na@547]));
    @premise know(*pk(skA()), #t3@553);
    @premise know(*[Na@547], #t0@555);
    @premise know(*x2@548, #t2@556);
    @premise know(*x1@546, #t1@557);
    @conclusion know(*senc(tuple4(x1@546, [Na@547], pk(skA()), x2@548), hash([Ka@549], tuple2(pk(skA()), [Ka@550]))), #t@551);
    @constraint #t@551 - #t3@553 >= 0;
    @constraint #t@551 - #t2@556 >= 0;
    @constraint #t@551 - #t1@557 >= 0;
    @constraint #t@551 - #t0@555 >= 0;
    @constraint #t@551 - #t2@554 >= 0;
};

Compose by at 1 : 
@rule{
    @premise new(*[Kb@372], Bk(), tuple4(pk(skA()), [Nb@376], [Ka@374], Ni@377));
    @premise new(*[Nb@376], Bn(), tuple4(pk(skA()), [Ka@378], [Ka@374], Ni@377));
    @premise new(*[Ka@374], Ak(), tuple2(pk(skB()), [Na@375]));
    @premise new(*[Na@375], An(), tuple2(pk(skB()), [Ka@374]));
    @premise know(*Ni@377, #t2@379);
    @conclusion know(*aenc([Kb@372], pk(skA())), #t@373);
    @constraint #t@373 - #t2@379 >= 0;
};
Rule in cache: 15
Rule staged: 46
Rule before check and clean: 
@rule{
    @premise new(*[Kb@562], Bk(), tuple4(pk(skA()), [Nb@564], [Ka@565], Ni@566));
    @premise new(*[Nb@564], Bn(), tuple4(pk(skA()), [Ka@567], [Ka@565], Ni@566));
    @premise new(*[Ka@565], Ak(), tuple2(pk(skB()), [Na@568]));
    @premise new(*[Na@568], An(), tuple2(pk(skB()), [Ka@565]));
    @premise know(*Ni@566, #t2@569);
    @premise init(*pk(skA()), *x2@560, *senc(senc(tuple4(x1@558, [Na@559], pk(skA()), x2@560), hash([Ka@561], [Kb@562])), hash([Ka@561], [Kb@562])));
    @premise new(*[Na@559], An(), tuple2(x2@560, [Ka@561]));
    @premise new(*[Ka@561], Ak(), tuple2(x2@560, [Na@559]));
    @premise know(*pk(skA()), #t3@570);
    @premise know(*hash([Ka@561], [Kb@562]), #t2@571);
    @premise know(*[Na@559], #t0@572);
    @premise know(*x2@560, #t2@573);
    @premise know(*x1@558, #t1@574);
    @conclusion know(*senc(tuple4(x1@558, [Na@559], pk(skA()), x2@560), hash([Ka@561], [Kb@562])), #t@563);
    @constraint #t@373 - #t2@569 >= 0;
    @constraint #t@563 - #t@373 >= 0;
    @constraint #t@563 - #t3@570 >= 0;
    @constraint #t@563 - #t2@573 >= 0;
    @constraint #t@563 - #t1@574 >= 0;
    @constraint #t@563 - #t0@572 >= 0;
    @constraint #t@563 - #t2@571 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@560, *senc(senc(tuple4(x1@558, [Na@559], pk(skA()), x2@560), hash([Ka@561], [Kb@562])), hash([Ka@561], [Kb@562])));
    @premise new(*[Kb@562], Bk(), tuple4(pk(skA()), [Nb@564], [Ka@565], Ni@566));
    @premise new(*[Nb@564], Bn(), tuple4(pk(skA()), [Ka@567], [Ka@565], Ni@566));
    @premise new(*[Ka@565], Ak(), tuple2(pk(skB()), [Na@568]));
    @premise new(*[Na@568], An(), tuple2(pk(skB()), [Ka@565]));
    @premise new(*[Na@559], An(), tuple2(x2@560, [Ka@561]));
    @premise new(*[Ka@561], Ak(), tuple2(x2@560, [Na@559]));
    @premise know(*hash([Ka@561], [Kb@562]), #t2@571);
    @premise know(*pk(skA()), #t3@570);
    @premise know(*[Na@559], #t0@572);
    @premise know(*Ni@566, #t2@569);
    @premise know(*x2@560, #t2@573);
    @premise know(*x1@558, #t1@574);
    @conclusion know(*senc(tuple4(x1@558, [Na@559], pk(skA()), x2@560), hash([Ka@561], [Kb@562])), #t@563);
    @constraint #t@563 - #t3@570 >= 0;
    @constraint #t@563 - #t2@573 >= 0;
    @constraint #t@563 - #t1@574 >= 0;
    @constraint #t@563 - #t0@572 >= 0;
    @constraint #t@563 - #t2@571 >= 0;
    @constraint #t@563 - #t2@569 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Nb@409], Bn(), tuple4(pk(skA()), [Ka@419], Ki@411, x1@410));
    @premise new(*[Kb@412], Bk(), tuple4(pk(skA()), [Nb@409], Ki@411, x1@410));
    @premise know(*pk(skA()), #t2@415);
    @premise know(*pk(skB()), #t3@416);
    @premise know(*hash(Kr@417, [Kb@412]), #t2@418);
    @premise know(*[Nb@409], #t0@413);
    @premise know(*x1@410, #t1@414);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@409], x1@410, pk(skA()), pk(skB())), hash(Ki@411, [Kb@412])), hash(Ki@411, [Kb@412])));
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule in cache: 15
Rule staged: 47
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@579);
    @premise new(*[Nb@575], Bn(), tuple4(pk(skA()), [Ka@580], Ki@577, x1@576));
    @premise new(*[Kb@578], Bk(), tuple4(pk(skA()), [Nb@575], Ki@577, x1@576));
    @premise know(*pk(skB()), #t3@581);
    @premise know(*hash(Kr@582, [Kb@578]), #t2@583);
    @premise know(*[Nb@575], #t0@584);
    @premise know(*x1@576, #t1@585);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@575], x1@576, pk(skA()), pk(skB())), hash(Ki@577, [Kb@578])), hash(Ki@577, [Kb@578])));
    @constraint -#t1@579 + #t@90 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@575], Bn(), tuple4(pk(skA()), [Ka@580], Ki@577, x1@576));
    @premise new(*[Kb@578], Bk(), tuple4(pk(skA()), [Nb@575], Ki@577, x1@576));
    @premise know(*pk(skB()), #t3@581);
    @premise know(*hash(Kr@582, [Kb@578]), #t2@583);
    @premise know(*skA(), #t1@579);
    @premise know(*[Nb@575], #t0@584);
    @premise know(*x1@576, #t1@585);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@575], x1@576, pk(skA()), pk(skB())), hash(Ki@577, [Kb@578])), hash(Ki@577, [Kb@578])));
};

Compose by at 2 : 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};
Rule in cache: 16
Rule staged: 47
Rule before check and clean: 
@rule{
    @premise new(*[Nb@586], Bn(), tuple4(pk(skA()), [Ka@590], Ki@588, x1@587));
    @premise new(*[Kb@589], Bk(), tuple4(pk(skA()), [Nb@586], Ki@588, x1@587));
    @premise know(*pk(skB()), #t3@591);
    @premise know(*hash(Kr@592, [Kb@589]), #t2@593);
    @premise know(*[Nb@586], #t0@594);
    @premise know(*x1@587, #t1@595);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@586], x1@587, pk(skA()), pk(skB())), hash(Ki@588, [Kb@589])), hash(Ki@588, [Kb@589])));
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@586], Bn(), tuple4(pk(skA()), [Ka@590], Ki@588, x1@587));
    @premise new(*[Kb@589], Bk(), tuple4(pk(skA()), [Nb@586], Ki@588, x1@587));
    @premise know(*pk(skB()), #t3@591);
    @premise know(*hash(Kr@592, [Kb@589]), #t2@593);
    @premise know(*[Nb@586], #t0@594);
    @premise know(*x1@587, #t1@595);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@586], x1@587, pk(skA()), pk(skB())), hash(Ki@588, [Kb@589])), hash(Ki@588, [Kb@589])));
};

Stage rule: 
@rule{
    @premise new(*[Kb@420], Bk(), tuple4(x0@421, [Nb@426], x1@424, Ni@427));
    @premise new(*[Nb@426], Bn(), tuple4(x0@421, [Ka@428], x1@424, Ni@427));
    @premise know(*skB(), #t1@429);
    @premise know(*x0@421, #t0@423);
    @premise know(*x1@424, #t1@425);
    @premise know(*Ni@427, #t2@430);
    @conclusion know(*aenc([Kb@420], x0@421), #t@422);
    @constraint #t@422 - #t2@430 >= 0;
    @constraint #t@422 - #t1@429 >= 0;
    @constraint #t@422 - #t1@425 >= 0;
    @constraint #t@422 - #t0@423 >= 0;
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Kb@437], Bk(), tuple4(x0@433, [Nb@431], x1@435, Ni@438));
    @premise new(*[Nb@431], Bn(), tuple4(x0@433, [Ka@439], x1@435, Ni@438));
    @premise know(*skB(), #t1@440);
    @premise know(*x0@433, #t0@434);
    @premise know(*x1@435, #t1@436);
    @premise know(*Ni@438, #t2@441);
    @conclusion know(*[Nb@431], #t@432);
    @constraint #t@432 - #t2@441 >= 0;
    @constraint #t@432 - #t1@440 >= 0;
    @constraint #t@432 - #t1@436 >= 0;
    @constraint #t@432 - #t0@434 >= 0;
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Kb@446], Bk(), tuple4(x0@444, [Nb@443], x1@445, Ni@442));
    @premise new(*[Nb@443], Bn(), tuple4(x0@444, [Ka@450], x1@445, Ni@442));
    @premise know(*skB(), #t1@451);
    @premise know(*x0@444, #t0@448);
    @premise know(*x1@445, #t1@449);
    @premise know(*Ni@442, #t2@452);
    @conclusion know(*senc(tuple4(Ni@442, [Nb@443], pk(skB()), x0@444), hash(x1@445, [Kb@446])), #t@447);
    @constraint #t@447 - #t2@452 >= 0;
    @constraint #t@447 - #t1@451 >= 0;
    @constraint #t@447 - #t1@449 >= 0;
    @constraint #t@447 - #t0@448 >= 0;
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Kb@453], Bk(), tuple4(x0@454, [Nb@459], x1@457, Ni@460));
    @premise new(*[Nb@459], Bn(), tuple4(x0@454, [Ka@461], x1@457, Ni@460));
    @premise know(*x0@454, #t0@456);
    @premise know(*x1@457, #t1@458);
    @premise know(*Ni@460, #t2@462);
    @conclusion know(*aenc([Kb@453], x0@454), #t@455);
    @constraint #t@455 - #t2@462 >= 0;
    @constraint #t@455 - #t1@458 >= 0;
    @constraint #t@455 - #t0@456 >= 0;
};
Rule deleted: 
@rule{
    @premise new(*[Kb@420], Bk(), tuple4(x0@421, [Nb@426], x1@424, Ni@427));
    @premise new(*[Nb@426], Bn(), tuple4(x0@421, [Ka@428], x1@424, Ni@427));
    @premise know(*skB(), #t1@429);
    @premise know(*x0@421, #t0@423);
    @premise know(*x1@424, #t1@425);
    @premise know(*Ni@427, #t2@430);
    @conclusion know(*aenc([Kb@420], x0@421), #t@422);
    @constraint #t@422 - #t2@430 >= 0;
    @constraint #t@422 - #t1@429 >= 0;
    @constraint #t@422 - #t1@425 >= 0;
    @constraint #t@422 - #t0@423 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@107, #t1@108);
    @premise know(*aenc(m@109, pk(sk@107)), #t2@110);
    @conclusion know(*m@109, #t@111);
    @constraint -#t1@108 + #t@111 >= 0;
    @constraint #t@111 - #t2@110 >= 0;
};
Rule in cache: 13
Rule staged: 51
Rule before check and clean: 
@rule{
    @premise new(*[Kb@596], Bk(), tuple4(pk(sk@598), [Nb@599], x1@600, Ni@601));
    @premise new(*[Nb@599], Bn(), tuple4(pk(sk@598), [Ka@602], x1@600, Ni@601));
    @premise know(*pk(sk@598), #t0@603);
    @premise know(*x1@600, #t1@604);
    @premise know(*Ni@601, #t2@605);
    @premise know(*sk@598, #t1@606);
    @conclusion know(*[Kb@596], #t@597);
    @constraint -#t1@606 + #t@597 >= 0;
    @constraint #t@455 - #t1@604 >= 0;
    @constraint #t@455 - #t0@603 >= 0;
    @constraint #t@455 - #t2@605 >= 0;
    @constraint #t@597 - #t@455 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@596], Bk(), tuple4(pk(sk@598), [Nb@599], x1@600, Ni@601));
    @premise new(*[Nb@599], Bn(), tuple4(pk(sk@598), [Ka@602], x1@600, Ni@601));
    @premise know(*pk(sk@598), #t0@603);
    @premise know(*x1@600, #t1@604);
    @premise know(*Ni@601, #t2@605);
    @premise know(*sk@598, #t1@606);
    @conclusion know(*[Kb@596], #t@597);
    @constraint -#t1@606 + #t@597 >= 0;
    @constraint #t@597 - #t1@604 >= 0;
    @constraint #t@597 - #t0@603 >= 0;
    @constraint #t@597 - #t2@605 >= 0;
};

Compose to at 1 : 
@rule{
    @premise init(*pk(skA()), *x2@398, *senc(senc(tuple4(x1@396, [Na@397], pk(skA()), x2@398), hash([Ka@399], Kr@400)), hash([Ka@399], Kr@400)));
    @premise know(*aenc(Kr@400, pk(skA())), #t1@406);
    @premise new(*[Na@397], An(), tuple2(x2@398, [Ka@399]));
    @premise new(*[Ka@399], Ak(), tuple2(x2@398, [Na@397]));
    @premise know(*pk(skA()), #t3@405);
    @premise know(*hash([Ka@399], Kr@400), #t2@407);
    @premise know(*[Na@397], #t0@402);
    @premise know(*x2@398, #t2@404);
    @premise know(*x1@396, #t1@403);
    @conclusion know(*senc(tuple4(x1@396, [Na@397], pk(skA()), x2@398), hash([Ka@399], Kr@400)), #t@401);
    @constraint -#t1@406 + #t@401 >= 0;
    @constraint #t@401 - #t2@407 >= 0;
    @constraint #t@401 - #t3@405 >= 0;
    @constraint #t@401 - #t2@404 >= 0;
    @constraint #t@401 - #t1@403 >= 0;
    @constraint #t@401 - #t0@402 >= 0;
};
Rule in cache: 14
Rule staged: 51
Rule before check and clean: 
@rule{
    @premise new(*[Kb@611], Bk(), tuple4(pk(skA()), [Nb@613], x1@614, Ni@615));
    @premise new(*[Nb@613], Bn(), tuple4(pk(skA()), [Ka@616], x1@614, Ni@615));
    @premise know(*pk(skA()), #t0@617);
    @premise know(*x1@614, #t1@618);
    @premise know(*Ni@615, #t2@619);
    @premise init(*pk(skA()), *x2@609, *senc(senc(tuple4(x1@607, [Na@608], pk(skA()), x2@609), hash([Ka@610], [Kb@611])), hash([Ka@610], [Kb@611])));
    @premise new(*[Na@608], An(), tuple2(x2@609, [Ka@610]));
    @premise new(*[Ka@610], Ak(), tuple2(x2@609, [Na@608]));
    @premise know(*pk(skA()), #t3@620);
    @premise know(*hash([Ka@610], [Kb@611]), #t2@621);
    @premise know(*[Na@608], #t0@622);
    @premise know(*x2@609, #t2@623);
    @premise know(*x1@607, #t1@624);
    @conclusion know(*senc(tuple4(x1@607, [Na@608], pk(skA()), x2@609), hash([Ka@610], [Kb@611])), #t@612);
    @constraint #t@455 - #t1@618 >= 0;
    @constraint #t@612 - #t@455 >= 0;
    @constraint #t@455 - #t0@617 >= 0;
    @constraint #t@455 - #t2@619 >= 0;
    @constraint #t@612 - #t3@620 >= 0;
    @constraint #t@612 - #t2@623 >= 0;
    @constraint #t@612 - #t1@624 >= 0;
    @constraint #t@612 - #t0@622 >= 0;
    @constraint #t@612 - #t2@621 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@609, *senc(senc(tuple4(x1@607, [Na@608], pk(skA()), x2@609), hash([Ka@610], [Kb@611])), hash([Ka@610], [Kb@611])));
    @premise new(*[Kb@611], Bk(), tuple4(pk(skA()), [Nb@613], x1@614, Ni@615));
    @premise new(*[Nb@613], Bn(), tuple4(pk(skA()), [Ka@616], x1@614, Ni@615));
    @premise new(*[Na@608], An(), tuple2(x2@609, [Ka@610]));
    @premise new(*[Ka@610], Ak(), tuple2(x2@609, [Na@608]));
    @premise know(*hash([Ka@610], [Kb@611]), #t2@621);
    @premise know(*pk(skA()), #t0@617);
    @premise know(*[Na@608], #t0@622);
    @premise know(*Ni@615, #t2@619);
    @premise know(*x1@614, #t1@618);
    @premise know(*x2@609, #t2@623);
    @premise know(*x1@607, #t1@624);
    @conclusion know(*senc(tuple4(x1@607, [Na@608], pk(skA()), x2@609), hash([Ka@610], [Kb@611])), #t@612);
    @constraint #t@612 - #t2@621 >= 0;
    @constraint #t@612 - #t0@622 >= 0;
    @constraint #t@612 - #t2@623 >= 0;
    @constraint #t@612 - #t1@624 >= 0;
    @constraint #t@612 - #t1@618 >= 0;
    @constraint #t@612 - #t0@617 >= 0;
    @constraint #t@612 - #t2@619 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};
Rule deleted: 
@rule{
    @premise new(*[Kb@437], Bk(), tuple4(x0@433, [Nb@431], x1@435, Ni@438));
    @premise new(*[Nb@431], Bn(), tuple4(x0@433, [Ka@439], x1@435, Ni@438));
    @premise know(*skB(), #t1@440);
    @premise know(*x0@433, #t0@434);
    @premise know(*x1@435, #t1@436);
    @premise know(*Ni@438, #t2@441);
    @conclusion know(*[Nb@431], #t@432);
    @constraint #t@432 - #t2@441 >= 0;
    @constraint #t@432 - #t1@440 >= 0;
    @constraint #t@432 - #t1@436 >= 0;
    @constraint #t@432 - #t0@434 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Kb@477], Bk(), tuple4(x0@475, [Nb@474], x1@476, Ni@473));
    @premise new(*[Nb@474], Bn(), tuple4(x0@475, [Ka@481], x1@476, Ni@473));
    @premise know(*x0@475, #t0@479);
    @premise know(*x1@476, #t1@480);
    @premise know(*Ni@473, #t2@482);
    @conclusion know(*senc(tuple4(Ni@473, [Nb@474], pk(skB()), x0@475), hash(x1@476, [Kb@477])), #t@478);
    @constraint #t@478 - #t2@482 >= 0;
    @constraint #t@478 - #t1@480 >= 0;
    @constraint #t@478 - #t0@479 >= 0;
};
Rule deleted: 
@rule{
    @premise new(*[Kb@446], Bk(), tuple4(x0@444, [Nb@443], x1@445, Ni@442));
    @premise new(*[Nb@443], Bn(), tuple4(x0@444, [Ka@450], x1@445, Ni@442));
    @premise know(*skB(), #t1@451);
    @premise know(*x0@444, #t0@448);
    @premise know(*x1@445, #t1@449);
    @premise know(*Ni@442, #t2@452);
    @conclusion know(*senc(tuple4(Ni@442, [Nb@443], pk(skB()), x0@444), hash(x1@445, [Kb@446])), #t@447);
    @constraint #t@447 - #t2@452 >= 0;
    @constraint #t@447 - #t1@451 >= 0;
    @constraint #t@447 - #t1@449 >= 0;
    @constraint #t@447 - #t0@448 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*k@118, #t1@119);
    @premise know(*senc(m@120, k@118), #t2@121);
    @conclusion know(*m@120, #t@122);
    @constraint -#t1@119 + #t@122 >= 0;
    @constraint #t@122 - #t2@121 >= 0;
};
Rule in cache: 13
Rule staged: 53
Rule before check and clean: 
@rule{
    @premise new(*[Kb@629], Bk(), tuple4(x0@627, [Nb@626], x1@630, Ni@625));
    @premise new(*[Nb@626], Bn(), tuple4(x0@627, [Ka@631], x1@630, Ni@625));
    @premise know(*x0@627, #t0@632);
    @premise know(*x1@630, #t1@633);
    @premise know(*Ni@625, #t2@634);
    @premise know(*hash(x1@630, [Kb@629]), #t1@635);
    @conclusion know(*tuple4(Ni@625, [Nb@626], pk(skB()), x0@627), #t@628);
    @constraint -#t1@635 + #t@628 >= 0;
    @constraint #t@478 - #t1@633 >= 0;
    @constraint #t@478 - #t0@632 >= 0;
    @constraint #t@478 - #t2@634 >= 0;
    @constraint #t@628 - #t@478 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@629], Bk(), tuple4(x0@627, [Nb@626], x1@630, Ni@625));
    @premise new(*[Nb@626], Bn(), tuple4(x0@627, [Ka@631], x1@630, Ni@625));
    @premise know(*hash(x1@630, [Kb@629]), #t1@635);
    @premise know(*x0@627, #t0@632);
    @premise know(*x1@630, #t1@633);
    @premise know(*Ni@625, #t2@634);
    @conclusion know(*tuple4(Ni@625, [Nb@626], pk(skB()), x0@627), #t@628);
    @constraint -#t1@635 + #t@628 >= 0;
    @constraint #t@628 - #t1@633 >= 0;
    @constraint #t@628 - #t0@632 >= 0;
    @constraint #t@628 - #t2@634 >= 0;
};

Compose to at 1 : 
@rule{
    @premise init(*pk(skA()), *pkR@162, *senc(senc(tuple4(Nr@163, [Na@164], pk(skA()), pkR@162), hash([Ka@165], Kr@166)), hash([Ka@165], Kr@166)));
    @premise know(*senc(tuple4([Na@164], Nr@163, pkR@162, pk(skA())), hash([Ka@165], Kr@166)), #t3@169);
    @premise know(*aenc(Kr@166, pk(skA())), #t1@167);
    @premise new(*[Ka@165], Ak(), tuple2(pkR@162, [Na@164]));
    @premise new(*[Na@164], An(), tuple2(pkR@162, [Ka@165]));
    @premise know(*Nr@163, #t2@168);
    @conclusion know(*senc(tuple4(Nr@163, [Na@164], pk(skA()), pkR@162), hash([Ka@165], Kr@166)), #t@170);
    @constraint -#t1@167 + #t@170 >= 0;
    @constraint #t@170 - #t2@168 >= 0;
    @constraint #t@170 - #t3@169 >= 0;
};
Rule in cache: 14
Rule staged: 53
Rule before check and clean: 
@rule{
    @premise new(*[Kb@639], Bk(), tuple4(pk(skA()), [Nb@636], [Ka@638], [Na@637]));
    @premise new(*[Nb@636], Bn(), tuple4(pk(skA()), [Ka@641], [Ka@638], [Na@637]));
    @premise know(*pk(skA()), #t0@642);
    @premise know(*[Ka@638], #t1@643);
    @premise know(*[Na@637], #t2@644);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@636], [Na@637], pk(skA()), pk(skB())), hash([Ka@638], [Kb@639])), hash([Ka@638], [Kb@639])));
    @premise know(*aenc([Kb@639], pk(skA())), #t1@645);
    @premise new(*[Ka@638], Ak(), tuple2(pk(skB()), [Na@637]));
    @premise new(*[Na@637], An(), tuple2(pk(skB()), [Ka@638]));
    @premise know(*[Nb@636], #t2@646);
    @conclusion know(*senc(tuple4([Nb@636], [Na@637], pk(skA()), pk(skB())), hash([Ka@638], [Kb@639])), #t@640);
    @constraint -#t1@645 + #t@640 >= 0;
    @constraint #t@478 - #t1@643 >= 0;
    @constraint #t@478 - #t0@642 >= 0;
    @constraint #t@478 - #t2@644 >= 0;
    @constraint #t@640 - #t@478 >= 0;
    @constraint #t@640 - #t2@646 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@636], [Na@637], pk(skA()), pk(skB())), hash([Ka@638], [Kb@639])), hash([Ka@638], [Kb@639])));
    @premise new(*[Nb@636], Bn(), tuple4(pk(skA()), [Ka@641], [Ka@638], [Na@637]));
    @premise new(*[Kb@639], Bk(), tuple4(pk(skA()), [Nb@636], [Ka@638], [Na@637]));
    @premise new(*[Na@637], An(), tuple2(pk(skB()), [Ka@638]));
    @premise new(*[Ka@638], Ak(), tuple2(pk(skB()), [Na@637]));
    @premise know(*aenc([Kb@639], pk(skA())), #t1@645);
    @premise know(*pk(skA()), #t0@642);
    @premise know(*[Na@637], #t2@644);
    @premise know(*[Ka@638], #t1@643);
    @premise know(*[Nb@636], #t2@646);
    @conclusion know(*senc(tuple4([Nb@636], [Na@637], pk(skA()), pk(skB())), hash([Ka@638], [Kb@639])), #t@640);
    @constraint -#t1@645 + #t@640 >= 0;
    @constraint #t@640 - #t2@646 >= 0;
    @constraint #t@640 - #t1@643 >= 0;
    @constraint #t@640 - #t0@642 >= 0;
    @constraint #t@640 - #t2@644 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Ka@484], Ak(), tuple2(pk(sk@485), [Na@486]));
    @premise new(*[Na@486], An(), tuple2(pk(sk@485), [Ka@484]));
    @premise know(*sk@485, #t1@487);
    @conclusion know(*pk(skA()), #t0@483);
    @constraint #t0@483 - #t1@487 >= 0;
};
Rule implied by: 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Kb@493], Bk(), tuple4(pk(skA()), [Nb@495], [Ka@496], Ni@497));
    @premise new(*[Nb@495], Bn(), tuple4(pk(skA()), [Ka@498], [Ka@496], Ni@497));
    @premise new(*[Ka@496], Ak(), tuple2(pk(skB()), [Na@499]));
    @premise new(*[Na@499], An(), tuple2(pk(skB()), [Ka@496]));
    @premise know(*skA(), #t1@501);
    @premise know(*Ni@497, #t2@500);
    @conclusion know(*[Kb@493], #t@494);
    @constraint #t@494 - #t2@500 >= 0;
    @constraint -#t1@501 + #t@494 >= 0;
};
Rule added at 4.

Stage rule: 
@rule{
    @premise new(*[Kb@505], Bk(), tuple4(pk(skA()), [Nb@503], [Ka@506], Ni@502));
    @premise new(*[Nb@503], Bn(), tuple4(pk(skA()), [Ka@507], [Ka@506], Ni@502));
    @premise new(*[Ka@506], Ak(), tuple2(pk(skB()), [Na@508]));
    @premise new(*[Na@508], An(), tuple2(pk(skB()), [Ka@506]));
    @premise know(*hash([Ka@506], [Kb@505]), #t1@510);
    @premise know(*Ni@502, #t2@509);
    @conclusion know(*tuple4(Ni@502, [Nb@503], pk(skB()), pk(skA())), #t@504);
    @constraint #t@504 - #t2@509 >= 0;
    @constraint -#t1@510 + #t@504 >= 0;
};
Rule added at 4.

Compose by at 4 : 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule in cache: 11
Rule staged: 56
Rule before check and clean: 
@rule{
    @premise know(*[Ka@650], #t1@651);
    @premise know(*[Kb@652], #t2@653);
    @premise new(*[Kb@652], Bk(), tuple4(pk(skA()), [Nb@648], [Ka@650], Ni@647));
    @premise new(*[Nb@648], Bn(), tuple4(pk(skA()), [Ka@654], [Ka@650], Ni@647));
    @premise new(*[Ka@650], Ak(), tuple2(pk(skB()), [Na@655]));
    @premise new(*[Na@655], An(), tuple2(pk(skB()), [Ka@650]));
    @premise know(*Ni@647, #t2@656);
    @conclusion know(*tuple4(Ni@647, [Nb@648], pk(skB()), pk(skA())), #t@649);
    @constraint #t@649 - #t@86 >= 0;
    @constraint #t@86 - #t2@653 >= 0;
    @constraint -#t1@651 + #t@86 >= 0;
    @constraint #t@649 - #t2@656 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@648], Bn(), tuple4(pk(skA()), [Ka@654], [Ka@650], Ni@647));
    @premise new(*[Kb@652], Bk(), tuple4(pk(skA()), [Nb@648], [Ka@650], Ni@647));
    @premise new(*[Na@655], An(), tuple2(pk(skB()), [Ka@650]));
    @premise new(*[Ka@650], Ak(), tuple2(pk(skB()), [Na@655]));
    @premise know(*[Ka@650], #t1@651);
    @premise know(*[Kb@652], #t2@653);
    @premise know(*Ni@647, #t2@656);
    @conclusion know(*tuple4(Ni@647, [Nb@648], pk(skB()), pk(skA())), #t@649);
    @constraint #t@649 - #t2@656 >= 0;
    @constraint #t@649 - #t2@653 >= 0;
    @constraint #t@649 - #t1@651 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@511], [Na@517], pk(skA()), pk(skB())), hash([Ka@513], [Kb@514])), hash([Ka@513], [Kb@514])));
    @premise new(*[Kb@514], Bk(), tuple4(pk(skA()), [Nb@511], [Ka@513], [Na@517]));
    @premise new(*[Nb@511], Bn(), tuple4(pk(skA()), [Ka@516], [Ka@513], [Na@517]));
    @premise new(*[Ka@513], Ak(), tuple2(pk(skB()), [Na@517]));
    @premise new(*[Na@517], An(), tuple2(pk(skB()), [Ka@513]));
    @premise know(*aenc([Kb@514], pk(skA())), #t1@519);
    @premise know(*[Na@517], #t2@518);
    @premise know(*[Nb@511], #t2@520);
    @conclusion know(*senc(tuple4([Nb@511], [Na@517], pk(skA()), pk(skB())), hash([Ka@513], [Kb@514])), #t@515);
    @constraint #t@515 - #t2@518 >= 0;
    @constraint #t@515 - #t2@520 >= 0;
    @constraint -#t1@519 + #t@515 >= 0;
};
Rule added at 5.

Compose by at 5 : 
@rule{
    @premise know(*sk@254, #t1@256);
    @premise know(*m@253, #t1@257);
    @conclusion know(*aenc(m@253, pk(sk@254)), #t@255);
    @constraint -#t1@257 + #t@255 >= 0;
    @constraint #t@255 - #t1@256 >= 0;
};
Rule in cache: 11
Rule staged: 57
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@662);
    @premise know(*[Kb@660], #t1@663);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@657], [Na@658], pk(skA()), pk(skB())), hash([Ka@659], [Kb@660])), hash([Ka@659], [Kb@660])));
    @premise new(*[Kb@660], Bk(), tuple4(pk(skA()), [Nb@657], [Ka@659], [Na@658]));
    @premise new(*[Nb@657], Bn(), tuple4(pk(skA()), [Ka@664], [Ka@659], [Na@658]));
    @premise new(*[Ka@659], Ak(), tuple2(pk(skB()), [Na@658]));
    @premise new(*[Na@658], An(), tuple2(pk(skB()), [Ka@659]));
    @premise know(*[Na@658], #t2@665);
    @premise know(*[Nb@657], #t2@666);
    @conclusion know(*senc(tuple4([Nb@657], [Na@658], pk(skA()), pk(skB())), hash([Ka@659], [Kb@660])), #t@661);
    @constraint #t@255 - #t1@662 >= 0;
    @constraint #t@661 - #t@255 >= 0;
    @constraint -#t1@663 + #t@255 >= 0;
    @constraint #t@661 - #t2@665 >= 0;
    @constraint #t@661 - #t2@666 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@657], [Na@658], pk(skA()), pk(skB())), hash([Ka@659], [Kb@660])), hash([Ka@659], [Kb@660])));
    @premise new(*[Nb@657], Bn(), tuple4(pk(skA()), [Ka@664], [Ka@659], [Na@658]));
    @premise new(*[Kb@660], Bk(), tuple4(pk(skA()), [Nb@657], [Ka@659], [Na@658]));
    @premise new(*[Na@658], An(), tuple2(pk(skB()), [Ka@659]));
    @premise new(*[Ka@659], Ak(), tuple2(pk(skB()), [Na@658]));
    @premise know(*skA(), #t1@662);
    @premise know(*[Kb@660], #t1@663);
    @premise know(*[Na@658], #t2@665);
    @premise know(*[Nb@657], #t2@666);
    @conclusion know(*senc(tuple4([Nb@657], [Na@658], pk(skA()), pk(skB())), hash([Ka@659], [Kb@660])), #t@661);
    @constraint #t@661 - #t2@666 >= 0;
    @constraint #t@661 - #t2@665 >= 0;
    @constraint #t@661 - #t1@662 >= 0;
    @constraint #t@661 - #t1@663 >= 0;
};

Compose by at 5 : 
@rule{
    @premise know(*m@264, #t1@266);
    @conclusion know(*aenc(m@264, pk(skA())), #t@265);
    @constraint -#t1@266 + #t@265 >= 0;
};
Rule in cache: 12
Rule staged: 57
Rule before check and clean: 
@rule{
    @premise know(*[Kb@670], #t1@672);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@667], [Na@668], pk(skA()), pk(skB())), hash([Ka@669], [Kb@670])), hash([Ka@669], [Kb@670])));
    @premise new(*[Kb@670], Bk(), tuple4(pk(skA()), [Nb@667], [Ka@669], [Na@668]));
    @premise new(*[Nb@667], Bn(), tuple4(pk(skA()), [Ka@673], [Ka@669], [Na@668]));
    @premise new(*[Ka@669], Ak(), tuple2(pk(skB()), [Na@668]));
    @premise new(*[Na@668], An(), tuple2(pk(skB()), [Ka@669]));
    @premise know(*[Na@668], #t2@674);
    @premise know(*[Nb@667], #t2@675);
    @conclusion know(*senc(tuple4([Nb@667], [Na@668], pk(skA()), pk(skB())), hash([Ka@669], [Kb@670])), #t@671);
    @constraint #t@671 - #t@265 >= 0;
    @constraint -#t1@672 + #t@265 >= 0;
    @constraint #t@671 - #t2@674 >= 0;
    @constraint #t@671 - #t2@675 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@667], [Na@668], pk(skA()), pk(skB())), hash([Ka@669], [Kb@670])), hash([Ka@669], [Kb@670])));
    @premise new(*[Kb@670], Bk(), tuple4(pk(skA()), [Nb@667], [Ka@669], [Na@668]));
    @premise new(*[Nb@667], Bn(), tuple4(pk(skA()), [Ka@673], [Ka@669], [Na@668]));
    @premise new(*[Ka@669], Ak(), tuple2(pk(skB()), [Na@668]));
    @premise new(*[Na@668], An(), tuple2(pk(skB()), [Ka@669]));
    @premise know(*[Kb@670], #t1@672);
    @premise know(*[Na@668], #t2@674);
    @premise know(*[Nb@667], #t2@675);
    @conclusion know(*senc(tuple4([Nb@667], [Na@668], pk(skA()), pk(skB())), hash([Ka@669], [Kb@670])), #t@671);
    @constraint #t@671 - #t2@674 >= 0;
    @constraint #t@671 - #t2@675 >= 0;
    @constraint #t@671 - #t1@672 >= 0;
};

Compose by at 5 : 
@rule{
    @premise new(*[Kb@372], Bk(), tuple4(pk(skA()), [Nb@376], [Ka@374], Ni@377));
    @premise new(*[Nb@376], Bn(), tuple4(pk(skA()), [Ka@378], [Ka@374], Ni@377));
    @premise new(*[Ka@374], Ak(), tuple2(pk(skB()), [Na@375]));
    @premise new(*[Na@375], An(), tuple2(pk(skB()), [Ka@374]));
    @premise know(*Ni@377, #t2@379);
    @conclusion know(*aenc([Kb@372], pk(skA())), #t@373);
    @constraint #t@373 - #t2@379 >= 0;
};
Rule in cache: 13
Rule staged: 57
Rule before check and clean: 
@rule{
    @premise new(*[Kb@679], Bk(), tuple4(pk(skA()), [Nb@681], [Ka@682], Ni@683));
    @premise new(*[Nb@681], Bn(), tuple4(pk(skA()), [Ka@684], [Ka@682], Ni@683));
    @premise new(*[Ka@682], Ak(), tuple2(pk(skB()), [Na@685]));
    @premise new(*[Na@685], An(), tuple2(pk(skB()), [Ka@682]));
    @premise know(*Ni@683, #t2@686);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@676], [Na@677], pk(skA()), pk(skB())), hash([Ka@678], [Kb@679])), hash([Ka@678], [Kb@679])));
    @premise new(*[Kb@679], Bk(), tuple4(pk(skA()), [Nb@676], [Ka@678], [Na@677]));
    @premise new(*[Nb@676], Bn(), tuple4(pk(skA()), [Ka@687], [Ka@678], [Na@677]));
    @premise new(*[Ka@678], Ak(), tuple2(pk(skB()), [Na@677]));
    @premise new(*[Na@677], An(), tuple2(pk(skB()), [Ka@678]));
    @premise know(*[Na@677], #t2@688);
    @premise know(*[Nb@676], #t2@689);
    @conclusion know(*senc(tuple4([Nb@676], [Na@677], pk(skA()), pk(skB())), hash([Ka@678], [Kb@679])), #t@680);
    @constraint #t@373 - #t2@686 >= 0;
    @constraint #t@680 - #t@373 >= 0;
    @constraint #t@680 - #t2@688 >= 0;
    @constraint #t@680 - #t2@689 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@681], [Na@685], pk(skA()), pk(skB())), hash([Ka@682], [Kb@679])), hash([Ka@682], [Kb@679])));
    @premise new(*[Kb@679], Bk(), tuple4(pk(skA()), [Nb@681], [Ka@682], [Na@685]));
    @premise new(*[Nb@681], Bn(), tuple4(pk(skA()), [Ka@684], [Ka@682], [Na@685]));
    @premise new(*[Na@685], An(), tuple2(pk(skB()), [Ka@682]));
    @premise new(*[Ka@682], Ak(), tuple2(pk(skB()), [Na@685]));
    @premise know(*[Na@685], #t2@686);
    @premise know(*[Nb@681], #t2@689);
    @conclusion know(*senc(tuple4([Nb@681], [Na@685], pk(skA()), pk(skB())), hash([Ka@682], [Kb@679])), #t@680);
    @constraint #t@680 - #t2@686 >= 0;
    @constraint #t@680 - #t2@689 >= 0;
};

Compose by at 5 : 
@rule{
    @premise new(*[Kb@453], Bk(), tuple4(x0@454, [Nb@459], x1@457, Ni@460));
    @premise new(*[Nb@459], Bn(), tuple4(x0@454, [Ka@461], x1@457, Ni@460));
    @premise know(*x0@454, #t0@456);
    @premise know(*x1@457, #t1@458);
    @premise know(*Ni@460, #t2@462);
    @conclusion know(*aenc([Kb@453], x0@454), #t@455);
    @constraint #t@455 - #t2@462 >= 0;
    @constraint #t@455 - #t1@458 >= 0;
    @constraint #t@455 - #t0@456 >= 0;
};
Rule in cache: 14
Rule staged: 57
Rule before check and clean: 
@rule{
    @premise new(*[Kb@693], Bk(), tuple4(pk(skA()), [Nb@695], x1@696, Ni@697));
    @premise new(*[Nb@695], Bn(), tuple4(pk(skA()), [Ka@698], x1@696, Ni@697));
    @premise know(*pk(skA()), #t0@699);
    @premise know(*x1@696, #t1@700);
    @premise know(*Ni@697, #t2@701);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@690], [Na@691], pk(skA()), pk(skB())), hash([Ka@692], [Kb@693])), hash([Ka@692], [Kb@693])));
    @premise new(*[Kb@693], Bk(), tuple4(pk(skA()), [Nb@690], [Ka@692], [Na@691]));
    @premise new(*[Nb@690], Bn(), tuple4(pk(skA()), [Ka@702], [Ka@692], [Na@691]));
    @premise new(*[Ka@692], Ak(), tuple2(pk(skB()), [Na@691]));
    @premise new(*[Na@691], An(), tuple2(pk(skB()), [Ka@692]));
    @premise know(*[Na@691], #t2@703);
    @premise know(*[Nb@690], #t2@704);
    @conclusion know(*senc(tuple4([Nb@690], [Na@691], pk(skA()), pk(skB())), hash([Ka@692], [Kb@693])), #t@694);
    @constraint #t@455 - #t1@700 >= 0;
    @constraint #t@694 - #t@455 >= 0;
    @constraint #t@455 - #t0@699 >= 0;
    @constraint #t@455 - #t2@701 >= 0;
    @constraint #t@694 - #t2@703 >= 0;
    @constraint #t@694 - #t2@704 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@695], [Na@691], pk(skA()), pk(skB())), hash([Ka@692], [Kb@693])), hash([Ka@692], [Kb@693])));
    @premise new(*[Kb@693], Bk(), tuple4(pk(skA()), [Nb@695], [Ka@692], [Na@691]));
    @premise new(*[Nb@695], Bn(), tuple4(pk(skA()), [Ka@698], [Ka@692], [Na@691]));
    @premise new(*[Na@691], An(), tuple2(pk(skB()), [Ka@692]));
    @premise new(*[Ka@692], Ak(), tuple2(pk(skB()), [Na@691]));
    @premise know(*pk(skA()), #t0@699);
    @premise know(*[Na@691], #t2@701);
    @premise know(*[Ka@692], #t1@700);
    @premise know(*[Nb@695], #t2@704);
    @conclusion know(*senc(tuple4([Nb@695], [Na@691], pk(skA()), pk(skB())), hash([Ka@692], [Kb@693])), #t@694);
    @constraint #t@694 - #t2@704 >= 0;
    @constraint #t@694 - #t1@700 >= 0;
    @constraint #t@694 - #t0@699 >= 0;
    @constraint #t@694 - #t2@701 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@523, *senc(senc(tuple4(x1@521, [Na@522], pk(skA()), x2@523), hash([Ka@524], m@525)), hash([Ka@524], m@525)));
    @premise new(*[Na@522], An(), tuple2(x2@523, [Ka@524]));
    @premise new(*[Ka@524], Ak(), tuple2(x2@523, [Na@522]));
    @premise know(*pk(skA()), #t3@529);
    @premise know(*hash([Ka@524], m@525), #t2@530);
    @premise know(*skA(), #t1@527);
    @premise know(*[Na@522], #t0@531);
    @premise know(*m@525, #t1@528);
    @premise know(*x2@523, #t2@532);
    @premise know(*x1@521, #t1@533);
    @conclusion know(*senc(tuple4(x1@521, [Na@522], pk(skA()), x2@523), hash([Ka@524], m@525)), #t@526);
    @constraint #t@526 - #t2@530 >= 0;
    @constraint #t@526 - #t3@529 >= 0;
    @constraint #t@526 - #t2@532 >= 0;
    @constraint #t@526 - #t1@533 >= 0;
    @constraint #t@526 - #t0@531 >= 0;
    @constraint #t@526 - #t1@527 >= 0;
    @constraint #t@526 - #t1@528 >= 0;
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule in cache: 14
Rule staged: 58
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@711);
    @premise init(*pk(skA()), *x2@707, *senc(senc(tuple4(x1@705, [Na@706], pk(skA()), x2@707), hash([Ka@708], m@709)), hash([Ka@708], m@709)));
    @premise new(*[Na@706], An(), tuple2(x2@707, [Ka@708]));
    @premise new(*[Ka@708], Ak(), tuple2(x2@707, [Na@706]));
    @premise know(*hash([Ka@708], m@709), #t2@712);
    @premise know(*skA(), #t1@713);
    @premise know(*[Na@706], #t0@714);
    @premise know(*m@709, #t1@715);
    @premise know(*x2@707, #t2@716);
    @premise know(*x1@705, #t1@717);
    @conclusion know(*senc(tuple4(x1@705, [Na@706], pk(skA()), x2@707), hash([Ka@708], m@709)), #t@710);
    @constraint -#t1@711 + #t@90 >= 0;
    @constraint #t@710 - #t@90 >= 0;
    @constraint #t@710 - #t1@713 >= 0;
    @constraint #t@710 - #t1@715 >= 0;
    @constraint #t@710 - #t2@716 >= 0;
    @constraint #t@710 - #t1@717 >= 0;
    @constraint #t@710 - #t0@714 >= 0;
    @constraint #t@710 - #t2@712 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@707, *senc(senc(tuple4(x1@705, [Na@706], pk(skA()), x2@707), hash([Ka@708], m@709)), hash([Ka@708], m@709)));
    @premise new(*[Na@706], An(), tuple2(x2@707, [Ka@708]));
    @premise new(*[Ka@708], Ak(), tuple2(x2@707, [Na@706]));
    @premise know(*hash([Ka@708], m@709), #t2@712);
    @premise know(*skA(), #t1@711);
    @premise know(*[Na@706], #t0@714);
    @premise know(*m@709, #t1@715);
    @premise know(*x2@707, #t2@716);
    @premise know(*x1@705, #t1@717);
    @conclusion know(*senc(tuple4(x1@705, [Na@706], pk(skA()), x2@707), hash([Ka@708], m@709)), #t@710);
    @constraint #t@710 - #t1@715 >= 0;
    @constraint #t@710 - #t2@716 >= 0;
    @constraint #t@710 - #t1@717 >= 0;
    @constraint #t@710 - #t0@714 >= 0;
    @constraint #t@710 - #t2@712 >= 0;
    @constraint #t@710 - #t1@711 >= 0;
};

Compose by at 3 : 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};
Rule in cache: 15
Rule staged: 58
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *x2@720, *senc(senc(tuple4(x1@718, [Na@719], pk(skA()), x2@720), hash([Ka@721], m@722)), hash([Ka@721], m@722)));
    @premise new(*[Na@719], An(), tuple2(x2@720, [Ka@721]));
    @premise new(*[Ka@721], Ak(), tuple2(x2@720, [Na@719]));
    @premise know(*hash([Ka@721], m@722), #t2@724);
    @premise know(*skA(), #t1@725);
    @premise know(*[Na@719], #t0@726);
    @premise know(*m@722, #t1@727);
    @premise know(*x2@720, #t2@728);
    @premise know(*x1@718, #t1@729);
    @conclusion know(*senc(tuple4(x1@718, [Na@719], pk(skA()), x2@720), hash([Ka@721], m@722)), #t@723);
    @constraint #t@723 - #t2@724 >= 0;
    @constraint #t@723 - #t0@726 >= 0;
    @constraint #t@723 - #t1@729 >= 0;
    @constraint #t@723 - #t2@728 >= 0;
    @constraint #t@723 - #t@125 >= 0;
    @constraint #t@723 - #t1@727 >= 0;
    @constraint #t@723 - #t1@725 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@720, *senc(senc(tuple4(x1@718, [Na@719], pk(skA()), x2@720), hash([Ka@721], m@722)), hash([Ka@721], m@722)));
    @premise new(*[Na@719], An(), tuple2(x2@720, [Ka@721]));
    @premise new(*[Ka@721], Ak(), tuple2(x2@720, [Na@719]));
    @premise know(*hash([Ka@721], m@722), #t2@724);
    @premise know(*skA(), #t1@725);
    @premise know(*[Na@719], #t0@726);
    @premise know(*m@722, #t1@727);
    @premise know(*x2@720, #t2@728);
    @premise know(*x1@718, #t1@729);
    @conclusion know(*senc(tuple4(x1@718, [Na@719], pk(skA()), x2@720), hash([Ka@721], m@722)), #t@723);
    @constraint #t@723 - #t1@729 >= 0;
    @constraint #t@723 - #t1@725 >= 0;
    @constraint #t@723 - #t1@727 >= 0;
    @constraint #t@723 - #t2@728 >= 0;
    @constraint #t@723 - #t0@726 >= 0;
    @constraint #t@723 - #t2@724 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@536, *senc(senc(tuple4(x1@534, [Na@535], pk(skA()), x2@536), hash([Ka@537], m@538)), hash([Ka@537], m@538)));
    @premise new(*[Na@535], An(), tuple2(x2@536, [Ka@537]));
    @premise new(*[Ka@537], Ak(), tuple2(x2@536, [Na@535]));
    @premise know(*pk(skA()), #t3@541);
    @premise know(*hash([Ka@537], m@538), #t2@542);
    @premise know(*[Na@535], #t0@543);
    @premise know(*m@538, #t1@540);
    @premise know(*x2@536, #t2@544);
    @premise know(*x1@534, #t1@545);
    @conclusion know(*senc(tuple4(x1@534, [Na@535], pk(skA()), x2@536), hash([Ka@537], m@538)), #t@539);
    @constraint #t@539 - #t3@541 >= 0;
    @constraint #t@539 - #t2@544 >= 0;
    @constraint #t@539 - #t1@545 >= 0;
    @constraint #t@539 - #t0@543 >= 0;
    @constraint #t@539 - #t2@542 >= 0;
    @constraint #t@539 - #t1@540 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *x2@523, *senc(senc(tuple4(x1@521, [Na@522], pk(skA()), x2@523), hash([Ka@524], m@525)), hash([Ka@524], m@525)));
    @premise new(*[Na@522], An(), tuple2(x2@523, [Ka@524]));
    @premise new(*[Ka@524], Ak(), tuple2(x2@523, [Na@522]));
    @premise know(*pk(skA()), #t3@529);
    @premise know(*hash([Ka@524], m@525), #t2@530);
    @premise know(*skA(), #t1@527);
    @premise know(*[Na@522], #t0@531);
    @premise know(*m@525, #t1@528);
    @premise know(*x2@523, #t2@532);
    @premise know(*x1@521, #t1@533);
    @conclusion know(*senc(tuple4(x1@521, [Na@522], pk(skA()), x2@523), hash([Ka@524], m@525)), #t@526);
    @constraint #t@526 - #t2@530 >= 0;
    @constraint #t@526 - #t3@529 >= 0;
    @constraint #t@526 - #t2@532 >= 0;
    @constraint #t@526 - #t1@533 >= 0;
    @constraint #t@526 - #t0@531 >= 0;
    @constraint #t@526 - #t1@527 >= 0;
    @constraint #t@526 - #t1@528 >= 0;
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule in cache: 15
Rule staged: 59
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@736);
    @premise init(*pk(skA()), *x2@732, *senc(senc(tuple4(x1@730, [Na@731], pk(skA()), x2@732), hash([Ka@733], m@734)), hash([Ka@733], m@734)));
    @premise new(*[Na@731], An(), tuple2(x2@732, [Ka@733]));
    @premise new(*[Ka@733], Ak(), tuple2(x2@732, [Na@731]));
    @premise know(*hash([Ka@733], m@734), #t2@737);
    @premise know(*[Na@731], #t0@738);
    @premise know(*m@734, #t1@739);
    @premise know(*x2@732, #t2@740);
    @premise know(*x1@730, #t1@741);
    @conclusion know(*senc(tuple4(x1@730, [Na@731], pk(skA()), x2@732), hash([Ka@733], m@734)), #t@735);
    @constraint -#t1@736 + #t@90 >= 0;
    @constraint #t@735 - #t@90 >= 0;
    @constraint #t@735 - #t1@739 >= 0;
    @constraint #t@735 - #t2@740 >= 0;
    @constraint #t@735 - #t1@741 >= 0;
    @constraint #t@735 - #t0@738 >= 0;
    @constraint #t@735 - #t2@737 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@732, *senc(senc(tuple4(x1@730, [Na@731], pk(skA()), x2@732), hash([Ka@733], m@734)), hash([Ka@733], m@734)));
    @premise new(*[Na@731], An(), tuple2(x2@732, [Ka@733]));
    @premise new(*[Ka@733], Ak(), tuple2(x2@732, [Na@731]));
    @premise know(*hash([Ka@733], m@734), #t2@737);
    @premise know(*skA(), #t1@736);
    @premise know(*[Na@731], #t0@738);
    @premise know(*m@734, #t1@739);
    @premise know(*x2@732, #t2@740);
    @premise know(*x1@730, #t1@741);
    @conclusion know(*senc(tuple4(x1@730, [Na@731], pk(skA()), x2@732), hash([Ka@733], m@734)), #t@735);
    @constraint #t@735 - #t1@739 >= 0;
    @constraint #t@735 - #t2@740 >= 0;
    @constraint #t@735 - #t1@741 >= 0;
    @constraint #t@735 - #t0@738 >= 0;
    @constraint #t@735 - #t2@737 >= 0;
    @constraint #t@735 - #t1@736 >= 0;
};

Compose by at 3 : 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};
Rule in cache: 16
Rule staged: 59
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *x2@744, *senc(senc(tuple4(x1@742, [Na@743], pk(skA()), x2@744), hash([Ka@745], m@746)), hash([Ka@745], m@746)));
    @premise new(*[Na@743], An(), tuple2(x2@744, [Ka@745]));
    @premise new(*[Ka@745], Ak(), tuple2(x2@744, [Na@743]));
    @premise know(*hash([Ka@745], m@746), #t2@748);
    @premise know(*[Na@743], #t0@749);
    @premise know(*m@746, #t1@750);
    @premise know(*x2@744, #t2@751);
    @premise know(*x1@742, #t1@752);
    @conclusion know(*senc(tuple4(x1@742, [Na@743], pk(skA()), x2@744), hash([Ka@745], m@746)), #t@747);
    @constraint #t@747 - #t2@748 >= 0;
    @constraint #t@747 - #t0@749 >= 0;
    @constraint #t@747 - #t1@752 >= 0;
    @constraint #t@747 - #t2@751 >= 0;
    @constraint #t@747 - #t@125 >= 0;
    @constraint #t@747 - #t1@750 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@744, *senc(senc(tuple4(x1@742, [Na@743], pk(skA()), x2@744), hash([Ka@745], m@746)), hash([Ka@745], m@746)));
    @premise new(*[Na@743], An(), tuple2(x2@744, [Ka@745]));
    @premise new(*[Ka@745], Ak(), tuple2(x2@744, [Na@743]));
    @premise know(*hash([Ka@745], m@746), #t2@748);
    @premise know(*[Na@743], #t0@749);
    @premise know(*m@746, #t1@750);
    @premise know(*x2@744, #t2@751);
    @premise know(*x1@742, #t1@752);
    @conclusion know(*senc(tuple4(x1@742, [Na@743], pk(skA()), x2@744), hash([Ka@745], m@746)), #t@747);
    @constraint #t@747 - #t1@752 >= 0;
    @constraint #t@747 - #t1@750 >= 0;
    @constraint #t@747 - #t2@751 >= 0;
    @constraint #t@747 - #t0@749 >= 0;
    @constraint #t@747 - #t2@748 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@548, *senc(senc(tuple4(x1@546, [Na@547], pk(skA()), x2@548), hash([Ka@549], tuple2(pk(skA()), [Ka@550]))), hash([Ka@549], tuple2(pk(skA()), [Ka@550]))));
    @premise know(*hash([Ka@549], tuple2(pk(skA()), [Ka@550])), #t2@554);
    @premise new(*[Ka@550], Ak(), tuple2(pk(skA()), [Na@552]));
    @premise new(*[Na@552], An(), tuple2(pk(skA()), [Ka@550]));
    @premise new(*[Na@547], An(), tuple2(x2@548, [Ka@549]));
    @premise new(*[Ka@549], Ak(), tuple2(x2@548, [Na@547]));
    @premise know(*pk(skA()), #t3@553);
    @premise know(*[Na@547], #t0@555);
    @premise know(*x2@548, #t2@556);
    @premise know(*x1@546, #t1@557);
    @conclusion know(*senc(tuple4(x1@546, [Na@547], pk(skA()), x2@548), hash([Ka@549], tuple2(pk(skA()), [Ka@550]))), #t@551);
    @constraint #t@551 - #t3@553 >= 0;
    @constraint #t@551 - #t2@556 >= 0;
    @constraint #t@551 - #t1@557 >= 0;
    @constraint #t@551 - #t0@555 >= 0;
    @constraint #t@551 - #t2@554 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule in cache: 16
Rule staged: 60
Rule before check and clean: 
@rule{
    @premise know(*[Ka@756], #t1@759);
    @premise know(*tuple2(pk(skA()), [Ka@757]), #t2@760);
    @premise init(*pk(skA()), *x2@755, *senc(senc(tuple4(x1@753, [Na@754], pk(skA()), x2@755), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))));
    @premise new(*[Ka@757], Ak(), tuple2(pk(skA()), [Na@761]));
    @premise new(*[Na@761], An(), tuple2(pk(skA()), [Ka@757]));
    @premise new(*[Na@754], An(), tuple2(x2@755, [Ka@756]));
    @premise new(*[Ka@756], Ak(), tuple2(x2@755, [Na@754]));
    @premise know(*pk(skA()), #t3@762);
    @premise know(*[Na@754], #t0@763);
    @premise know(*x2@755, #t2@764);
    @premise know(*x1@753, #t1@765);
    @conclusion know(*senc(tuple4(x1@753, [Na@754], pk(skA()), x2@755), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))), #t@758);
    @constraint #t@86 - #t2@760 >= 0;
    @constraint -#t1@759 + #t@86 >= 0;
    @constraint #t@758 - #t@86 >= 0;
    @constraint #t@758 - #t3@762 >= 0;
    @constraint #t@758 - #t2@764 >= 0;
    @constraint #t@758 - #t1@765 >= 0;
    @constraint #t@758 - #t0@763 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@755, *senc(senc(tuple4(x1@753, [Na@754], pk(skA()), x2@755), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))));
    @premise new(*[Ka@757], Ak(), tuple2(pk(skA()), [Na@761]));
    @premise new(*[Na@761], An(), tuple2(pk(skA()), [Ka@757]));
    @premise know(*tuple2(pk(skA()), [Ka@757]), #t2@760);
    @premise new(*[Na@754], An(), tuple2(x2@755, [Ka@756]));
    @premise new(*[Ka@756], Ak(), tuple2(x2@755, [Na@754]));
    @premise know(*pk(skA()), #t3@762);
    @premise know(*[Ka@756], #t1@759);
    @premise know(*[Na@754], #t0@763);
    @premise know(*x2@755, #t2@764);
    @premise know(*x1@753, #t1@765);
    @conclusion know(*senc(tuple4(x1@753, [Na@754], pk(skA()), x2@755), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))), #t@758);
    @constraint #t@758 - #t0@763 >= 0;
    @constraint #t@758 - #t3@762 >= 0;
    @constraint #t@758 - #t2@764 >= 0;
    @constraint #t@758 - #t1@765 >= 0;
    @constraint #t@758 - #t2@760 >= 0;
    @constraint #t@758 - #t1@759 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@560, *senc(senc(tuple4(x1@558, [Na@559], pk(skA()), x2@560), hash([Ka@561], [Kb@562])), hash([Ka@561], [Kb@562])));
    @premise new(*[Kb@562], Bk(), tuple4(pk(skA()), [Nb@564], [Ka@565], Ni@566));
    @premise new(*[Nb@564], Bn(), tuple4(pk(skA()), [Ka@567], [Ka@565], Ni@566));
    @premise new(*[Ka@565], Ak(), tuple2(pk(skB()), [Na@568]));
    @premise new(*[Na@568], An(), tuple2(pk(skB()), [Ka@565]));
    @premise new(*[Na@559], An(), tuple2(x2@560, [Ka@561]));
    @premise new(*[Ka@561], Ak(), tuple2(x2@560, [Na@559]));
    @premise know(*hash([Ka@561], [Kb@562]), #t2@571);
    @premise know(*pk(skA()), #t3@570);
    @premise know(*[Na@559], #t0@572);
    @premise know(*Ni@566, #t2@569);
    @premise know(*x2@560, #t2@573);
    @premise know(*x1@558, #t1@574);
    @conclusion know(*senc(tuple4(x1@558, [Na@559], pk(skA()), x2@560), hash([Ka@561], [Kb@562])), #t@563);
    @constraint #t@563 - #t3@570 >= 0;
    @constraint #t@563 - #t2@573 >= 0;
    @constraint #t@563 - #t1@574 >= 0;
    @constraint #t@563 - #t0@572 >= 0;
    @constraint #t@563 - #t2@571 >= 0;
    @constraint #t@563 - #t2@569 >= 0;
};
Rule added at 7.

Compose by at 7 : 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule in cache: 16
Rule staged: 61
Rule before check and clean: 
@rule{
    @premise know(*[Ka@769], #t1@772);
    @premise know(*[Kb@770], #t2@773);
    @premise init(*pk(skA()), *x2@768, *senc(senc(tuple4(x1@766, [Na@767], pk(skA()), x2@768), hash([Ka@769], [Kb@770])), hash([Ka@769], [Kb@770])));
    @premise new(*[Kb@770], Bk(), tuple4(pk(skA()), [Nb@774], [Ka@775], Ni@776));
    @premise new(*[Nb@774], Bn(), tuple4(pk(skA()), [Ka@777], [Ka@775], Ni@776));
    @premise new(*[Ka@775], Ak(), tuple2(pk(skB()), [Na@778]));
    @premise new(*[Na@778], An(), tuple2(pk(skB()), [Ka@775]));
    @premise new(*[Na@767], An(), tuple2(x2@768, [Ka@769]));
    @premise new(*[Ka@769], Ak(), tuple2(x2@768, [Na@767]));
    @premise know(*pk(skA()), #t3@779);
    @premise know(*[Na@767], #t0@780);
    @premise know(*Ni@776, #t2@781);
    @premise know(*x2@768, #t2@782);
    @premise know(*x1@766, #t1@783);
    @conclusion know(*senc(tuple4(x1@766, [Na@767], pk(skA()), x2@768), hash([Ka@769], [Kb@770])), #t@771);
    @constraint #t@86 - #t2@773 >= 0;
    @constraint -#t1@772 + #t@86 >= 0;
    @constraint #t@771 - #t@86 >= 0;
    @constraint #t@771 - #t2@781 >= 0;
    @constraint #t@771 - #t3@779 >= 0;
    @constraint #t@771 - #t2@782 >= 0;
    @constraint #t@771 - #t1@783 >= 0;
    @constraint #t@771 - #t0@780 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@768, *senc(senc(tuple4(x1@766, [Na@767], pk(skA()), x2@768), hash([Ka@769], [Kb@770])), hash([Ka@769], [Kb@770])));
    @premise new(*[Nb@774], Bn(), tuple4(pk(skA()), [Ka@777], [Ka@775], Ni@776));
    @premise new(*[Kb@770], Bk(), tuple4(pk(skA()), [Nb@774], [Ka@775], Ni@776));
    @premise new(*[Na@778], An(), tuple2(pk(skB()), [Ka@775]));
    @premise new(*[Ka@775], Ak(), tuple2(pk(skB()), [Na@778]));
    @premise new(*[Na@767], An(), tuple2(x2@768, [Ka@769]));
    @premise new(*[Ka@769], Ak(), tuple2(x2@768, [Na@767]));
    @premise know(*pk(skA()), #t3@779);
    @premise know(*[Ka@769], #t1@772);
    @premise know(*[Kb@770], #t2@773);
    @premise know(*[Na@767], #t0@780);
    @premise know(*Ni@776, #t2@781);
    @premise know(*x2@768, #t2@782);
    @premise know(*x1@766, #t1@783);
    @conclusion know(*senc(tuple4(x1@766, [Na@767], pk(skA()), x2@768), hash([Ka@769], [Kb@770])), #t@771);
    @constraint #t@771 - #t0@780 >= 0;
    @constraint #t@771 - #t2@781 >= 0;
    @constraint #t@771 - #t3@779 >= 0;
    @constraint #t@771 - #t2@782 >= 0;
    @constraint #t@771 - #t1@783 >= 0;
    @constraint #t@771 - #t2@773 >= 0;
    @constraint #t@771 - #t1@772 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Nb@575], Bn(), tuple4(pk(skA()), [Ka@580], Ki@577, x1@576));
    @premise new(*[Kb@578], Bk(), tuple4(pk(skA()), [Nb@575], Ki@577, x1@576));
    @premise know(*pk(skB()), #t3@581);
    @premise know(*hash(Kr@582, [Kb@578]), #t2@583);
    @premise know(*skA(), #t1@579);
    @premise know(*[Nb@575], #t0@584);
    @premise know(*x1@576, #t1@585);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@575], x1@576, pk(skA()), pk(skB())), hash(Ki@577, [Kb@578])), hash(Ki@577, [Kb@578])));
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule in cache: 16
Rule staged: 62
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@788);
    @premise new(*[Nb@784], Bn(), tuple4(pk(skA()), [Ka@789], Ki@786, x1@785));
    @premise new(*[Kb@787], Bk(), tuple4(pk(skA()), [Nb@784], Ki@786, x1@785));
    @premise know(*hash(Kr@790, [Kb@787]), #t2@791);
    @premise know(*skA(), #t1@792);
    @premise know(*[Nb@784], #t0@793);
    @premise know(*x1@785, #t1@794);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@784], x1@785, pk(skA()), pk(skB())), hash(Ki@786, [Kb@787])), hash(Ki@786, [Kb@787])));
    @constraint -#t1@788 + #t@90 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@784], Bn(), tuple4(pk(skA()), [Ka@789], Ki@786, x1@785));
    @premise new(*[Kb@787], Bk(), tuple4(pk(skA()), [Nb@784], Ki@786, x1@785));
    @premise know(*hash(Kr@790, [Kb@787]), #t2@791);
    @premise know(*skB(), #t1@788);
    @premise know(*skA(), #t1@792);
    @premise know(*[Nb@784], #t0@793);
    @premise know(*x1@785, #t1@794);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@784], x1@785, pk(skA()), pk(skB())), hash(Ki@786, [Kb@787])), hash(Ki@786, [Kb@787])));
};

Compose by at 2 : 
@rule{
    @conclusion know(*pk(skB()), #t@126);
};
Rule in cache: 17
Rule staged: 62
Rule before check and clean: 
@rule{
    @premise new(*[Nb@795], Bn(), tuple4(pk(skA()), [Ka@799], Ki@797, x1@796));
    @premise new(*[Kb@798], Bk(), tuple4(pk(skA()), [Nb@795], Ki@797, x1@796));
    @premise know(*hash(Kr@800, [Kb@798]), #t2@801);
    @premise know(*skA(), #t1@802);
    @premise know(*[Nb@795], #t0@803);
    @premise know(*x1@796, #t1@804);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@795], x1@796, pk(skA()), pk(skB())), hash(Ki@797, [Kb@798])), hash(Ki@797, [Kb@798])));
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@795], Bn(), tuple4(pk(skA()), [Ka@799], Ki@797, x1@796));
    @premise new(*[Kb@798], Bk(), tuple4(pk(skA()), [Nb@795], Ki@797, x1@796));
    @premise know(*hash(Kr@800, [Kb@798]), #t2@801);
    @premise know(*skA(), #t1@802);
    @premise know(*[Nb@795], #t0@803);
    @premise know(*x1@796, #t1@804);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@795], x1@796, pk(skA()), pk(skB())), hash(Ki@797, [Kb@798])), hash(Ki@797, [Kb@798])));
};

Stage rule: 
@rule{
    @premise new(*[Nb@586], Bn(), tuple4(pk(skA()), [Ka@590], Ki@588, x1@587));
    @premise new(*[Kb@589], Bk(), tuple4(pk(skA()), [Nb@586], Ki@588, x1@587));
    @premise know(*pk(skB()), #t3@591);
    @premise know(*hash(Kr@592, [Kb@589]), #t2@593);
    @premise know(*[Nb@586], #t0@594);
    @premise know(*x1@587, #t1@595);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@586], x1@587, pk(skA()), pk(skB())), hash(Ki@588, [Kb@589])), hash(Ki@588, [Kb@589])));
};
Rule deleted: 
@rule{
    @premise new(*[Nb@409], Bn(), tuple4(pk(skA()), [Ka@419], Ki@411, x1@410));
    @premise new(*[Kb@412], Bk(), tuple4(pk(skA()), [Nb@409], Ki@411, x1@410));
    @premise know(*pk(skA()), #t2@415);
    @premise know(*pk(skB()), #t3@416);
    @premise know(*hash(Kr@417, [Kb@412]), #t2@418);
    @premise know(*[Nb@409], #t0@413);
    @premise know(*x1@410, #t1@414);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@409], x1@410, pk(skA()), pk(skB())), hash(Ki@411, [Kb@412])), hash(Ki@411, [Kb@412])));
};
Rule deleted: 
@rule{
    @premise new(*[Nb@575], Bn(), tuple4(pk(skA()), [Ka@580], Ki@577, x1@576));
    @premise new(*[Kb@578], Bk(), tuple4(pk(skA()), [Nb@575], Ki@577, x1@576));
    @premise know(*pk(skB()), #t3@581);
    @premise know(*hash(Kr@582, [Kb@578]), #t2@583);
    @premise know(*skA(), #t1@579);
    @premise know(*[Nb@575], #t0@584);
    @premise know(*x1@576, #t1@585);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@575], x1@576, pk(skA()), pk(skB())), hash(Ki@577, [Kb@578])), hash(Ki@577, [Kb@578])));
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule in cache: 17
Rule staged: 63
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@809);
    @premise new(*[Nb@805], Bn(), tuple4(pk(skA()), [Ka@810], Ki@807, x1@806));
    @premise new(*[Kb@808], Bk(), tuple4(pk(skA()), [Nb@805], Ki@807, x1@806));
    @premise know(*hash(Kr@811, [Kb@808]), #t2@812);
    @premise know(*[Nb@805], #t0@813);
    @premise know(*x1@806, #t1@814);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@805], x1@806, pk(skA()), pk(skB())), hash(Ki@807, [Kb@808])), hash(Ki@807, [Kb@808])));
    @constraint -#t1@809 + #t@90 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@805], Bn(), tuple4(pk(skA()), [Ka@810], Ki@807, x1@806));
    @premise new(*[Kb@808], Bk(), tuple4(pk(skA()), [Nb@805], Ki@807, x1@806));
    @premise know(*hash(Kr@811, [Kb@808]), #t2@812);
    @premise know(*skB(), #t1@809);
    @premise know(*[Nb@805], #t0@813);
    @premise know(*x1@806, #t1@814);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@805], x1@806, pk(skA()), pk(skB())), hash(Ki@807, [Kb@808])), hash(Ki@807, [Kb@808])));
};

Compose by at 2 : 
@rule{
    @conclusion know(*pk(skB()), #t@126);
};
Rule in cache: 18
Rule staged: 63
Rule before check and clean: 
@rule{
    @premise new(*[Nb@815], Bn(), tuple4(pk(skA()), [Ka@819], Ki@817, x1@816));
    @premise new(*[Kb@818], Bk(), tuple4(pk(skA()), [Nb@815], Ki@817, x1@816));
    @premise know(*hash(Kr@820, [Kb@818]), #t2@821);
    @premise know(*[Nb@815], #t0@822);
    @premise know(*x1@816, #t1@823);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@815], x1@816, pk(skA()), pk(skB())), hash(Ki@817, [Kb@818])), hash(Ki@817, [Kb@818])));
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@815], Bn(), tuple4(pk(skA()), [Ka@819], Ki@817, x1@816));
    @premise new(*[Kb@818], Bk(), tuple4(pk(skA()), [Nb@815], Ki@817, x1@816));
    @premise know(*hash(Kr@820, [Kb@818]), #t2@821);
    @premise know(*[Nb@815], #t0@822);
    @premise know(*x1@816, #t1@823);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@815], x1@816, pk(skA()), pk(skB())), hash(Ki@817, [Kb@818])), hash(Ki@817, [Kb@818])));
};

Stage rule: 
@rule{
    @premise new(*[Kb@596], Bk(), tuple4(pk(sk@598), [Nb@599], x1@600, Ni@601));
    @premise new(*[Nb@599], Bn(), tuple4(pk(sk@598), [Ka@602], x1@600, Ni@601));
    @premise know(*pk(sk@598), #t0@603);
    @premise know(*x1@600, #t1@604);
    @premise know(*Ni@601, #t2@605);
    @premise know(*sk@598, #t1@606);
    @conclusion know(*[Kb@596], #t@597);
    @constraint -#t1@606 + #t@597 >= 0;
    @constraint #t@597 - #t1@604 >= 0;
    @constraint #t@597 - #t0@603 >= 0;
    @constraint #t@597 - #t2@605 >= 0;
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule in cache: 18
Rule staged: 64
Rule before check and clean: 
@rule{
    @premise know(*sk@826, #t1@827);
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @premise know(*sk@826, #t1@834);
    @conclusion know(*[Kb@824], #t@825);
    @constraint -#t1@834 + #t@825 >= 0;
    @constraint -#t1@827 + #t@90 >= 0;
    @constraint #t@825 - #t@90 >= 0;
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*sk@826, #t1@827);
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @conclusion know(*[Kb@824], #t@825);
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
    @constraint #t@825 - #t1@827 >= 0;
};

Compose by at 2 : 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};
Rule in cache: 19
Rule staged: 64
Rule before check and clean: 
@rule{
    @premise new(*[Kb@835], Bk(), tuple4(pk(skA()), [Nb@837], x1@838, Ni@839));
    @premise new(*[Nb@837], Bn(), tuple4(pk(skA()), [Ka@840], x1@838, Ni@839));
    @premise know(*x1@838, #t1@841);
    @premise know(*Ni@839, #t2@842);
    @premise know(*skA(), #t1@843);
    @conclusion know(*[Kb@835], #t@836);
    @constraint -#t1@843 + #t@836 >= 0;
    @constraint #t@836 - #t2@842 >= 0;
    @constraint #t@836 - #t@125 >= 0;
    @constraint #t@836 - #t1@841 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@835], Bk(), tuple4(pk(skA()), [Nb@837], x1@838, Ni@839));
    @premise new(*[Nb@837], Bn(), tuple4(pk(skA()), [Ka@840], x1@838, Ni@839));
    @premise know(*skA(), #t1@843);
    @premise know(*x1@838, #t1@841);
    @premise know(*Ni@839, #t2@842);
    @conclusion know(*[Kb@835], #t@836);
    @constraint #t@836 - #t2@842 >= 0;
    @constraint #t@836 - #t1@841 >= 0;
    @constraint -#t1@843 + #t@836 >= 0;
};

Compose by at 2 : 
@rule{
    @conclusion know(*pk(skB()), #t@126);
};
Rule in cache: 20
Rule staged: 64
Rule before check and clean: 
@rule{
    @premise new(*[Kb@844], Bk(), tuple4(pk(skB()), [Nb@846], x1@847, Ni@848));
    @premise new(*[Nb@846], Bn(), tuple4(pk(skB()), [Ka@849], x1@847, Ni@848));
    @premise know(*x1@847, #t1@850);
    @premise know(*Ni@848, #t2@851);
    @premise know(*skB(), #t1@852);
    @conclusion know(*[Kb@844], #t@845);
    @constraint -#t1@852 + #t@845 >= 0;
    @constraint #t@845 - #t2@851 >= 0;
    @constraint #t@845 - #t@126 >= 0;
    @constraint #t@845 - #t1@850 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@844], Bk(), tuple4(pk(skB()), [Nb@846], x1@847, Ni@848));
    @premise new(*[Nb@846], Bn(), tuple4(pk(skB()), [Ka@849], x1@847, Ni@848));
    @premise know(*skB(), #t1@852);
    @premise know(*x1@847, #t1@850);
    @premise know(*Ni@848, #t2@851);
    @conclusion know(*[Kb@844], #t@845);
    @constraint #t@845 - #t2@851 >= 0;
    @constraint #t@845 - #t1@850 >= 0;
    @constraint -#t1@852 + #t@845 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@609, *senc(senc(tuple4(x1@607, [Na@608], pk(skA()), x2@609), hash([Ka@610], [Kb@611])), hash([Ka@610], [Kb@611])));
    @premise new(*[Kb@611], Bk(), tuple4(pk(skA()), [Nb@613], x1@614, Ni@615));
    @premise new(*[Nb@613], Bn(), tuple4(pk(skA()), [Ka@616], x1@614, Ni@615));
    @premise new(*[Na@608], An(), tuple2(x2@609, [Ka@610]));
    @premise new(*[Ka@610], Ak(), tuple2(x2@609, [Na@608]));
    @premise know(*hash([Ka@610], [Kb@611]), #t2@621);
    @premise know(*pk(skA()), #t0@617);
    @premise know(*[Na@608], #t0@622);
    @premise know(*Ni@615, #t2@619);
    @premise know(*x1@614, #t1@618);
    @premise know(*x2@609, #t2@623);
    @premise know(*x1@607, #t1@624);
    @conclusion know(*senc(tuple4(x1@607, [Na@608], pk(skA()), x2@609), hash([Ka@610], [Kb@611])), #t@612);
    @constraint #t@612 - #t2@621 >= 0;
    @constraint #t@612 - #t0@622 >= 0;
    @constraint #t@612 - #t2@623 >= 0;
    @constraint #t@612 - #t1@624 >= 0;
    @constraint #t@612 - #t1@618 >= 0;
    @constraint #t@612 - #t0@617 >= 0;
    @constraint #t@612 - #t2@619 >= 0;
};
Rule added at 5.

Compose by at 5 : 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule in cache: 20
Rule staged: 65
Rule before check and clean: 
@rule{
    @premise know(*[Ka@856], #t1@859);
    @premise know(*[Kb@857], #t2@860);
    @premise init(*pk(skA()), *x2@855, *senc(senc(tuple4(x1@853, [Na@854], pk(skA()), x2@855), hash([Ka@856], [Kb@857])), hash([Ka@856], [Kb@857])));
    @premise new(*[Kb@857], Bk(), tuple4(pk(skA()), [Nb@861], x1@862, Ni@863));
    @premise new(*[Nb@861], Bn(), tuple4(pk(skA()), [Ka@864], x1@862, Ni@863));
    @premise new(*[Na@854], An(), tuple2(x2@855, [Ka@856]));
    @premise new(*[Ka@856], Ak(), tuple2(x2@855, [Na@854]));
    @premise know(*pk(skA()), #t0@865);
    @premise know(*[Na@854], #t0@866);
    @premise know(*Ni@863, #t2@867);
    @premise know(*x1@862, #t1@868);
    @premise know(*x2@855, #t2@869);
    @premise know(*x1@853, #t1@870);
    @conclusion know(*senc(tuple4(x1@853, [Na@854], pk(skA()), x2@855), hash([Ka@856], [Kb@857])), #t@858);
    @constraint #t@86 - #t2@860 >= 0;
    @constraint -#t1@859 + #t@86 >= 0;
    @constraint #t@858 - #t@86 >= 0;
    @constraint #t@858 - #t1@868 >= 0;
    @constraint #t@858 - #t0@865 >= 0;
    @constraint #t@858 - #t2@867 >= 0;
    @constraint #t@858 - #t2@869 >= 0;
    @constraint #t@858 - #t1@870 >= 0;
    @constraint #t@858 - #t0@866 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@855, *senc(senc(tuple4(x1@853, [Na@854], pk(skA()), x2@855), hash([Ka@856], [Kb@857])), hash([Ka@856], [Kb@857])));
    @premise new(*[Kb@857], Bk(), tuple4(pk(skA()), [Nb@861], x1@862, Ni@863));
    @premise new(*[Nb@861], Bn(), tuple4(pk(skA()), [Ka@864], x1@862, Ni@863));
    @premise new(*[Ka@856], Ak(), tuple2(x2@855, [Na@854]));
    @premise new(*[Na@854], An(), tuple2(x2@855, [Ka@856]));
    @premise know(*pk(skA()), #t0@865);
    @premise know(*[Ka@856], #t1@859);
    @premise know(*[Kb@857], #t2@860);
    @premise know(*[Na@854], #t0@866);
    @premise know(*Ni@863, #t2@867);
    @premise know(*x1@862, #t1@868);
    @premise know(*x2@855, #t2@869);
    @premise know(*x1@853, #t1@870);
    @conclusion know(*senc(tuple4(x1@853, [Na@854], pk(skA()), x2@855), hash([Ka@856], [Kb@857])), #t@858);
    @constraint #t@858 - #t0@866 >= 0;
    @constraint #t@858 - #t1@868 >= 0;
    @constraint #t@858 - #t0@865 >= 0;
    @constraint #t@858 - #t2@867 >= 0;
    @constraint #t@858 - #t2@869 >= 0;
    @constraint #t@858 - #t1@870 >= 0;
    @constraint #t@858 - #t2@860 >= 0;
    @constraint #t@858 - #t1@859 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Kb@629], Bk(), tuple4(x0@627, [Nb@626], x1@630, Ni@625));
    @premise new(*[Nb@626], Bn(), tuple4(x0@627, [Ka@631], x1@630, Ni@625));
    @premise know(*hash(x1@630, [Kb@629]), #t1@635);
    @premise know(*x0@627, #t0@632);
    @premise know(*x1@630, #t1@633);
    @premise know(*Ni@625, #t2@634);
    @conclusion know(*tuple4(Ni@625, [Nb@626], pk(skB()), x0@627), #t@628);
    @constraint -#t1@635 + #t@628 >= 0;
    @constraint #t@628 - #t1@633 >= 0;
    @constraint #t@628 - #t0@632 >= 0;
    @constraint #t@628 - #t2@634 >= 0;
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule in cache: 20
Rule staged: 66
Rule before check and clean: 
@rule{
    @premise know(*m1@875, #t1@876);
    @premise know(*[Kb@877], #t2@878);
    @premise new(*[Kb@877], Bk(), tuple4(x0@873, [Nb@872], m1@875, Ni@871));
    @premise new(*[Nb@872], Bn(), tuple4(x0@873, [Ka@879], m1@875, Ni@871));
    @premise know(*x0@873, #t0@880);
    @premise know(*m1@875, #t1@881);
    @premise know(*Ni@871, #t2@882);
    @conclusion know(*tuple4(Ni@871, [Nb@872], pk(skB()), x0@873), #t@874);
    @constraint #t@874 - #t@86 >= 0;
    @constraint #t@86 - #t2@878 >= 0;
    @constraint -#t1@876 + #t@86 >= 0;
    @constraint #t@874 - #t1@881 >= 0;
    @constraint #t@874 - #t0@880 >= 0;
    @constraint #t@874 - #t2@882 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@877], Bk(), tuple4(x0@873, [Nb@872], m1@875, Ni@871));
    @premise new(*[Nb@872], Bn(), tuple4(x0@873, [Ka@879], m1@875, Ni@871));
    @premise know(*[Kb@877], #t2@878);
    @premise know(*m1@875, #t1@876);
    @premise know(*x0@873, #t0@880);
    @premise know(*Ni@871, #t2@882);
    @conclusion know(*tuple4(Ni@871, [Nb@872], pk(skB()), x0@873), #t@874);
    @constraint #t@874 - #t2@882 >= 0;
    @constraint #t@874 - #t0@880 >= 0;
    @constraint #t@874 - #t2@878 >= 0;
    @constraint #t@874 - #t1@876 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@636], [Na@637], pk(skA()), pk(skB())), hash([Ka@638], [Kb@639])), hash([Ka@638], [Kb@639])));
    @premise new(*[Nb@636], Bn(), tuple4(pk(skA()), [Ka@641], [Ka@638], [Na@637]));
    @premise new(*[Kb@639], Bk(), tuple4(pk(skA()), [Nb@636], [Ka@638], [Na@637]));
    @premise new(*[Na@637], An(), tuple2(pk(skB()), [Ka@638]));
    @premise new(*[Ka@638], Ak(), tuple2(pk(skB()), [Na@637]));
    @premise know(*aenc([Kb@639], pk(skA())), #t1@645);
    @premise know(*pk(skA()), #t0@642);
    @premise know(*[Na@637], #t2@644);
    @premise know(*[Ka@638], #t1@643);
    @premise know(*[Nb@636], #t2@646);
    @conclusion know(*senc(tuple4([Nb@636], [Na@637], pk(skA()), pk(skB())), hash([Ka@638], [Kb@639])), #t@640);
    @constraint -#t1@645 + #t@640 >= 0;
    @constraint #t@640 - #t2@646 >= 0;
    @constraint #t@640 - #t1@643 >= 0;
    @constraint #t@640 - #t0@642 >= 0;
    @constraint #t@640 - #t2@644 >= 0;
};
Rule implied by: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@511], [Na@517], pk(skA()), pk(skB())), hash([Ka@513], [Kb@514])), hash([Ka@513], [Kb@514])));
    @premise new(*[Kb@514], Bk(), tuple4(pk(skA()), [Nb@511], [Ka@513], [Na@517]));
    @premise new(*[Nb@511], Bn(), tuple4(pk(skA()), [Ka@516], [Ka@513], [Na@517]));
    @premise new(*[Ka@513], Ak(), tuple2(pk(skB()), [Na@517]));
    @premise new(*[Na@517], An(), tuple2(pk(skB()), [Ka@513]));
    @premise know(*aenc([Kb@514], pk(skA())), #t1@519);
    @premise know(*[Na@517], #t2@518);
    @premise know(*[Nb@511], #t2@520);
    @conclusion know(*senc(tuple4([Nb@511], [Na@517], pk(skA()), pk(skB())), hash([Ka@513], [Kb@514])), #t@515);
    @constraint #t@515 - #t2@518 >= 0;
    @constraint #t@515 - #t2@520 >= 0;
    @constraint -#t1@519 + #t@515 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@648], Bn(), tuple4(pk(skA()), [Ka@654], [Ka@650], Ni@647));
    @premise new(*[Kb@652], Bk(), tuple4(pk(skA()), [Nb@648], [Ka@650], Ni@647));
    @premise new(*[Na@655], An(), tuple2(pk(skB()), [Ka@650]));
    @premise new(*[Ka@650], Ak(), tuple2(pk(skB()), [Na@655]));
    @premise know(*[Ka@650], #t1@651);
    @premise know(*[Kb@652], #t2@653);
    @premise know(*Ni@647, #t2@656);
    @conclusion know(*tuple4(Ni@647, [Nb@648], pk(skB()), pk(skA())), #t@649);
    @constraint #t@649 - #t2@656 >= 0;
    @constraint #t@649 - #t2@653 >= 0;
    @constraint #t@649 - #t1@651 >= 0;
};
Rule added at 4.

Compose by at 4 : 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};
Rule in cache: 19
Rule staged: 67
Rule before check and clean: 
@rule{
    @premise new(*[Ka@886], Ak(), tuple2(pkR@887, [Na@888]));
    @premise new(*[Na@888], An(), tuple2(pkR@887, [Ka@886]));
    @premise new(*[Nb@884], Bn(), tuple4(pk(skA()), [Ka@889], [Na@888], Ni@883));
    @premise new(*[Kb@890], Bk(), tuple4(pk(skA()), [Nb@884], [Na@888], Ni@883));
    @premise new(*[Na@891], An(), tuple2(pk(skB()), [Na@888]));
    @premise new(*[Na@888], Ak(), tuple2(pk(skB()), [Na@891]));
    @premise know(*[Kb@890], #t2@892);
    @premise know(*Ni@883, #t2@893);
    @conclusion know(*tuple4(Ni@883, [Nb@884], pk(skB()), pk(skA())), #t@885);
    @constraint #t@885 - #t1@275 >= 0;
    @constraint #t@885 - #t2@892 >= 0;
    @constraint #t@885 - #t2@893 >= 0;
};
Rule invalid. 

Compose by at 4 : 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};
Rule in cache: 19
Rule staged: 67
Rule before check and clean: 
@rule{
    @premise new(*[Kb@897], Bk(), tuple4(pk(skA()), [Nb@898], [Ka@899], Ni@900));
    @premise new(*[Nb@898], Bn(), tuple4(pk(skA()), [Ka@901], [Ka@899], Ni@900));
    @premise new(*[Ka@899], Ak(), tuple2(pk(skB()), [Na@902]));
    @premise new(*[Na@902], An(), tuple2(pk(skB()), [Ka@899]));
    @premise know(*Ni@900, #t2@903);
    @premise new(*[Nb@895], Bn(), tuple4(pk(skA()), [Ka@904], [Nb@898], Ni@894));
    @premise new(*[Kb@905], Bk(), tuple4(pk(skA()), [Nb@895], [Nb@898], Ni@894));
    @premise new(*[Na@906], An(), tuple2(pk(skB()), [Nb@898]));
    @premise new(*[Nb@898], Ak(), tuple2(pk(skB()), [Na@906]));
    @premise know(*[Kb@905], #t2@907);
    @premise know(*Ni@894, #t2@908);
    @conclusion know(*tuple4(Ni@894, [Nb@895], pk(skB()), pk(skA())), #t@896);
    @constraint #t@381 - #t2@903 >= 0;
    @constraint #t@896 - #t@381 >= 0;
    @constraint #t@896 - #t2@907 >= 0;
    @constraint #t@896 - #t2@908 >= 0;
};
Rule invalid. 

Compose by at 4 : 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};
Rule in cache: 19
Rule staged: 67
Rule before check and clean: 
@rule{
    @premise new(*[Kb@912], Bk(), tuple4(x0@913, [Nb@914], x1@915, Ni@916));
    @premise new(*[Nb@914], Bn(), tuple4(x0@913, [Ka@917], x1@915, Ni@916));
    @premise know(*x0@913, #t0@918);
    @premise know(*x1@915, #t1@919);
    @premise know(*Ni@916, #t2@920);
    @premise new(*[Nb@910], Bn(), tuple4(pk(skA()), [Ka@921], [Nb@914], Ni@909));
    @premise new(*[Kb@922], Bk(), tuple4(pk(skA()), [Nb@910], [Nb@914], Ni@909));
    @premise new(*[Na@923], An(), tuple2(pk(skB()), [Nb@914]));
    @premise new(*[Nb@914], Ak(), tuple2(pk(skB()), [Na@923]));
    @premise know(*[Kb@922], #t2@924);
    @premise know(*Ni@909, #t2@925);
    @conclusion know(*tuple4(Ni@909, [Nb@910], pk(skB()), pk(skA())), #t@911);
    @constraint #t@464 - #t1@919 >= 0;
    @constraint #t@464 - #t0@918 >= 0;
    @constraint #t@464 - #t2@920 >= 0;
    @constraint #t@911 - #t@464 >= 0;
    @constraint #t@911 - #t2@924 >= 0;
    @constraint #t@911 - #t2@925 >= 0;
};
Rule invalid. 

Compose by at 4 : 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};
Rule in cache: 19
Rule staged: 67
Rule before check and clean: 
@rule{
    @premise new(*[Ka@929], Ak(), tuple2(pk(sk@930), [Na@931]));
    @premise new(*[Na@931], An(), tuple2(pk(sk@930), [Ka@929]));
    @premise know(*sk@930, #t1@932);
    @premise new(*[Nb@927], Bn(), tuple4(pk(skA()), [Ka@933], [Ka@929], Ni@926));
    @premise new(*[Kb@934], Bk(), tuple4(pk(skA()), [Nb@927], [Ka@929], Ni@926));
    @premise new(*[Na@935], An(), tuple2(pk(skB()), [Ka@929]));
    @premise new(*[Ka@929], Ak(), tuple2(pk(skB()), [Na@935]));
    @premise know(*[Kb@934], #t2@936);
    @premise know(*Ni@926, #t2@937);
    @conclusion know(*tuple4(Ni@926, [Nb@927], pk(skB()), pk(skA())), #t@928);
    @constraint #t1@489 - #t1@932 >= 0;
    @constraint #t@928 - #t1@489 >= 0;
    @constraint #t@928 - #t2@936 >= 0;
    @constraint #t@928 - #t2@937 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@927], Bn(), tuple4(pk(skA()), [Ka@933], [Ka@929], Ni@926));
    @premise new(*[Kb@934], Bk(), tuple4(pk(skA()), [Nb@927], [Ka@929], Ni@926));
    @premise new(*[Ka@929], Ak(), tuple2(pk(skB()), [Na@931]));
    @premise new(*[Na@931], An(), tuple2(pk(skB()), [Ka@929]));
    @premise know(*skB(), #t1@932);
    @premise know(*[Kb@934], #t2@936);
    @premise know(*Ni@926, #t2@937);
    @conclusion know(*tuple4(Ni@926, [Nb@927], pk(skB()), pk(skA())), #t@928);
    @constraint #t@928 - #t1@932 >= 0;
    @constraint #t@928 - #t2@936 >= 0;
    @constraint #t@928 - #t2@937 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@657], [Na@658], pk(skA()), pk(skB())), hash([Ka@659], [Kb@660])), hash([Ka@659], [Kb@660])));
    @premise new(*[Nb@657], Bn(), tuple4(pk(skA()), [Ka@664], [Ka@659], [Na@658]));
    @premise new(*[Kb@660], Bk(), tuple4(pk(skA()), [Nb@657], [Ka@659], [Na@658]));
    @premise new(*[Na@658], An(), tuple2(pk(skB()), [Ka@659]));
    @premise new(*[Ka@659], Ak(), tuple2(pk(skB()), [Na@658]));
    @premise know(*skA(), #t1@662);
    @premise know(*[Kb@660], #t1@663);
    @premise know(*[Na@658], #t2@665);
    @premise know(*[Nb@657], #t2@666);
    @conclusion know(*senc(tuple4([Nb@657], [Na@658], pk(skA()), pk(skB())), hash([Ka@659], [Kb@660])), #t@661);
    @constraint #t@661 - #t2@666 >= 0;
    @constraint #t@661 - #t2@665 >= 0;
    @constraint #t@661 - #t1@662 >= 0;
    @constraint #t@661 - #t1@663 >= 0;
};
Rule added at 5.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@667], [Na@668], pk(skA()), pk(skB())), hash([Ka@669], [Kb@670])), hash([Ka@669], [Kb@670])));
    @premise new(*[Kb@670], Bk(), tuple4(pk(skA()), [Nb@667], [Ka@669], [Na@668]));
    @premise new(*[Nb@667], Bn(), tuple4(pk(skA()), [Ka@673], [Ka@669], [Na@668]));
    @premise new(*[Ka@669], Ak(), tuple2(pk(skB()), [Na@668]));
    @premise new(*[Na@668], An(), tuple2(pk(skB()), [Ka@669]));
    @premise know(*[Kb@670], #t1@672);
    @premise know(*[Na@668], #t2@674);
    @premise know(*[Nb@667], #t2@675);
    @conclusion know(*senc(tuple4([Nb@667], [Na@668], pk(skA()), pk(skB())), hash([Ka@669], [Kb@670])), #t@671);
    @constraint #t@671 - #t2@674 >= 0;
    @constraint #t@671 - #t2@675 >= 0;
    @constraint #t@671 - #t1@672 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@657], [Na@658], pk(skA()), pk(skB())), hash([Ka@659], [Kb@660])), hash([Ka@659], [Kb@660])));
    @premise new(*[Nb@657], Bn(), tuple4(pk(skA()), [Ka@664], [Ka@659], [Na@658]));
    @premise new(*[Kb@660], Bk(), tuple4(pk(skA()), [Nb@657], [Ka@659], [Na@658]));
    @premise new(*[Na@658], An(), tuple2(pk(skB()), [Ka@659]));
    @premise new(*[Ka@659], Ak(), tuple2(pk(skB()), [Na@658]));
    @premise know(*skA(), #t1@662);
    @premise know(*[Kb@660], #t1@663);
    @premise know(*[Na@658], #t2@665);
    @premise know(*[Nb@657], #t2@666);
    @conclusion know(*senc(tuple4([Nb@657], [Na@658], pk(skA()), pk(skB())), hash([Ka@659], [Kb@660])), #t@661);
    @constraint #t@661 - #t2@666 >= 0;
    @constraint #t@661 - #t2@665 >= 0;
    @constraint #t@661 - #t1@662 >= 0;
    @constraint #t@661 - #t1@663 >= 0;
};
Rule added at 5.

Compose by at 5 : 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};
Rule in cache: 18
Rule staged: 69
Rule before check and clean: 
@rule{
    @premise new(*[Ka@943], Ak(), tuple2(pkR@944, [Na@941]));
    @premise new(*[Na@941], An(), tuple2(pkR@944, [Ka@943]));
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@938], [Na@939], pk(skA()), pk(skB())), hash([Ka@940], [Na@941])), hash([Ka@940], [Na@941])));
    @premise new(*[Na@941], Bk(), tuple4(pk(skA()), [Nb@938], [Ka@940], [Na@939]));
    @premise new(*[Nb@938], Bn(), tuple4(pk(skA()), [Ka@945], [Ka@940], [Na@939]));
    @premise new(*[Ka@940], Ak(), tuple2(pk(skB()), [Na@939]));
    @premise new(*[Na@939], An(), tuple2(pk(skB()), [Ka@940]));
    @premise know(*[Na@939], #t2@946);
    @premise know(*[Nb@938], #t2@947);
    @conclusion know(*senc(tuple4([Nb@938], [Na@939], pk(skA()), pk(skB())), hash([Ka@940], [Na@941])), #t@942);
    @constraint #t@942 - #t1@275 >= 0;
    @constraint #t@942 - #t2@946 >= 0;
    @constraint #t@942 - #t2@947 >= 0;
};
Rule invalid. 

Compose by at 5 : 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};
Rule in cache: 18
Rule staged: 69
Rule before check and clean: 
@rule{
    @premise new(*[Kb@953], Bk(), tuple4(pk(skA()), [Nb@951], [Ka@954], Ni@955));
    @premise new(*[Nb@951], Bn(), tuple4(pk(skA()), [Ka@956], [Ka@954], Ni@955));
    @premise new(*[Ka@954], Ak(), tuple2(pk(skB()), [Na@957]));
    @premise new(*[Na@957], An(), tuple2(pk(skB()), [Ka@954]));
    @premise know(*Ni@955, #t2@958);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@948], [Na@949], pk(skA()), pk(skB())), hash([Ka@950], [Nb@951])), hash([Ka@950], [Nb@951])));
    @premise new(*[Nb@951], Bk(), tuple4(pk(skA()), [Nb@948], [Ka@950], [Na@949]));
    @premise new(*[Nb@948], Bn(), tuple4(pk(skA()), [Ka@959], [Ka@950], [Na@949]));
    @premise new(*[Ka@950], Ak(), tuple2(pk(skB()), [Na@949]));
    @premise new(*[Na@949], An(), tuple2(pk(skB()), [Ka@950]));
    @premise know(*[Na@949], #t2@960);
    @premise know(*[Nb@948], #t2@961);
    @conclusion know(*senc(tuple4([Nb@948], [Na@949], pk(skA()), pk(skB())), hash([Ka@950], [Nb@951])), #t@952);
    @constraint #t@381 - #t2@958 >= 0;
    @constraint #t@952 - #t@381 >= 0;
    @constraint #t@952 - #t2@960 >= 0;
    @constraint #t@952 - #t2@961 >= 0;
};
Rule invalid. 

Compose by at 5 : 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};
Rule in cache: 18
Rule staged: 69
Rule before check and clean: 
@rule{
    @premise new(*[Kb@967], Bk(), tuple4(x0@968, [Nb@965], x1@969, Ni@970));
    @premise new(*[Nb@965], Bn(), tuple4(x0@968, [Ka@971], x1@969, Ni@970));
    @premise know(*x0@968, #t0@972);
    @premise know(*x1@969, #t1@973);
    @premise know(*Ni@970, #t2@974);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@962], [Na@963], pk(skA()), pk(skB())), hash([Ka@964], [Nb@965])), hash([Ka@964], [Nb@965])));
    @premise new(*[Nb@965], Bk(), tuple4(pk(skA()), [Nb@962], [Ka@964], [Na@963]));
    @premise new(*[Nb@962], Bn(), tuple4(pk(skA()), [Ka@975], [Ka@964], [Na@963]));
    @premise new(*[Ka@964], Ak(), tuple2(pk(skB()), [Na@963]));
    @premise new(*[Na@963], An(), tuple2(pk(skB()), [Ka@964]));
    @premise know(*[Na@963], #t2@976);
    @premise know(*[Nb@962], #t2@977);
    @conclusion know(*senc(tuple4([Nb@962], [Na@963], pk(skA()), pk(skB())), hash([Ka@964], [Nb@965])), #t@966);
    @constraint #t@464 - #t1@973 >= 0;
    @constraint #t@464 - #t0@972 >= 0;
    @constraint #t@464 - #t2@974 >= 0;
    @constraint #t@966 - #t@464 >= 0;
    @constraint #t@966 - #t2@976 >= 0;
    @constraint #t@966 - #t2@977 >= 0;
};
Rule invalid. 

Compose by at 5 : 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};
Rule in cache: 18
Rule staged: 69
Rule before check and clean: 
@rule{
    @premise new(*[Ka@981], Ak(), tuple2(pk(sk@983), [Na@984]));
    @premise new(*[Na@984], An(), tuple2(pk(sk@983), [Ka@981]));
    @premise know(*sk@983, #t1@985);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@978], [Na@979], pk(skA()), pk(skB())), hash([Ka@980], [Ka@981])), hash([Ka@980], [Ka@981])));
    @premise new(*[Ka@981], Bk(), tuple4(pk(skA()), [Nb@978], [Ka@980], [Na@979]));
    @premise new(*[Nb@978], Bn(), tuple4(pk(skA()), [Ka@986], [Ka@980], [Na@979]));
    @premise new(*[Ka@980], Ak(), tuple2(pk(skB()), [Na@979]));
    @premise new(*[Na@979], An(), tuple2(pk(skB()), [Ka@980]));
    @premise know(*[Na@979], #t2@987);
    @premise know(*[Nb@978], #t2@988);
    @conclusion know(*senc(tuple4([Nb@978], [Na@979], pk(skA()), pk(skB())), hash([Ka@980], [Ka@981])), #t@982);
    @constraint #t1@489 - #t1@985 >= 0;
    @constraint #t@982 - #t1@489 >= 0;
    @constraint #t@982 - #t2@987 >= 0;
    @constraint #t@982 - #t2@988 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@681], [Na@685], pk(skA()), pk(skB())), hash([Ka@682], [Kb@679])), hash([Ka@682], [Kb@679])));
    @premise new(*[Kb@679], Bk(), tuple4(pk(skA()), [Nb@681], [Ka@682], [Na@685]));
    @premise new(*[Nb@681], Bn(), tuple4(pk(skA()), [Ka@684], [Ka@682], [Na@685]));
    @premise new(*[Na@685], An(), tuple2(pk(skB()), [Ka@682]));
    @premise new(*[Ka@682], Ak(), tuple2(pk(skB()), [Na@685]));
    @premise know(*[Na@685], #t2@686);
    @premise know(*[Nb@681], #t2@689);
    @conclusion know(*senc(tuple4([Nb@681], [Na@685], pk(skA()), pk(skB())), hash([Ka@682], [Kb@679])), #t@680);
    @constraint #t@680 - #t2@686 >= 0;
    @constraint #t@680 - #t2@689 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@511], [Na@517], pk(skA()), pk(skB())), hash([Ka@513], [Kb@514])), hash([Ka@513], [Kb@514])));
    @premise new(*[Kb@514], Bk(), tuple4(pk(skA()), [Nb@511], [Ka@513], [Na@517]));
    @premise new(*[Nb@511], Bn(), tuple4(pk(skA()), [Ka@516], [Ka@513], [Na@517]));
    @premise new(*[Ka@513], Ak(), tuple2(pk(skB()), [Na@517]));
    @premise new(*[Na@517], An(), tuple2(pk(skB()), [Ka@513]));
    @premise know(*aenc([Kb@514], pk(skA())), #t1@519);
    @premise know(*[Na@517], #t2@518);
    @premise know(*[Nb@511], #t2@520);
    @conclusion know(*senc(tuple4([Nb@511], [Na@517], pk(skA()), pk(skB())), hash([Ka@513], [Kb@514])), #t@515);
    @constraint #t@515 - #t2@518 >= 0;
    @constraint #t@515 - #t2@520 >= 0;
    @constraint -#t1@519 + #t@515 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@667], [Na@668], pk(skA()), pk(skB())), hash([Ka@669], [Kb@670])), hash([Ka@669], [Kb@670])));
    @premise new(*[Kb@670], Bk(), tuple4(pk(skA()), [Nb@667], [Ka@669], [Na@668]));
    @premise new(*[Nb@667], Bn(), tuple4(pk(skA()), [Ka@673], [Ka@669], [Na@668]));
    @premise new(*[Ka@669], Ak(), tuple2(pk(skB()), [Na@668]));
    @premise new(*[Na@668], An(), tuple2(pk(skB()), [Ka@669]));
    @premise know(*[Kb@670], #t1@672);
    @premise know(*[Na@668], #t2@674);
    @premise know(*[Nb@667], #t2@675);
    @conclusion know(*senc(tuple4([Nb@667], [Na@668], pk(skA()), pk(skB())), hash([Ka@669], [Kb@670])), #t@671);
    @constraint #t@671 - #t2@674 >= 0;
    @constraint #t@671 - #t2@675 >= 0;
    @constraint #t@671 - #t1@672 >= 0;
};
Rule added at 5.

Compose by at 5 : 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};
Rule in cache: 17
Rule staged: 70
Rule before check and clean: 
@rule{
    @premise new(*[Ka@994], Ak(), tuple2(pkR@995, [Na@990]));
    @premise new(*[Na@990], An(), tuple2(pkR@995, [Ka@994]));
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@989], [Na@990], pk(skA()), pk(skB())), hash([Ka@991], [Kb@992])), hash([Ka@991], [Kb@992])));
    @premise new(*[Kb@992], Bk(), tuple4(pk(skA()), [Nb@989], [Ka@991], [Na@990]));
    @premise new(*[Nb@989], Bn(), tuple4(pk(skA()), [Ka@996], [Ka@991], [Na@990]));
    @premise new(*[Na@990], An(), tuple2(pk(skB()), [Ka@991]));
    @premise new(*[Ka@991], Ak(), tuple2(pk(skB()), [Na@990]));
    @premise know(*[Nb@989], #t2@997);
    @conclusion know(*senc(tuple4([Nb@989], [Na@990], pk(skA()), pk(skB())), hash([Ka@991], [Kb@992])), #t@993);
    @constraint #t@993 - #t1@275 >= 0;
    @constraint #t@993 - #t2@997 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@989], [Na@990], pk(skA()), pk(skB())), hash([Ka@994], [Kb@992])), hash([Ka@994], [Kb@992])));
    @premise new(*[Kb@992], Bk(), tuple4(pk(skA()), [Nb@989], [Ka@994], [Na@990]));
    @premise new(*[Nb@989], Bn(), tuple4(pk(skA()), [Ka@996], [Ka@994], [Na@990]));
    @premise new(*[Ka@994], Ak(), tuple2(pk(skB()), [Na@990]));
    @premise new(*[Na@990], An(), tuple2(pk(skB()), [Ka@994]));
    @premise know(*[Nb@989], #t2@997);
    @conclusion know(*senc(tuple4([Nb@989], [Na@990], pk(skA()), pk(skB())), hash([Ka@994], [Kb@992])), #t@993);
    @constraint #t@993 - #t2@997 >= 0;
};

Compose by at 5 : 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};
Rule in cache: 18
Rule staged: 70
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1003], Bk(), tuple4(pk(skA()), [Nb@999], [Ka@1004], Ni@1005));
    @premise new(*[Nb@999], Bn(), tuple4(pk(skA()), [Ka@1006], [Ka@1004], Ni@1005));
    @premise new(*[Ka@1004], Ak(), tuple2(pk(skB()), [Na@1007]));
    @premise new(*[Na@1007], An(), tuple2(pk(skB()), [Ka@1004]));
    @premise know(*Ni@1005, #t2@1008);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@998], [Nb@999], pk(skA()), pk(skB())), hash([Ka@1000], [Kb@1001])), hash([Ka@1000], [Kb@1001])));
    @premise new(*[Kb@1001], Bk(), tuple4(pk(skA()), [Nb@998], [Ka@1000], [Nb@999]));
    @premise new(*[Nb@998], Bn(), tuple4(pk(skA()), [Ka@1009], [Ka@1000], [Nb@999]));
    @premise new(*[Nb@999], An(), tuple2(pk(skB()), [Ka@1000]));
    @premise new(*[Ka@1000], Ak(), tuple2(pk(skB()), [Nb@999]));
    @premise know(*[Nb@998], #t2@1010);
    @conclusion know(*senc(tuple4([Nb@998], [Nb@999], pk(skA()), pk(skB())), hash([Ka@1000], [Kb@1001])), #t@1002);
    @constraint #t@381 - #t2@1008 >= 0;
    @constraint #t@1002 - #t@381 >= 0;
    @constraint #t@1002 - #t2@1010 >= 0;
};
Rule invalid. 

Compose by at 5 : 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};
Rule in cache: 18
Rule staged: 70
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1016], Bk(), tuple4(x0@1017, [Nb@1012], x1@1018, Ni@1019));
    @premise new(*[Nb@1012], Bn(), tuple4(x0@1017, [Ka@1020], x1@1018, Ni@1019));
    @premise know(*x0@1017, #t0@1021);
    @premise know(*x1@1018, #t1@1022);
    @premise know(*Ni@1019, #t2@1023);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1011], [Nb@1012], pk(skA()), pk(skB())), hash([Ka@1013], [Kb@1014])), hash([Ka@1013], [Kb@1014])));
    @premise new(*[Kb@1014], Bk(), tuple4(pk(skA()), [Nb@1011], [Ka@1013], [Nb@1012]));
    @premise new(*[Nb@1011], Bn(), tuple4(pk(skA()), [Ka@1024], [Ka@1013], [Nb@1012]));
    @premise new(*[Nb@1012], An(), tuple2(pk(skB()), [Ka@1013]));
    @premise new(*[Ka@1013], Ak(), tuple2(pk(skB()), [Nb@1012]));
    @premise know(*[Nb@1011], #t2@1025);
    @conclusion know(*senc(tuple4([Nb@1011], [Nb@1012], pk(skA()), pk(skB())), hash([Ka@1013], [Kb@1014])), #t@1015);
    @constraint #t@464 - #t1@1022 >= 0;
    @constraint #t@464 - #t0@1021 >= 0;
    @constraint #t@464 - #t2@1023 >= 0;
    @constraint #t@1015 - #t@464 >= 0;
    @constraint #t@1015 - #t2@1025 >= 0;
};
Rule invalid. 

Compose by at 5 : 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};
Rule in cache: 18
Rule staged: 70
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1027], Ak(), tuple2(pk(sk@1031), [Na@1032]));
    @premise new(*[Na@1032], An(), tuple2(pk(sk@1031), [Ka@1027]));
    @premise know(*sk@1031, #t1@1033);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1026], [Ka@1027], pk(skA()), pk(skB())), hash([Ka@1028], [Kb@1029])), hash([Ka@1028], [Kb@1029])));
    @premise new(*[Kb@1029], Bk(), tuple4(pk(skA()), [Nb@1026], [Ka@1028], [Ka@1027]));
    @premise new(*[Nb@1026], Bn(), tuple4(pk(skA()), [Ka@1034], [Ka@1028], [Ka@1027]));
    @premise new(*[Ka@1027], An(), tuple2(pk(skB()), [Ka@1028]));
    @premise new(*[Ka@1028], Ak(), tuple2(pk(skB()), [Ka@1027]));
    @premise know(*[Nb@1026], #t2@1035);
    @conclusion know(*senc(tuple4([Nb@1026], [Ka@1027], pk(skA()), pk(skB())), hash([Ka@1028], [Kb@1029])), #t@1030);
    @constraint #t1@489 - #t1@1033 >= 0;
    @constraint #t@1030 - #t1@489 >= 0;
    @constraint #t@1030 - #t2@1035 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@695], [Na@691], pk(skA()), pk(skB())), hash([Ka@692], [Kb@693])), hash([Ka@692], [Kb@693])));
    @premise new(*[Kb@693], Bk(), tuple4(pk(skA()), [Nb@695], [Ka@692], [Na@691]));
    @premise new(*[Nb@695], Bn(), tuple4(pk(skA()), [Ka@698], [Ka@692], [Na@691]));
    @premise new(*[Na@691], An(), tuple2(pk(skB()), [Ka@692]));
    @premise new(*[Ka@692], Ak(), tuple2(pk(skB()), [Na@691]));
    @premise know(*pk(skA()), #t0@699);
    @premise know(*[Na@691], #t2@701);
    @premise know(*[Ka@692], #t1@700);
    @premise know(*[Nb@695], #t2@704);
    @conclusion know(*senc(tuple4([Nb@695], [Na@691], pk(skA()), pk(skB())), hash([Ka@692], [Kb@693])), #t@694);
    @constraint #t@694 - #t2@704 >= 0;
    @constraint #t@694 - #t1@700 >= 0;
    @constraint #t@694 - #t0@699 >= 0;
    @constraint #t@694 - #t2@701 >= 0;
};
Rule implied by: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@681], [Na@685], pk(skA()), pk(skB())), hash([Ka@682], [Kb@679])), hash([Ka@682], [Kb@679])));
    @premise new(*[Kb@679], Bk(), tuple4(pk(skA()), [Nb@681], [Ka@682], [Na@685]));
    @premise new(*[Nb@681], Bn(), tuple4(pk(skA()), [Ka@684], [Ka@682], [Na@685]));
    @premise new(*[Na@685], An(), tuple2(pk(skB()), [Ka@682]));
    @premise new(*[Ka@682], Ak(), tuple2(pk(skB()), [Na@685]));
    @premise know(*[Na@685], #t2@686);
    @premise know(*[Nb@681], #t2@689);
    @conclusion know(*senc(tuple4([Nb@681], [Na@685], pk(skA()), pk(skB())), hash([Ka@682], [Kb@679])), #t@680);
    @constraint #t@680 - #t2@686 >= 0;
    @constraint #t@680 - #t2@689 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@707, *senc(senc(tuple4(x1@705, [Na@706], pk(skA()), x2@707), hash([Ka@708], m@709)), hash([Ka@708], m@709)));
    @premise new(*[Na@706], An(), tuple2(x2@707, [Ka@708]));
    @premise new(*[Ka@708], Ak(), tuple2(x2@707, [Na@706]));
    @premise know(*hash([Ka@708], m@709), #t2@712);
    @premise know(*skA(), #t1@711);
    @premise know(*[Na@706], #t0@714);
    @premise know(*m@709, #t1@715);
    @premise know(*x2@707, #t2@716);
    @premise know(*x1@705, #t1@717);
    @conclusion know(*senc(tuple4(x1@705, [Na@706], pk(skA()), x2@707), hash([Ka@708], m@709)), #t@710);
    @constraint #t@710 - #t1@715 >= 0;
    @constraint #t@710 - #t2@716 >= 0;
    @constraint #t@710 - #t1@717 >= 0;
    @constraint #t@710 - #t0@714 >= 0;
    @constraint #t@710 - #t2@712 >= 0;
    @constraint #t@710 - #t1@711 >= 0;
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule in cache: 16
Rule staged: 71
Rule before check and clean: 
@rule{
    @premise know(*[Ka@1039], #t1@1042);
    @premise know(*m2@1040, #t2@1043);
    @premise init(*pk(skA()), *x2@1038, *senc(senc(tuple4(x1@1036, [Na@1037], pk(skA()), x2@1038), hash([Ka@1039], m2@1040)), hash([Ka@1039], m2@1040)));
    @premise new(*[Na@1037], An(), tuple2(x2@1038, [Ka@1039]));
    @premise new(*[Ka@1039], Ak(), tuple2(x2@1038, [Na@1037]));
    @premise know(*skA(), #t1@1044);
    @premise know(*[Na@1037], #t0@1045);
    @premise know(*m2@1040, #t1@1046);
    @premise know(*x2@1038, #t2@1047);
    @premise know(*x1@1036, #t1@1048);
    @conclusion know(*senc(tuple4(x1@1036, [Na@1037], pk(skA()), x2@1038), hash([Ka@1039], m2@1040)), #t@1041);
    @constraint #t@86 - #t2@1043 >= 0;
    @constraint -#t1@1042 + #t@86 >= 0;
    @constraint #t@1041 - #t@86 >= 0;
    @constraint #t@1041 - #t1@1044 >= 0;
    @constraint #t@1041 - #t1@1046 >= 0;
    @constraint #t@1041 - #t2@1047 >= 0;
    @constraint #t@1041 - #t1@1048 >= 0;
    @constraint #t@1041 - #t0@1045 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@1038, *senc(senc(tuple4(x1@1036, [Na@1037], pk(skA()), x2@1038), hash([Ka@1039], m2@1040)), hash([Ka@1039], m2@1040)));
    @premise new(*[Ka@1039], Ak(), tuple2(x2@1038, [Na@1037]));
    @premise new(*[Na@1037], An(), tuple2(x2@1038, [Ka@1039]));
    @premise know(*skA(), #t1@1044);
    @premise know(*[Ka@1039], #t1@1042);
    @premise know(*[Na@1037], #t0@1045);
    @premise know(*m2@1040, #t2@1043);
    @premise know(*x2@1038, #t2@1047);
    @premise know(*x1@1036, #t1@1048);
    @conclusion know(*senc(tuple4(x1@1036, [Na@1037], pk(skA()), x2@1038), hash([Ka@1039], m2@1040)), #t@1041);
    @constraint #t@1041 - #t0@1045 >= 0;
    @constraint #t@1041 - #t1@1044 >= 0;
    @constraint #t@1041 - #t2@1047 >= 0;
    @constraint #t@1041 - #t1@1048 >= 0;
    @constraint #t@1041 - #t2@1043 >= 0;
    @constraint #t@1041 - #t1@1042 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@720, *senc(senc(tuple4(x1@718, [Na@719], pk(skA()), x2@720), hash([Ka@721], m@722)), hash([Ka@721], m@722)));
    @premise new(*[Na@719], An(), tuple2(x2@720, [Ka@721]));
    @premise new(*[Ka@721], Ak(), tuple2(x2@720, [Na@719]));
    @premise know(*hash([Ka@721], m@722), #t2@724);
    @premise know(*skA(), #t1@725);
    @premise know(*[Na@719], #t0@726);
    @premise know(*m@722, #t1@727);
    @premise know(*x2@720, #t2@728);
    @premise know(*x1@718, #t1@729);
    @conclusion know(*senc(tuple4(x1@718, [Na@719], pk(skA()), x2@720), hash([Ka@721], m@722)), #t@723);
    @constraint #t@723 - #t1@729 >= 0;
    @constraint #t@723 - #t1@725 >= 0;
    @constraint #t@723 - #t1@727 >= 0;
    @constraint #t@723 - #t2@728 >= 0;
    @constraint #t@723 - #t0@726 >= 0;
    @constraint #t@723 - #t2@724 >= 0;
};
Rule implied by: 
@rule{
    @premise init(*pk(skA()), *x2@707, *senc(senc(tuple4(x1@705, [Na@706], pk(skA()), x2@707), hash([Ka@708], m@709)), hash([Ka@708], m@709)));
    @premise new(*[Na@706], An(), tuple2(x2@707, [Ka@708]));
    @premise new(*[Ka@708], Ak(), tuple2(x2@707, [Na@706]));
    @premise know(*hash([Ka@708], m@709), #t2@712);
    @premise know(*skA(), #t1@711);
    @premise know(*[Na@706], #t0@714);
    @premise know(*m@709, #t1@715);
    @premise know(*x2@707, #t2@716);
    @premise know(*x1@705, #t1@717);
    @conclusion know(*senc(tuple4(x1@705, [Na@706], pk(skA()), x2@707), hash([Ka@708], m@709)), #t@710);
    @constraint #t@710 - #t1@715 >= 0;
    @constraint #t@710 - #t2@716 >= 0;
    @constraint #t@710 - #t1@717 >= 0;
    @constraint #t@710 - #t0@714 >= 0;
    @constraint #t@710 - #t2@712 >= 0;
    @constraint #t@710 - #t1@711 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@732, *senc(senc(tuple4(x1@730, [Na@731], pk(skA()), x2@732), hash([Ka@733], m@734)), hash([Ka@733], m@734)));
    @premise new(*[Na@731], An(), tuple2(x2@732, [Ka@733]));
    @premise new(*[Ka@733], Ak(), tuple2(x2@732, [Na@731]));
    @premise know(*hash([Ka@733], m@734), #t2@737);
    @premise know(*skA(), #t1@736);
    @premise know(*[Na@731], #t0@738);
    @premise know(*m@734, #t1@739);
    @premise know(*x2@732, #t2@740);
    @premise know(*x1@730, #t1@741);
    @conclusion know(*senc(tuple4(x1@730, [Na@731], pk(skA()), x2@732), hash([Ka@733], m@734)), #t@735);
    @constraint #t@735 - #t1@739 >= 0;
    @constraint #t@735 - #t2@740 >= 0;
    @constraint #t@735 - #t1@741 >= 0;
    @constraint #t@735 - #t0@738 >= 0;
    @constraint #t@735 - #t2@737 >= 0;
    @constraint #t@735 - #t1@736 >= 0;
};
Rule implied by: 
@rule{
    @premise init(*pk(skA()), *x2@707, *senc(senc(tuple4(x1@705, [Na@706], pk(skA()), x2@707), hash([Ka@708], m@709)), hash([Ka@708], m@709)));
    @premise new(*[Na@706], An(), tuple2(x2@707, [Ka@708]));
    @premise new(*[Ka@708], Ak(), tuple2(x2@707, [Na@706]));
    @premise know(*hash([Ka@708], m@709), #t2@712);
    @premise know(*skA(), #t1@711);
    @premise know(*[Na@706], #t0@714);
    @premise know(*m@709, #t1@715);
    @premise know(*x2@707, #t2@716);
    @premise know(*x1@705, #t1@717);
    @conclusion know(*senc(tuple4(x1@705, [Na@706], pk(skA()), x2@707), hash([Ka@708], m@709)), #t@710);
    @constraint #t@710 - #t1@715 >= 0;
    @constraint #t@710 - #t2@716 >= 0;
    @constraint #t@710 - #t1@717 >= 0;
    @constraint #t@710 - #t0@714 >= 0;
    @constraint #t@710 - #t2@712 >= 0;
    @constraint #t@710 - #t1@711 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@744, *senc(senc(tuple4(x1@742, [Na@743], pk(skA()), x2@744), hash([Ka@745], m@746)), hash([Ka@745], m@746)));
    @premise new(*[Na@743], An(), tuple2(x2@744, [Ka@745]));
    @premise new(*[Ka@745], Ak(), tuple2(x2@744, [Na@743]));
    @premise know(*hash([Ka@745], m@746), #t2@748);
    @premise know(*[Na@743], #t0@749);
    @premise know(*m@746, #t1@750);
    @premise know(*x2@744, #t2@751);
    @premise know(*x1@742, #t1@752);
    @conclusion know(*senc(tuple4(x1@742, [Na@743], pk(skA()), x2@744), hash([Ka@745], m@746)), #t@747);
    @constraint #t@747 - #t1@752 >= 0;
    @constraint #t@747 - #t1@750 >= 0;
    @constraint #t@747 - #t2@751 >= 0;
    @constraint #t@747 - #t0@749 >= 0;
    @constraint #t@747 - #t2@748 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *x2@536, *senc(senc(tuple4(x1@534, [Na@535], pk(skA()), x2@536), hash([Ka@537], m@538)), hash([Ka@537], m@538)));
    @premise new(*[Na@535], An(), tuple2(x2@536, [Ka@537]));
    @premise new(*[Ka@537], Ak(), tuple2(x2@536, [Na@535]));
    @premise know(*pk(skA()), #t3@541);
    @premise know(*hash([Ka@537], m@538), #t2@542);
    @premise know(*[Na@535], #t0@543);
    @premise know(*m@538, #t1@540);
    @premise know(*x2@536, #t2@544);
    @premise know(*x1@534, #t1@545);
    @conclusion know(*senc(tuple4(x1@534, [Na@535], pk(skA()), x2@536), hash([Ka@537], m@538)), #t@539);
    @constraint #t@539 - #t3@541 >= 0;
    @constraint #t@539 - #t2@544 >= 0;
    @constraint #t@539 - #t1@545 >= 0;
    @constraint #t@539 - #t0@543 >= 0;
    @constraint #t@539 - #t2@542 >= 0;
    @constraint #t@539 - #t1@540 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *x2@707, *senc(senc(tuple4(x1@705, [Na@706], pk(skA()), x2@707), hash([Ka@708], m@709)), hash([Ka@708], m@709)));
    @premise new(*[Na@706], An(), tuple2(x2@707, [Ka@708]));
    @premise new(*[Ka@708], Ak(), tuple2(x2@707, [Na@706]));
    @premise know(*hash([Ka@708], m@709), #t2@712);
    @premise know(*skA(), #t1@711);
    @premise know(*[Na@706], #t0@714);
    @premise know(*m@709, #t1@715);
    @premise know(*x2@707, #t2@716);
    @premise know(*x1@705, #t1@717);
    @conclusion know(*senc(tuple4(x1@705, [Na@706], pk(skA()), x2@707), hash([Ka@708], m@709)), #t@710);
    @constraint #t@710 - #t1@715 >= 0;
    @constraint #t@710 - #t2@716 >= 0;
    @constraint #t@710 - #t1@717 >= 0;
    @constraint #t@710 - #t0@714 >= 0;
    @constraint #t@710 - #t2@712 >= 0;
    @constraint #t@710 - #t1@711 >= 0;
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule in cache: 14
Rule staged: 72
Rule before check and clean: 
@rule{
    @premise know(*[Ka@1052], #t1@1055);
    @premise know(*m2@1053, #t2@1056);
    @premise init(*pk(skA()), *x2@1051, *senc(senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), hash([Ka@1052], m2@1053)));
    @premise new(*[Na@1050], An(), tuple2(x2@1051, [Ka@1052]));
    @premise new(*[Ka@1052], Ak(), tuple2(x2@1051, [Na@1050]));
    @premise know(*[Na@1050], #t0@1057);
    @premise know(*m2@1053, #t1@1058);
    @premise know(*x2@1051, #t2@1059);
    @premise know(*x1@1049, #t1@1060);
    @conclusion know(*senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), #t@1054);
    @constraint #t@86 - #t2@1056 >= 0;
    @constraint -#t1@1055 + #t@86 >= 0;
    @constraint #t@1054 - #t@86 >= 0;
    @constraint #t@1054 - #t1@1058 >= 0;
    @constraint #t@1054 - #t2@1059 >= 0;
    @constraint #t@1054 - #t1@1060 >= 0;
    @constraint #t@1054 - #t0@1057 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@1051, *senc(senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), hash([Ka@1052], m2@1053)));
    @premise new(*[Ka@1052], Ak(), tuple2(x2@1051, [Na@1050]));
    @premise new(*[Na@1050], An(), tuple2(x2@1051, [Ka@1052]));
    @premise know(*[Ka@1052], #t1@1055);
    @premise know(*[Na@1050], #t0@1057);
    @premise know(*m2@1053, #t2@1056);
    @premise know(*x2@1051, #t2@1059);
    @premise know(*x1@1049, #t1@1060);
    @conclusion know(*senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), #t@1054);
    @constraint #t@1054 - #t0@1057 >= 0;
    @constraint #t@1054 - #t2@1059 >= 0;
    @constraint #t@1054 - #t1@1060 >= 0;
    @constraint #t@1054 - #t2@1056 >= 0;
    @constraint #t@1054 - #t1@1055 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@755, *senc(senc(tuple4(x1@753, [Na@754], pk(skA()), x2@755), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))));
    @premise new(*[Ka@757], Ak(), tuple2(pk(skA()), [Na@761]));
    @premise new(*[Na@761], An(), tuple2(pk(skA()), [Ka@757]));
    @premise know(*tuple2(pk(skA()), [Ka@757]), #t2@760);
    @premise new(*[Na@754], An(), tuple2(x2@755, [Ka@756]));
    @premise new(*[Ka@756], Ak(), tuple2(x2@755, [Na@754]));
    @premise know(*pk(skA()), #t3@762);
    @premise know(*[Ka@756], #t1@759);
    @premise know(*[Na@754], #t0@763);
    @premise know(*x2@755, #t2@764);
    @premise know(*x1@753, #t1@765);
    @conclusion know(*senc(tuple4(x1@753, [Na@754], pk(skA()), x2@755), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))), #t@758);
    @constraint #t@758 - #t0@763 >= 0;
    @constraint #t@758 - #t3@762 >= 0;
    @constraint #t@758 - #t2@764 >= 0;
    @constraint #t@758 - #t1@765 >= 0;
    @constraint #t@758 - #t2@760 >= 0;
    @constraint #t@758 - #t1@759 >= 0;
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule in cache: 14
Rule staged: 73
Rule before check and clean: 
@rule{
    @premise know(*pk(skA()), #t0@1067);
    @premise know(*[Ka@1065], #t1@1068);
    @premise init(*pk(skA()), *x2@1063, *senc(senc(tuple4(x1@1061, [Na@1062], pk(skA()), x2@1063), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))));
    @premise new(*[Ka@1065], Ak(), tuple2(pk(skA()), [Na@1069]));
    @premise new(*[Na@1069], An(), tuple2(pk(skA()), [Ka@1065]));
    @premise new(*[Na@1062], An(), tuple2(x2@1063, [Ka@1064]));
    @premise new(*[Ka@1064], Ak(), tuple2(x2@1063, [Na@1062]));
    @premise know(*pk(skA()), #t3@1070);
    @premise know(*[Ka@1064], #t1@1071);
    @premise know(*[Na@1062], #t0@1072);
    @premise know(*x2@1063, #t2@1073);
    @premise know(*x1@1061, #t1@1074);
    @conclusion know(*senc(tuple4(x1@1061, [Na@1062], pk(skA()), x2@1063), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))), #t@1066);
    @constraint #t@15 - #t1@1068 >= 0;
    @constraint -#t0@1067 + #t@15 >= 0;
    @constraint #t@1066 - #t@15 >= 0;
    @constraint #t@1066 - #t1@1071 >= 0;
    @constraint #t@1066 - #t3@1070 >= 0;
    @constraint #t@1066 - #t2@1073 >= 0;
    @constraint #t@1066 - #t1@1074 >= 0;
    @constraint #t@1066 - #t0@1072 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@1063, *senc(senc(tuple4(x1@1061, [Na@1062], pk(skA()), x2@1063), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))));
    @premise new(*[Ka@1065], Ak(), tuple2(pk(skA()), [Na@1069]));
    @premise new(*[Na@1069], An(), tuple2(pk(skA()), [Ka@1065]));
    @premise new(*[Na@1062], An(), tuple2(x2@1063, [Ka@1064]));
    @premise new(*[Ka@1064], Ak(), tuple2(x2@1063, [Na@1062]));
    @premise know(*pk(skA()), #t0@1067);
    @premise know(*[Ka@1065], #t1@1068);
    @premise know(*[Ka@1064], #t1@1071);
    @premise know(*[Na@1062], #t0@1072);
    @premise know(*x2@1063, #t2@1073);
    @premise know(*x1@1061, #t1@1074);
    @conclusion know(*senc(tuple4(x1@1061, [Na@1062], pk(skA()), x2@1063), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))), #t@1066);
    @constraint #t@1066 - #t0@1072 >= 0;
    @constraint #t@1066 - #t1@1071 >= 0;
    @constraint #t@1066 - #t2@1073 >= 0;
    @constraint #t@1066 - #t1@1074 >= 0;
    @constraint #t@1066 - #t1@1068 >= 0;
    @constraint #t@1066 - #t0@1067 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@768, *senc(senc(tuple4(x1@766, [Na@767], pk(skA()), x2@768), hash([Ka@769], [Kb@770])), hash([Ka@769], [Kb@770])));
    @premise new(*[Nb@774], Bn(), tuple4(pk(skA()), [Ka@777], [Ka@775], Ni@776));
    @premise new(*[Kb@770], Bk(), tuple4(pk(skA()), [Nb@774], [Ka@775], Ni@776));
    @premise new(*[Na@778], An(), tuple2(pk(skB()), [Ka@775]));
    @premise new(*[Ka@775], Ak(), tuple2(pk(skB()), [Na@778]));
    @premise new(*[Na@767], An(), tuple2(x2@768, [Ka@769]));
    @premise new(*[Ka@769], Ak(), tuple2(x2@768, [Na@767]));
    @premise know(*pk(skA()), #t3@779);
    @premise know(*[Ka@769], #t1@772);
    @premise know(*[Kb@770], #t2@773);
    @premise know(*[Na@767], #t0@780);
    @premise know(*Ni@776, #t2@781);
    @premise know(*x2@768, #t2@782);
    @premise know(*x1@766, #t1@783);
    @conclusion know(*senc(tuple4(x1@766, [Na@767], pk(skA()), x2@768), hash([Ka@769], [Kb@770])), #t@771);
    @constraint #t@771 - #t0@780 >= 0;
    @constraint #t@771 - #t2@781 >= 0;
    @constraint #t@771 - #t3@779 >= 0;
    @constraint #t@771 - #t2@782 >= 0;
    @constraint #t@771 - #t1@783 >= 0;
    @constraint #t@771 - #t2@773 >= 0;
    @constraint #t@771 - #t1@772 >= 0;
};
Rule added at 7.

Compose by at 7 : 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule in cache: 14
Rule staged: 74
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1081);
    @premise init(*pk(skA()), *x2@1077, *senc(senc(tuple4(x1@1075, [Na@1076], pk(skA()), x2@1077), hash([Ka@1078], [Kb@1079])), hash([Ka@1078], [Kb@1079])));
    @premise new(*[Nb@1082], Bn(), tuple4(pk(skA()), [Ka@1083], [Ka@1084], Ni@1085));
    @premise new(*[Kb@1079], Bk(), tuple4(pk(skA()), [Nb@1082], [Ka@1084], Ni@1085));
    @premise new(*[Na@1086], An(), tuple2(pk(skB()), [Ka@1084]));
    @premise new(*[Ka@1084], Ak(), tuple2(pk(skB()), [Na@1086]));
    @premise new(*[Na@1076], An(), tuple2(x2@1077, [Ka@1078]));
    @premise new(*[Ka@1078], Ak(), tuple2(x2@1077, [Na@1076]));
    @premise know(*[Ka@1078], #t1@1087);
    @premise know(*[Kb@1079], #t2@1088);
    @premise know(*[Na@1076], #t0@1089);
    @premise know(*Ni@1085, #t2@1090);
    @premise know(*x2@1077, #t2@1091);
    @premise know(*x1@1075, #t1@1092);
    @conclusion know(*senc(tuple4(x1@1075, [Na@1076], pk(skA()), x2@1077), hash([Ka@1078], [Kb@1079])), #t@1080);
    @constraint -#t1@1081 + #t@90 >= 0;
    @constraint #t@1080 - #t@90 >= 0;
    @constraint #t@1080 - #t2@1088 >= 0;
    @constraint #t@1080 - #t1@1087 >= 0;
    @constraint #t@1080 - #t2@1090 >= 0;
    @constraint #t@1080 - #t2@1091 >= 0;
    @constraint #t@1080 - #t1@1092 >= 0;
    @constraint #t@1080 - #t0@1089 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@1077, *senc(senc(tuple4(x1@1075, [Na@1076], pk(skA()), x2@1077), hash([Ka@1078], [Kb@1079])), hash([Ka@1078], [Kb@1079])));
    @premise new(*[Kb@1079], Bk(), tuple4(pk(skA()), [Nb@1082], [Ka@1084], Ni@1085));
    @premise new(*[Nb@1082], Bn(), tuple4(pk(skA()), [Ka@1083], [Ka@1084], Ni@1085));
    @premise new(*[Ka@1084], Ak(), tuple2(pk(skB()), [Na@1086]));
    @premise new(*[Na@1086], An(), tuple2(pk(skB()), [Ka@1084]));
    @premise new(*[Ka@1078], Ak(), tuple2(x2@1077, [Na@1076]));
    @premise new(*[Na@1076], An(), tuple2(x2@1077, [Ka@1078]));
    @premise know(*skA(), #t1@1081);
    @premise know(*[Ka@1078], #t1@1087);
    @premise know(*[Kb@1079], #t2@1088);
    @premise know(*[Na@1076], #t0@1089);
    @premise know(*Ni@1085, #t2@1090);
    @premise know(*x2@1077, #t2@1091);
    @premise know(*x1@1075, #t1@1092);
    @conclusion know(*senc(tuple4(x1@1075, [Na@1076], pk(skA()), x2@1077), hash([Ka@1078], [Kb@1079])), #t@1080);
    @constraint #t@1080 - #t2@1088 >= 0;
    @constraint #t@1080 - #t1@1087 >= 0;
    @constraint #t@1080 - #t2@1090 >= 0;
    @constraint #t@1080 - #t2@1091 >= 0;
    @constraint #t@1080 - #t1@1092 >= 0;
    @constraint #t@1080 - #t0@1089 >= 0;
    @constraint #t@1080 - #t1@1081 >= 0;
};

Compose by at 7 : 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};
Rule in cache: 15
Rule staged: 74
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *x2@1095, *senc(senc(tuple4(x1@1093, [Na@1094], pk(skA()), x2@1095), hash([Ka@1096], [Kb@1097])), hash([Ka@1096], [Kb@1097])));
    @premise new(*[Nb@1099], Bn(), tuple4(pk(skA()), [Ka@1100], [Ka@1101], Ni@1102));
    @premise new(*[Kb@1097], Bk(), tuple4(pk(skA()), [Nb@1099], [Ka@1101], Ni@1102));
    @premise new(*[Na@1103], An(), tuple2(pk(skB()), [Ka@1101]));
    @premise new(*[Ka@1101], Ak(), tuple2(pk(skB()), [Na@1103]));
    @premise new(*[Na@1094], An(), tuple2(x2@1095, [Ka@1096]));
    @premise new(*[Ka@1096], Ak(), tuple2(x2@1095, [Na@1094]));
    @premise know(*[Ka@1096], #t1@1104);
    @premise know(*[Kb@1097], #t2@1105);
    @premise know(*[Na@1094], #t0@1106);
    @premise know(*Ni@1102, #t2@1107);
    @premise know(*x2@1095, #t2@1108);
    @premise know(*x1@1093, #t1@1109);
    @conclusion know(*senc(tuple4(x1@1093, [Na@1094], pk(skA()), x2@1095), hash([Ka@1096], [Kb@1097])), #t@1098);
    @constraint #t@1098 - #t0@1106 >= 0;
    @constraint #t@1098 - #t1@1109 >= 0;
    @constraint #t@1098 - #t2@1108 >= 0;
    @constraint #t@1098 - #t@125 >= 0;
    @constraint #t@1098 - #t2@1107 >= 0;
    @constraint #t@1098 - #t1@1104 >= 0;
    @constraint #t@1098 - #t2@1105 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@1095, *senc(senc(tuple4(x1@1093, [Na@1094], pk(skA()), x2@1095), hash([Ka@1096], [Kb@1097])), hash([Ka@1096], [Kb@1097])));
    @premise new(*[Nb@1099], Bn(), tuple4(pk(skA()), [Ka@1100], [Ka@1101], Ni@1102));
    @premise new(*[Kb@1097], Bk(), tuple4(pk(skA()), [Nb@1099], [Ka@1101], Ni@1102));
    @premise new(*[Na@1103], An(), tuple2(pk(skB()), [Ka@1101]));
    @premise new(*[Ka@1101], Ak(), tuple2(pk(skB()), [Na@1103]));
    @premise new(*[Na@1094], An(), tuple2(x2@1095, [Ka@1096]));
    @premise new(*[Ka@1096], Ak(), tuple2(x2@1095, [Na@1094]));
    @premise know(*[Ka@1096], #t1@1104);
    @premise know(*[Kb@1097], #t2@1105);
    @premise know(*[Na@1094], #t0@1106);
    @premise know(*Ni@1102, #t2@1107);
    @premise know(*x2@1095, #t2@1108);
    @premise know(*x1@1093, #t1@1109);
    @conclusion know(*senc(tuple4(x1@1093, [Na@1094], pk(skA()), x2@1095), hash([Ka@1096], [Kb@1097])), #t@1098);
    @constraint #t@1098 - #t2@1108 >= 0;
    @constraint #t@1098 - #t2@1105 >= 0;
    @constraint #t@1098 - #t1@1104 >= 0;
    @constraint #t@1098 - #t2@1107 >= 0;
    @constraint #t@1098 - #t1@1109 >= 0;
    @constraint #t@1098 - #t0@1106 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Nb@784], Bn(), tuple4(pk(skA()), [Ka@789], Ki@786, x1@785));
    @premise new(*[Kb@787], Bk(), tuple4(pk(skA()), [Nb@784], Ki@786, x1@785));
    @premise know(*hash(Kr@790, [Kb@787]), #t2@791);
    @premise know(*skB(), #t1@788);
    @premise know(*skA(), #t1@792);
    @premise know(*[Nb@784], #t0@793);
    @premise know(*x1@785, #t1@794);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@784], x1@785, pk(skA()), pk(skB())), hash(Ki@786, [Kb@787])), hash(Ki@786, [Kb@787])));
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule in cache: 15
Rule staged: 75
Rule before check and clean: 
@rule{
    @premise know(*m1@1114, #t1@1115);
    @premise know(*[Kb@1113], #t2@1116);
    @premise new(*[Nb@1110], Bn(), tuple4(pk(skA()), [Ka@1117], Ki@1112, x1@1111));
    @premise new(*[Kb@1113], Bk(), tuple4(pk(skA()), [Nb@1110], Ki@1112, x1@1111));
    @premise know(*skB(), #t1@1118);
    @premise know(*skA(), #t1@1119);
    @premise know(*[Nb@1110], #t0@1120);
    @premise know(*x1@1111, #t1@1121);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1110], x1@1111, pk(skA()), pk(skB())), hash(Ki@1112, [Kb@1113])), hash(Ki@1112, [Kb@1113])));
    @constraint #t@86 - #t2@1116 >= 0;
    @constraint -#t1@1115 + #t@86 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1110], Bn(), tuple4(pk(skA()), [Ka@1117], Ki@1112, x1@1111));
    @premise new(*[Kb@1113], Bk(), tuple4(pk(skA()), [Nb@1110], Ki@1112, x1@1111));
    @premise know(*skB(), #t1@1118);
    @premise know(*skA(), #t1@1119);
    @premise know(*[Kb@1113], #t2@1116);
    @premise know(*[Nb@1110], #t0@1120);
    @premise know(*x1@1111, #t1@1121);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1110], x1@1111, pk(skA()), pk(skB())), hash(Ki@1112, [Kb@1113])), hash(Ki@1112, [Kb@1113])));
};

Stage rule: 
@rule{
    @premise new(*[Nb@795], Bn(), tuple4(pk(skA()), [Ka@799], Ki@797, x1@796));
    @premise new(*[Kb@798], Bk(), tuple4(pk(skA()), [Nb@795], Ki@797, x1@796));
    @premise know(*hash(Kr@800, [Kb@798]), #t2@801);
    @premise know(*skA(), #t1@802);
    @premise know(*[Nb@795], #t0@803);
    @premise know(*x1@796, #t1@804);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@795], x1@796, pk(skA()), pk(skB())), hash(Ki@797, [Kb@798])), hash(Ki@797, [Kb@798])));
};
Rule deleted: 
@rule{
    @premise new(*[Nb@784], Bn(), tuple4(pk(skA()), [Ka@789], Ki@786, x1@785));
    @premise new(*[Kb@787], Bk(), tuple4(pk(skA()), [Nb@784], Ki@786, x1@785));
    @premise know(*hash(Kr@790, [Kb@787]), #t2@791);
    @premise know(*skB(), #t1@788);
    @premise know(*skA(), #t1@792);
    @premise know(*[Nb@784], #t0@793);
    @premise know(*x1@785, #t1@794);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@784], x1@785, pk(skA()), pk(skB())), hash(Ki@786, [Kb@787])), hash(Ki@786, [Kb@787])));
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule in cache: 15
Rule staged: 76
Rule before check and clean: 
@rule{
    @premise know(*m1@1126, #t1@1127);
    @premise know(*[Kb@1125], #t2@1128);
    @premise new(*[Nb@1122], Bn(), tuple4(pk(skA()), [Ka@1129], Ki@1124, x1@1123));
    @premise new(*[Kb@1125], Bk(), tuple4(pk(skA()), [Nb@1122], Ki@1124, x1@1123));
    @premise know(*skA(), #t1@1130);
    @premise know(*[Nb@1122], #t0@1131);
    @premise know(*x1@1123, #t1@1132);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1122], x1@1123, pk(skA()), pk(skB())), hash(Ki@1124, [Kb@1125])), hash(Ki@1124, [Kb@1125])));
    @constraint #t@86 - #t2@1128 >= 0;
    @constraint -#t1@1127 + #t@86 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1122], Bn(), tuple4(pk(skA()), [Ka@1129], Ki@1124, x1@1123));
    @premise new(*[Kb@1125], Bk(), tuple4(pk(skA()), [Nb@1122], Ki@1124, x1@1123));
    @premise know(*skA(), #t1@1130);
    @premise know(*[Kb@1125], #t2@1128);
    @premise know(*[Nb@1122], #t0@1131);
    @premise know(*x1@1123, #t1@1132);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1122], x1@1123, pk(skA()), pk(skB())), hash(Ki@1124, [Kb@1125])), hash(Ki@1124, [Kb@1125])));
};

Stage rule: 
@rule{
    @premise new(*[Nb@805], Bn(), tuple4(pk(skA()), [Ka@810], Ki@807, x1@806));
    @premise new(*[Kb@808], Bk(), tuple4(pk(skA()), [Nb@805], Ki@807, x1@806));
    @premise know(*hash(Kr@811, [Kb@808]), #t2@812);
    @premise know(*skB(), #t1@809);
    @premise know(*[Nb@805], #t0@813);
    @premise know(*x1@806, #t1@814);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@805], x1@806, pk(skA()), pk(skB())), hash(Ki@807, [Kb@808])), hash(Ki@807, [Kb@808])));
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule in cache: 15
Rule staged: 77
Rule before check and clean: 
@rule{
    @premise know(*m1@1137, #t1@1138);
    @premise know(*[Kb@1136], #t2@1139);
    @premise new(*[Nb@1133], Bn(), tuple4(pk(skA()), [Ka@1140], Ki@1135, x1@1134));
    @premise new(*[Kb@1136], Bk(), tuple4(pk(skA()), [Nb@1133], Ki@1135, x1@1134));
    @premise know(*skB(), #t1@1141);
    @premise know(*[Nb@1133], #t0@1142);
    @premise know(*x1@1134, #t1@1143);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1133], x1@1134, pk(skA()), pk(skB())), hash(Ki@1135, [Kb@1136])), hash(Ki@1135, [Kb@1136])));
    @constraint #t@86 - #t2@1139 >= 0;
    @constraint -#t1@1138 + #t@86 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1133], Bn(), tuple4(pk(skA()), [Ka@1140], Ki@1135, x1@1134));
    @premise new(*[Kb@1136], Bk(), tuple4(pk(skA()), [Nb@1133], Ki@1135, x1@1134));
    @premise know(*skB(), #t1@1141);
    @premise know(*[Kb@1136], #t2@1139);
    @premise know(*[Nb@1133], #t0@1142);
    @premise know(*x1@1134, #t1@1143);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1133], x1@1134, pk(skA()), pk(skB())), hash(Ki@1135, [Kb@1136])), hash(Ki@1135, [Kb@1136])));
};

Stage rule: 
@rule{
    @premise new(*[Nb@815], Bn(), tuple4(pk(skA()), [Ka@819], Ki@817, x1@816));
    @premise new(*[Kb@818], Bk(), tuple4(pk(skA()), [Nb@815], Ki@817, x1@816));
    @premise know(*hash(Kr@820, [Kb@818]), #t2@821);
    @premise know(*[Nb@815], #t0@822);
    @premise know(*x1@816, #t1@823);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@815], x1@816, pk(skA()), pk(skB())), hash(Ki@817, [Kb@818])), hash(Ki@817, [Kb@818])));
};
Rule deleted: 
@rule{
    @premise new(*[Nb@586], Bn(), tuple4(pk(skA()), [Ka@590], Ki@588, x1@587));
    @premise new(*[Kb@589], Bk(), tuple4(pk(skA()), [Nb@586], Ki@588, x1@587));
    @premise know(*pk(skB()), #t3@591);
    @premise know(*hash(Kr@592, [Kb@589]), #t2@593);
    @premise know(*[Nb@586], #t0@594);
    @premise know(*x1@587, #t1@595);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@586], x1@587, pk(skA()), pk(skB())), hash(Ki@588, [Kb@589])), hash(Ki@588, [Kb@589])));
};
Rule deleted: 
@rule{
    @premise new(*[Nb@795], Bn(), tuple4(pk(skA()), [Ka@799], Ki@797, x1@796));
    @premise new(*[Kb@798], Bk(), tuple4(pk(skA()), [Nb@795], Ki@797, x1@796));
    @premise know(*hash(Kr@800, [Kb@798]), #t2@801);
    @premise know(*skA(), #t1@802);
    @premise know(*[Nb@795], #t0@803);
    @premise know(*x1@796, #t1@804);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@795], x1@796, pk(skA()), pk(skB())), hash(Ki@797, [Kb@798])), hash(Ki@797, [Kb@798])));
};
Rule deleted: 
@rule{
    @premise new(*[Nb@805], Bn(), tuple4(pk(skA()), [Ka@810], Ki@807, x1@806));
    @premise new(*[Kb@808], Bk(), tuple4(pk(skA()), [Nb@805], Ki@807, x1@806));
    @premise know(*hash(Kr@811, [Kb@808]), #t2@812);
    @premise know(*skB(), #t1@809);
    @premise know(*[Nb@805], #t0@813);
    @premise know(*x1@806, #t1@814);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@805], x1@806, pk(skA()), pk(skB())), hash(Ki@807, [Kb@808])), hash(Ki@807, [Kb@808])));
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule in cache: 15
Rule staged: 78
Rule before check and clean: 
@rule{
    @premise know(*m1@1148, #t1@1149);
    @premise know(*[Kb@1147], #t2@1150);
    @premise new(*[Nb@1144], Bn(), tuple4(pk(skA()), [Ka@1151], Ki@1146, x1@1145));
    @premise new(*[Kb@1147], Bk(), tuple4(pk(skA()), [Nb@1144], Ki@1146, x1@1145));
    @premise know(*[Nb@1144], #t0@1152);
    @premise know(*x1@1145, #t1@1153);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1144], x1@1145, pk(skA()), pk(skB())), hash(Ki@1146, [Kb@1147])), hash(Ki@1146, [Kb@1147])));
    @constraint #t@86 - #t2@1150 >= 0;
    @constraint -#t1@1149 + #t@86 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1144], Bn(), tuple4(pk(skA()), [Ka@1151], Ki@1146, x1@1145));
    @premise new(*[Kb@1147], Bk(), tuple4(pk(skA()), [Nb@1144], Ki@1146, x1@1145));
    @premise know(*[Kb@1147], #t2@1150);
    @premise know(*[Nb@1144], #t0@1152);
    @premise know(*x1@1145, #t1@1153);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1144], x1@1145, pk(skA()), pk(skB())), hash(Ki@1146, [Kb@1147])), hash(Ki@1146, [Kb@1147])));
};

Stage rule: 
@rule{
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*sk@826, #t1@827);
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @conclusion know(*[Kb@824], #t@825);
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
    @constraint #t@825 - #t1@827 >= 0;
};
Rule deleted: 
@rule{
    @premise new(*[Kb@596], Bk(), tuple4(pk(sk@598), [Nb@599], x1@600, Ni@601));
    @premise new(*[Nb@599], Bn(), tuple4(pk(sk@598), [Ka@602], x1@600, Ni@601));
    @premise know(*pk(sk@598), #t0@603);
    @premise know(*x1@600, #t1@604);
    @premise know(*Ni@601, #t2@605);
    @premise know(*sk@598, #t1@606);
    @conclusion know(*[Kb@596], #t@597);
    @constraint -#t1@606 + #t@597 >= 0;
    @constraint #t@597 - #t1@604 >= 0;
    @constraint #t@597 - #t0@603 >= 0;
    @constraint #t@597 - #t2@605 >= 0;
};
Rule added.

Compose to at 4 : 
@rule{
    @premise new(*[Nb@648], Bn(), tuple4(pk(skA()), [Ka@654], [Ka@650], Ni@647));
    @premise new(*[Kb@652], Bk(), tuple4(pk(skA()), [Nb@648], [Ka@650], Ni@647));
    @premise new(*[Na@655], An(), tuple2(pk(skB()), [Ka@650]));
    @premise new(*[Ka@650], Ak(), tuple2(pk(skB()), [Na@655]));
    @premise know(*[Ka@650], #t1@651);
    @premise know(*[Kb@652], #t2@653);
    @premise know(*Ni@647, #t2@656);
    @conclusion know(*tuple4(Ni@647, [Nb@648], pk(skB()), pk(skA())), #t@649);
    @constraint #t@649 - #t2@656 >= 0;
    @constraint #t@649 - #t2@653 >= 0;
    @constraint #t@649 - #t1@651 >= 0;
};
Rule in cache: 15
Rule staged: 79
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1157], Bk(), tuple4(pk(sk@1158), [Nb@1159], x1@1160, Ni@1161));
    @premise new(*[Nb@1159], Bn(), tuple4(pk(sk@1158), [Ka@1162], x1@1160, Ni@1161));
    @premise know(*sk@1158, #t1@1163);
    @premise know(*x1@1160, #t1@1164);
    @premise know(*Ni@1161, #t2@1165);
    @premise new(*[Nb@1155], Bn(), tuple4(pk(skA()), [Ka@1166], [Kb@1157], Ni@1154));
    @premise new(*[Kb@1167], Bk(), tuple4(pk(skA()), [Nb@1155], [Kb@1157], Ni@1154));
    @premise new(*[Na@1168], An(), tuple2(pk(skB()), [Kb@1157]));
    @premise new(*[Kb@1157], Ak(), tuple2(pk(skB()), [Na@1168]));
    @premise know(*[Kb@1167], #t2@1169);
    @premise know(*Ni@1154, #t2@1170);
    @conclusion know(*tuple4(Ni@1154, [Nb@1155], pk(skB()), pk(skA())), #t@1156);
    @constraint #t@825 - #t1@1163 >= 0;
    @constraint #t@825 - #t1@1164 >= 0;
    @constraint #t@825 - #t2@1165 >= 0;
    @constraint #t@1156 - #t@825 >= 0;
    @constraint #t@1156 - #t2@1169 >= 0;
    @constraint #t@1156 - #t2@1170 >= 0;
};
Rule invalid. 

Compose to at 5 : 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@681], [Na@685], pk(skA()), pk(skB())), hash([Ka@682], [Kb@679])), hash([Ka@682], [Kb@679])));
    @premise new(*[Kb@679], Bk(), tuple4(pk(skA()), [Nb@681], [Ka@682], [Na@685]));
    @premise new(*[Nb@681], Bn(), tuple4(pk(skA()), [Ka@684], [Ka@682], [Na@685]));
    @premise new(*[Na@685], An(), tuple2(pk(skB()), [Ka@682]));
    @premise new(*[Ka@682], Ak(), tuple2(pk(skB()), [Na@685]));
    @premise know(*[Na@685], #t2@686);
    @premise know(*[Nb@681], #t2@689);
    @conclusion know(*senc(tuple4([Nb@681], [Na@685], pk(skA()), pk(skB())), hash([Ka@682], [Kb@679])), #t@680);
    @constraint #t@680 - #t2@686 >= 0;
    @constraint #t@680 - #t2@689 >= 0;
};
Rule in cache: 15
Rule staged: 79
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1172], Bk(), tuple4(pk(sk@1176), [Nb@1177], x1@1178, Ni@1179));
    @premise new(*[Nb@1177], Bn(), tuple4(pk(sk@1176), [Ka@1180], x1@1178, Ni@1179));
    @premise know(*sk@1176, #t1@1181);
    @premise know(*x1@1178, #t1@1182);
    @premise know(*Ni@1179, #t2@1183);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1171], [Kb@1172], pk(skA()), pk(skB())), hash([Ka@1173], [Kb@1174])), hash([Ka@1173], [Kb@1174])));
    @premise new(*[Kb@1174], Bk(), tuple4(pk(skA()), [Nb@1171], [Ka@1173], [Kb@1172]));
    @premise new(*[Nb@1171], Bn(), tuple4(pk(skA()), [Ka@1184], [Ka@1173], [Kb@1172]));
    @premise new(*[Kb@1172], An(), tuple2(pk(skB()), [Ka@1173]));
    @premise new(*[Ka@1173], Ak(), tuple2(pk(skB()), [Kb@1172]));
    @premise know(*[Nb@1171], #t2@1185);
    @conclusion know(*senc(tuple4([Nb@1171], [Kb@1172], pk(skA()), pk(skB())), hash([Ka@1173], [Kb@1174])), #t@1175);
    @constraint #t@825 - #t1@1181 >= 0;
    @constraint #t@825 - #t1@1182 >= 0;
    @constraint #t@825 - #t2@1183 >= 0;
    @constraint #t@1175 - #t@825 >= 0;
    @constraint #t@1175 - #t2@1185 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise new(*[Kb@835], Bk(), tuple4(pk(skA()), [Nb@837], x1@838, Ni@839));
    @premise new(*[Nb@837], Bn(), tuple4(pk(skA()), [Ka@840], x1@838, Ni@839));
    @premise know(*skA(), #t1@843);
    @premise know(*x1@838, #t1@841);
    @premise know(*Ni@839, #t2@842);
    @conclusion know(*[Kb@835], #t@836);
    @constraint #t@836 - #t2@842 >= 0;
    @constraint #t@836 - #t1@841 >= 0;
    @constraint -#t1@843 + #t@836 >= 0;
};
Rule implied by: 
@rule{
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*sk@826, #t1@827);
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @conclusion know(*[Kb@824], #t@825);
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
    @constraint #t@825 - #t1@827 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Kb@844], Bk(), tuple4(pk(skB()), [Nb@846], x1@847, Ni@848));
    @premise new(*[Nb@846], Bn(), tuple4(pk(skB()), [Ka@849], x1@847, Ni@848));
    @premise know(*skB(), #t1@852);
    @premise know(*x1@847, #t1@850);
    @premise know(*Ni@848, #t2@851);
    @conclusion know(*[Kb@844], #t@845);
    @constraint #t@845 - #t2@851 >= 0;
    @constraint #t@845 - #t1@850 >= 0;
    @constraint -#t1@852 + #t@845 >= 0;
};
Rule implied by: 
@rule{
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*sk@826, #t1@827);
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @conclusion know(*[Kb@824], #t@825);
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
    @constraint #t@825 - #t1@827 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@855, *senc(senc(tuple4(x1@853, [Na@854], pk(skA()), x2@855), hash([Ka@856], [Kb@857])), hash([Ka@856], [Kb@857])));
    @premise new(*[Kb@857], Bk(), tuple4(pk(skA()), [Nb@861], x1@862, Ni@863));
    @premise new(*[Nb@861], Bn(), tuple4(pk(skA()), [Ka@864], x1@862, Ni@863));
    @premise new(*[Ka@856], Ak(), tuple2(x2@855, [Na@854]));
    @premise new(*[Na@854], An(), tuple2(x2@855, [Ka@856]));
    @premise know(*pk(skA()), #t0@865);
    @premise know(*[Ka@856], #t1@859);
    @premise know(*[Kb@857], #t2@860);
    @premise know(*[Na@854], #t0@866);
    @premise know(*Ni@863, #t2@867);
    @premise know(*x1@862, #t1@868);
    @premise know(*x2@855, #t2@869);
    @premise know(*x1@853, #t1@870);
    @conclusion know(*senc(tuple4(x1@853, [Na@854], pk(skA()), x2@855), hash([Ka@856], [Kb@857])), #t@858);
    @constraint #t@858 - #t0@866 >= 0;
    @constraint #t@858 - #t1@868 >= 0;
    @constraint #t@858 - #t0@865 >= 0;
    @constraint #t@858 - #t2@867 >= 0;
    @constraint #t@858 - #t2@869 >= 0;
    @constraint #t@858 - #t1@870 >= 0;
    @constraint #t@858 - #t2@860 >= 0;
    @constraint #t@858 - #t1@859 >= 0;
};
Rule added at 5.

Compose by at 5 : 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule in cache: 12
Rule staged: 80
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1192);
    @premise init(*pk(skA()), *x2@1188, *senc(senc(tuple4(x1@1186, [Na@1187], pk(skA()), x2@1188), hash([Ka@1189], [Kb@1190])), hash([Ka@1189], [Kb@1190])));
    @premise new(*[Kb@1190], Bk(), tuple4(pk(skA()), [Nb@1193], x1@1194, Ni@1195));
    @premise new(*[Nb@1193], Bn(), tuple4(pk(skA()), [Ka@1196], x1@1194, Ni@1195));
    @premise new(*[Ka@1189], Ak(), tuple2(x2@1188, [Na@1187]));
    @premise new(*[Na@1187], An(), tuple2(x2@1188, [Ka@1189]));
    @premise know(*[Ka@1189], #t1@1197);
    @premise know(*[Kb@1190], #t2@1198);
    @premise know(*[Na@1187], #t0@1199);
    @premise know(*Ni@1195, #t2@1200);
    @premise know(*x1@1194, #t1@1201);
    @premise know(*x2@1188, #t2@1202);
    @premise know(*x1@1186, #t1@1203);
    @conclusion know(*senc(tuple4(x1@1186, [Na@1187], pk(skA()), x2@1188), hash([Ka@1189], [Kb@1190])), #t@1191);
    @constraint -#t1@1192 + #t@90 >= 0;
    @constraint #t@1191 - #t@90 >= 0;
    @constraint #t@1191 - #t2@1198 >= 0;
    @constraint #t@1191 - #t1@1197 >= 0;
    @constraint #t@1191 - #t1@1201 >= 0;
    @constraint #t@1191 - #t2@1200 >= 0;
    @constraint #t@1191 - #t2@1202 >= 0;
    @constraint #t@1191 - #t1@1203 >= 0;
    @constraint #t@1191 - #t0@1199 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@1188, *senc(senc(tuple4(x1@1186, [Na@1187], pk(skA()), x2@1188), hash([Ka@1189], [Kb@1190])), hash([Ka@1189], [Kb@1190])));
    @premise new(*[Kb@1190], Bk(), tuple4(pk(skA()), [Nb@1193], x1@1194, Ni@1195));
    @premise new(*[Nb@1193], Bn(), tuple4(pk(skA()), [Ka@1196], x1@1194, Ni@1195));
    @premise new(*[Ka@1189], Ak(), tuple2(x2@1188, [Na@1187]));
    @premise new(*[Na@1187], An(), tuple2(x2@1188, [Ka@1189]));
    @premise know(*skA(), #t1@1192);
    @premise know(*[Ka@1189], #t1@1197);
    @premise know(*[Kb@1190], #t2@1198);
    @premise know(*[Na@1187], #t0@1199);
    @premise know(*Ni@1195, #t2@1200);
    @premise know(*x1@1194, #t1@1201);
    @premise know(*x2@1188, #t2@1202);
    @premise know(*x1@1186, #t1@1203);
    @conclusion know(*senc(tuple4(x1@1186, [Na@1187], pk(skA()), x2@1188), hash([Ka@1189], [Kb@1190])), #t@1191);
    @constraint #t@1191 - #t2@1198 >= 0;
    @constraint #t@1191 - #t1@1197 >= 0;
    @constraint #t@1191 - #t1@1201 >= 0;
    @constraint #t@1191 - #t2@1200 >= 0;
    @constraint #t@1191 - #t2@1202 >= 0;
    @constraint #t@1191 - #t1@1203 >= 0;
    @constraint #t@1191 - #t0@1199 >= 0;
    @constraint #t@1191 - #t1@1192 >= 0;
};

Compose by at 5 : 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};
Rule in cache: 13
Rule staged: 80
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *x2@1206, *senc(senc(tuple4(x1@1204, [Na@1205], pk(skA()), x2@1206), hash([Ka@1207], [Kb@1208])), hash([Ka@1207], [Kb@1208])));
    @premise new(*[Kb@1208], Bk(), tuple4(pk(skA()), [Nb@1210], x1@1211, Ni@1212));
    @premise new(*[Nb@1210], Bn(), tuple4(pk(skA()), [Ka@1213], x1@1211, Ni@1212));
    @premise new(*[Ka@1207], Ak(), tuple2(x2@1206, [Na@1205]));
    @premise new(*[Na@1205], An(), tuple2(x2@1206, [Ka@1207]));
    @premise know(*[Ka@1207], #t1@1214);
    @premise know(*[Kb@1208], #t2@1215);
    @premise know(*[Na@1205], #t0@1216);
    @premise know(*Ni@1212, #t2@1217);
    @premise know(*x1@1211, #t1@1218);
    @premise know(*x2@1206, #t2@1219);
    @premise know(*x1@1204, #t1@1220);
    @conclusion know(*senc(tuple4(x1@1204, [Na@1205], pk(skA()), x2@1206), hash([Ka@1207], [Kb@1208])), #t@1209);
    @constraint #t@1209 - #t0@1216 >= 0;
    @constraint #t@1209 - #t1@1220 >= 0;
    @constraint #t@1209 - #t2@1219 >= 0;
    @constraint #t@1209 - #t2@1217 >= 0;
    @constraint #t@1209 - #t@125 >= 0;
    @constraint #t@1209 - #t1@1218 >= 0;
    @constraint #t@1209 - #t1@1214 >= 0;
    @constraint #t@1209 - #t2@1215 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@1206, *senc(senc(tuple4(x1@1204, [Na@1205], pk(skA()), x2@1206), hash([Ka@1207], [Kb@1208])), hash([Ka@1207], [Kb@1208])));
    @premise new(*[Kb@1208], Bk(), tuple4(pk(skA()), [Nb@1210], x1@1211, Ni@1212));
    @premise new(*[Nb@1210], Bn(), tuple4(pk(skA()), [Ka@1213], x1@1211, Ni@1212));
    @premise new(*[Ka@1207], Ak(), tuple2(x2@1206, [Na@1205]));
    @premise new(*[Na@1205], An(), tuple2(x2@1206, [Ka@1207]));
    @premise know(*[Ka@1207], #t1@1214);
    @premise know(*[Kb@1208], #t2@1215);
    @premise know(*[Na@1205], #t0@1216);
    @premise know(*Ni@1212, #t2@1217);
    @premise know(*x1@1211, #t1@1218);
    @premise know(*x2@1206, #t2@1219);
    @premise know(*x1@1204, #t1@1220);
    @conclusion know(*senc(tuple4(x1@1204, [Na@1205], pk(skA()), x2@1206), hash([Ka@1207], [Kb@1208])), #t@1209);
    @constraint #t@1209 - #t2@1217 >= 0;
    @constraint #t@1209 - #t2@1215 >= 0;
    @constraint #t@1209 - #t1@1214 >= 0;
    @constraint #t@1209 - #t1@1218 >= 0;
    @constraint #t@1209 - #t2@1219 >= 0;
    @constraint #t@1209 - #t1@1220 >= 0;
    @constraint #t@1209 - #t0@1216 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Kb@877], Bk(), tuple4(x0@873, [Nb@872], m1@875, Ni@871));
    @premise new(*[Nb@872], Bn(), tuple4(x0@873, [Ka@879], m1@875, Ni@871));
    @premise know(*[Kb@877], #t2@878);
    @premise know(*m1@875, #t1@876);
    @premise know(*x0@873, #t0@880);
    @premise know(*Ni@871, #t2@882);
    @conclusion know(*tuple4(Ni@871, [Nb@872], pk(skB()), x0@873), #t@874);
    @constraint #t@874 - #t2@882 >= 0;
    @constraint #t@874 - #t0@880 >= 0;
    @constraint #t@874 - #t2@878 >= 0;
    @constraint #t@874 - #t1@876 >= 0;
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};
Rule in cache: 13
Rule staged: 81
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1225], Ak(), tuple2(pkR@1226, [Na@1227]));
    @premise new(*[Na@1227], An(), tuple2(pkR@1226, [Ka@1225]));
    @premise new(*[Na@1227], Bk(), tuple4(x0@1223, [Nb@1222], m1@1228, Ni@1221));
    @premise new(*[Nb@1222], Bn(), tuple4(x0@1223, [Ka@1229], m1@1228, Ni@1221));
    @premise know(*m1@1228, #t1@1230);
    @premise know(*x0@1223, #t0@1231);
    @premise know(*Ni@1221, #t2@1232);
    @conclusion know(*tuple4(Ni@1221, [Nb@1222], pk(skB()), x0@1223), #t@1224);
    @constraint #t@1224 - #t1@275 >= 0;
    @constraint #t@1224 - #t1@1230 >= 0;
    @constraint #t@1224 - #t0@1231 >= 0;
    @constraint #t@1224 - #t2@1232 >= 0;
};
Rule invalid. 

Compose by at 2 : 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};
Rule in cache: 13
Rule staged: 81
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1237], Bk(), tuple4(pk(skA()), [Nb@1238], [Ka@1239], Ni@1240));
    @premise new(*[Nb@1238], Bn(), tuple4(pk(skA()), [Ka@1241], [Ka@1239], Ni@1240));
    @premise new(*[Ka@1239], Ak(), tuple2(pk(skB()), [Na@1242]));
    @premise new(*[Na@1242], An(), tuple2(pk(skB()), [Ka@1239]));
    @premise know(*Ni@1240, #t2@1243);
    @premise new(*[Nb@1238], Bk(), tuple4(x0@1235, [Nb@1234], m1@1244, Ni@1233));
    @premise new(*[Nb@1234], Bn(), tuple4(x0@1235, [Ka@1245], m1@1244, Ni@1233));
    @premise know(*m1@1244, #t1@1246);
    @premise know(*x0@1235, #t0@1247);
    @premise know(*Ni@1233, #t2@1248);
    @conclusion know(*tuple4(Ni@1233, [Nb@1234], pk(skB()), x0@1235), #t@1236);
    @constraint #t@381 - #t2@1243 >= 0;
    @constraint #t@1236 - #t@381 >= 0;
    @constraint #t@1236 - #t1@1246 >= 0;
    @constraint #t@1236 - #t0@1247 >= 0;
    @constraint #t@1236 - #t2@1248 >= 0;
};
Rule invalid. 

Compose by at 2 : 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};
Rule in cache: 13
Rule staged: 81
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1253], Bk(), tuple4(x0@1254, [Nb@1255], x1@1256, Ni@1257));
    @premise new(*[Nb@1255], Bn(), tuple4(x0@1254, [Ka@1258], x1@1256, Ni@1257));
    @premise know(*x0@1254, #t0@1259);
    @premise know(*x1@1256, #t1@1260);
    @premise know(*Ni@1257, #t2@1261);
    @premise new(*[Nb@1255], Bk(), tuple4(x0@1251, [Nb@1250], m1@1262, Ni@1249));
    @premise new(*[Nb@1250], Bn(), tuple4(x0@1251, [Ka@1263], m1@1262, Ni@1249));
    @premise know(*m1@1262, #t1@1264);
    @premise know(*x0@1251, #t0@1265);
    @premise know(*Ni@1249, #t2@1266);
    @conclusion know(*tuple4(Ni@1249, [Nb@1250], pk(skB()), x0@1251), #t@1252);
    @constraint #t@464 - #t1@1260 >= 0;
    @constraint #t@464 - #t0@1259 >= 0;
    @constraint #t@464 - #t2@1261 >= 0;
    @constraint #t@1252 - #t@464 >= 0;
    @constraint #t@1252 - #t1@1264 >= 0;
    @constraint #t@1252 - #t0@1265 >= 0;
    @constraint #t@1252 - #t2@1266 >= 0;
};
Rule invalid. 

Compose by at 2 : 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};
Rule in cache: 13
Rule staged: 81
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1271], Ak(), tuple2(pk(sk@1272), [Na@1273]));
    @premise new(*[Na@1273], An(), tuple2(pk(sk@1272), [Ka@1271]));
    @premise know(*sk@1272, #t1@1274);
    @premise new(*[Ka@1271], Bk(), tuple4(x0@1269, [Nb@1268], m1@1275, Ni@1267));
    @premise new(*[Nb@1268], Bn(), tuple4(x0@1269, [Ka@1276], m1@1275, Ni@1267));
    @premise know(*m1@1275, #t1@1277);
    @premise know(*x0@1269, #t0@1278);
    @premise know(*Ni@1267, #t2@1279);
    @conclusion know(*tuple4(Ni@1267, [Nb@1268], pk(skB()), x0@1269), #t@1270);
    @constraint #t1@489 - #t1@1274 >= 0;
    @constraint #t@1270 - #t1@489 >= 0;
    @constraint #t@1270 - #t1@1277 >= 0;
    @constraint #t@1270 - #t0@1278 >= 0;
    @constraint #t@1270 - #t2@1279 >= 0;
};
Rule invalid. 

Compose by at 2 : 
@rule{
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*sk@826, #t1@827);
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @conclusion know(*[Kb@824], #t@825);
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
    @constraint #t@825 - #t1@827 >= 0;
};
Rule in cache: 13
Rule staged: 81
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1284], Bk(), tuple4(pk(sk@1285), [Nb@1286], x1@1287, Ni@1288));
    @premise new(*[Nb@1286], Bn(), tuple4(pk(sk@1285), [Ka@1289], x1@1287, Ni@1288));
    @premise know(*sk@1285, #t1@1290);
    @premise know(*x1@1287, #t1@1291);
    @premise know(*Ni@1288, #t2@1292);
    @premise new(*[Kb@1284], Bk(), tuple4(x0@1282, [Nb@1281], m1@1293, Ni@1280));
    @premise new(*[Nb@1281], Bn(), tuple4(x0@1282, [Ka@1294], m1@1293, Ni@1280));
    @premise know(*m1@1293, #t1@1295);
    @premise know(*x0@1282, #t0@1296);
    @premise know(*Ni@1280, #t2@1297);
    @conclusion know(*tuple4(Ni@1280, [Nb@1281], pk(skB()), x0@1282), #t@1283);
    @constraint #t@825 - #t1@1290 >= 0;
    @constraint #t@825 - #t1@1291 >= 0;
    @constraint #t@825 - #t2@1292 >= 0;
    @constraint #t@1283 - #t@825 >= 0;
    @constraint #t@1283 - #t1@1295 >= 0;
    @constraint #t@1283 - #t0@1296 >= 0;
    @constraint #t@1283 - #t2@1297 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@1284], Bk(), tuple4(pk(sk@1285), [Nb@1286], x1@1287, Ni@1288));
    @premise new(*[Nb@1286], Bn(), tuple4(pk(sk@1285), [Ka@1289], x1@1287, Ni@1288));
    @premise know(*pk(sk@1285), #t0@1296);
    @premise know(*sk@1285, #t1@1290);
    @premise know(*x1@1287, #t1@1291);
    @premise know(*Ni@1288, #t2@1292);
    @conclusion know(*tuple4(Ni@1288, [Nb@1286], pk(skB()), pk(sk@1285)), #t@1283);
    @constraint #t@1283 - #t0@1296 >= 0;
    @constraint #t@1283 - #t1@1290 >= 0;
    @constraint #t@1283 - #t1@1291 >= 0;
    @constraint #t@1283 - #t2@1292 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Nb@927], Bn(), tuple4(pk(skA()), [Ka@933], [Ka@929], Ni@926));
    @premise new(*[Kb@934], Bk(), tuple4(pk(skA()), [Nb@927], [Ka@929], Ni@926));
    @premise new(*[Ka@929], Ak(), tuple2(pk(skB()), [Na@931]));
    @premise new(*[Na@931], An(), tuple2(pk(skB()), [Ka@929]));
    @premise know(*skB(), #t1@932);
    @premise know(*[Kb@934], #t2@936);
    @premise know(*Ni@926, #t2@937);
    @conclusion know(*tuple4(Ni@926, [Nb@927], pk(skB()), pk(skA())), #t@928);
    @constraint #t@928 - #t1@932 >= 0;
    @constraint #t@928 - #t2@936 >= 0;
    @constraint #t@928 - #t2@937 >= 0;
};
Rule added at 4.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@989], [Na@990], pk(skA()), pk(skB())), hash([Ka@994], [Kb@992])), hash([Ka@994], [Kb@992])));
    @premise new(*[Kb@992], Bk(), tuple4(pk(skA()), [Nb@989], [Ka@994], [Na@990]));
    @premise new(*[Nb@989], Bn(), tuple4(pk(skA()), [Ka@996], [Ka@994], [Na@990]));
    @premise new(*[Ka@994], Ak(), tuple2(pk(skB()), [Na@990]));
    @premise new(*[Na@990], An(), tuple2(pk(skB()), [Ka@994]));
    @premise know(*[Nb@989], #t2@997);
    @conclusion know(*senc(tuple4([Nb@989], [Na@990], pk(skA()), pk(skB())), hash([Ka@994], [Kb@992])), #t@993);
    @constraint #t@993 - #t2@997 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@681], [Na@685], pk(skA()), pk(skB())), hash([Ka@682], [Kb@679])), hash([Ka@682], [Kb@679])));
    @premise new(*[Kb@679], Bk(), tuple4(pk(skA()), [Nb@681], [Ka@682], [Na@685]));
    @premise new(*[Nb@681], Bn(), tuple4(pk(skA()), [Ka@684], [Ka@682], [Na@685]));
    @premise new(*[Na@685], An(), tuple2(pk(skB()), [Ka@682]));
    @premise new(*[Ka@682], Ak(), tuple2(pk(skB()), [Na@685]));
    @premise know(*[Na@685], #t2@686);
    @premise know(*[Nb@681], #t2@689);
    @conclusion know(*senc(tuple4([Nb@681], [Na@685], pk(skA()), pk(skB())), hash([Ka@682], [Kb@679])), #t@680);
    @constraint #t@680 - #t2@686 >= 0;
    @constraint #t@680 - #t2@689 >= 0;
};
Rule added at 5.

Compose by at 5 : 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};
Rule in cache: 12
Rule staged: 83
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1303], Ak(), tuple2(pkR@1304, [Na@1298]));
    @premise new(*[Na@1298], An(), tuple2(pkR@1304, [Ka@1303]));
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Na@1298], [Na@1299], pk(skA()), pk(skB())), hash([Ka@1300], [Kb@1301])), hash([Ka@1300], [Kb@1301])));
    @premise new(*[Kb@1301], Bk(), tuple4(pk(skA()), [Na@1298], [Ka@1300], [Na@1299]));
    @premise new(*[Na@1298], Bn(), tuple4(pk(skA()), [Ka@1305], [Ka@1300], [Na@1299]));
    @premise new(*[Ka@1300], Ak(), tuple2(pk(skB()), [Na@1299]));
    @premise new(*[Na@1299], An(), tuple2(pk(skB()), [Ka@1300]));
    @conclusion know(*senc(tuple4([Na@1298], [Na@1299], pk(skA()), pk(skB())), hash([Ka@1300], [Kb@1301])), #t@1302);
    @constraint #t@1302 - #t1@275 >= 0;
};
Rule invalid. 

Compose by at 5 : 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};
Rule in cache: 12
Rule staged: 83
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1311], Bk(), tuple4(pk(skA()), [Nb@1306], [Ka@1312], Ni@1313));
    @premise new(*[Nb@1306], Bn(), tuple4(pk(skA()), [Ka@1314], [Ka@1312], Ni@1313));
    @premise new(*[Ka@1312], Ak(), tuple2(pk(skB()), [Na@1315]));
    @premise new(*[Na@1315], An(), tuple2(pk(skB()), [Ka@1312]));
    @premise know(*Ni@1313, #t2@1316);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1306], [Na@1307], pk(skA()), pk(skB())), hash([Ka@1308], [Kb@1309])), hash([Ka@1308], [Kb@1309])));
    @premise new(*[Kb@1309], Bk(), tuple4(pk(skA()), [Nb@1306], [Ka@1308], [Na@1307]));
    @premise new(*[Nb@1306], Bn(), tuple4(pk(skA()), [Ka@1317], [Ka@1308], [Na@1307]));
    @premise new(*[Ka@1308], Ak(), tuple2(pk(skB()), [Na@1307]));
    @premise new(*[Na@1307], An(), tuple2(pk(skB()), [Ka@1308]));
    @conclusion know(*senc(tuple4([Nb@1306], [Na@1307], pk(skA()), pk(skB())), hash([Ka@1308], [Kb@1309])), #t@1310);
    @constraint #t@381 - #t2@1316 >= 0;
    @constraint #t@1310 - #t@381 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1306], [Na@1315], pk(skA()), pk(skB())), hash([Ka@1312], [Kb@1309])), hash([Ka@1312], [Kb@1309])));
    @premise new(*[Nb@1306], Bn(), tuple4(pk(skA()), [Ka@1314], [Ka@1312], [Na@1315]));
    @premise new(*[Kb@1309], Bk(), tuple4(pk(skA()), [Nb@1306], [Ka@1312], [Na@1315]));
    @premise new(*[Kb@1311], Bk(), tuple4(pk(skA()), [Nb@1306], [Ka@1312], [Na@1315]));
    @premise new(*[Ka@1312], Ak(), tuple2(pk(skB()), [Na@1315]));
    @premise new(*[Na@1315], An(), tuple2(pk(skB()), [Ka@1312]));
    @premise know(*[Na@1315], #t2@1316);
    @conclusion know(*senc(tuple4([Nb@1306], [Na@1315], pk(skA()), pk(skB())), hash([Ka@1312], [Kb@1309])), #t@1310);
    @constraint #t@1310 - #t2@1316 >= 0;
};

Compose by at 5 : 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};
Rule in cache: 13
Rule staged: 83
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1323], Bk(), tuple4(x0@1324, [Nb@1318], x1@1325, Ni@1326));
    @premise new(*[Nb@1318], Bn(), tuple4(x0@1324, [Ka@1327], x1@1325, Ni@1326));
    @premise know(*x0@1324, #t0@1328);
    @premise know(*x1@1325, #t1@1329);
    @premise know(*Ni@1326, #t2@1330);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1318], [Na@1319], pk(skA()), pk(skB())), hash([Ka@1320], [Kb@1321])), hash([Ka@1320], [Kb@1321])));
    @premise new(*[Kb@1321], Bk(), tuple4(pk(skA()), [Nb@1318], [Ka@1320], [Na@1319]));
    @premise new(*[Nb@1318], Bn(), tuple4(pk(skA()), [Ka@1331], [Ka@1320], [Na@1319]));
    @premise new(*[Ka@1320], Ak(), tuple2(pk(skB()), [Na@1319]));
    @premise new(*[Na@1319], An(), tuple2(pk(skB()), [Ka@1320]));
    @conclusion know(*senc(tuple4([Nb@1318], [Na@1319], pk(skA()), pk(skB())), hash([Ka@1320], [Kb@1321])), #t@1322);
    @constraint #t@464 - #t1@1329 >= 0;
    @constraint #t@464 - #t0@1328 >= 0;
    @constraint #t@464 - #t2@1330 >= 0;
    @constraint #t@1322 - #t@464 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1318], [Na@1319], pk(skA()), pk(skB())), hash([Ka@1320], [Kb@1321])), hash([Ka@1320], [Kb@1321])));
    @premise new(*[Kb@1323], Bk(), tuple4(pk(skA()), [Nb@1318], [Ka@1320], [Na@1319]));
    @premise new(*[Nb@1318], Bn(), tuple4(pk(skA()), [Ka@1327], [Ka@1320], [Na@1319]));
    @premise new(*[Kb@1321], Bk(), tuple4(pk(skA()), [Nb@1318], [Ka@1320], [Na@1319]));
    @premise new(*[Na@1319], An(), tuple2(pk(skB()), [Ka@1320]));
    @premise new(*[Ka@1320], Ak(), tuple2(pk(skB()), [Na@1319]));
    @premise know(*pk(skA()), #t0@1328);
    @premise know(*[Ka@1320], #t1@1329);
    @premise know(*[Na@1319], #t2@1330);
    @conclusion know(*senc(tuple4([Nb@1318], [Na@1319], pk(skA()), pk(skB())), hash([Ka@1320], [Kb@1321])), #t@1322);
    @constraint #t@1322 - #t1@1329 >= 0;
    @constraint #t@1322 - #t0@1328 >= 0;
    @constraint #t@1322 - #t2@1330 >= 0;
};

Compose by at 5 : 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};
Rule in cache: 14
Rule staged: 83
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1332], Ak(), tuple2(pk(sk@1337), [Na@1338]));
    @premise new(*[Na@1338], An(), tuple2(pk(sk@1337), [Ka@1332]));
    @premise know(*sk@1337, #t1@1339);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Ka@1332], [Na@1333], pk(skA()), pk(skB())), hash([Ka@1334], [Kb@1335])), hash([Ka@1334], [Kb@1335])));
    @premise new(*[Kb@1335], Bk(), tuple4(pk(skA()), [Ka@1332], [Ka@1334], [Na@1333]));
    @premise new(*[Ka@1332], Bn(), tuple4(pk(skA()), [Ka@1340], [Ka@1334], [Na@1333]));
    @premise new(*[Ka@1334], Ak(), tuple2(pk(skB()), [Na@1333]));
    @premise new(*[Na@1333], An(), tuple2(pk(skB()), [Ka@1334]));
    @conclusion know(*senc(tuple4([Ka@1332], [Na@1333], pk(skA()), pk(skB())), hash([Ka@1334], [Kb@1335])), #t@1336);
    @constraint #t1@489 - #t1@1339 >= 0;
    @constraint #t@1336 - #t1@489 >= 0;
};
Rule invalid. 

Compose by at 5 : 
@rule{
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*sk@826, #t1@827);
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @conclusion know(*[Kb@824], #t@825);
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
    @constraint #t@825 - #t1@827 >= 0;
};
Rule in cache: 14
Rule staged: 83
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1341], Bk(), tuple4(pk(sk@1346), [Nb@1347], x1@1348, Ni@1349));
    @premise new(*[Nb@1347], Bn(), tuple4(pk(sk@1346), [Ka@1350], x1@1348, Ni@1349));
    @premise know(*sk@1346, #t1@1351);
    @premise know(*x1@1348, #t1@1352);
    @premise know(*Ni@1349, #t2@1353);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Kb@1341], [Na@1342], pk(skA()), pk(skB())), hash([Ka@1343], [Kb@1344])), hash([Ka@1343], [Kb@1344])));
    @premise new(*[Kb@1344], Bk(), tuple4(pk(skA()), [Kb@1341], [Ka@1343], [Na@1342]));
    @premise new(*[Kb@1341], Bn(), tuple4(pk(skA()), [Ka@1354], [Ka@1343], [Na@1342]));
    @premise new(*[Ka@1343], Ak(), tuple2(pk(skB()), [Na@1342]));
    @premise new(*[Na@1342], An(), tuple2(pk(skB()), [Ka@1343]));
    @conclusion know(*senc(tuple4([Kb@1341], [Na@1342], pk(skA()), pk(skB())), hash([Ka@1343], [Kb@1344])), #t@1345);
    @constraint #t@825 - #t1@1351 >= 0;
    @constraint #t@825 - #t1@1352 >= 0;
    @constraint #t@825 - #t2@1353 >= 0;
    @constraint #t@1345 - #t@825 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@1038, *senc(senc(tuple4(x1@1036, [Na@1037], pk(skA()), x2@1038), hash([Ka@1039], m2@1040)), hash([Ka@1039], m2@1040)));
    @premise new(*[Ka@1039], Ak(), tuple2(x2@1038, [Na@1037]));
    @premise new(*[Na@1037], An(), tuple2(x2@1038, [Ka@1039]));
    @premise know(*skA(), #t1@1044);
    @premise know(*[Ka@1039], #t1@1042);
    @premise know(*[Na@1037], #t0@1045);
    @premise know(*m2@1040, #t2@1043);
    @premise know(*x2@1038, #t2@1047);
    @premise know(*x1@1036, #t1@1048);
    @conclusion know(*senc(tuple4(x1@1036, [Na@1037], pk(skA()), x2@1038), hash([Ka@1039], m2@1040)), #t@1041);
    @constraint #t@1041 - #t0@1045 >= 0;
    @constraint #t@1041 - #t1@1044 >= 0;
    @constraint #t@1041 - #t2@1047 >= 0;
    @constraint #t@1041 - #t1@1048 >= 0;
    @constraint #t@1041 - #t2@1043 >= 0;
    @constraint #t@1041 - #t1@1042 >= 0;
};
Rule added at 3.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@1051, *senc(senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), hash([Ka@1052], m2@1053)));
    @premise new(*[Ka@1052], Ak(), tuple2(x2@1051, [Na@1050]));
    @premise new(*[Na@1050], An(), tuple2(x2@1051, [Ka@1052]));
    @premise know(*[Ka@1052], #t1@1055);
    @premise know(*[Na@1050], #t0@1057);
    @premise know(*m2@1053, #t2@1056);
    @premise know(*x2@1051, #t2@1059);
    @premise know(*x1@1049, #t1@1060);
    @conclusion know(*senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), #t@1054);
    @constraint #t@1054 - #t0@1057 >= 0;
    @constraint #t@1054 - #t2@1059 >= 0;
    @constraint #t@1054 - #t1@1060 >= 0;
    @constraint #t@1054 - #t2@1056 >= 0;
    @constraint #t@1054 - #t1@1055 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *x2@755, *senc(senc(tuple4(x1@753, [Na@754], pk(skA()), x2@755), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))));
    @premise new(*[Ka@757], Ak(), tuple2(pk(skA()), [Na@761]));
    @premise new(*[Na@761], An(), tuple2(pk(skA()), [Ka@757]));
    @premise know(*tuple2(pk(skA()), [Ka@757]), #t2@760);
    @premise new(*[Na@754], An(), tuple2(x2@755, [Ka@756]));
    @premise new(*[Ka@756], Ak(), tuple2(x2@755, [Na@754]));
    @premise know(*pk(skA()), #t3@762);
    @premise know(*[Ka@756], #t1@759);
    @premise know(*[Na@754], #t0@763);
    @premise know(*x2@755, #t2@764);
    @premise know(*x1@753, #t1@765);
    @conclusion know(*senc(tuple4(x1@753, [Na@754], pk(skA()), x2@755), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))), #t@758);
    @constraint #t@758 - #t0@763 >= 0;
    @constraint #t@758 - #t3@762 >= 0;
    @constraint #t@758 - #t2@764 >= 0;
    @constraint #t@758 - #t1@765 >= 0;
    @constraint #t@758 - #t2@760 >= 0;
    @constraint #t@758 - #t1@759 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *x2@768, *senc(senc(tuple4(x1@766, [Na@767], pk(skA()), x2@768), hash([Ka@769], [Kb@770])), hash([Ka@769], [Kb@770])));
    @premise new(*[Nb@774], Bn(), tuple4(pk(skA()), [Ka@777], [Ka@775], Ni@776));
    @premise new(*[Kb@770], Bk(), tuple4(pk(skA()), [Nb@774], [Ka@775], Ni@776));
    @premise new(*[Na@778], An(), tuple2(pk(skB()), [Ka@775]));
    @premise new(*[Ka@775], Ak(), tuple2(pk(skB()), [Na@778]));
    @premise new(*[Na@767], An(), tuple2(x2@768, [Ka@769]));
    @premise new(*[Ka@769], Ak(), tuple2(x2@768, [Na@767]));
    @premise know(*pk(skA()), #t3@779);
    @premise know(*[Ka@769], #t1@772);
    @premise know(*[Kb@770], #t2@773);
    @premise know(*[Na@767], #t0@780);
    @premise know(*Ni@776, #t2@781);
    @premise know(*x2@768, #t2@782);
    @premise know(*x1@766, #t1@783);
    @conclusion know(*senc(tuple4(x1@766, [Na@767], pk(skA()), x2@768), hash([Ka@769], [Kb@770])), #t@771);
    @constraint #t@771 - #t0@780 >= 0;
    @constraint #t@771 - #t2@781 >= 0;
    @constraint #t@771 - #t3@779 >= 0;
    @constraint #t@771 - #t2@782 >= 0;
    @constraint #t@771 - #t1@783 >= 0;
    @constraint #t@771 - #t2@773 >= 0;
    @constraint #t@771 - #t1@772 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *x2@855, *senc(senc(tuple4(x1@853, [Na@854], pk(skA()), x2@855), hash([Ka@856], [Kb@857])), hash([Ka@856], [Kb@857])));
    @premise new(*[Kb@857], Bk(), tuple4(pk(skA()), [Nb@861], x1@862, Ni@863));
    @premise new(*[Nb@861], Bn(), tuple4(pk(skA()), [Ka@864], x1@862, Ni@863));
    @premise new(*[Ka@856], Ak(), tuple2(x2@855, [Na@854]));
    @premise new(*[Na@854], An(), tuple2(x2@855, [Ka@856]));
    @premise know(*pk(skA()), #t0@865);
    @premise know(*[Ka@856], #t1@859);
    @premise know(*[Kb@857], #t2@860);
    @premise know(*[Na@854], #t0@866);
    @premise know(*Ni@863, #t2@867);
    @premise know(*x1@862, #t1@868);
    @premise know(*x2@855, #t2@869);
    @premise know(*x1@853, #t1@870);
    @conclusion know(*senc(tuple4(x1@853, [Na@854], pk(skA()), x2@855), hash([Ka@856], [Kb@857])), #t@858);
    @constraint #t@858 - #t0@866 >= 0;
    @constraint #t@858 - #t1@868 >= 0;
    @constraint #t@858 - #t0@865 >= 0;
    @constraint #t@858 - #t2@867 >= 0;
    @constraint #t@858 - #t2@869 >= 0;
    @constraint #t@858 - #t1@870 >= 0;
    @constraint #t@858 - #t2@860 >= 0;
    @constraint #t@858 - #t1@859 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *x2@1038, *senc(senc(tuple4(x1@1036, [Na@1037], pk(skA()), x2@1038), hash([Ka@1039], m2@1040)), hash([Ka@1039], m2@1040)));
    @premise new(*[Ka@1039], Ak(), tuple2(x2@1038, [Na@1037]));
    @premise new(*[Na@1037], An(), tuple2(x2@1038, [Ka@1039]));
    @premise know(*skA(), #t1@1044);
    @premise know(*[Ka@1039], #t1@1042);
    @premise know(*[Na@1037], #t0@1045);
    @premise know(*m2@1040, #t2@1043);
    @premise know(*x2@1038, #t2@1047);
    @premise know(*x1@1036, #t1@1048);
    @conclusion know(*senc(tuple4(x1@1036, [Na@1037], pk(skA()), x2@1038), hash([Ka@1039], m2@1040)), #t@1041);
    @constraint #t@1041 - #t0@1045 >= 0;
    @constraint #t@1041 - #t1@1044 >= 0;
    @constraint #t@1041 - #t2@1047 >= 0;
    @constraint #t@1041 - #t1@1048 >= 0;
    @constraint #t@1041 - #t2@1043 >= 0;
    @constraint #t@1041 - #t1@1042 >= 0;
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};
Rule in cache: 12
Rule staged: 85
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1361], Ak(), tuple2(pkR@1362, [Na@1358]));
    @premise new(*[Na@1358], An(), tuple2(pkR@1362, [Ka@1361]));
    @premise init(*pk(skA()), *x2@1357, *senc(senc(tuple4(x1@1355, [Na@1356], pk(skA()), x2@1357), hash([Na@1358], m2@1359)), hash([Na@1358], m2@1359)));
    @premise new(*[Na@1358], Ak(), tuple2(x2@1357, [Na@1356]));
    @premise new(*[Na@1356], An(), tuple2(x2@1357, [Na@1358]));
    @premise know(*[Na@1356], #t0@1363);
    @premise know(*m2@1359, #t2@1364);
    @premise know(*x2@1357, #t2@1365);
    @premise know(*x1@1355, #t1@1366);
    @conclusion know(*senc(tuple4(x1@1355, [Na@1356], pk(skA()), x2@1357), hash([Na@1358], m2@1359)), #t@1360);
    @constraint #t@1360 - #t1@275 >= 0;
    @constraint #t@1360 - #t2@1364 >= 0;
    @constraint #t@1360 - #t2@1365 >= 0;
    @constraint #t@1360 - #t1@1366 >= 0;
    @constraint #t@1360 - #t0@1363 >= 0;
};
Rule invalid. 

Compose by at 3 : 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};
Rule in cache: 12
Rule staged: 85
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1373], Bk(), tuple4(pk(skA()), [Nb@1370], [Ka@1374], Ni@1375));
    @premise new(*[Nb@1370], Bn(), tuple4(pk(skA()), [Ka@1376], [Ka@1374], Ni@1375));
    @premise new(*[Ka@1374], Ak(), tuple2(pk(skB()), [Na@1377]));
    @premise new(*[Na@1377], An(), tuple2(pk(skB()), [Ka@1374]));
    @premise know(*Ni@1375, #t2@1378);
    @premise init(*pk(skA()), *x2@1369, *senc(senc(tuple4(x1@1367, [Na@1368], pk(skA()), x2@1369), hash([Nb@1370], m2@1371)), hash([Nb@1370], m2@1371)));
    @premise new(*[Nb@1370], Ak(), tuple2(x2@1369, [Na@1368]));
    @premise new(*[Na@1368], An(), tuple2(x2@1369, [Nb@1370]));
    @premise know(*[Na@1368], #t0@1379);
    @premise know(*m2@1371, #t2@1380);
    @premise know(*x2@1369, #t2@1381);
    @premise know(*x1@1367, #t1@1382);
    @conclusion know(*senc(tuple4(x1@1367, [Na@1368], pk(skA()), x2@1369), hash([Nb@1370], m2@1371)), #t@1372);
    @constraint #t@381 - #t2@1378 >= 0;
    @constraint #t@1372 - #t@381 >= 0;
    @constraint #t@1372 - #t2@1380 >= 0;
    @constraint #t@1372 - #t2@1381 >= 0;
    @constraint #t@1372 - #t1@1382 >= 0;
    @constraint #t@1372 - #t0@1379 >= 0;
};
Rule invalid. 

Compose by at 3 : 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};
Rule in cache: 12
Rule staged: 85
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1389], Bk(), tuple4(x0@1390, [Nb@1386], x1@1391, Ni@1392));
    @premise new(*[Nb@1386], Bn(), tuple4(x0@1390, [Ka@1393], x1@1391, Ni@1392));
    @premise know(*x0@1390, #t0@1394);
    @premise know(*x1@1391, #t1@1395);
    @premise know(*Ni@1392, #t2@1396);
    @premise init(*pk(skA()), *x2@1385, *senc(senc(tuple4(x1@1383, [Na@1384], pk(skA()), x2@1385), hash([Nb@1386], m2@1387)), hash([Nb@1386], m2@1387)));
    @premise new(*[Nb@1386], Ak(), tuple2(x2@1385, [Na@1384]));
    @premise new(*[Na@1384], An(), tuple2(x2@1385, [Nb@1386]));
    @premise know(*[Na@1384], #t0@1397);
    @premise know(*m2@1387, #t2@1398);
    @premise know(*x2@1385, #t2@1399);
    @premise know(*x1@1383, #t1@1400);
    @conclusion know(*senc(tuple4(x1@1383, [Na@1384], pk(skA()), x2@1385), hash([Nb@1386], m2@1387)), #t@1388);
    @constraint #t@464 - #t1@1395 >= 0;
    @constraint #t@464 - #t0@1394 >= 0;
    @constraint #t@464 - #t2@1396 >= 0;
    @constraint #t@1388 - #t@464 >= 0;
    @constraint #t@1388 - #t2@1398 >= 0;
    @constraint #t@1388 - #t2@1399 >= 0;
    @constraint #t@1388 - #t1@1400 >= 0;
    @constraint #t@1388 - #t0@1397 >= 0;
};
Rule invalid. 

Compose by at 3 : 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};
Rule in cache: 12
Rule staged: 85
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1404], Ak(), tuple2(pk(sk@1407), [Na@1408]));
    @premise new(*[Na@1408], An(), tuple2(pk(sk@1407), [Ka@1404]));
    @premise know(*sk@1407, #t1@1409);
    @premise init(*pk(skA()), *x2@1403, *senc(senc(tuple4(x1@1401, [Na@1402], pk(skA()), x2@1403), hash([Ka@1404], m2@1405)), hash([Ka@1404], m2@1405)));
    @premise new(*[Ka@1404], Ak(), tuple2(x2@1403, [Na@1402]));
    @premise new(*[Na@1402], An(), tuple2(x2@1403, [Ka@1404]));
    @premise know(*[Na@1402], #t0@1410);
    @premise know(*m2@1405, #t2@1411);
    @premise know(*x2@1403, #t2@1412);
    @premise know(*x1@1401, #t1@1413);
    @conclusion know(*senc(tuple4(x1@1401, [Na@1402], pk(skA()), x2@1403), hash([Ka@1404], m2@1405)), #t@1406);
    @constraint #t1@489 - #t1@1409 >= 0;
    @constraint #t@1406 - #t1@489 >= 0;
    @constraint #t@1406 - #t2@1411 >= 0;
    @constraint #t@1406 - #t2@1412 >= 0;
    @constraint #t@1406 - #t1@1413 >= 0;
    @constraint #t@1406 - #t0@1410 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1407), *senc(senc(tuple4(x1@1401, [Na@1408], pk(skA()), pk(sk@1407)), hash([Ka@1404], m2@1405)), hash([Ka@1404], m2@1405)));
    @premise new(*[Ka@1404], Ak(), tuple2(pk(sk@1407), [Na@1408]));
    @premise new(*[Na@1408], An(), tuple2(pk(sk@1407), [Ka@1404]));
    @premise know(*pk(sk@1407), #t2@1412);
    @premise know(*[Na@1408], #t0@1410);
    @premise know(*m2@1405, #t2@1411);
    @premise know(*sk@1407, #t1@1409);
    @premise know(*x1@1401, #t1@1413);
    @conclusion know(*senc(tuple4(x1@1401, [Na@1408], pk(skA()), pk(sk@1407)), hash([Ka@1404], m2@1405)), #t@1406);
    @constraint #t@1406 - #t1@1409 >= 0;
    @constraint #t@1406 - #t2@1411 >= 0;
    @constraint #t@1406 - #t2@1412 >= 0;
    @constraint #t@1406 - #t1@1413 >= 0;
    @constraint #t@1406 - #t0@1410 >= 0;
};

Compose by at 3 : 
@rule{
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*sk@826, #t1@827);
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @conclusion know(*[Kb@824], #t@825);
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
    @constraint #t@825 - #t1@827 >= 0;
};
Rule in cache: 13
Rule staged: 85
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1417], Bk(), tuple4(pk(sk@1420), [Nb@1421], x1@1422, Ni@1423));
    @premise new(*[Nb@1421], Bn(), tuple4(pk(sk@1420), [Ka@1424], x1@1422, Ni@1423));
    @premise know(*sk@1420, #t1@1425);
    @premise know(*x1@1422, #t1@1426);
    @premise know(*Ni@1423, #t2@1427);
    @premise init(*pk(skA()), *x2@1416, *senc(senc(tuple4(x1@1414, [Na@1415], pk(skA()), x2@1416), hash([Kb@1417], m2@1418)), hash([Kb@1417], m2@1418)));
    @premise new(*[Kb@1417], Ak(), tuple2(x2@1416, [Na@1415]));
    @premise new(*[Na@1415], An(), tuple2(x2@1416, [Kb@1417]));
    @premise know(*[Na@1415], #t0@1428);
    @premise know(*m2@1418, #t2@1429);
    @premise know(*x2@1416, #t2@1430);
    @premise know(*x1@1414, #t1@1431);
    @conclusion know(*senc(tuple4(x1@1414, [Na@1415], pk(skA()), x2@1416), hash([Kb@1417], m2@1418)), #t@1419);
    @constraint #t@825 - #t1@1425 >= 0;
    @constraint #t@825 - #t1@1426 >= 0;
    @constraint #t@825 - #t2@1427 >= 0;
    @constraint #t@1419 - #t@825 >= 0;
    @constraint #t@1419 - #t2@1429 >= 0;
    @constraint #t@1419 - #t2@1430 >= 0;
    @constraint #t@1419 - #t1@1431 >= 0;
    @constraint #t@1419 - #t0@1428 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@1063, *senc(senc(tuple4(x1@1061, [Na@1062], pk(skA()), x2@1063), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))));
    @premise new(*[Ka@1065], Ak(), tuple2(pk(skA()), [Na@1069]));
    @premise new(*[Na@1069], An(), tuple2(pk(skA()), [Ka@1065]));
    @premise new(*[Na@1062], An(), tuple2(x2@1063, [Ka@1064]));
    @premise new(*[Ka@1064], Ak(), tuple2(x2@1063, [Na@1062]));
    @premise know(*pk(skA()), #t0@1067);
    @premise know(*[Ka@1065], #t1@1068);
    @premise know(*[Ka@1064], #t1@1071);
    @premise know(*[Na@1062], #t0@1072);
    @premise know(*x2@1063, #t2@1073);
    @premise know(*x1@1061, #t1@1074);
    @conclusion know(*senc(tuple4(x1@1061, [Na@1062], pk(skA()), x2@1063), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))), #t@1066);
    @constraint #t@1066 - #t0@1072 >= 0;
    @constraint #t@1066 - #t1@1071 >= 0;
    @constraint #t@1066 - #t2@1073 >= 0;
    @constraint #t@1066 - #t1@1074 >= 0;
    @constraint #t@1066 - #t1@1068 >= 0;
    @constraint #t@1066 - #t0@1067 >= 0;
};
Rule added at 5.

Compose by at 5 : 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule in cache: 12
Rule staged: 86
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1438);
    @premise init(*pk(skA()), *x2@1434, *senc(senc(tuple4(x1@1432, [Na@1433], pk(skA()), x2@1434), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))));
    @premise new(*[Ka@1436], Ak(), tuple2(pk(skA()), [Na@1439]));
    @premise new(*[Na@1439], An(), tuple2(pk(skA()), [Ka@1436]));
    @premise new(*[Na@1433], An(), tuple2(x2@1434, [Ka@1435]));
    @premise new(*[Ka@1435], Ak(), tuple2(x2@1434, [Na@1433]));
    @premise know(*[Ka@1436], #t1@1440);
    @premise know(*[Ka@1435], #t1@1441);
    @premise know(*[Na@1433], #t0@1442);
    @premise know(*x2@1434, #t2@1443);
    @premise know(*x1@1432, #t1@1444);
    @conclusion know(*senc(tuple4(x1@1432, [Na@1433], pk(skA()), x2@1434), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))), #t@1437);
    @constraint -#t1@1438 + #t@90 >= 0;
    @constraint #t@1437 - #t@90 >= 0;
    @constraint #t@1437 - #t1@1440 >= 0;
    @constraint #t@1437 - #t1@1441 >= 0;
    @constraint #t@1437 - #t2@1443 >= 0;
    @constraint #t@1437 - #t1@1444 >= 0;
    @constraint #t@1437 - #t0@1442 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@1434, *senc(senc(tuple4(x1@1432, [Na@1433], pk(skA()), x2@1434), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))));
    @premise new(*[Ka@1436], Ak(), tuple2(pk(skA()), [Na@1439]));
    @premise new(*[Na@1439], An(), tuple2(pk(skA()), [Ka@1436]));
    @premise new(*[Ka@1435], Ak(), tuple2(x2@1434, [Na@1433]));
    @premise new(*[Na@1433], An(), tuple2(x2@1434, [Ka@1435]));
    @premise know(*skA(), #t1@1438);
    @premise know(*[Ka@1436], #t1@1440);
    @premise know(*[Ka@1435], #t1@1441);
    @premise know(*[Na@1433], #t0@1442);
    @premise know(*x2@1434, #t2@1443);
    @premise know(*x1@1432, #t1@1444);
    @conclusion know(*senc(tuple4(x1@1432, [Na@1433], pk(skA()), x2@1434), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))), #t@1437);
    @constraint #t@1437 - #t1@1440 >= 0;
    @constraint #t@1437 - #t1@1441 >= 0;
    @constraint #t@1437 - #t2@1443 >= 0;
    @constraint #t@1437 - #t1@1444 >= 0;
    @constraint #t@1437 - #t0@1442 >= 0;
    @constraint #t@1437 - #t1@1438 >= 0;
};

Compose by at 5 : 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};
Rule in cache: 13
Rule staged: 86
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *x2@1447, *senc(senc(tuple4(x1@1445, [Na@1446], pk(skA()), x2@1447), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))));
    @premise new(*[Ka@1449], Ak(), tuple2(pk(skA()), [Na@1451]));
    @premise new(*[Na@1451], An(), tuple2(pk(skA()), [Ka@1449]));
    @premise new(*[Na@1446], An(), tuple2(x2@1447, [Ka@1448]));
    @premise new(*[Ka@1448], Ak(), tuple2(x2@1447, [Na@1446]));
    @premise know(*[Ka@1449], #t1@1452);
    @premise know(*[Ka@1448], #t1@1453);
    @premise know(*[Na@1446], #t0@1454);
    @premise know(*x2@1447, #t2@1455);
    @premise know(*x1@1445, #t1@1456);
    @conclusion know(*senc(tuple4(x1@1445, [Na@1446], pk(skA()), x2@1447), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))), #t@1450);
    @constraint #t@1450 - #t0@1454 >= 0;
    @constraint #t@1450 - #t1@1456 >= 0;
    @constraint #t@1450 - #t2@1455 >= 0;
    @constraint #t@1450 - #t1@1453 >= 0;
    @constraint #t@1450 - #t@125 >= 0;
    @constraint #t@1450 - #t1@1452 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@1447, *senc(senc(tuple4(x1@1445, [Na@1446], pk(skA()), x2@1447), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))));
    @premise new(*[Ka@1449], Ak(), tuple2(pk(skA()), [Na@1451]));
    @premise new(*[Na@1451], An(), tuple2(pk(skA()), [Ka@1449]));
    @premise new(*[Na@1446], An(), tuple2(x2@1447, [Ka@1448]));
    @premise new(*[Ka@1448], Ak(), tuple2(x2@1447, [Na@1446]));
    @premise know(*[Ka@1449], #t1@1452);
    @premise know(*[Ka@1448], #t1@1453);
    @premise know(*[Na@1446], #t0@1454);
    @premise know(*x2@1447, #t2@1455);
    @premise know(*x1@1445, #t1@1456);
    @conclusion know(*senc(tuple4(x1@1445, [Na@1446], pk(skA()), x2@1447), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))), #t@1450);
    @constraint #t@1450 - #t2@1455 >= 0;
    @constraint #t@1450 - #t1@1452 >= 0;
    @constraint #t@1450 - #t1@1453 >= 0;
    @constraint #t@1450 - #t1@1456 >= 0;
    @constraint #t@1450 - #t0@1454 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@1077, *senc(senc(tuple4(x1@1075, [Na@1076], pk(skA()), x2@1077), hash([Ka@1078], [Kb@1079])), hash([Ka@1078], [Kb@1079])));
    @premise new(*[Kb@1079], Bk(), tuple4(pk(skA()), [Nb@1082], [Ka@1084], Ni@1085));
    @premise new(*[Nb@1082], Bn(), tuple4(pk(skA()), [Ka@1083], [Ka@1084], Ni@1085));
    @premise new(*[Ka@1084], Ak(), tuple2(pk(skB()), [Na@1086]));
    @premise new(*[Na@1086], An(), tuple2(pk(skB()), [Ka@1084]));
    @premise new(*[Ka@1078], Ak(), tuple2(x2@1077, [Na@1076]));
    @premise new(*[Na@1076], An(), tuple2(x2@1077, [Ka@1078]));
    @premise know(*skA(), #t1@1081);
    @premise know(*[Ka@1078], #t1@1087);
    @premise know(*[Kb@1079], #t2@1088);
    @premise know(*[Na@1076], #t0@1089);
    @premise know(*Ni@1085, #t2@1090);
    @premise know(*x2@1077, #t2@1091);
    @premise know(*x1@1075, #t1@1092);
    @conclusion know(*senc(tuple4(x1@1075, [Na@1076], pk(skA()), x2@1077), hash([Ka@1078], [Kb@1079])), #t@1080);
    @constraint #t@1080 - #t2@1088 >= 0;
    @constraint #t@1080 - #t1@1087 >= 0;
    @constraint #t@1080 - #t2@1090 >= 0;
    @constraint #t@1080 - #t2@1091 >= 0;
    @constraint #t@1080 - #t1@1092 >= 0;
    @constraint #t@1080 - #t0@1089 >= 0;
    @constraint #t@1080 - #t1@1081 >= 0;
};
Rule implied by: 
@rule{
    @premise init(*pk(skA()), *x2@1051, *senc(senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), hash([Ka@1052], m2@1053)));
    @premise new(*[Ka@1052], Ak(), tuple2(x2@1051, [Na@1050]));
    @premise new(*[Na@1050], An(), tuple2(x2@1051, [Ka@1052]));
    @premise know(*[Ka@1052], #t1@1055);
    @premise know(*[Na@1050], #t0@1057);
    @premise know(*m2@1053, #t2@1056);
    @premise know(*x2@1051, #t2@1059);
    @premise know(*x1@1049, #t1@1060);
    @conclusion know(*senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), #t@1054);
    @constraint #t@1054 - #t0@1057 >= 0;
    @constraint #t@1054 - #t2@1059 >= 0;
    @constraint #t@1054 - #t1@1060 >= 0;
    @constraint #t@1054 - #t2@1056 >= 0;
    @constraint #t@1054 - #t1@1055 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@1095, *senc(senc(tuple4(x1@1093, [Na@1094], pk(skA()), x2@1095), hash([Ka@1096], [Kb@1097])), hash([Ka@1096], [Kb@1097])));
    @premise new(*[Nb@1099], Bn(), tuple4(pk(skA()), [Ka@1100], [Ka@1101], Ni@1102));
    @premise new(*[Kb@1097], Bk(), tuple4(pk(skA()), [Nb@1099], [Ka@1101], Ni@1102));
    @premise new(*[Na@1103], An(), tuple2(pk(skB()), [Ka@1101]));
    @premise new(*[Ka@1101], Ak(), tuple2(pk(skB()), [Na@1103]));
    @premise new(*[Na@1094], An(), tuple2(x2@1095, [Ka@1096]));
    @premise new(*[Ka@1096], Ak(), tuple2(x2@1095, [Na@1094]));
    @premise know(*[Ka@1096], #t1@1104);
    @premise know(*[Kb@1097], #t2@1105);
    @premise know(*[Na@1094], #t0@1106);
    @premise know(*Ni@1102, #t2@1107);
    @premise know(*x2@1095, #t2@1108);
    @premise know(*x1@1093, #t1@1109);
    @conclusion know(*senc(tuple4(x1@1093, [Na@1094], pk(skA()), x2@1095), hash([Ka@1096], [Kb@1097])), #t@1098);
    @constraint #t@1098 - #t2@1108 >= 0;
    @constraint #t@1098 - #t2@1105 >= 0;
    @constraint #t@1098 - #t1@1104 >= 0;
    @constraint #t@1098 - #t2@1107 >= 0;
    @constraint #t@1098 - #t1@1109 >= 0;
    @constraint #t@1098 - #t0@1106 >= 0;
};
Rule implied by: 
@rule{
    @premise init(*pk(skA()), *x2@1051, *senc(senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), hash([Ka@1052], m2@1053)));
    @premise new(*[Ka@1052], Ak(), tuple2(x2@1051, [Na@1050]));
    @premise new(*[Na@1050], An(), tuple2(x2@1051, [Ka@1052]));
    @premise know(*[Ka@1052], #t1@1055);
    @premise know(*[Na@1050], #t0@1057);
    @premise know(*m2@1053, #t2@1056);
    @premise know(*x2@1051, #t2@1059);
    @premise know(*x1@1049, #t1@1060);
    @conclusion know(*senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), #t@1054);
    @constraint #t@1054 - #t0@1057 >= 0;
    @constraint #t@1054 - #t2@1059 >= 0;
    @constraint #t@1054 - #t1@1060 >= 0;
    @constraint #t@1054 - #t2@1056 >= 0;
    @constraint #t@1054 - #t1@1055 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@1110], Bn(), tuple4(pk(skA()), [Ka@1117], Ki@1112, x1@1111));
    @premise new(*[Kb@1113], Bk(), tuple4(pk(skA()), [Nb@1110], Ki@1112, x1@1111));
    @premise know(*skB(), #t1@1118);
    @premise know(*skA(), #t1@1119);
    @premise know(*[Kb@1113], #t2@1116);
    @premise know(*[Nb@1110], #t0@1120);
    @premise know(*x1@1111, #t1@1121);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1110], x1@1111, pk(skA()), pk(skB())), hash(Ki@1112, [Kb@1113])), hash(Ki@1112, [Kb@1113])));
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Nb@1122], Bn(), tuple4(pk(skA()), [Ka@1129], Ki@1124, x1@1123));
    @premise new(*[Kb@1125], Bk(), tuple4(pk(skA()), [Nb@1122], Ki@1124, x1@1123));
    @premise know(*skA(), #t1@1130);
    @premise know(*[Kb@1125], #t2@1128);
    @premise know(*[Nb@1122], #t0@1131);
    @premise know(*x1@1123, #t1@1132);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1122], x1@1123, pk(skA()), pk(skB())), hash(Ki@1124, [Kb@1125])), hash(Ki@1124, [Kb@1125])));
};
Rule deleted: 
@rule{
    @premise new(*[Nb@1110], Bn(), tuple4(pk(skA()), [Ka@1117], Ki@1112, x1@1111));
    @premise new(*[Kb@1113], Bk(), tuple4(pk(skA()), [Nb@1110], Ki@1112, x1@1111));
    @premise know(*skB(), #t1@1118);
    @premise know(*skA(), #t1@1119);
    @premise know(*[Kb@1113], #t2@1116);
    @premise know(*[Nb@1110], #t0@1120);
    @premise know(*x1@1111, #t1@1121);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1110], x1@1111, pk(skA()), pk(skB())), hash(Ki@1112, [Kb@1113])), hash(Ki@1112, [Kb@1113])));
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Nb@1133], Bn(), tuple4(pk(skA()), [Ka@1140], Ki@1135, x1@1134));
    @premise new(*[Kb@1136], Bk(), tuple4(pk(skA()), [Nb@1133], Ki@1135, x1@1134));
    @premise know(*skB(), #t1@1141);
    @premise know(*[Kb@1136], #t2@1139);
    @premise know(*[Nb@1133], #t0@1142);
    @premise know(*x1@1134, #t1@1143);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1133], x1@1134, pk(skA()), pk(skB())), hash(Ki@1135, [Kb@1136])), hash(Ki@1135, [Kb@1136])));
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Nb@1144], Bn(), tuple4(pk(skA()), [Ka@1151], Ki@1146, x1@1145));
    @premise new(*[Kb@1147], Bk(), tuple4(pk(skA()), [Nb@1144], Ki@1146, x1@1145));
    @premise know(*[Kb@1147], #t2@1150);
    @premise know(*[Nb@1144], #t0@1152);
    @premise know(*x1@1145, #t1@1153);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1144], x1@1145, pk(skA()), pk(skB())), hash(Ki@1146, [Kb@1147])), hash(Ki@1146, [Kb@1147])));
};
Rule deleted: 
@rule{
    @premise new(*[Nb@1122], Bn(), tuple4(pk(skA()), [Ka@1129], Ki@1124, x1@1123));
    @premise new(*[Kb@1125], Bk(), tuple4(pk(skA()), [Nb@1122], Ki@1124, x1@1123));
    @premise know(*skA(), #t1@1130);
    @premise know(*[Kb@1125], #t2@1128);
    @premise know(*[Nb@1122], #t0@1131);
    @premise know(*x1@1123, #t1@1132);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1122], x1@1123, pk(skA()), pk(skB())), hash(Ki@1124, [Kb@1125])), hash(Ki@1124, [Kb@1125])));
};
Rule deleted: 
@rule{
    @premise new(*[Nb@1133], Bn(), tuple4(pk(skA()), [Ka@1140], Ki@1135, x1@1134));
    @premise new(*[Kb@1136], Bk(), tuple4(pk(skA()), [Nb@1133], Ki@1135, x1@1134));
    @premise know(*skB(), #t1@1141);
    @premise know(*[Kb@1136], #t2@1139);
    @premise know(*[Nb@1133], #t0@1142);
    @premise know(*x1@1134, #t1@1143);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1133], x1@1134, pk(skA()), pk(skB())), hash(Ki@1135, [Kb@1136])), hash(Ki@1135, [Kb@1136])));
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};
Rule in cache: 8
Rule staged: 90
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1461], Ak(), tuple2(pkR@1462, [Na@1460]));
    @premise new(*[Na@1460], An(), tuple2(pkR@1462, [Ka@1461]));
    @premise new(*[Nb@1457], Bn(), tuple4(pk(skA()), [Ka@1463], Ki@1459, x1@1458));
    @premise new(*[Na@1460], Bk(), tuple4(pk(skA()), [Nb@1457], Ki@1459, x1@1458));
    @premise know(*[Nb@1457], #t0@1464);
    @premise know(*x1@1458, #t1@1465);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1457], x1@1458, pk(skA()), pk(skB())), hash(Ki@1459, [Na@1460])), hash(Ki@1459, [Na@1460])));
};
Rule invalid. 

Compose by at 2 : 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};
Rule in cache: 8
Rule staged: 90
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1470], Bk(), tuple4(pk(skA()), [Nb@1469], [Ka@1471], Ni@1472));
    @premise new(*[Nb@1469], Bn(), tuple4(pk(skA()), [Ka@1473], [Ka@1471], Ni@1472));
    @premise new(*[Ka@1471], Ak(), tuple2(pk(skB()), [Na@1474]));
    @premise new(*[Na@1474], An(), tuple2(pk(skB()), [Ka@1471]));
    @premise know(*Ni@1472, #t2@1475);
    @premise new(*[Nb@1466], Bn(), tuple4(pk(skA()), [Ka@1476], Ki@1468, x1@1467));
    @premise new(*[Nb@1469], Bk(), tuple4(pk(skA()), [Nb@1466], Ki@1468, x1@1467));
    @premise know(*[Nb@1466], #t0@1477);
    @premise know(*x1@1467, #t1@1478);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1466], x1@1467, pk(skA()), pk(skB())), hash(Ki@1468, [Nb@1469])), hash(Ki@1468, [Nb@1469])));
    @constraint #t@381 - #t2@1475 >= 0;
};
Rule invalid. 

Compose by at 2 : 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};
Rule in cache: 8
Rule staged: 90
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1483], Bk(), tuple4(x0@1484, [Nb@1482], x1@1485, Ni@1486));
    @premise new(*[Nb@1482], Bn(), tuple4(x0@1484, [Ka@1487], x1@1485, Ni@1486));
    @premise know(*x0@1484, #t0@1488);
    @premise know(*x1@1485, #t1@1489);
    @premise know(*Ni@1486, #t2@1490);
    @premise new(*[Nb@1479], Bn(), tuple4(pk(skA()), [Ka@1491], Ki@1481, x1@1480));
    @premise new(*[Nb@1482], Bk(), tuple4(pk(skA()), [Nb@1479], Ki@1481, x1@1480));
    @premise know(*[Nb@1479], #t0@1492);
    @premise know(*x1@1480, #t1@1493);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1479], x1@1480, pk(skA()), pk(skB())), hash(Ki@1481, [Nb@1482])), hash(Ki@1481, [Nb@1482])));
    @constraint #t@464 - #t1@1489 >= 0;
    @constraint #t@464 - #t0@1488 >= 0;
    @constraint #t@464 - #t2@1490 >= 0;
};
Rule invalid. 

Compose by at 2 : 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};
Rule in cache: 8
Rule staged: 90
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1497], Ak(), tuple2(pk(sk@1498), [Na@1499]));
    @premise new(*[Na@1499], An(), tuple2(pk(sk@1498), [Ka@1497]));
    @premise know(*sk@1498, #t1@1500);
    @premise new(*[Nb@1494], Bn(), tuple4(pk(skA()), [Ka@1501], Ki@1496, x1@1495));
    @premise new(*[Ka@1497], Bk(), tuple4(pk(skA()), [Nb@1494], Ki@1496, x1@1495));
    @premise know(*[Nb@1494], #t0@1502);
    @premise know(*x1@1495, #t1@1503);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1494], x1@1495, pk(skA()), pk(skB())), hash(Ki@1496, [Ka@1497])), hash(Ki@1496, [Ka@1497])));
    @constraint #t1@489 - #t1@1500 >= 0;
};
Rule invalid. 

Compose by at 2 : 
@rule{
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*sk@826, #t1@827);
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @conclusion know(*[Kb@824], #t@825);
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
    @constraint #t@825 - #t1@827 >= 0;
};
Rule in cache: 8
Rule staged: 90
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1507], Bk(), tuple4(pk(sk@1508), [Nb@1509], x1@1510, Ni@1511));
    @premise new(*[Nb@1509], Bn(), tuple4(pk(sk@1508), [Ka@1512], x1@1510, Ni@1511));
    @premise know(*sk@1508, #t1@1513);
    @premise know(*x1@1510, #t1@1514);
    @premise know(*Ni@1511, #t2@1515);
    @premise new(*[Nb@1504], Bn(), tuple4(pk(skA()), [Ka@1516], Ki@1506, x1@1505));
    @premise new(*[Kb@1507], Bk(), tuple4(pk(skA()), [Nb@1504], Ki@1506, x1@1505));
    @premise know(*[Nb@1504], #t0@1517);
    @premise know(*x1@1505, #t1@1518);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1504], x1@1505, pk(skA()), pk(skB())), hash(Ki@1506, [Kb@1507])), hash(Ki@1506, [Kb@1507])));
    @constraint #t@825 - #t1@1513 >= 0;
    @constraint #t@825 - #t1@1514 >= 0;
    @constraint #t@825 - #t2@1515 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@1507], Bk(), tuple4(pk(skA()), [Nb@1509], x1@1510, Ni@1511));
    @premise new(*[Nb@1509], Bn(), tuple4(pk(skA()), [Ka@1512], x1@1510, Ni@1511));
    @premise know(*skA(), #t1@1513);
    @premise know(*[Nb@1509], #t0@1517);
    @premise know(*x1@1510, #t1@1514);
    @premise know(*Ni@1511, #t2@1515);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1509], Ni@1511, pk(skA()), pk(skB())), hash(x1@1510, [Kb@1507])), hash(x1@1510, [Kb@1507])));
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@1188, *senc(senc(tuple4(x1@1186, [Na@1187], pk(skA()), x2@1188), hash([Ka@1189], [Kb@1190])), hash([Ka@1189], [Kb@1190])));
    @premise new(*[Kb@1190], Bk(), tuple4(pk(skA()), [Nb@1193], x1@1194, Ni@1195));
    @premise new(*[Nb@1193], Bn(), tuple4(pk(skA()), [Ka@1196], x1@1194, Ni@1195));
    @premise new(*[Ka@1189], Ak(), tuple2(x2@1188, [Na@1187]));
    @premise new(*[Na@1187], An(), tuple2(x2@1188, [Ka@1189]));
    @premise know(*skA(), #t1@1192);
    @premise know(*[Ka@1189], #t1@1197);
    @premise know(*[Kb@1190], #t2@1198);
    @premise know(*[Na@1187], #t0@1199);
    @premise know(*Ni@1195, #t2@1200);
    @premise know(*x1@1194, #t1@1201);
    @premise know(*x2@1188, #t2@1202);
    @premise know(*x1@1186, #t1@1203);
    @conclusion know(*senc(tuple4(x1@1186, [Na@1187], pk(skA()), x2@1188), hash([Ka@1189], [Kb@1190])), #t@1191);
    @constraint #t@1191 - #t2@1198 >= 0;
    @constraint #t@1191 - #t1@1197 >= 0;
    @constraint #t@1191 - #t1@1201 >= 0;
    @constraint #t@1191 - #t2@1200 >= 0;
    @constraint #t@1191 - #t2@1202 >= 0;
    @constraint #t@1191 - #t1@1203 >= 0;
    @constraint #t@1191 - #t0@1199 >= 0;
    @constraint #t@1191 - #t1@1192 >= 0;
};
Rule implied by: 
@rule{
    @premise init(*pk(skA()), *x2@1051, *senc(senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), hash([Ka@1052], m2@1053)));
    @premise new(*[Ka@1052], Ak(), tuple2(x2@1051, [Na@1050]));
    @premise new(*[Na@1050], An(), tuple2(x2@1051, [Ka@1052]));
    @premise know(*[Ka@1052], #t1@1055);
    @premise know(*[Na@1050], #t0@1057);
    @premise know(*m2@1053, #t2@1056);
    @premise know(*x2@1051, #t2@1059);
    @premise know(*x1@1049, #t1@1060);
    @conclusion know(*senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), #t@1054);
    @constraint #t@1054 - #t0@1057 >= 0;
    @constraint #t@1054 - #t2@1059 >= 0;
    @constraint #t@1054 - #t1@1060 >= 0;
    @constraint #t@1054 - #t2@1056 >= 0;
    @constraint #t@1054 - #t1@1055 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@1206, *senc(senc(tuple4(x1@1204, [Na@1205], pk(skA()), x2@1206), hash([Ka@1207], [Kb@1208])), hash([Ka@1207], [Kb@1208])));
    @premise new(*[Kb@1208], Bk(), tuple4(pk(skA()), [Nb@1210], x1@1211, Ni@1212));
    @premise new(*[Nb@1210], Bn(), tuple4(pk(skA()), [Ka@1213], x1@1211, Ni@1212));
    @premise new(*[Ka@1207], Ak(), tuple2(x2@1206, [Na@1205]));
    @premise new(*[Na@1205], An(), tuple2(x2@1206, [Ka@1207]));
    @premise know(*[Ka@1207], #t1@1214);
    @premise know(*[Kb@1208], #t2@1215);
    @premise know(*[Na@1205], #t0@1216);
    @premise know(*Ni@1212, #t2@1217);
    @premise know(*x1@1211, #t1@1218);
    @premise know(*x2@1206, #t2@1219);
    @premise know(*x1@1204, #t1@1220);
    @conclusion know(*senc(tuple4(x1@1204, [Na@1205], pk(skA()), x2@1206), hash([Ka@1207], [Kb@1208])), #t@1209);
    @constraint #t@1209 - #t2@1217 >= 0;
    @constraint #t@1209 - #t2@1215 >= 0;
    @constraint #t@1209 - #t1@1214 >= 0;
    @constraint #t@1209 - #t1@1218 >= 0;
    @constraint #t@1209 - #t2@1219 >= 0;
    @constraint #t@1209 - #t1@1220 >= 0;
    @constraint #t@1209 - #t0@1216 >= 0;
};
Rule implied by: 
@rule{
    @premise init(*pk(skA()), *x2@1051, *senc(senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), hash([Ka@1052], m2@1053)));
    @premise new(*[Ka@1052], Ak(), tuple2(x2@1051, [Na@1050]));
    @premise new(*[Na@1050], An(), tuple2(x2@1051, [Ka@1052]));
    @premise know(*[Ka@1052], #t1@1055);
    @premise know(*[Na@1050], #t0@1057);
    @premise know(*m2@1053, #t2@1056);
    @premise know(*x2@1051, #t2@1059);
    @premise know(*x1@1049, #t1@1060);
    @conclusion know(*senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), #t@1054);
    @constraint #t@1054 - #t0@1057 >= 0;
    @constraint #t@1054 - #t2@1059 >= 0;
    @constraint #t@1054 - #t1@1060 >= 0;
    @constraint #t@1054 - #t2@1056 >= 0;
    @constraint #t@1054 - #t1@1055 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Kb@1284], Bk(), tuple4(pk(sk@1285), [Nb@1286], x1@1287, Ni@1288));
    @premise new(*[Nb@1286], Bn(), tuple4(pk(sk@1285), [Ka@1289], x1@1287, Ni@1288));
    @premise know(*pk(sk@1285), #t0@1296);
    @premise know(*sk@1285, #t1@1290);
    @premise know(*x1@1287, #t1@1291);
    @premise know(*Ni@1288, #t2@1292);
    @conclusion know(*tuple4(Ni@1288, [Nb@1286], pk(skB()), pk(sk@1285)), #t@1283);
    @constraint #t@1283 - #t0@1296 >= 0;
    @constraint #t@1283 - #t1@1290 >= 0;
    @constraint #t@1283 - #t1@1291 >= 0;
    @constraint #t@1283 - #t2@1292 >= 0;
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule in cache: 6
Rule staged: 91
Rule before check and clean: 
@rule{
    @premise know(*sk@1521, #t1@1523);
    @premise new(*[Kb@1524], Bk(), tuple4(pk(sk@1521), [Nb@1520], x1@1525, Ni@1519));
    @premise new(*[Nb@1520], Bn(), tuple4(pk(sk@1521), [Ka@1526], x1@1525, Ni@1519));
    @premise know(*sk@1521, #t1@1527);
    @premise know(*x1@1525, #t1@1528);
    @premise know(*Ni@1519, #t2@1529);
    @conclusion know(*tuple4(Ni@1519, [Nb@1520], pk(skB()), pk(sk@1521)), #t@1522);
    @constraint -#t1@1523 + #t@90 >= 0;
    @constraint #t@1522 - #t@90 >= 0;
    @constraint #t@1522 - #t1@1527 >= 0;
    @constraint #t@1522 - #t1@1528 >= 0;
    @constraint #t@1522 - #t2@1529 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@1524], Bk(), tuple4(pk(sk@1521), [Nb@1520], x1@1525, Ni@1519));
    @premise new(*[Nb@1520], Bn(), tuple4(pk(sk@1521), [Ka@1526], x1@1525, Ni@1519));
    @premise know(*sk@1521, #t1@1523);
    @premise know(*x1@1525, #t1@1528);
    @premise know(*Ni@1519, #t2@1529);
    @conclusion know(*tuple4(Ni@1519, [Nb@1520], pk(skB()), pk(sk@1521)), #t@1522);
    @constraint #t@1522 - #t1@1528 >= 0;
    @constraint #t@1522 - #t2@1529 >= 0;
    @constraint #t@1522 - #t1@1523 >= 0;
};

Compose by at 2 : 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};
Rule in cache: 7
Rule staged: 91
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1533], Bk(), tuple4(pk(skA()), [Nb@1531], x1@1534, Ni@1530));
    @premise new(*[Nb@1531], Bn(), tuple4(pk(skA()), [Ka@1535], x1@1534, Ni@1530));
    @premise know(*skA(), #t1@1536);
    @premise know(*x1@1534, #t1@1537);
    @premise know(*Ni@1530, #t2@1538);
    @conclusion know(*tuple4(Ni@1530, [Nb@1531], pk(skB()), pk(skA())), #t@1532);
    @constraint #t@1532 - #t@125 >= 0;
    @constraint #t@1532 - #t2@1538 >= 0;
    @constraint #t@1532 - #t1@1537 >= 0;
    @constraint #t@1532 - #t1@1536 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@1533], Bk(), tuple4(pk(skA()), [Nb@1531], x1@1534, Ni@1530));
    @premise new(*[Nb@1531], Bn(), tuple4(pk(skA()), [Ka@1535], x1@1534, Ni@1530));
    @premise know(*skA(), #t1@1536);
    @premise know(*x1@1534, #t1@1537);
    @premise know(*Ni@1530, #t2@1538);
    @conclusion know(*tuple4(Ni@1530, [Nb@1531], pk(skB()), pk(skA())), #t@1532);
    @constraint #t@1532 - #t2@1538 >= 0;
    @constraint #t@1532 - #t1@1536 >= 0;
    @constraint #t@1532 - #t1@1537 >= 0;
};

Compose by at 2 : 
@rule{
    @conclusion know(*pk(skB()), #t@126);
};
Rule in cache: 8
Rule staged: 91
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1542], Bk(), tuple4(pk(skB()), [Nb@1540], x1@1543, Ni@1539));
    @premise new(*[Nb@1540], Bn(), tuple4(pk(skB()), [Ka@1544], x1@1543, Ni@1539));
    @premise know(*skB(), #t1@1545);
    @premise know(*x1@1543, #t1@1546);
    @premise know(*Ni@1539, #t2@1547);
    @conclusion know(*tuple4(Ni@1539, [Nb@1540], pk(skB()), pk(skB())), #t@1541);
    @constraint #t@1541 - #t@126 >= 0;
    @constraint #t@1541 - #t2@1547 >= 0;
    @constraint #t@1541 - #t1@1546 >= 0;
    @constraint #t@1541 - #t1@1545 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@1542], Bk(), tuple4(pk(skB()), [Nb@1540], x1@1543, Ni@1539));
    @premise new(*[Nb@1540], Bn(), tuple4(pk(skB()), [Ka@1544], x1@1543, Ni@1539));
    @premise know(*skB(), #t1@1545);
    @premise know(*x1@1543, #t1@1546);
    @premise know(*Ni@1539, #t2@1547);
    @conclusion know(*tuple4(Ni@1539, [Nb@1540], pk(skB()), pk(skB())), #t@1541);
    @constraint #t@1541 - #t2@1547 >= 0;
    @constraint #t@1541 - #t1@1545 >= 0;
    @constraint #t@1541 - #t1@1546 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1306], [Na@1315], pk(skA()), pk(skB())), hash([Ka@1312], [Kb@1309])), hash([Ka@1312], [Kb@1309])));
    @premise new(*[Nb@1306], Bn(), tuple4(pk(skA()), [Ka@1314], [Ka@1312], [Na@1315]));
    @premise new(*[Kb@1309], Bk(), tuple4(pk(skA()), [Nb@1306], [Ka@1312], [Na@1315]));
    @premise new(*[Kb@1311], Bk(), tuple4(pk(skA()), [Nb@1306], [Ka@1312], [Na@1315]));
    @premise new(*[Ka@1312], Ak(), tuple2(pk(skB()), [Na@1315]));
    @premise new(*[Na@1315], An(), tuple2(pk(skB()), [Ka@1312]));
    @premise know(*[Na@1315], #t2@1316);
    @conclusion know(*senc(tuple4([Nb@1306], [Na@1315], pk(skA()), pk(skB())), hash([Ka@1312], [Kb@1309])), #t@1310);
    @constraint #t@1310 - #t2@1316 >= 0;
};
Rule added at 6.

Compose by at 6 : 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};
Rule in cache: 8
Rule staged: 92
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1553], Ak(), tuple2(pkR@1554, [Na@1549]));
    @premise new(*[Na@1549], An(), tuple2(pkR@1554, [Ka@1553]));
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1548], [Na@1549], pk(skA()), pk(skB())), hash([Ka@1550], [Kb@1551])), hash([Ka@1550], [Kb@1551])));
    @premise new(*[Nb@1548], Bn(), tuple4(pk(skA()), [Ka@1555], [Ka@1550], [Na@1549]));
    @premise new(*[Kb@1551], Bk(), tuple4(pk(skA()), [Nb@1548], [Ka@1550], [Na@1549]));
    @premise new(*[Kb@1556], Bk(), tuple4(pk(skA()), [Nb@1548], [Ka@1550], [Na@1549]));
    @premise new(*[Ka@1550], Ak(), tuple2(pk(skB()), [Na@1549]));
    @premise new(*[Na@1549], An(), tuple2(pk(skB()), [Ka@1550]));
    @conclusion know(*senc(tuple4([Nb@1548], [Na@1549], pk(skA()), pk(skB())), hash([Ka@1550], [Kb@1551])), #t@1552);
    @constraint #t@1552 - #t1@275 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1548], [Na@1549], pk(skA()), pk(skB())), hash([Ka@1553], [Kb@1551])), hash([Ka@1553], [Kb@1551])));
    @premise new(*[Nb@1548], Bn(), tuple4(pk(skA()), [Ka@1555], [Ka@1553], [Na@1549]));
    @premise new(*[Kb@1551], Bk(), tuple4(pk(skA()), [Nb@1548], [Ka@1553], [Na@1549]));
    @premise new(*[Kb@1556], Bk(), tuple4(pk(skA()), [Nb@1548], [Ka@1553], [Na@1549]));
    @premise new(*[Ka@1553], Ak(), tuple2(pk(skB()), [Na@1549]));
    @premise new(*[Na@1549], An(), tuple2(pk(skB()), [Ka@1553]));
    @conclusion know(*senc(tuple4([Nb@1548], [Na@1549], pk(skA()), pk(skB())), hash([Ka@1553], [Kb@1551])), #t@1552);
};

Compose by at 6 : 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};
Rule in cache: 9
Rule staged: 92
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1562], Bk(), tuple4(pk(skA()), [Nb@1558], [Ka@1563], Ni@1564));
    @premise new(*[Nb@1558], Bn(), tuple4(pk(skA()), [Ka@1565], [Ka@1563], Ni@1564));
    @premise new(*[Ka@1563], Ak(), tuple2(pk(skB()), [Na@1566]));
    @premise new(*[Na@1566], An(), tuple2(pk(skB()), [Ka@1563]));
    @premise know(*Ni@1564, #t2@1567);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1557], [Nb@1558], pk(skA()), pk(skB())), hash([Ka@1559], [Kb@1560])), hash([Ka@1559], [Kb@1560])));
    @premise new(*[Nb@1557], Bn(), tuple4(pk(skA()), [Ka@1568], [Ka@1559], [Nb@1558]));
    @premise new(*[Kb@1560], Bk(), tuple4(pk(skA()), [Nb@1557], [Ka@1559], [Nb@1558]));
    @premise new(*[Kb@1569], Bk(), tuple4(pk(skA()), [Nb@1557], [Ka@1559], [Nb@1558]));
    @premise new(*[Ka@1559], Ak(), tuple2(pk(skB()), [Nb@1558]));
    @premise new(*[Nb@1558], An(), tuple2(pk(skB()), [Ka@1559]));
    @conclusion know(*senc(tuple4([Nb@1557], [Nb@1558], pk(skA()), pk(skB())), hash([Ka@1559], [Kb@1560])), #t@1561);
    @constraint #t@381 - #t2@1567 >= 0;
    @constraint #t@1561 - #t@381 >= 0;
};
Rule invalid. 

Compose by at 6 : 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};
Rule in cache: 9
Rule staged: 92
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1575], Bk(), tuple4(x0@1576, [Nb@1571], x1@1577, Ni@1578));
    @premise new(*[Nb@1571], Bn(), tuple4(x0@1576, [Ka@1579], x1@1577, Ni@1578));
    @premise know(*x0@1576, #t0@1580);
    @premise know(*x1@1577, #t1@1581);
    @premise know(*Ni@1578, #t2@1582);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1570], [Nb@1571], pk(skA()), pk(skB())), hash([Ka@1572], [Kb@1573])), hash([Ka@1572], [Kb@1573])));
    @premise new(*[Nb@1570], Bn(), tuple4(pk(skA()), [Ka@1583], [Ka@1572], [Nb@1571]));
    @premise new(*[Kb@1573], Bk(), tuple4(pk(skA()), [Nb@1570], [Ka@1572], [Nb@1571]));
    @premise new(*[Kb@1584], Bk(), tuple4(pk(skA()), [Nb@1570], [Ka@1572], [Nb@1571]));
    @premise new(*[Ka@1572], Ak(), tuple2(pk(skB()), [Nb@1571]));
    @premise new(*[Nb@1571], An(), tuple2(pk(skB()), [Ka@1572]));
    @conclusion know(*senc(tuple4([Nb@1570], [Nb@1571], pk(skA()), pk(skB())), hash([Ka@1572], [Kb@1573])), #t@1574);
    @constraint #t@464 - #t1@1581 >= 0;
    @constraint #t@464 - #t0@1580 >= 0;
    @constraint #t@464 - #t2@1582 >= 0;
    @constraint #t@1574 - #t@464 >= 0;
};
Rule invalid. 

Compose by at 6 : 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};
Rule in cache: 9
Rule staged: 92
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1586], Ak(), tuple2(pk(sk@1590), [Na@1591]));
    @premise new(*[Na@1591], An(), tuple2(pk(sk@1590), [Ka@1586]));
    @premise know(*sk@1590, #t1@1592);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1585], [Ka@1586], pk(skA()), pk(skB())), hash([Ka@1587], [Kb@1588])), hash([Ka@1587], [Kb@1588])));
    @premise new(*[Nb@1585], Bn(), tuple4(pk(skA()), [Ka@1593], [Ka@1587], [Ka@1586]));
    @premise new(*[Kb@1588], Bk(), tuple4(pk(skA()), [Nb@1585], [Ka@1587], [Ka@1586]));
    @premise new(*[Kb@1594], Bk(), tuple4(pk(skA()), [Nb@1585], [Ka@1587], [Ka@1586]));
    @premise new(*[Ka@1587], Ak(), tuple2(pk(skB()), [Ka@1586]));
    @premise new(*[Ka@1586], An(), tuple2(pk(skB()), [Ka@1587]));
    @conclusion know(*senc(tuple4([Nb@1585], [Ka@1586], pk(skA()), pk(skB())), hash([Ka@1587], [Kb@1588])), #t@1589);
    @constraint #t1@489 - #t1@1592 >= 0;
    @constraint #t@1589 - #t1@489 >= 0;
};
Rule invalid. 

Compose by at 6 : 
@rule{
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*sk@826, #t1@827);
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @conclusion know(*[Kb@824], #t@825);
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
    @constraint #t@825 - #t1@827 >= 0;
};
Rule in cache: 9
Rule staged: 92
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1596], Bk(), tuple4(pk(sk@1600), [Nb@1601], x1@1602, Ni@1603));
    @premise new(*[Nb@1601], Bn(), tuple4(pk(sk@1600), [Ka@1604], x1@1602, Ni@1603));
    @premise know(*sk@1600, #t1@1605);
    @premise know(*x1@1602, #t1@1606);
    @premise know(*Ni@1603, #t2@1607);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1595], [Kb@1596], pk(skA()), pk(skB())), hash([Ka@1597], [Kb@1598])), hash([Ka@1597], [Kb@1598])));
    @premise new(*[Nb@1595], Bn(), tuple4(pk(skA()), [Ka@1608], [Ka@1597], [Kb@1596]));
    @premise new(*[Kb@1598], Bk(), tuple4(pk(skA()), [Nb@1595], [Ka@1597], [Kb@1596]));
    @premise new(*[Kb@1609], Bk(), tuple4(pk(skA()), [Nb@1595], [Ka@1597], [Kb@1596]));
    @premise new(*[Ka@1597], Ak(), tuple2(pk(skB()), [Kb@1596]));
    @premise new(*[Kb@1596], An(), tuple2(pk(skB()), [Ka@1597]));
    @conclusion know(*senc(tuple4([Nb@1595], [Kb@1596], pk(skA()), pk(skB())), hash([Ka@1597], [Kb@1598])), #t@1599);
    @constraint #t@825 - #t1@1605 >= 0;
    @constraint #t@825 - #t1@1606 >= 0;
    @constraint #t@825 - #t2@1607 >= 0;
    @constraint #t@1599 - #t@825 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1318], [Na@1319], pk(skA()), pk(skB())), hash([Ka@1320], [Kb@1321])), hash([Ka@1320], [Kb@1321])));
    @premise new(*[Kb@1323], Bk(), tuple4(pk(skA()), [Nb@1318], [Ka@1320], [Na@1319]));
    @premise new(*[Nb@1318], Bn(), tuple4(pk(skA()), [Ka@1327], [Ka@1320], [Na@1319]));
    @premise new(*[Kb@1321], Bk(), tuple4(pk(skA()), [Nb@1318], [Ka@1320], [Na@1319]));
    @premise new(*[Na@1319], An(), tuple2(pk(skB()), [Ka@1320]));
    @premise new(*[Ka@1320], Ak(), tuple2(pk(skB()), [Na@1319]));
    @premise know(*pk(skA()), #t0@1328);
    @premise know(*[Ka@1320], #t1@1329);
    @premise know(*[Na@1319], #t2@1330);
    @conclusion know(*senc(tuple4([Nb@1318], [Na@1319], pk(skA()), pk(skB())), hash([Ka@1320], [Kb@1321])), #t@1322);
    @constraint #t@1322 - #t1@1329 >= 0;
    @constraint #t@1322 - #t0@1328 >= 0;
    @constraint #t@1322 - #t2@1330 >= 0;
};
Rule implied by: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1306], [Na@1315], pk(skA()), pk(skB())), hash([Ka@1312], [Kb@1309])), hash([Ka@1312], [Kb@1309])));
    @premise new(*[Nb@1306], Bn(), tuple4(pk(skA()), [Ka@1314], [Ka@1312], [Na@1315]));
    @premise new(*[Kb@1309], Bk(), tuple4(pk(skA()), [Nb@1306], [Ka@1312], [Na@1315]));
    @premise new(*[Kb@1311], Bk(), tuple4(pk(skA()), [Nb@1306], [Ka@1312], [Na@1315]));
    @premise new(*[Ka@1312], Ak(), tuple2(pk(skB()), [Na@1315]));
    @premise new(*[Na@1315], An(), tuple2(pk(skB()), [Ka@1312]));
    @premise know(*[Na@1315], #t2@1316);
    @conclusion know(*senc(tuple4([Nb@1306], [Na@1315], pk(skA()), pk(skB())), hash([Ka@1312], [Kb@1309])), #t@1310);
    @constraint #t@1310 - #t2@1316 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1407), *senc(senc(tuple4(x1@1401, [Na@1408], pk(skA()), pk(sk@1407)), hash([Ka@1404], m2@1405)), hash([Ka@1404], m2@1405)));
    @premise new(*[Ka@1404], Ak(), tuple2(pk(sk@1407), [Na@1408]));
    @premise new(*[Na@1408], An(), tuple2(pk(sk@1407), [Ka@1404]));
    @premise know(*pk(sk@1407), #t2@1412);
    @premise know(*[Na@1408], #t0@1410);
    @premise know(*m2@1405, #t2@1411);
    @premise know(*sk@1407, #t1@1409);
    @premise know(*x1@1401, #t1@1413);
    @conclusion know(*senc(tuple4(x1@1401, [Na@1408], pk(skA()), pk(sk@1407)), hash([Ka@1404], m2@1405)), #t@1406);
    @constraint #t@1406 - #t1@1409 >= 0;
    @constraint #t@1406 - #t2@1411 >= 0;
    @constraint #t@1406 - #t2@1412 >= 0;
    @constraint #t@1406 - #t1@1413 >= 0;
    @constraint #t@1406 - #t0@1410 >= 0;
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule in cache: 7
Rule staged: 93
Rule before check and clean: 
@rule{
    @premise know(*sk@1612, #t1@1616);
    @premise init(*pk(skA()), *pk(sk@1612), *senc(senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), hash([Ka@1613], m2@1614)));
    @premise new(*[Ka@1613], Ak(), tuple2(pk(sk@1612), [Na@1611]));
    @premise new(*[Na@1611], An(), tuple2(pk(sk@1612), [Ka@1613]));
    @premise know(*[Na@1611], #t0@1617);
    @premise know(*m2@1614, #t2@1618);
    @premise know(*sk@1612, #t1@1619);
    @premise know(*x1@1610, #t1@1620);
    @conclusion know(*senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), #t@1615);
    @constraint -#t1@1616 + #t@90 >= 0;
    @constraint #t@1615 - #t@90 >= 0;
    @constraint #t@1615 - #t1@1619 >= 0;
    @constraint #t@1615 - #t2@1618 >= 0;
    @constraint #t@1615 - #t1@1620 >= 0;
    @constraint #t@1615 - #t0@1617 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1612), *senc(senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), hash([Ka@1613], m2@1614)));
    @premise new(*[Na@1611], An(), tuple2(pk(sk@1612), [Ka@1613]));
    @premise new(*[Ka@1613], Ak(), tuple2(pk(sk@1612), [Na@1611]));
    @premise know(*[Na@1611], #t0@1617);
    @premise know(*sk@1612, #t1@1616);
    @premise know(*m2@1614, #t2@1618);
    @premise know(*x1@1610, #t1@1620);
    @conclusion know(*senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), #t@1615);
    @constraint #t@1615 - #t2@1618 >= 0;
    @constraint #t@1615 - #t1@1620 >= 0;
    @constraint #t@1615 - #t0@1617 >= 0;
    @constraint #t@1615 - #t1@1616 >= 0;
};

Compose by at 3 : 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};
Rule in cache: 8
Rule staged: 93
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *pk(skA()), *senc(senc(tuple4(x1@1621, [Na@1622], pk(skA()), pk(skA())), hash([Ka@1623], m2@1624)), hash([Ka@1623], m2@1624)));
    @premise new(*[Ka@1623], Ak(), tuple2(pk(skA()), [Na@1622]));
    @premise new(*[Na@1622], An(), tuple2(pk(skA()), [Ka@1623]));
    @premise know(*[Na@1622], #t0@1626);
    @premise know(*m2@1624, #t2@1627);
    @premise know(*skA(), #t1@1628);
    @premise know(*x1@1621, #t1@1629);
    @conclusion know(*senc(tuple4(x1@1621, [Na@1622], pk(skA()), pk(skA())), hash([Ka@1623], m2@1624)), #t@1625);
    @constraint #t@1625 - #t0@1626 >= 0;
    @constraint #t@1625 - #t1@1629 >= 0;
    @constraint #t@1625 - #t@125 >= 0;
    @constraint #t@1625 - #t2@1627 >= 0;
    @constraint #t@1625 - #t1@1628 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skA()), *senc(senc(tuple4(x1@1621, [Na@1622], pk(skA()), pk(skA())), hash([Ka@1623], m2@1624)), hash([Ka@1623], m2@1624)));
    @premise new(*[Ka@1623], Ak(), tuple2(pk(skA()), [Na@1622]));
    @premise new(*[Na@1622], An(), tuple2(pk(skA()), [Ka@1623]));
    @premise know(*skA(), #t1@1628);
    @premise know(*[Na@1622], #t0@1626);
    @premise know(*m2@1624, #t2@1627);
    @premise know(*x1@1621, #t1@1629);
    @conclusion know(*senc(tuple4(x1@1621, [Na@1622], pk(skA()), pk(skA())), hash([Ka@1623], m2@1624)), #t@1625);
    @constraint #t@1625 - #t1@1629 >= 0;
    @constraint #t@1625 - #t1@1628 >= 0;
    @constraint #t@1625 - #t2@1627 >= 0;
    @constraint #t@1625 - #t0@1626 >= 0;
};

Compose by at 3 : 
@rule{
    @conclusion know(*pk(skB()), #t@126);
};
Rule in cache: 9
Rule staged: 93
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4(x1@1630, [Na@1631], pk(skA()), pk(skB())), hash([Ka@1632], m2@1633)), hash([Ka@1632], m2@1633)));
    @premise new(*[Ka@1632], Ak(), tuple2(pk(skB()), [Na@1631]));
    @premise new(*[Na@1631], An(), tuple2(pk(skB()), [Ka@1632]));
    @premise know(*[Na@1631], #t0@1635);
    @premise know(*m2@1633, #t2@1636);
    @premise know(*skB(), #t1@1637);
    @premise know(*x1@1630, #t1@1638);
    @conclusion know(*senc(tuple4(x1@1630, [Na@1631], pk(skA()), pk(skB())), hash([Ka@1632], m2@1633)), #t@1634);
    @constraint #t@1634 - #t0@1635 >= 0;
    @constraint #t@1634 - #t1@1638 >= 0;
    @constraint #t@1634 - #t@126 >= 0;
    @constraint #t@1634 - #t2@1636 >= 0;
    @constraint #t@1634 - #t1@1637 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4(x1@1630, [Na@1631], pk(skA()), pk(skB())), hash([Ka@1632], m2@1633)), hash([Ka@1632], m2@1633)));
    @premise new(*[Ka@1632], Ak(), tuple2(pk(skB()), [Na@1631]));
    @premise new(*[Na@1631], An(), tuple2(pk(skB()), [Ka@1632]));
    @premise know(*skB(), #t1@1637);
    @premise know(*[Na@1631], #t0@1635);
    @premise know(*m2@1633, #t2@1636);
    @premise know(*x1@1630, #t1@1638);
    @conclusion know(*senc(tuple4(x1@1630, [Na@1631], pk(skA()), pk(skB())), hash([Ka@1632], m2@1633)), #t@1634);
    @constraint #t@1634 - #t1@1638 >= 0;
    @constraint #t@1634 - #t1@1637 >= 0;
    @constraint #t@1634 - #t2@1636 >= 0;
    @constraint #t@1634 - #t0@1635 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@1434, *senc(senc(tuple4(x1@1432, [Na@1433], pk(skA()), x2@1434), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))));
    @premise new(*[Ka@1436], Ak(), tuple2(pk(skA()), [Na@1439]));
    @premise new(*[Na@1439], An(), tuple2(pk(skA()), [Ka@1436]));
    @premise new(*[Ka@1435], Ak(), tuple2(x2@1434, [Na@1433]));
    @premise new(*[Na@1433], An(), tuple2(x2@1434, [Ka@1435]));
    @premise know(*skA(), #t1@1438);
    @premise know(*[Ka@1436], #t1@1440);
    @premise know(*[Ka@1435], #t1@1441);
    @premise know(*[Na@1433], #t0@1442);
    @premise know(*x2@1434, #t2@1443);
    @premise know(*x1@1432, #t1@1444);
    @conclusion know(*senc(tuple4(x1@1432, [Na@1433], pk(skA()), x2@1434), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))), #t@1437);
    @constraint #t@1437 - #t1@1440 >= 0;
    @constraint #t@1437 - #t1@1441 >= 0;
    @constraint #t@1437 - #t2@1443 >= 0;
    @constraint #t@1437 - #t1@1444 >= 0;
    @constraint #t@1437 - #t0@1442 >= 0;
    @constraint #t@1437 - #t1@1438 >= 0;
};
Rule added at 5.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@1447, *senc(senc(tuple4(x1@1445, [Na@1446], pk(skA()), x2@1447), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))));
    @premise new(*[Ka@1449], Ak(), tuple2(pk(skA()), [Na@1451]));
    @premise new(*[Na@1451], An(), tuple2(pk(skA()), [Ka@1449]));
    @premise new(*[Na@1446], An(), tuple2(x2@1447, [Ka@1448]));
    @premise new(*[Ka@1448], Ak(), tuple2(x2@1447, [Na@1446]));
    @premise know(*[Ka@1449], #t1@1452);
    @premise know(*[Ka@1448], #t1@1453);
    @premise know(*[Na@1446], #t0@1454);
    @premise know(*x2@1447, #t2@1455);
    @premise know(*x1@1445, #t1@1456);
    @conclusion know(*senc(tuple4(x1@1445, [Na@1446], pk(skA()), x2@1447), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))), #t@1450);
    @constraint #t@1450 - #t2@1455 >= 0;
    @constraint #t@1450 - #t1@1452 >= 0;
    @constraint #t@1450 - #t1@1453 >= 0;
    @constraint #t@1450 - #t1@1456 >= 0;
    @constraint #t@1450 - #t0@1454 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *x2@1063, *senc(senc(tuple4(x1@1061, [Na@1062], pk(skA()), x2@1063), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))));
    @premise new(*[Ka@1065], Ak(), tuple2(pk(skA()), [Na@1069]));
    @premise new(*[Na@1069], An(), tuple2(pk(skA()), [Ka@1065]));
    @premise new(*[Na@1062], An(), tuple2(x2@1063, [Ka@1064]));
    @premise new(*[Ka@1064], Ak(), tuple2(x2@1063, [Na@1062]));
    @premise know(*pk(skA()), #t0@1067);
    @premise know(*[Ka@1065], #t1@1068);
    @premise know(*[Ka@1064], #t1@1071);
    @premise know(*[Na@1062], #t0@1072);
    @premise know(*x2@1063, #t2@1073);
    @premise know(*x1@1061, #t1@1074);
    @conclusion know(*senc(tuple4(x1@1061, [Na@1062], pk(skA()), x2@1063), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))), #t@1066);
    @constraint #t@1066 - #t0@1072 >= 0;
    @constraint #t@1066 - #t1@1071 >= 0;
    @constraint #t@1066 - #t2@1073 >= 0;
    @constraint #t@1066 - #t1@1074 >= 0;
    @constraint #t@1066 - #t1@1068 >= 0;
    @constraint #t@1066 - #t0@1067 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *x2@1434, *senc(senc(tuple4(x1@1432, [Na@1433], pk(skA()), x2@1434), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))));
    @premise new(*[Ka@1436], Ak(), tuple2(pk(skA()), [Na@1439]));
    @premise new(*[Na@1439], An(), tuple2(pk(skA()), [Ka@1436]));
    @premise new(*[Ka@1435], Ak(), tuple2(x2@1434, [Na@1433]));
    @premise new(*[Na@1433], An(), tuple2(x2@1434, [Ka@1435]));
    @premise know(*skA(), #t1@1438);
    @premise know(*[Ka@1436], #t1@1440);
    @premise know(*[Ka@1435], #t1@1441);
    @premise know(*[Na@1433], #t0@1442);
    @premise know(*x2@1434, #t2@1443);
    @premise know(*x1@1432, #t1@1444);
    @conclusion know(*senc(tuple4(x1@1432, [Na@1433], pk(skA()), x2@1434), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))), #t@1437);
    @constraint #t@1437 - #t1@1440 >= 0;
    @constraint #t@1437 - #t1@1441 >= 0;
    @constraint #t@1437 - #t2@1443 >= 0;
    @constraint #t@1437 - #t1@1444 >= 0;
    @constraint #t@1437 - #t0@1442 >= 0;
    @constraint #t@1437 - #t1@1438 >= 0;
};
Rule added at 5.

Compose by at 5 : 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};
Rule in cache: 8
Rule staged: 95
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1645], Ak(), tuple2(pkR@1646, [Na@1643]));
    @premise new(*[Na@1643], An(), tuple2(pkR@1646, [Ka@1645]));
    @premise init(*pk(skA()), *x2@1641, *senc(senc(tuple4(x1@1639, [Na@1640], pk(skA()), x2@1641), hash([Ka@1642], tuple2(pk(skA()), [Na@1643]))), hash([Ka@1642], tuple2(pk(skA()), [Na@1643]))));
    @premise new(*[Na@1643], Ak(), tuple2(pk(skA()), [Na@1647]));
    @premise new(*[Na@1647], An(), tuple2(pk(skA()), [Na@1643]));
    @premise new(*[Na@1640], An(), tuple2(x2@1641, [Ka@1642]));
    @premise new(*[Ka@1642], Ak(), tuple2(x2@1641, [Na@1640]));
    @premise know(*[Ka@1642], #t1@1648);
    @premise know(*[Na@1640], #t0@1649);
    @premise know(*x2@1641, #t2@1650);
    @premise know(*x1@1639, #t1@1651);
    @conclusion know(*senc(tuple4(x1@1639, [Na@1640], pk(skA()), x2@1641), hash([Ka@1642], tuple2(pk(skA()), [Na@1643]))), #t@1644);
    @constraint #t@1644 - #t1@275 >= 0;
    @constraint #t@1644 - #t1@1648 >= 0;
    @constraint #t@1644 - #t2@1650 >= 0;
    @constraint #t@1644 - #t1@1651 >= 0;
    @constraint #t@1644 - #t0@1649 >= 0;
};
Rule invalid. 

Compose by at 5 : 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};
Rule in cache: 8
Rule staged: 95
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1658], Bk(), tuple4(pk(skA()), [Nb@1656], [Ka@1659], Ni@1660));
    @premise new(*[Nb@1656], Bn(), tuple4(pk(skA()), [Ka@1661], [Ka@1659], Ni@1660));
    @premise new(*[Ka@1659], Ak(), tuple2(pk(skB()), [Na@1662]));
    @premise new(*[Na@1662], An(), tuple2(pk(skB()), [Ka@1659]));
    @premise know(*Ni@1660, #t2@1663);
    @premise init(*pk(skA()), *x2@1654, *senc(senc(tuple4(x1@1652, [Na@1653], pk(skA()), x2@1654), hash([Ka@1655], tuple2(pk(skA()), [Nb@1656]))), hash([Ka@1655], tuple2(pk(skA()), [Nb@1656]))));
    @premise new(*[Nb@1656], Ak(), tuple2(pk(skA()), [Na@1664]));
    @premise new(*[Na@1664], An(), tuple2(pk(skA()), [Nb@1656]));
    @premise new(*[Na@1653], An(), tuple2(x2@1654, [Ka@1655]));
    @premise new(*[Ka@1655], Ak(), tuple2(x2@1654, [Na@1653]));
    @premise know(*[Ka@1655], #t1@1665);
    @premise know(*[Na@1653], #t0@1666);
    @premise know(*x2@1654, #t2@1667);
    @premise know(*x1@1652, #t1@1668);
    @conclusion know(*senc(tuple4(x1@1652, [Na@1653], pk(skA()), x2@1654), hash([Ka@1655], tuple2(pk(skA()), [Nb@1656]))), #t@1657);
    @constraint #t@381 - #t2@1663 >= 0;
    @constraint #t@1657 - #t@381 >= 0;
    @constraint #t@1657 - #t1@1665 >= 0;
    @constraint #t@1657 - #t2@1667 >= 0;
    @constraint #t@1657 - #t1@1668 >= 0;
    @constraint #t@1657 - #t0@1666 >= 0;
};
Rule invalid. 

Compose by at 5 : 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};
Rule in cache: 8
Rule staged: 95
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1675], Bk(), tuple4(x0@1676, [Nb@1673], x1@1677, Ni@1678));
    @premise new(*[Nb@1673], Bn(), tuple4(x0@1676, [Ka@1679], x1@1677, Ni@1678));
    @premise know(*x0@1676, #t0@1680);
    @premise know(*x1@1677, #t1@1681);
    @premise know(*Ni@1678, #t2@1682);
    @premise init(*pk(skA()), *x2@1671, *senc(senc(tuple4(x1@1669, [Na@1670], pk(skA()), x2@1671), hash([Ka@1672], tuple2(pk(skA()), [Nb@1673]))), hash([Ka@1672], tuple2(pk(skA()), [Nb@1673]))));
    @premise new(*[Nb@1673], Ak(), tuple2(pk(skA()), [Na@1683]));
    @premise new(*[Na@1683], An(), tuple2(pk(skA()), [Nb@1673]));
    @premise new(*[Na@1670], An(), tuple2(x2@1671, [Ka@1672]));
    @premise new(*[Ka@1672], Ak(), tuple2(x2@1671, [Na@1670]));
    @premise know(*[Ka@1672], #t1@1684);
    @premise know(*[Na@1670], #t0@1685);
    @premise know(*x2@1671, #t2@1686);
    @premise know(*x1@1669, #t1@1687);
    @conclusion know(*senc(tuple4(x1@1669, [Na@1670], pk(skA()), x2@1671), hash([Ka@1672], tuple2(pk(skA()), [Nb@1673]))), #t@1674);
    @constraint #t@464 - #t1@1681 >= 0;
    @constraint #t@464 - #t0@1680 >= 0;
    @constraint #t@464 - #t2@1682 >= 0;
    @constraint #t@1674 - #t@464 >= 0;
    @constraint #t@1674 - #t1@1684 >= 0;
    @constraint #t@1674 - #t2@1686 >= 0;
    @constraint #t@1674 - #t1@1687 >= 0;
    @constraint #t@1674 - #t0@1685 >= 0;
};
Rule invalid. 

Compose by at 5 : 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};
Rule in cache: 8
Rule staged: 95
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1692], Ak(), tuple2(pk(sk@1694), [Na@1695]));
    @premise new(*[Na@1695], An(), tuple2(pk(sk@1694), [Ka@1692]));
    @premise know(*sk@1694, #t1@1696);
    @premise init(*pk(skA()), *x2@1690, *senc(senc(tuple4(x1@1688, [Na@1689], pk(skA()), x2@1690), hash([Ka@1691], tuple2(pk(skA()), [Ka@1692]))), hash([Ka@1691], tuple2(pk(skA()), [Ka@1692]))));
    @premise new(*[Ka@1692], Ak(), tuple2(pk(skA()), [Na@1697]));
    @premise new(*[Na@1697], An(), tuple2(pk(skA()), [Ka@1692]));
    @premise new(*[Na@1689], An(), tuple2(x2@1690, [Ka@1691]));
    @premise new(*[Ka@1691], Ak(), tuple2(x2@1690, [Na@1689]));
    @premise know(*[Ka@1691], #t1@1698);
    @premise know(*[Na@1689], #t0@1699);
    @premise know(*x2@1690, #t2@1700);
    @premise know(*x1@1688, #t1@1701);
    @conclusion know(*senc(tuple4(x1@1688, [Na@1689], pk(skA()), x2@1690), hash([Ka@1691], tuple2(pk(skA()), [Ka@1692]))), #t@1693);
    @constraint #t1@489 - #t1@1696 >= 0;
    @constraint #t@1693 - #t1@489 >= 0;
    @constraint #t@1693 - #t1@1698 >= 0;
    @constraint #t@1693 - #t2@1700 >= 0;
    @constraint #t@1693 - #t1@1701 >= 0;
    @constraint #t@1693 - #t0@1699 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *x2@1690, *senc(senc(tuple4(x1@1688, [Na@1689], pk(skA()), x2@1690), hash([Ka@1691], tuple2(pk(skA()), [Ka@1692]))), hash([Ka@1691], tuple2(pk(skA()), [Ka@1692]))));
    @premise new(*[Ka@1692], Ak(), tuple2(pk(skA()), [Na@1695]));
    @premise new(*[Na@1695], An(), tuple2(pk(skA()), [Ka@1692]));
    @premise new(*[Ka@1691], Ak(), tuple2(x2@1690, [Na@1689]));
    @premise new(*[Na@1689], An(), tuple2(x2@1690, [Ka@1691]));
    @premise know(*skA(), #t1@1696);
    @premise know(*[Ka@1691], #t1@1698);
    @premise know(*[Na@1689], #t0@1699);
    @premise know(*x2@1690, #t2@1700);
    @premise know(*x1@1688, #t1@1701);
    @conclusion know(*senc(tuple4(x1@1688, [Na@1689], pk(skA()), x2@1690), hash([Ka@1691], tuple2(pk(skA()), [Ka@1692]))), #t@1693);
    @constraint #t@1693 - #t1@1696 >= 0;
    @constraint #t@1693 - #t1@1698 >= 0;
    @constraint #t@1693 - #t2@1700 >= 0;
    @constraint #t@1693 - #t1@1701 >= 0;
    @constraint #t@1693 - #t0@1699 >= 0;
};

Compose by at 5 : 
@rule{
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*sk@826, #t1@827);
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @conclusion know(*[Kb@824], #t@825);
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
    @constraint #t@825 - #t1@827 >= 0;
};
Rule in cache: 9
Rule staged: 95
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1706], Bk(), tuple4(pk(sk@1708), [Nb@1709], x1@1710, Ni@1711));
    @premise new(*[Nb@1709], Bn(), tuple4(pk(sk@1708), [Ka@1712], x1@1710, Ni@1711));
    @premise know(*sk@1708, #t1@1713);
    @premise know(*x1@1710, #t1@1714);
    @premise know(*Ni@1711, #t2@1715);
    @premise init(*pk(skA()), *x2@1704, *senc(senc(tuple4(x1@1702, [Na@1703], pk(skA()), x2@1704), hash([Ka@1705], tuple2(pk(skA()), [Kb@1706]))), hash([Ka@1705], tuple2(pk(skA()), [Kb@1706]))));
    @premise new(*[Kb@1706], Ak(), tuple2(pk(skA()), [Na@1716]));
    @premise new(*[Na@1716], An(), tuple2(pk(skA()), [Kb@1706]));
    @premise new(*[Na@1703], An(), tuple2(x2@1704, [Ka@1705]));
    @premise new(*[Ka@1705], Ak(), tuple2(x2@1704, [Na@1703]));
    @premise know(*[Ka@1705], #t1@1717);
    @premise know(*[Na@1703], #t0@1718);
    @premise know(*x2@1704, #t2@1719);
    @premise know(*x1@1702, #t1@1720);
    @conclusion know(*senc(tuple4(x1@1702, [Na@1703], pk(skA()), x2@1704), hash([Ka@1705], tuple2(pk(skA()), [Kb@1706]))), #t@1707);
    @constraint #t@825 - #t1@1713 >= 0;
    @constraint #t@825 - #t1@1714 >= 0;
    @constraint #t@825 - #t2@1715 >= 0;
    @constraint #t@1707 - #t@825 >= 0;
    @constraint #t@1707 - #t1@1717 >= 0;
    @constraint #t@1707 - #t2@1719 >= 0;
    @constraint #t@1707 - #t1@1720 >= 0;
    @constraint #t@1707 - #t0@1718 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise new(*[Kb@1507], Bk(), tuple4(pk(skA()), [Nb@1509], x1@1510, Ni@1511));
    @premise new(*[Nb@1509], Bn(), tuple4(pk(skA()), [Ka@1512], x1@1510, Ni@1511));
    @premise know(*skA(), #t1@1513);
    @premise know(*[Nb@1509], #t0@1517);
    @premise know(*x1@1510, #t1@1514);
    @premise know(*Ni@1511, #t2@1515);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1509], Ni@1511, pk(skA()), pk(skB())), hash(x1@1510, [Kb@1507])), hash(x1@1510, [Kb@1507])));
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Kb@1524], Bk(), tuple4(pk(sk@1521), [Nb@1520], x1@1525, Ni@1519));
    @premise new(*[Nb@1520], Bn(), tuple4(pk(sk@1521), [Ka@1526], x1@1525, Ni@1519));
    @premise know(*sk@1521, #t1@1523);
    @premise know(*x1@1525, #t1@1528);
    @premise know(*Ni@1519, #t2@1529);
    @conclusion know(*tuple4(Ni@1519, [Nb@1520], pk(skB()), pk(sk@1521)), #t@1522);
    @constraint #t@1522 - #t1@1528 >= 0;
    @constraint #t@1522 - #t2@1529 >= 0;
    @constraint #t@1522 - #t1@1523 >= 0;
};
Rule deleted: 
@rule{
    @premise new(*[Kb@1284], Bk(), tuple4(pk(sk@1285), [Nb@1286], x1@1287, Ni@1288));
    @premise new(*[Nb@1286], Bn(), tuple4(pk(sk@1285), [Ka@1289], x1@1287, Ni@1288));
    @premise know(*pk(sk@1285), #t0@1296);
    @premise know(*sk@1285, #t1@1290);
    @premise know(*x1@1287, #t1@1291);
    @premise know(*Ni@1288, #t2@1292);
    @conclusion know(*tuple4(Ni@1288, [Nb@1286], pk(skB()), pk(sk@1285)), #t@1283);
    @constraint #t@1283 - #t0@1296 >= 0;
    @constraint #t@1283 - #t1@1290 >= 0;
    @constraint #t@1283 - #t1@1291 >= 0;
    @constraint #t@1283 - #t2@1292 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};
Rule in cache: 7
Rule staged: 97
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1723], Bk(), tuple4(pk(sk@1724), [Nb@1725], x1@1726, Ni@1721));
    @premise new(*[Nb@1725], Bn(), tuple4(pk(sk@1724), [Ka@1727], x1@1726, Ni@1721));
    @premise know(*sk@1724, #t1@1728);
    @premise know(*x1@1726, #t1@1729);
    @premise know(*Ni@1721, #t2@1730);
    @conclusion know(*Ni@1721, #t0@1722);
    @constraint #t@1522 - #t1@1728 >= 0;
    @constraint #t0@1722 - #t@1522 >= 0;
    @constraint #t@1522 - #t1@1729 >= 0;
    @constraint #t@1522 - #t2@1730 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};
Rule in cache: 7
Rule staged: 97
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1733], Bk(), tuple4(pk(sk@1734), [Nb@1731], x1@1735, Ni@1736));
    @premise new(*[Nb@1731], Bn(), tuple4(pk(sk@1734), [Ka@1737], x1@1735, Ni@1736));
    @premise know(*sk@1734, #t1@1738);
    @premise know(*x1@1735, #t1@1739);
    @premise know(*Ni@1736, #t2@1740);
    @conclusion know(*[Nb@1731], #t1@1732);
    @constraint #t@1522 - #t1@1738 >= 0;
    @constraint #t1@1732 - #t@1522 >= 0;
    @constraint #t@1522 - #t1@1739 >= 0;
    @constraint #t@1522 - #t2@1740 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@1733], Bk(), tuple4(pk(sk@1734), [Nb@1731], x1@1735, Ni@1736));
    @premise new(*[Nb@1731], Bn(), tuple4(pk(sk@1734), [Ka@1737], x1@1735, Ni@1736));
    @premise know(*sk@1734, #t1@1738);
    @premise know(*x1@1735, #t1@1739);
    @premise know(*Ni@1736, #t2@1740);
    @conclusion know(*[Nb@1731], #t1@1732);
    @constraint #t1@1732 - #t1@1738 >= 0;
    @constraint #t1@1732 - #t1@1739 >= 0;
    @constraint #t1@1732 - #t2@1740 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};
Rule in cache: 8
Rule staged: 97
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1742], Bk(), tuple4(pk(sk@1743), [Nb@1744], x1@1745, Ni@1746));
    @premise new(*[Nb@1744], Bn(), tuple4(pk(sk@1743), [Ka@1747], x1@1745, Ni@1746));
    @premise know(*sk@1743, #t1@1748);
    @premise know(*x1@1745, #t1@1749);
    @premise know(*Ni@1746, #t2@1750);
    @conclusion know(*pk(skB()), #t2@1741);
    @constraint #t@1522 - #t1@1748 >= 0;
    @constraint #t2@1741 - #t@1522 >= 0;
    @constraint #t@1522 - #t1@1749 >= 0;
    @constraint #t@1522 - #t2@1750 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@1742], Bk(), tuple4(pk(sk@1743), [Nb@1744], x1@1745, Ni@1746));
    @premise new(*[Nb@1744], Bn(), tuple4(pk(sk@1743), [Ka@1747], x1@1745, Ni@1746));
    @premise know(*sk@1743, #t1@1748);
    @premise know(*x1@1745, #t1@1749);
    @premise know(*Ni@1746, #t2@1750);
    @conclusion know(*pk(skB()), #t2@1741);
    @constraint #t2@1741 - #t1@1748 >= 0;
    @constraint #t2@1741 - #t1@1749 >= 0;
    @constraint #t2@1741 - #t2@1750 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};
Rule in cache: 9
Rule staged: 97
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1753], Bk(), tuple4(pk(sk@1751), [Nb@1754], x1@1755, Ni@1756));
    @premise new(*[Nb@1754], Bn(), tuple4(pk(sk@1751), [Ka@1757], x1@1755, Ni@1756));
    @premise know(*sk@1751, #t1@1758);
    @premise know(*x1@1755, #t1@1759);
    @premise know(*Ni@1756, #t2@1760);
    @conclusion know(*pk(sk@1751), #t3@1752);
    @constraint #t@1522 - #t1@1758 >= 0;
    @constraint #t3@1752 - #t@1522 >= 0;
    @constraint #t@1522 - #t1@1759 >= 0;
    @constraint #t@1522 - #t2@1760 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Kb@1753], Bk(), tuple4(pk(sk@1751), [Nb@1754], x1@1755, Ni@1756));
    @premise new(*[Nb@1754], Bn(), tuple4(pk(sk@1751), [Ka@1757], x1@1755, Ni@1756));
    @premise know(*sk@1751, #t1@1758);
    @premise know(*x1@1755, #t1@1759);
    @premise know(*Ni@1756, #t2@1760);
    @conclusion know(*pk(sk@1751), #t3@1752);
    @constraint #t3@1752 - #t1@1758 >= 0;
    @constraint #t3@1752 - #t1@1759 >= 0;
    @constraint #t3@1752 - #t2@1760 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Kb@1533], Bk(), tuple4(pk(skA()), [Nb@1531], x1@1534, Ni@1530));
    @premise new(*[Nb@1531], Bn(), tuple4(pk(skA()), [Ka@1535], x1@1534, Ni@1530));
    @premise know(*skA(), #t1@1536);
    @premise know(*x1@1534, #t1@1537);
    @premise know(*Ni@1530, #t2@1538);
    @conclusion know(*tuple4(Ni@1530, [Nb@1531], pk(skB()), pk(skA())), #t@1532);
    @constraint #t@1532 - #t2@1538 >= 0;
    @constraint #t@1532 - #t1@1536 >= 0;
    @constraint #t@1532 - #t1@1537 >= 0;
};
Rule implied by: 
@rule{
    @premise new(*[Kb@1524], Bk(), tuple4(pk(sk@1521), [Nb@1520], x1@1525, Ni@1519));
    @premise new(*[Nb@1520], Bn(), tuple4(pk(sk@1521), [Ka@1526], x1@1525, Ni@1519));
    @premise know(*sk@1521, #t1@1523);
    @premise know(*x1@1525, #t1@1528);
    @premise know(*Ni@1519, #t2@1529);
    @conclusion know(*tuple4(Ni@1519, [Nb@1520], pk(skB()), pk(sk@1521)), #t@1522);
    @constraint #t@1522 - #t1@1528 >= 0;
    @constraint #t@1522 - #t2@1529 >= 0;
    @constraint #t@1522 - #t1@1523 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Kb@1542], Bk(), tuple4(pk(skB()), [Nb@1540], x1@1543, Ni@1539));
    @premise new(*[Nb@1540], Bn(), tuple4(pk(skB()), [Ka@1544], x1@1543, Ni@1539));
    @premise know(*skB(), #t1@1545);
    @premise know(*x1@1543, #t1@1546);
    @premise know(*Ni@1539, #t2@1547);
    @conclusion know(*tuple4(Ni@1539, [Nb@1540], pk(skB()), pk(skB())), #t@1541);
    @constraint #t@1541 - #t2@1547 >= 0;
    @constraint #t@1541 - #t1@1545 >= 0;
    @constraint #t@1541 - #t1@1546 >= 0;
};
Rule implied by: 
@rule{
    @premise new(*[Kb@1524], Bk(), tuple4(pk(sk@1521), [Nb@1520], x1@1525, Ni@1519));
    @premise new(*[Nb@1520], Bn(), tuple4(pk(sk@1521), [Ka@1526], x1@1525, Ni@1519));
    @premise know(*sk@1521, #t1@1523);
    @premise know(*x1@1525, #t1@1528);
    @premise know(*Ni@1519, #t2@1529);
    @conclusion know(*tuple4(Ni@1519, [Nb@1520], pk(skB()), pk(sk@1521)), #t@1522);
    @constraint #t@1522 - #t1@1528 >= 0;
    @constraint #t@1522 - #t2@1529 >= 0;
    @constraint #t@1522 - #t1@1523 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1548], [Na@1549], pk(skA()), pk(skB())), hash([Ka@1553], [Kb@1551])), hash([Ka@1553], [Kb@1551])));
    @premise new(*[Nb@1548], Bn(), tuple4(pk(skA()), [Ka@1555], [Ka@1553], [Na@1549]));
    @premise new(*[Kb@1551], Bk(), tuple4(pk(skA()), [Nb@1548], [Ka@1553], [Na@1549]));
    @premise new(*[Kb@1556], Bk(), tuple4(pk(skA()), [Nb@1548], [Ka@1553], [Na@1549]));
    @premise new(*[Ka@1553], Ak(), tuple2(pk(skB()), [Na@1549]));
    @premise new(*[Na@1549], An(), tuple2(pk(skB()), [Ka@1553]));
    @conclusion know(*senc(tuple4([Nb@1548], [Na@1549], pk(skA()), pk(skB())), hash([Ka@1553], [Kb@1551])), #t@1552);
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@989], [Na@990], pk(skA()), pk(skB())), hash([Ka@994], [Kb@992])), hash([Ka@994], [Kb@992])));
    @premise new(*[Kb@992], Bk(), tuple4(pk(skA()), [Nb@989], [Ka@994], [Na@990]));
    @premise new(*[Nb@989], Bn(), tuple4(pk(skA()), [Ka@996], [Ka@994], [Na@990]));
    @premise new(*[Ka@994], Ak(), tuple2(pk(skB()), [Na@990]));
    @premise new(*[Na@990], An(), tuple2(pk(skB()), [Ka@994]));
    @premise know(*[Nb@989], #t2@997);
    @conclusion know(*senc(tuple4([Nb@989], [Na@990], pk(skA()), pk(skB())), hash([Ka@994], [Kb@992])), #t@993);
    @constraint #t@993 - #t2@997 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1306], [Na@1315], pk(skA()), pk(skB())), hash([Ka@1312], [Kb@1309])), hash([Ka@1312], [Kb@1309])));
    @premise new(*[Nb@1306], Bn(), tuple4(pk(skA()), [Ka@1314], [Ka@1312], [Na@1315]));
    @premise new(*[Kb@1309], Bk(), tuple4(pk(skA()), [Nb@1306], [Ka@1312], [Na@1315]));
    @premise new(*[Kb@1311], Bk(), tuple4(pk(skA()), [Nb@1306], [Ka@1312], [Na@1315]));
    @premise new(*[Ka@1312], Ak(), tuple2(pk(skB()), [Na@1315]));
    @premise new(*[Na@1315], An(), tuple2(pk(skB()), [Ka@1312]));
    @premise know(*[Na@1315], #t2@1316);
    @conclusion know(*senc(tuple4([Nb@1306], [Na@1315], pk(skA()), pk(skB())), hash([Ka@1312], [Kb@1309])), #t@1310);
    @constraint #t@1310 - #t2@1316 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*k@118, #t1@119);
    @premise know(*senc(m@120, k@118), #t2@121);
    @conclusion know(*m@120, #t@122);
    @constraint -#t1@119 + #t@122 >= 0;
    @constraint #t@122 - #t2@121 >= 0;
};
Rule in cache: 7
Rule staged: 98
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1761], [Na@1762], pk(skA()), pk(skB())), hash([Ka@1764], [Kb@1765])), hash([Ka@1764], [Kb@1765])));
    @premise new(*[Nb@1761], Bn(), tuple4(pk(skA()), [Ka@1766], [Ka@1764], [Na@1762]));
    @premise new(*[Kb@1765], Bk(), tuple4(pk(skA()), [Nb@1761], [Ka@1764], [Na@1762]));
    @premise new(*[Kb@1767], Bk(), tuple4(pk(skA()), [Nb@1761], [Ka@1764], [Na@1762]));
    @premise new(*[Ka@1764], Ak(), tuple2(pk(skB()), [Na@1762]));
    @premise new(*[Na@1762], An(), tuple2(pk(skB()), [Ka@1764]));
    @premise know(*hash([Ka@1764], [Kb@1765]), #t1@1768);
    @conclusion know(*tuple4([Nb@1761], [Na@1762], pk(skA()), pk(skB())), #t@1763);
    @constraint -#t1@1768 + #t@1763 >= 0;
    @constraint #t@1763 - #t@1552 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1761], [Na@1762], pk(skA()), pk(skB())), hash([Ka@1764], [Kb@1765])), hash([Ka@1764], [Kb@1765])));
    @premise new(*[Nb@1761], Bn(), tuple4(pk(skA()), [Ka@1766], [Ka@1764], [Na@1762]));
    @premise new(*[Kb@1765], Bk(), tuple4(pk(skA()), [Nb@1761], [Ka@1764], [Na@1762]));
    @premise new(*[Kb@1767], Bk(), tuple4(pk(skA()), [Nb@1761], [Ka@1764], [Na@1762]));
    @premise new(*[Ka@1764], Ak(), tuple2(pk(skB()), [Na@1762]));
    @premise new(*[Na@1762], An(), tuple2(pk(skB()), [Ka@1764]));
    @premise know(*hash([Ka@1764], [Kb@1765]), #t1@1768);
    @conclusion know(*tuple4([Nb@1761], [Na@1762], pk(skA()), pk(skB())), #t@1763);
    @constraint -#t1@1768 + #t@1763 >= 0;
};

Compose to at 2 : 
@rule{
    @premise new(*[Kb@171], Bk(), tuple4(pk(skA()), [Nb@172], Ki@173, Ni@174));
    @premise new(*[Nb@172], Bn(), tuple4(pk(skA()), [Ka@175], Ki@173, Ni@174));
    @premise know(*senc(tuple4([Nb@172], Ni@174, pk(skA()), pk(skB())), hash(Kr@176, [Kb@171])), #t1@177);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@172], Ni@174, pk(skA()), pk(skB())), hash(Ki@173, [Kb@171])), hash(Ki@173, [Kb@171])));
};
Rule in cache: 8
Rule staged: 98
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1769], [Na@1770], pk(skA()), pk(skB())), hash([Ka@1773], [Kb@1772])), hash([Ka@1773], [Kb@1772])));
    @premise new(*[Nb@1769], Bn(), tuple4(pk(skA()), [Ka@1774], [Ka@1773], [Na@1770]));
    @premise new(*[Kb@1772], Bk(), tuple4(pk(skA()), [Nb@1769], [Ka@1773], [Na@1770]));
    @premise new(*[Kb@1775], Bk(), tuple4(pk(skA()), [Nb@1769], [Ka@1773], [Na@1770]));
    @premise new(*[Ka@1773], Ak(), tuple2(pk(skB()), [Na@1770]));
    @premise new(*[Na@1770], An(), tuple2(pk(skB()), [Ka@1773]));
    @premise new(*[Kb@1772], Bk(), tuple4(pk(skA()), [Nb@1769], Ki@1771, [Na@1770]));
    @premise new(*[Nb@1769], Bn(), tuple4(pk(skA()), [Ka@1776], Ki@1771, [Na@1770]));
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1769], [Na@1770], pk(skA()), pk(skB())), hash(Ki@1771, [Kb@1772])), hash(Ki@1771, [Kb@1772])));
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1769], [Na@1770], pk(skA()), pk(skB())), hash([Ka@1773], [Kb@1772])), hash([Ka@1773], [Kb@1772])));
    @premise new(*[Nb@1769], Bn(), tuple4(pk(skA()), [Ka@1774], [Ka@1773], [Na@1770]));
    @premise new(*[Kb@1772], Bk(), tuple4(pk(skA()), [Nb@1769], [Ka@1773], [Na@1770]));
    @premise new(*[Kb@1775], Bk(), tuple4(pk(skA()), [Nb@1769], [Ka@1773], [Na@1770]));
    @premise new(*[Ka@1773], Ak(), tuple2(pk(skB()), [Na@1770]));
    @premise new(*[Na@1770], An(), tuple2(pk(skB()), [Ka@1773]));
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1769], [Na@1770], pk(skA()), pk(skB())), hash([Ka@1773], [Kb@1772])), hash([Ka@1773], [Kb@1772])));
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1612), *senc(senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), hash([Ka@1613], m2@1614)));
    @premise new(*[Na@1611], An(), tuple2(pk(sk@1612), [Ka@1613]));
    @premise new(*[Ka@1613], Ak(), tuple2(pk(sk@1612), [Na@1611]));
    @premise know(*[Na@1611], #t0@1617);
    @premise know(*sk@1612, #t1@1616);
    @premise know(*m2@1614, #t2@1618);
    @premise know(*x1@1610, #t1@1620);
    @conclusion know(*senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), #t@1615);
    @constraint #t@1615 - #t2@1618 >= 0;
    @constraint #t@1615 - #t1@1620 >= 0;
    @constraint #t@1615 - #t0@1617 >= 0;
    @constraint #t@1615 - #t1@1616 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1407), *senc(senc(tuple4(x1@1401, [Na@1408], pk(skA()), pk(sk@1407)), hash([Ka@1404], m2@1405)), hash([Ka@1404], m2@1405)));
    @premise new(*[Ka@1404], Ak(), tuple2(pk(sk@1407), [Na@1408]));
    @premise new(*[Na@1408], An(), tuple2(pk(sk@1407), [Ka@1404]));
    @premise know(*pk(sk@1407), #t2@1412);
    @premise know(*[Na@1408], #t0@1410);
    @premise know(*m2@1405, #t2@1411);
    @premise know(*sk@1407, #t1@1409);
    @premise know(*x1@1401, #t1@1413);
    @conclusion know(*senc(tuple4(x1@1401, [Na@1408], pk(skA()), pk(sk@1407)), hash([Ka@1404], m2@1405)), #t@1406);
    @constraint #t@1406 - #t1@1409 >= 0;
    @constraint #t@1406 - #t2@1411 >= 0;
    @constraint #t@1406 - #t2@1412 >= 0;
    @constraint #t@1406 - #t1@1413 >= 0;
    @constraint #t@1406 - #t0@1410 >= 0;
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};
Rule in cache: 8
Rule staged: 99
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1783], Ak(), tuple2(pkR@1784, [Na@1778]));
    @premise new(*[Na@1778], An(), tuple2(pkR@1784, [Ka@1783]));
    @premise init(*pk(skA()), *pk(sk@1779), *senc(senc(tuple4(x1@1777, [Na@1778], pk(skA()), pk(sk@1779)), hash([Ka@1780], m2@1781)), hash([Ka@1780], m2@1781)));
    @premise new(*[Na@1778], An(), tuple2(pk(sk@1779), [Ka@1780]));
    @premise new(*[Ka@1780], Ak(), tuple2(pk(sk@1779), [Na@1778]));
    @premise know(*sk@1779, #t1@1785);
    @premise know(*m2@1781, #t2@1786);
    @premise know(*x1@1777, #t1@1787);
    @conclusion know(*senc(tuple4(x1@1777, [Na@1778], pk(skA()), pk(sk@1779)), hash([Ka@1780], m2@1781)), #t@1782);
    @constraint #t@1782 - #t1@275 >= 0;
    @constraint #t@1782 - #t1@1785 >= 0;
    @constraint #t@1782 - #t2@1786 >= 0;
    @constraint #t@1782 - #t1@1787 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1779), *senc(senc(tuple4(x1@1777, [Na@1778], pk(skA()), pk(sk@1779)), hash([Ka@1783], m2@1781)), hash([Ka@1783], m2@1781)));
    @premise new(*[Ka@1783], Ak(), tuple2(pk(sk@1779), [Na@1778]));
    @premise new(*[Na@1778], An(), tuple2(pk(sk@1779), [Ka@1783]));
    @premise know(*sk@1779, #t1@1785);
    @premise know(*m2@1781, #t2@1786);
    @premise know(*x1@1777, #t1@1787);
    @conclusion know(*senc(tuple4(x1@1777, [Na@1778], pk(skA()), pk(sk@1779)), hash([Ka@1783], m2@1781)), #t@1782);
    @constraint #t@1782 - #t1@1785 >= 0;
    @constraint #t@1782 - #t2@1786 >= 0;
    @constraint #t@1782 - #t1@1787 >= 0;
};

Compose by at 3 : 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};
Rule in cache: 9
Rule staged: 99
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1794], Bk(), tuple4(pk(skA()), [Nb@1789], [Ka@1795], Ni@1796));
    @premise new(*[Nb@1789], Bn(), tuple4(pk(skA()), [Ka@1797], [Ka@1795], Ni@1796));
    @premise new(*[Ka@1795], Ak(), tuple2(pk(skB()), [Na@1798]));
    @premise new(*[Na@1798], An(), tuple2(pk(skB()), [Ka@1795]));
    @premise know(*Ni@1796, #t2@1799);
    @premise init(*pk(skA()), *pk(sk@1790), *senc(senc(tuple4(x1@1788, [Nb@1789], pk(skA()), pk(sk@1790)), hash([Ka@1791], m2@1792)), hash([Ka@1791], m2@1792)));
    @premise new(*[Nb@1789], An(), tuple2(pk(sk@1790), [Ka@1791]));
    @premise new(*[Ka@1791], Ak(), tuple2(pk(sk@1790), [Nb@1789]));
    @premise know(*sk@1790, #t1@1800);
    @premise know(*m2@1792, #t2@1801);
    @premise know(*x1@1788, #t1@1802);
    @conclusion know(*senc(tuple4(x1@1788, [Nb@1789], pk(skA()), pk(sk@1790)), hash([Ka@1791], m2@1792)), #t@1793);
    @constraint #t@381 - #t2@1799 >= 0;
    @constraint #t@1793 - #t@381 >= 0;
    @constraint #t@1793 - #t1@1800 >= 0;
    @constraint #t@1793 - #t2@1801 >= 0;
    @constraint #t@1793 - #t1@1802 >= 0;
};
Rule invalid. 

Compose by at 3 : 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};
Rule in cache: 9
Rule staged: 99
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1809], Bk(), tuple4(x0@1810, [Nb@1804], x1@1811, Ni@1812));
    @premise new(*[Nb@1804], Bn(), tuple4(x0@1810, [Ka@1813], x1@1811, Ni@1812));
    @premise know(*x0@1810, #t0@1814);
    @premise know(*x1@1811, #t1@1815);
    @premise know(*Ni@1812, #t2@1816);
    @premise init(*pk(skA()), *pk(sk@1805), *senc(senc(tuple4(x1@1803, [Nb@1804], pk(skA()), pk(sk@1805)), hash([Ka@1806], m2@1807)), hash([Ka@1806], m2@1807)));
    @premise new(*[Nb@1804], An(), tuple2(pk(sk@1805), [Ka@1806]));
    @premise new(*[Ka@1806], Ak(), tuple2(pk(sk@1805), [Nb@1804]));
    @premise know(*sk@1805, #t1@1817);
    @premise know(*m2@1807, #t2@1818);
    @premise know(*x1@1803, #t1@1819);
    @conclusion know(*senc(tuple4(x1@1803, [Nb@1804], pk(skA()), pk(sk@1805)), hash([Ka@1806], m2@1807)), #t@1808);
    @constraint #t@464 - #t1@1815 >= 0;
    @constraint #t@464 - #t0@1814 >= 0;
    @constraint #t@464 - #t2@1816 >= 0;
    @constraint #t@1808 - #t@464 >= 0;
    @constraint #t@1808 - #t1@1817 >= 0;
    @constraint #t@1808 - #t2@1818 >= 0;
    @constraint #t@1808 - #t1@1819 >= 0;
};
Rule invalid. 

Compose by at 3 : 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};
Rule in cache: 9
Rule staged: 99
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1821], Ak(), tuple2(pk(sk@1826), [Na@1827]));
    @premise new(*[Na@1827], An(), tuple2(pk(sk@1826), [Ka@1821]));
    @premise know(*sk@1826, #t1@1828);
    @premise init(*pk(skA()), *pk(sk@1822), *senc(senc(tuple4(x1@1820, [Ka@1821], pk(skA()), pk(sk@1822)), hash([Ka@1823], m2@1824)), hash([Ka@1823], m2@1824)));
    @premise new(*[Ka@1821], An(), tuple2(pk(sk@1822), [Ka@1823]));
    @premise new(*[Ka@1823], Ak(), tuple2(pk(sk@1822), [Ka@1821]));
    @premise know(*sk@1822, #t1@1829);
    @premise know(*m2@1824, #t2@1830);
    @premise know(*x1@1820, #t1@1831);
    @conclusion know(*senc(tuple4(x1@1820, [Ka@1821], pk(skA()), pk(sk@1822)), hash([Ka@1823], m2@1824)), #t@1825);
    @constraint #t1@489 - #t1@1828 >= 0;
    @constraint #t@1825 - #t1@489 >= 0;
    @constraint #t@1825 - #t1@1829 >= 0;
    @constraint #t@1825 - #t2@1830 >= 0;
    @constraint #t@1825 - #t1@1831 >= 0;
};
Rule invalid. 

Compose by at 3 : 
@rule{
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*sk@826, #t1@827);
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @conclusion know(*[Kb@824], #t@825);
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
    @constraint #t@825 - #t1@827 >= 0;
};
Rule in cache: 9
Rule staged: 99
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1833], Bk(), tuple4(pk(sk@1838), [Nb@1839], x1@1840, Ni@1841));
    @premise new(*[Nb@1839], Bn(), tuple4(pk(sk@1838), [Ka@1842], x1@1840, Ni@1841));
    @premise know(*sk@1838, #t1@1843);
    @premise know(*x1@1840, #t1@1844);
    @premise know(*Ni@1841, #t2@1845);
    @premise init(*pk(skA()), *pk(sk@1834), *senc(senc(tuple4(x1@1832, [Kb@1833], pk(skA()), pk(sk@1834)), hash([Ka@1835], m2@1836)), hash([Ka@1835], m2@1836)));
    @premise new(*[Kb@1833], An(), tuple2(pk(sk@1834), [Ka@1835]));
    @premise new(*[Ka@1835], Ak(), tuple2(pk(sk@1834), [Kb@1833]));
    @premise know(*sk@1834, #t1@1846);
    @premise know(*m2@1836, #t2@1847);
    @premise know(*x1@1832, #t1@1848);
    @conclusion know(*senc(tuple4(x1@1832, [Kb@1833], pk(skA()), pk(sk@1834)), hash([Ka@1835], m2@1836)), #t@1837);
    @constraint #t@825 - #t1@1843 >= 0;
    @constraint #t@825 - #t1@1844 >= 0;
    @constraint #t@825 - #t2@1845 >= 0;
    @constraint #t@1837 - #t@825 >= 0;
    @constraint #t@1837 - #t1@1846 >= 0;
    @constraint #t@1837 - #t2@1847 >= 0;
    @constraint #t@1837 - #t1@1848 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skA()), *senc(senc(tuple4(x1@1621, [Na@1622], pk(skA()), pk(skA())), hash([Ka@1623], m2@1624)), hash([Ka@1623], m2@1624)));
    @premise new(*[Ka@1623], Ak(), tuple2(pk(skA()), [Na@1622]));
    @premise new(*[Na@1622], An(), tuple2(pk(skA()), [Ka@1623]));
    @premise know(*skA(), #t1@1628);
    @premise know(*[Na@1622], #t0@1626);
    @premise know(*m2@1624, #t2@1627);
    @premise know(*x1@1621, #t1@1629);
    @conclusion know(*senc(tuple4(x1@1621, [Na@1622], pk(skA()), pk(skA())), hash([Ka@1623], m2@1624)), #t@1625);
    @constraint #t@1625 - #t1@1629 >= 0;
    @constraint #t@1625 - #t1@1628 >= 0;
    @constraint #t@1625 - #t2@1627 >= 0;
    @constraint #t@1625 - #t0@1626 >= 0;
};
Rule implied by: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1612), *senc(senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), hash([Ka@1613], m2@1614)));
    @premise new(*[Na@1611], An(), tuple2(pk(sk@1612), [Ka@1613]));
    @premise new(*[Ka@1613], Ak(), tuple2(pk(sk@1612), [Na@1611]));
    @premise know(*[Na@1611], #t0@1617);
    @premise know(*sk@1612, #t1@1616);
    @premise know(*m2@1614, #t2@1618);
    @premise know(*x1@1610, #t1@1620);
    @conclusion know(*senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), #t@1615);
    @constraint #t@1615 - #t2@1618 >= 0;
    @constraint #t@1615 - #t1@1620 >= 0;
    @constraint #t@1615 - #t0@1617 >= 0;
    @constraint #t@1615 - #t1@1616 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4(x1@1630, [Na@1631], pk(skA()), pk(skB())), hash([Ka@1632], m2@1633)), hash([Ka@1632], m2@1633)));
    @premise new(*[Ka@1632], Ak(), tuple2(pk(skB()), [Na@1631]));
    @premise new(*[Na@1631], An(), tuple2(pk(skB()), [Ka@1632]));
    @premise know(*skB(), #t1@1637);
    @premise know(*[Na@1631], #t0@1635);
    @premise know(*m2@1633, #t2@1636);
    @premise know(*x1@1630, #t1@1638);
    @conclusion know(*senc(tuple4(x1@1630, [Na@1631], pk(skA()), pk(skB())), hash([Ka@1632], m2@1633)), #t@1634);
    @constraint #t@1634 - #t1@1638 >= 0;
    @constraint #t@1634 - #t1@1637 >= 0;
    @constraint #t@1634 - #t2@1636 >= 0;
    @constraint #t@1634 - #t0@1635 >= 0;
};
Rule implied by: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1612), *senc(senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), hash([Ka@1613], m2@1614)));
    @premise new(*[Na@1611], An(), tuple2(pk(sk@1612), [Ka@1613]));
    @premise new(*[Ka@1613], Ak(), tuple2(pk(sk@1612), [Na@1611]));
    @premise know(*[Na@1611], #t0@1617);
    @premise know(*sk@1612, #t1@1616);
    @premise know(*m2@1614, #t2@1618);
    @premise know(*x1@1610, #t1@1620);
    @conclusion know(*senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), #t@1615);
    @constraint #t@1615 - #t2@1618 >= 0;
    @constraint #t@1615 - #t1@1620 >= 0;
    @constraint #t@1615 - #t0@1617 >= 0;
    @constraint #t@1615 - #t1@1616 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *x2@1690, *senc(senc(tuple4(x1@1688, [Na@1689], pk(skA()), x2@1690), hash([Ka@1691], tuple2(pk(skA()), [Ka@1692]))), hash([Ka@1691], tuple2(pk(skA()), [Ka@1692]))));
    @premise new(*[Ka@1692], Ak(), tuple2(pk(skA()), [Na@1695]));
    @premise new(*[Na@1695], An(), tuple2(pk(skA()), [Ka@1692]));
    @premise new(*[Ka@1691], Ak(), tuple2(x2@1690, [Na@1689]));
    @premise new(*[Na@1689], An(), tuple2(x2@1690, [Ka@1691]));
    @premise know(*skA(), #t1@1696);
    @premise know(*[Ka@1691], #t1@1698);
    @premise know(*[Na@1689], #t0@1699);
    @premise know(*x2@1690, #t2@1700);
    @premise know(*x1@1688, #t1@1701);
    @conclusion know(*senc(tuple4(x1@1688, [Na@1689], pk(skA()), x2@1690), hash([Ka@1691], tuple2(pk(skA()), [Ka@1692]))), #t@1693);
    @constraint #t@1693 - #t1@1696 >= 0;
    @constraint #t@1693 - #t1@1698 >= 0;
    @constraint #t@1693 - #t2@1700 >= 0;
    @constraint #t@1693 - #t1@1701 >= 0;
    @constraint #t@1693 - #t0@1699 >= 0;
};
Rule added at 5.

Stage rule: 
@rule{
    @premise new(*[Kb@1733], Bk(), tuple4(pk(sk@1734), [Nb@1731], x1@1735, Ni@1736));
    @premise new(*[Nb@1731], Bn(), tuple4(pk(sk@1734), [Ka@1737], x1@1735, Ni@1736));
    @premise know(*sk@1734, #t1@1738);
    @premise know(*x1@1735, #t1@1739);
    @premise know(*Ni@1736, #t2@1740);
    @conclusion know(*[Nb@1731], #t1@1732);
    @constraint #t1@1732 - #t1@1738 >= 0;
    @constraint #t1@1732 - #t1@1739 >= 0;
    @constraint #t1@1732 - #t2@1740 >= 0;
};
Rule added.

Compose to at 4 : 
@rule{
    @premise new(*[Nb@648], Bn(), tuple4(pk(skA()), [Ka@654], [Ka@650], Ni@647));
    @premise new(*[Kb@652], Bk(), tuple4(pk(skA()), [Nb@648], [Ka@650], Ni@647));
    @premise new(*[Na@655], An(), tuple2(pk(skB()), [Ka@650]));
    @premise new(*[Ka@650], Ak(), tuple2(pk(skB()), [Na@655]));
    @premise know(*[Ka@650], #t1@651);
    @premise know(*[Kb@652], #t2@653);
    @premise know(*Ni@647, #t2@656);
    @conclusion know(*tuple4(Ni@647, [Nb@648], pk(skB()), pk(skA())), #t@649);
    @constraint #t@649 - #t2@656 >= 0;
    @constraint #t@649 - #t2@653 >= 0;
    @constraint #t@649 - #t1@651 >= 0;
};
Rule in cache: 5
Rule staged: 101
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1852], Bk(), tuple4(pk(sk@1853), [Nb@1854], x1@1855, Ni@1856));
    @premise new(*[Nb@1854], Bn(), tuple4(pk(sk@1853), [Ka@1857], x1@1855, Ni@1856));
    @premise know(*sk@1853, #t1@1858);
    @premise know(*x1@1855, #t1@1859);
    @premise know(*Ni@1856, #t2@1860);
    @premise new(*[Nb@1850], Bn(), tuple4(pk(skA()), [Ka@1861], [Nb@1854], Ni@1849));
    @premise new(*[Kb@1862], Bk(), tuple4(pk(skA()), [Nb@1850], [Nb@1854], Ni@1849));
    @premise new(*[Na@1863], An(), tuple2(pk(skB()), [Nb@1854]));
    @premise new(*[Nb@1854], Ak(), tuple2(pk(skB()), [Na@1863]));
    @premise know(*[Kb@1862], #t2@1864);
    @premise know(*Ni@1849, #t2@1865);
    @conclusion know(*tuple4(Ni@1849, [Nb@1850], pk(skB()), pk(skA())), #t@1851);
    @constraint #t1@1732 - #t1@1858 >= 0;
    @constraint #t1@1732 - #t1@1859 >= 0;
    @constraint #t1@1732 - #t2@1860 >= 0;
    @constraint #t@1851 - #t1@1732 >= 0;
    @constraint #t@1851 - #t2@1864 >= 0;
    @constraint #t@1851 - #t2@1865 >= 0;
};
Rule invalid. 

Compose to at 2 : 
@rule{
    @premise new(*[Kb@877], Bk(), tuple4(x0@873, [Nb@872], m1@875, Ni@871));
    @premise new(*[Nb@872], Bn(), tuple4(x0@873, [Ka@879], m1@875, Ni@871));
    @premise know(*[Kb@877], #t2@878);
    @premise know(*m1@875, #t1@876);
    @premise know(*x0@873, #t0@880);
    @premise know(*Ni@871, #t2@882);
    @conclusion know(*tuple4(Ni@871, [Nb@872], pk(skB()), x0@873), #t@874);
    @constraint #t@874 - #t2@882 >= 0;
    @constraint #t@874 - #t0@880 >= 0;
    @constraint #t@874 - #t2@878 >= 0;
    @constraint #t@874 - #t1@876 >= 0;
};
Rule in cache: 5
Rule staged: 101
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1870], Bk(), tuple4(pk(sk@1871), [Nb@1872], x1@1873, Ni@1874));
    @premise new(*[Nb@1872], Bn(), tuple4(pk(sk@1871), [Ka@1875], x1@1873, Ni@1874));
    @premise know(*sk@1871, #t1@1876);
    @premise know(*x1@1873, #t1@1877);
    @premise know(*Ni@1874, #t2@1878);
    @premise new(*[Nb@1872], Bk(), tuple4(x0@1868, [Nb@1867], m1@1879, Ni@1866));
    @premise new(*[Nb@1867], Bn(), tuple4(x0@1868, [Ka@1880], m1@1879, Ni@1866));
    @premise know(*m1@1879, #t1@1881);
    @premise know(*x0@1868, #t0@1882);
    @premise know(*Ni@1866, #t2@1883);
    @conclusion know(*tuple4(Ni@1866, [Nb@1867], pk(skB()), x0@1868), #t@1869);
    @constraint #t1@1732 - #t1@1876 >= 0;
    @constraint #t1@1732 - #t1@1877 >= 0;
    @constraint #t1@1732 - #t2@1878 >= 0;
    @constraint #t@1869 - #t1@1732 >= 0;
    @constraint #t@1869 - #t1@1881 >= 0;
    @constraint #t@1869 - #t0@1882 >= 0;
    @constraint #t@1869 - #t2@1883 >= 0;
};
Rule invalid. 

Compose to at 3 : 
@rule{
    @premise init(*pk(skA()), *x2@1051, *senc(senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), hash([Ka@1052], m2@1053)));
    @premise new(*[Ka@1052], Ak(), tuple2(x2@1051, [Na@1050]));
    @premise new(*[Na@1050], An(), tuple2(x2@1051, [Ka@1052]));
    @premise know(*[Ka@1052], #t1@1055);
    @premise know(*[Na@1050], #t0@1057);
    @premise know(*m2@1053, #t2@1056);
    @premise know(*x2@1051, #t2@1059);
    @premise know(*x1@1049, #t1@1060);
    @conclusion know(*senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), #t@1054);
    @constraint #t@1054 - #t0@1057 >= 0;
    @constraint #t@1054 - #t2@1059 >= 0;
    @constraint #t@1054 - #t1@1060 >= 0;
    @constraint #t@1054 - #t2@1056 >= 0;
    @constraint #t@1054 - #t1@1055 >= 0;
};
Rule in cache: 5
Rule staged: 101
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1890], Bk(), tuple4(pk(sk@1891), [Nb@1887], x1@1892, Ni@1893));
    @premise new(*[Nb@1887], Bn(), tuple4(pk(sk@1891), [Ka@1894], x1@1892, Ni@1893));
    @premise know(*sk@1891, #t1@1895);
    @premise know(*x1@1892, #t1@1896);
    @premise know(*Ni@1893, #t2@1897);
    @premise init(*pk(skA()), *x2@1886, *senc(senc(tuple4(x1@1884, [Na@1885], pk(skA()), x2@1886), hash([Nb@1887], m2@1888)), hash([Nb@1887], m2@1888)));
    @premise new(*[Nb@1887], Ak(), tuple2(x2@1886, [Na@1885]));
    @premise new(*[Na@1885], An(), tuple2(x2@1886, [Nb@1887]));
    @premise know(*[Na@1885], #t0@1898);
    @premise know(*m2@1888, #t2@1899);
    @premise know(*x2@1886, #t2@1900);
    @premise know(*x1@1884, #t1@1901);
    @conclusion know(*senc(tuple4(x1@1884, [Na@1885], pk(skA()), x2@1886), hash([Nb@1887], m2@1888)), #t@1889);
    @constraint #t1@1732 - #t1@1895 >= 0;
    @constraint #t1@1732 - #t1@1896 >= 0;
    @constraint #t1@1732 - #t2@1897 >= 0;
    @constraint #t@1889 - #t1@1732 >= 0;
    @constraint #t@1889 - #t2@1899 >= 0;
    @constraint #t@1889 - #t2@1900 >= 0;
    @constraint #t@1889 - #t1@1901 >= 0;
    @constraint #t@1889 - #t0@1898 >= 0;
};
Rule invalid. 

Compose to at 2 : 
@rule{
    @premise new(*[Nb@1144], Bn(), tuple4(pk(skA()), [Ka@1151], Ki@1146, x1@1145));
    @premise new(*[Kb@1147], Bk(), tuple4(pk(skA()), [Nb@1144], Ki@1146, x1@1145));
    @premise know(*[Kb@1147], #t2@1150);
    @premise know(*[Nb@1144], #t0@1152);
    @premise know(*x1@1145, #t1@1153);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1144], x1@1145, pk(skA()), pk(skB())), hash(Ki@1146, [Kb@1147])), hash(Ki@1146, [Kb@1147])));
};
Rule in cache: 5
Rule staged: 101
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1906], Bk(), tuple4(pk(sk@1907), [Nb@1905], x1@1908, Ni@1909));
    @premise new(*[Nb@1905], Bn(), tuple4(pk(sk@1907), [Ka@1910], x1@1908, Ni@1909));
    @premise know(*sk@1907, #t1@1911);
    @premise know(*x1@1908, #t1@1912);
    @premise know(*Ni@1909, #t2@1913);
    @premise new(*[Nb@1902], Bn(), tuple4(pk(skA()), [Ka@1914], Ki@1904, x1@1903));
    @premise new(*[Nb@1905], Bk(), tuple4(pk(skA()), [Nb@1902], Ki@1904, x1@1903));
    @premise know(*[Nb@1902], #t0@1915);
    @premise know(*x1@1903, #t1@1916);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1902], x1@1903, pk(skA()), pk(skB())), hash(Ki@1904, [Nb@1905])), hash(Ki@1904, [Nb@1905])));
    @constraint #t1@1732 - #t1@1911 >= 0;
    @constraint #t1@1732 - #t1@1912 >= 0;
    @constraint #t1@1732 - #t2@1913 >= 0;
};
Rule invalid. 

Compose to at 5 : 
@rule{
    @premise init(*pk(skA()), *x2@1447, *senc(senc(tuple4(x1@1445, [Na@1446], pk(skA()), x2@1447), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))));
    @premise new(*[Ka@1449], Ak(), tuple2(pk(skA()), [Na@1451]));
    @premise new(*[Na@1451], An(), tuple2(pk(skA()), [Ka@1449]));
    @premise new(*[Na@1446], An(), tuple2(x2@1447, [Ka@1448]));
    @premise new(*[Ka@1448], Ak(), tuple2(x2@1447, [Na@1446]));
    @premise know(*[Ka@1449], #t1@1452);
    @premise know(*[Ka@1448], #t1@1453);
    @premise know(*[Na@1446], #t0@1454);
    @premise know(*x2@1447, #t2@1455);
    @premise know(*x1@1445, #t1@1456);
    @conclusion know(*senc(tuple4(x1@1445, [Na@1446], pk(skA()), x2@1447), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))), #t@1450);
    @constraint #t@1450 - #t2@1455 >= 0;
    @constraint #t@1450 - #t1@1452 >= 0;
    @constraint #t@1450 - #t1@1453 >= 0;
    @constraint #t@1450 - #t1@1456 >= 0;
    @constraint #t@1450 - #t0@1454 >= 0;
};
Rule in cache: 5
Rule staged: 101
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1923], Bk(), tuple4(pk(sk@1924), [Nb@1921], x1@1925, Ni@1926));
    @premise new(*[Nb@1921], Bn(), tuple4(pk(sk@1924), [Ka@1927], x1@1925, Ni@1926));
    @premise know(*sk@1924, #t1@1928);
    @premise know(*x1@1925, #t1@1929);
    @premise know(*Ni@1926, #t2@1930);
    @premise init(*pk(skA()), *x2@1919, *senc(senc(tuple4(x1@1917, [Na@1918], pk(skA()), x2@1919), hash([Ka@1920], tuple2(pk(skA()), [Nb@1921]))), hash([Ka@1920], tuple2(pk(skA()), [Nb@1921]))));
    @premise new(*[Nb@1921], Ak(), tuple2(pk(skA()), [Na@1931]));
    @premise new(*[Na@1931], An(), tuple2(pk(skA()), [Nb@1921]));
    @premise new(*[Na@1918], An(), tuple2(x2@1919, [Ka@1920]));
    @premise new(*[Ka@1920], Ak(), tuple2(x2@1919, [Na@1918]));
    @premise know(*[Ka@1920], #t1@1932);
    @premise know(*[Na@1918], #t0@1933);
    @premise know(*x2@1919, #t2@1934);
    @premise know(*x1@1917, #t1@1935);
    @conclusion know(*senc(tuple4(x1@1917, [Na@1918], pk(skA()), x2@1919), hash([Ka@1920], tuple2(pk(skA()), [Nb@1921]))), #t@1922);
    @constraint #t1@1732 - #t1@1928 >= 0;
    @constraint #t1@1732 - #t1@1929 >= 0;
    @constraint #t1@1732 - #t2@1930 >= 0;
    @constraint #t@1922 - #t1@1732 >= 0;
    @constraint #t@1922 - #t1@1932 >= 0;
    @constraint #t@1922 - #t2@1934 >= 0;
    @constraint #t@1922 - #t1@1935 >= 0;
    @constraint #t@1922 - #t0@1933 >= 0;
};
Rule invalid. 

Compose to at 3 : 
@rule{
    @premise init(*pk(skA()), *pk(sk@1612), *senc(senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), hash([Ka@1613], m2@1614)));
    @premise new(*[Na@1611], An(), tuple2(pk(sk@1612), [Ka@1613]));
    @premise new(*[Ka@1613], Ak(), tuple2(pk(sk@1612), [Na@1611]));
    @premise know(*[Na@1611], #t0@1617);
    @premise know(*sk@1612, #t1@1616);
    @premise know(*m2@1614, #t2@1618);
    @premise know(*x1@1610, #t1@1620);
    @conclusion know(*senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), #t@1615);
    @constraint #t@1615 - #t2@1618 >= 0;
    @constraint #t@1615 - #t1@1620 >= 0;
    @constraint #t@1615 - #t0@1617 >= 0;
    @constraint #t@1615 - #t1@1616 >= 0;
};
Rule in cache: 5
Rule staged: 101
Rule before check and clean: 
@rule{
    @premise new(*[Kb@1942], Bk(), tuple4(pk(sk@1943), [Nb@1937], x1@1944, Ni@1945));
    @premise new(*[Nb@1937], Bn(), tuple4(pk(sk@1943), [Ka@1946], x1@1944, Ni@1945));
    @premise know(*sk@1943, #t1@1947);
    @premise know(*x1@1944, #t1@1948);
    @premise know(*Ni@1945, #t2@1949);
    @premise init(*pk(skA()), *pk(sk@1938), *senc(senc(tuple4(x1@1936, [Nb@1937], pk(skA()), pk(sk@1938)), hash([Ka@1939], m2@1940)), hash([Ka@1939], m2@1940)));
    @premise new(*[Nb@1937], An(), tuple2(pk(sk@1938), [Ka@1939]));
    @premise new(*[Ka@1939], Ak(), tuple2(pk(sk@1938), [Nb@1937]));
    @premise know(*sk@1938, #t1@1950);
    @premise know(*m2@1940, #t2@1951);
    @premise know(*x1@1936, #t1@1952);
    @conclusion know(*senc(tuple4(x1@1936, [Nb@1937], pk(skA()), pk(sk@1938)), hash([Ka@1939], m2@1940)), #t@1941);
    @constraint #t1@1732 - #t1@1947 >= 0;
    @constraint #t1@1732 - #t1@1948 >= 0;
    @constraint #t1@1732 - #t2@1949 >= 0;
    @constraint #t@1941 - #t1@1732 >= 0;
    @constraint #t@1941 - #t1@1950 >= 0;
    @constraint #t@1941 - #t2@1951 >= 0;
    @constraint #t@1941 - #t1@1952 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise new(*[Kb@1742], Bk(), tuple4(pk(sk@1743), [Nb@1744], x1@1745, Ni@1746));
    @premise new(*[Nb@1744], Bn(), tuple4(pk(sk@1743), [Ka@1747], x1@1745, Ni@1746));
    @premise know(*sk@1743, #t1@1748);
    @premise know(*x1@1745, #t1@1749);
    @premise know(*Ni@1746, #t2@1750);
    @conclusion know(*pk(skB()), #t2@1741);
    @constraint #t2@1741 - #t1@1748 >= 0;
    @constraint #t2@1741 - #t1@1749 >= 0;
    @constraint #t2@1741 - #t2@1750 >= 0;
};
Rule implied by: 
@rule{
    @conclusion know(*pk(skB()), #t@126);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Kb@1753], Bk(), tuple4(pk(sk@1751), [Nb@1754], x1@1755, Ni@1756));
    @premise new(*[Nb@1754], Bn(), tuple4(pk(sk@1751), [Ka@1757], x1@1755, Ni@1756));
    @premise know(*sk@1751, #t1@1758);
    @premise know(*x1@1755, #t1@1759);
    @premise know(*Ni@1756, #t2@1760);
    @conclusion know(*pk(sk@1751), #t3@1752);
    @constraint #t3@1752 - #t1@1758 >= 0;
    @constraint #t3@1752 - #t1@1759 >= 0;
    @constraint #t3@1752 - #t2@1760 >= 0;
};
Rule implied by: 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1761], [Na@1762], pk(skA()), pk(skB())), hash([Ka@1764], [Kb@1765])), hash([Ka@1764], [Kb@1765])));
    @premise new(*[Nb@1761], Bn(), tuple4(pk(skA()), [Ka@1766], [Ka@1764], [Na@1762]));
    @premise new(*[Kb@1765], Bk(), tuple4(pk(skA()), [Nb@1761], [Ka@1764], [Na@1762]));
    @premise new(*[Kb@1767], Bk(), tuple4(pk(skA()), [Nb@1761], [Ka@1764], [Na@1762]));
    @premise new(*[Ka@1764], Ak(), tuple2(pk(skB()), [Na@1762]));
    @premise new(*[Na@1762], An(), tuple2(pk(skB()), [Ka@1764]));
    @premise know(*hash([Ka@1764], [Kb@1765]), #t1@1768);
    @conclusion know(*tuple4([Nb@1761], [Na@1762], pk(skA()), pk(skB())), #t@1763);
    @constraint -#t1@1768 + #t@1763 >= 0;
};
Rule added at 6.

Compose by at 6 : 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule in cache: 2
Rule staged: 102
Rule before check and clean: 
@rule{
    @premise know(*[Ka@1956], #t1@1957);
    @premise know(*[Kb@1958], #t2@1959);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1953], [Na@1954], pk(skA()), pk(skB())), hash([Ka@1956], [Kb@1958])), hash([Ka@1956], [Kb@1958])));
    @premise new(*[Nb@1953], Bn(), tuple4(pk(skA()), [Ka@1960], [Ka@1956], [Na@1954]));
    @premise new(*[Kb@1958], Bk(), tuple4(pk(skA()), [Nb@1953], [Ka@1956], [Na@1954]));
    @premise new(*[Kb@1961], Bk(), tuple4(pk(skA()), [Nb@1953], [Ka@1956], [Na@1954]));
    @premise new(*[Ka@1956], Ak(), tuple2(pk(skB()), [Na@1954]));
    @premise new(*[Na@1954], An(), tuple2(pk(skB()), [Ka@1956]));
    @conclusion know(*tuple4([Nb@1953], [Na@1954], pk(skA()), pk(skB())), #t@1955);
    @constraint #t@1955 - #t@86 >= 0;
    @constraint #t@86 - #t2@1959 >= 0;
    @constraint -#t1@1957 + #t@86 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1953], [Na@1954], pk(skA()), pk(skB())), hash([Ka@1956], [Kb@1958])), hash([Ka@1956], [Kb@1958])));
    @premise new(*[Kb@1958], Bk(), tuple4(pk(skA()), [Nb@1953], [Ka@1956], [Na@1954]));
    @premise new(*[Kb@1961], Bk(), tuple4(pk(skA()), [Nb@1953], [Ka@1956], [Na@1954]));
    @premise new(*[Nb@1953], Bn(), tuple4(pk(skA()), [Ka@1960], [Ka@1956], [Na@1954]));
    @premise new(*[Na@1954], An(), tuple2(pk(skB()), [Ka@1956]));
    @premise new(*[Ka@1956], Ak(), tuple2(pk(skB()), [Na@1954]));
    @premise know(*[Kb@1958], #t2@1959);
    @premise know(*[Ka@1956], #t1@1957);
    @conclusion know(*tuple4([Nb@1953], [Na@1954], pk(skA()), pk(skB())), #t@1955);
    @constraint #t@1955 - #t2@1959 >= 0;
    @constraint #t@1955 - #t1@1957 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1769], [Na@1770], pk(skA()), pk(skB())), hash([Ka@1773], [Kb@1772])), hash([Ka@1773], [Kb@1772])));
    @premise new(*[Nb@1769], Bn(), tuple4(pk(skA()), [Ka@1774], [Ka@1773], [Na@1770]));
    @premise new(*[Kb@1772], Bk(), tuple4(pk(skA()), [Nb@1769], [Ka@1773], [Na@1770]));
    @premise new(*[Kb@1775], Bk(), tuple4(pk(skA()), [Nb@1769], [Ka@1773], [Na@1770]));
    @premise new(*[Ka@1773], Ak(), tuple2(pk(skB()), [Na@1770]));
    @premise new(*[Na@1770], An(), tuple2(pk(skB()), [Ka@1773]));
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1769], [Na@1770], pk(skA()), pk(skB())), hash([Ka@1773], [Kb@1772])), hash([Ka@1773], [Kb@1772])));
};
Rule added.

Check rule against queries: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1769], [Na@1770], pk(skA()), pk(skB())), hash([Ka@1773], [Kb@1772])), hash([Ka@1773], [Kb@1772])));
    @premise new(*[Nb@1769], Bn(), tuple4(pk(skA()), [Ka@1774], [Ka@1773], [Na@1770]));
    @premise new(*[Kb@1772], Bk(), tuple4(pk(skA()), [Nb@1769], [Ka@1773], [Na@1770]));
    @premise new(*[Kb@1775], Bk(), tuple4(pk(skA()), [Nb@1769], [Ka@1773], [Na@1770]));
    @premise new(*[Ka@1773], Ak(), tuple2(pk(skB()), [Na@1770]));
    @premise new(*[Na@1770], An(), tuple2(pk(skB()), [Ka@1773]));
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1769], [Na@1770], pk(skA()), pk(skB())), hash([Ka@1773], [Kb@1772])), hash([Ka@1773], [Kb@1772])));
};
Before checking:
0. Requested parameter relation:
[@universe]

After checking:
0. Requested parameter relation:
[@universe]


Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1779), *senc(senc(tuple4(x1@1777, [Na@1778], pk(skA()), pk(sk@1779)), hash([Ka@1783], m2@1781)), hash([Ka@1783], m2@1781)));
    @premise new(*[Ka@1783], Ak(), tuple2(pk(sk@1779), [Na@1778]));
    @premise new(*[Na@1778], An(), tuple2(pk(sk@1779), [Ka@1783]));
    @premise know(*sk@1779, #t1@1785);
    @premise know(*m2@1781, #t2@1786);
    @premise know(*x1@1777, #t1@1787);
    @conclusion know(*senc(tuple4(x1@1777, [Na@1778], pk(skA()), pk(sk@1779)), hash([Ka@1783], m2@1781)), #t@1782);
    @constraint #t@1782 - #t1@1785 >= 0;
    @constraint #t@1782 - #t2@1786 >= 0;
    @constraint #t@1782 - #t1@1787 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1612), *senc(senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), hash([Ka@1613], m2@1614)));
    @premise new(*[Na@1611], An(), tuple2(pk(sk@1612), [Ka@1613]));
    @premise new(*[Ka@1613], Ak(), tuple2(pk(sk@1612), [Na@1611]));
    @premise know(*[Na@1611], #t0@1617);
    @premise know(*sk@1612, #t1@1616);
    @premise know(*m2@1614, #t2@1618);
    @premise know(*x1@1610, #t1@1620);
    @conclusion know(*senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), #t@1615);
    @constraint #t@1615 - #t2@1618 >= 0;
    @constraint #t@1615 - #t1@1620 >= 0;
    @constraint #t@1615 - #t0@1617 >= 0;
    @constraint #t@1615 - #t1@1616 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*k@118, #t1@119);
    @premise know(*senc(m@120, k@118), #t2@121);
    @conclusion know(*m@120, #t@122);
    @constraint -#t1@119 + #t@122 >= 0;
    @constraint #t@122 - #t2@121 >= 0;
};
Rule in cache: 1
Rule staged: 104
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1964), *senc(senc(tuple4(x1@1962, [Na@1963], pk(skA()), pk(sk@1964)), hash([Ka@1966], m2@1967)), hash([Ka@1966], m2@1967)));
    @premise new(*[Ka@1966], Ak(), tuple2(pk(sk@1964), [Na@1963]));
    @premise new(*[Na@1963], An(), tuple2(pk(sk@1964), [Ka@1966]));
    @premise know(*sk@1964, #t1@1968);
    @premise know(*m2@1967, #t2@1969);
    @premise know(*x1@1962, #t1@1970);
    @premise know(*hash([Ka@1966], m2@1967), #t1@1971);
    @conclusion know(*tuple4(x1@1962, [Na@1963], pk(skA()), pk(sk@1964)), #t@1965);
    @constraint -#t1@1971 + #t@1965 >= 0;
    @constraint #t@1782 - #t1@1968 >= 0;
    @constraint #t@1782 - #t2@1969 >= 0;
    @constraint #t@1782 - #t1@1970 >= 0;
    @constraint #t@1965 - #t@1782 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1964), *senc(senc(tuple4(x1@1962, [Na@1963], pk(skA()), pk(sk@1964)), hash([Ka@1966], m2@1967)), hash([Ka@1966], m2@1967)));
    @premise new(*[Ka@1966], Ak(), tuple2(pk(sk@1964), [Na@1963]));
    @premise new(*[Na@1963], An(), tuple2(pk(sk@1964), [Ka@1966]));
    @premise know(*hash([Ka@1966], m2@1967), #t1@1971);
    @premise know(*m2@1967, #t2@1969);
    @premise know(*x1@1962, #t1@1970);
    @premise know(*sk@1964, #t1@1968);
    @conclusion know(*tuple4(x1@1962, [Na@1963], pk(skA()), pk(sk@1964)), #t@1965);
    @constraint -#t1@1971 + #t@1965 >= 0;
    @constraint #t@1965 - #t1@1968 >= 0;
    @constraint #t@1965 - #t2@1969 >= 0;
    @constraint #t@1965 - #t1@1970 >= 0;
};

Compose to at 1 : 
@rule{
    @premise init(*pk(skA()), *pkR@162, *senc(senc(tuple4(Nr@163, [Na@164], pk(skA()), pkR@162), hash([Ka@165], Kr@166)), hash([Ka@165], Kr@166)));
    @premise know(*senc(tuple4([Na@164], Nr@163, pkR@162, pk(skA())), hash([Ka@165], Kr@166)), #t3@169);
    @premise know(*aenc(Kr@166, pk(skA())), #t1@167);
    @premise new(*[Ka@165], Ak(), tuple2(pkR@162, [Na@164]));
    @premise new(*[Na@164], An(), tuple2(pkR@162, [Ka@165]));
    @premise know(*Nr@163, #t2@168);
    @conclusion know(*senc(tuple4(Nr@163, [Na@164], pk(skA()), pkR@162), hash([Ka@165], Kr@166)), #t@170);
    @constraint -#t1@167 + #t@170 >= 0;
    @constraint #t@170 - #t2@168 >= 0;
    @constraint #t@170 - #t3@169 >= 0;
};
Rule in cache: 2
Rule staged: 104
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *pk(skA()), *senc(senc(tuple4([Na@1973], [Na@1972], pk(skA()), pk(skA())), hash([Ka@1974], m2@1975)), hash([Ka@1974], m2@1975)));
    @premise new(*[Ka@1974], Ak(), tuple2(pk(skA()), [Na@1972]));
    @premise new(*[Na@1972], An(), tuple2(pk(skA()), [Ka@1974]));
    @premise know(*skA(), #t1@1977);
    @premise know(*m2@1975, #t2@1978);
    @premise know(*[Na@1973], #t1@1979);
    @premise init(*pk(skA()), *pk(skA()), *senc(senc(tuple4([Na@1972], [Na@1973], pk(skA()), pk(skA())), hash([Ka@1974], m2@1975)), hash([Ka@1974], m2@1975)));
    @premise know(*aenc(m2@1975, pk(skA())), #t1@1980);
    @premise new(*[Ka@1974], Ak(), tuple2(pk(skA()), [Na@1973]));
    @premise new(*[Na@1973], An(), tuple2(pk(skA()), [Ka@1974]));
    @premise know(*[Na@1972], #t2@1981);
    @conclusion know(*senc(tuple4([Na@1972], [Na@1973], pk(skA()), pk(skA())), hash([Ka@1974], m2@1975)), #t@1976);
    @constraint -#t1@1980 + #t@1976 >= 0;
    @constraint #t@1782 - #t1@1977 >= 0;
    @constraint #t@1782 - #t2@1978 >= 0;
    @constraint #t@1782 - #t1@1979 >= 0;
    @constraint #t@1976 - #t@1782 >= 0;
    @constraint #t@1976 - #t2@1981 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skA()), *senc(senc(tuple4([Na@1972], [Na@1972], pk(skA()), pk(skA())), hash([Ka@1974], m2@1975)), hash([Ka@1974], m2@1975)));
    @premise new(*[Ka@1974], Ak(), tuple2(pk(skA()), [Na@1972]));
    @premise new(*[Na@1972], An(), tuple2(pk(skA()), [Ka@1974]));
    @premise know(*aenc(m2@1975, pk(skA())), #t1@1980);
    @premise know(*skA(), #t1@1977);
    @premise know(*[Na@1972], #t1@1979);
    @premise know(*m2@1975, #t2@1978);
    @conclusion know(*senc(tuple4([Na@1972], [Na@1972], pk(skA()), pk(skA())), hash([Ka@1974], m2@1975)), #t@1976);
    @constraint -#t1@1980 + #t@1976 >= 0;
    @constraint #t@1976 - #t1@1977 >= 0;
    @constraint #t@1976 - #t2@1978 >= 0;
    @constraint #t@1976 - #t1@1979 >= 0;
};

Compose to at 2 : 
@rule{
    @premise new(*[Kb@171], Bk(), tuple4(pk(skA()), [Nb@172], Ki@173, Ni@174));
    @premise new(*[Nb@172], Bn(), tuple4(pk(skA()), [Ka@175], Ki@173, Ni@174));
    @premise know(*senc(tuple4([Nb@172], Ni@174, pk(skA()), pk(skB())), hash(Kr@176, [Kb@171])), #t1@177);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@172], Ni@174, pk(skA()), pk(skB())), hash(Ki@173, [Kb@171])), hash(Ki@173, [Kb@171])));
};
Rule in cache: 3
Rule staged: 104
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1982], [Na@1983], pk(skA()), pk(skB())), hash([Ka@1986], [Kb@1985])), hash([Ka@1986], [Kb@1985])));
    @premise new(*[Ka@1986], Ak(), tuple2(pk(skB()), [Na@1983]));
    @premise new(*[Na@1983], An(), tuple2(pk(skB()), [Ka@1986]));
    @premise know(*skB(), #t1@1987);
    @premise know(*[Kb@1985], #t2@1988);
    @premise know(*[Nb@1982], #t1@1989);
    @premise new(*[Kb@1985], Bk(), tuple4(pk(skA()), [Nb@1982], Ki@1984, [Na@1983]));
    @premise new(*[Nb@1982], Bn(), tuple4(pk(skA()), [Ka@1990], Ki@1984, [Na@1983]));
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1982], [Na@1983], pk(skA()), pk(skB())), hash(Ki@1984, [Kb@1985])), hash(Ki@1984, [Kb@1985])));
    @constraint #t@1782 - #t1@1989 >= 0;
    @constraint #t@1782 - #t2@1988 >= 0;
    @constraint #t@1782 - #t1@1987 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1982], [Na@1983], pk(skA()), pk(skB())), hash([Ka@1986], [Kb@1985])), hash([Ka@1986], [Kb@1985])));
    @premise new(*[Nb@1982], Bn(), tuple4(pk(skA()), [Ka@1990], Ki@1984, [Na@1983]));
    @premise new(*[Kb@1985], Bk(), tuple4(pk(skA()), [Nb@1982], Ki@1984, [Na@1983]));
    @premise new(*[Na@1983], An(), tuple2(pk(skB()), [Ka@1986]));
    @premise new(*[Ka@1986], Ak(), tuple2(pk(skB()), [Na@1983]));
    @premise know(*skB(), #t1@1987);
    @premise know(*[Nb@1982], #t1@1989);
    @premise know(*[Kb@1985], #t2@1988);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1982], [Na@1983], pk(skA()), pk(skB())), hash(Ki@1984, [Kb@1985])), hash(Ki@1984, [Kb@1985])));
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1953], [Na@1954], pk(skA()), pk(skB())), hash([Ka@1956], [Kb@1958])), hash([Ka@1956], [Kb@1958])));
    @premise new(*[Kb@1958], Bk(), tuple4(pk(skA()), [Nb@1953], [Ka@1956], [Na@1954]));
    @premise new(*[Kb@1961], Bk(), tuple4(pk(skA()), [Nb@1953], [Ka@1956], [Na@1954]));
    @premise new(*[Nb@1953], Bn(), tuple4(pk(skA()), [Ka@1960], [Ka@1956], [Na@1954]));
    @premise new(*[Na@1954], An(), tuple2(pk(skB()), [Ka@1956]));
    @premise new(*[Ka@1956], Ak(), tuple2(pk(skB()), [Na@1954]));
    @premise know(*[Kb@1958], #t2@1959);
    @premise know(*[Ka@1956], #t1@1957);
    @conclusion know(*tuple4([Nb@1953], [Na@1954], pk(skA()), pk(skB())), #t@1955);
    @constraint #t@1955 - #t2@1959 >= 0;
    @constraint #t@1955 - #t1@1957 >= 0;
};
Rule added at 6.

Compose by at 6 : 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};
Rule in cache: 3
Rule staged: 105
Rule before check and clean: 
@rule{
    @premise new(*[Ka@1994], Ak(), tuple2(pkR@1995, [Na@1996]));
    @premise new(*[Na@1996], An(), tuple2(pkR@1995, [Ka@1994]));
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1991], [Na@1992], pk(skA()), pk(skB())), hash([Ka@1997], [Na@1996])), hash([Ka@1997], [Na@1996])));
    @premise new(*[Na@1996], Bk(), tuple4(pk(skA()), [Nb@1991], [Ka@1997], [Na@1992]));
    @premise new(*[Kb@1998], Bk(), tuple4(pk(skA()), [Nb@1991], [Ka@1997], [Na@1992]));
    @premise new(*[Nb@1991], Bn(), tuple4(pk(skA()), [Ka@1999], [Ka@1997], [Na@1992]));
    @premise new(*[Na@1992], An(), tuple2(pk(skB()), [Ka@1997]));
    @premise new(*[Ka@1997], Ak(), tuple2(pk(skB()), [Na@1992]));
    @premise know(*[Ka@1997], #t1@2000);
    @conclusion know(*tuple4([Nb@1991], [Na@1992], pk(skA()), pk(skB())), #t@1993);
    @constraint #t@1993 - #t1@275 >= 0;
    @constraint #t@1993 - #t1@2000 >= 0;
};
Rule invalid. 

Compose by at 6 : 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};
Rule in cache: 3
Rule staged: 105
Rule before check and clean: 
@rule{
    @premise new(*[Kb@2004], Bk(), tuple4(pk(skA()), [Nb@2005], [Ka@2006], Ni@2007));
    @premise new(*[Nb@2005], Bn(), tuple4(pk(skA()), [Ka@2008], [Ka@2006], Ni@2007));
    @premise new(*[Ka@2006], Ak(), tuple2(pk(skB()), [Na@2009]));
    @premise new(*[Na@2009], An(), tuple2(pk(skB()), [Ka@2006]));
    @premise know(*Ni@2007, #t2@2010);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@2001], [Na@2002], pk(skA()), pk(skB())), hash([Ka@2011], [Nb@2005])), hash([Ka@2011], [Nb@2005])));
    @premise new(*[Nb@2005], Bk(), tuple4(pk(skA()), [Nb@2001], [Ka@2011], [Na@2002]));
    @premise new(*[Kb@2012], Bk(), tuple4(pk(skA()), [Nb@2001], [Ka@2011], [Na@2002]));
    @premise new(*[Nb@2001], Bn(), tuple4(pk(skA()), [Ka@2013], [Ka@2011], [Na@2002]));
    @premise new(*[Na@2002], An(), tuple2(pk(skB()), [Ka@2011]));
    @premise new(*[Ka@2011], Ak(), tuple2(pk(skB()), [Na@2002]));
    @premise know(*[Ka@2011], #t1@2014);
    @conclusion know(*tuple4([Nb@2001], [Na@2002], pk(skA()), pk(skB())), #t@2003);
    @constraint #t@381 - #t2@2010 >= 0;
    @constraint #t@2003 - #t@381 >= 0;
    @constraint #t@2003 - #t1@2014 >= 0;
};
Rule invalid. 

Compose by at 6 : 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};
Rule in cache: 3
Rule staged: 105
Rule before check and clean: 
@rule{
    @premise new(*[Kb@2018], Bk(), tuple4(x0@2019, [Nb@2020], x1@2021, Ni@2022));
    @premise new(*[Nb@2020], Bn(), tuple4(x0@2019, [Ka@2023], x1@2021, Ni@2022));
    @premise know(*x0@2019, #t0@2024);
    @premise know(*x1@2021, #t1@2025);
    @premise know(*Ni@2022, #t2@2026);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@2015], [Na@2016], pk(skA()), pk(skB())), hash([Ka@2027], [Nb@2020])), hash([Ka@2027], [Nb@2020])));
    @premise new(*[Nb@2020], Bk(), tuple4(pk(skA()), [Nb@2015], [Ka@2027], [Na@2016]));
    @premise new(*[Kb@2028], Bk(), tuple4(pk(skA()), [Nb@2015], [Ka@2027], [Na@2016]));
    @premise new(*[Nb@2015], Bn(), tuple4(pk(skA()), [Ka@2029], [Ka@2027], [Na@2016]));
    @premise new(*[Na@2016], An(), tuple2(pk(skB()), [Ka@2027]));
    @premise new(*[Ka@2027], Ak(), tuple2(pk(skB()), [Na@2016]));
    @premise know(*[Ka@2027], #t1@2030);
    @conclusion know(*tuple4([Nb@2015], [Na@2016], pk(skA()), pk(skB())), #t@2017);
    @constraint #t@464 - #t1@2025 >= 0;
    @constraint #t@464 - #t0@2024 >= 0;
    @constraint #t@464 - #t2@2026 >= 0;
    @constraint #t@2017 - #t@464 >= 0;
    @constraint #t@2017 - #t1@2030 >= 0;
};
Rule invalid. 

Compose by at 6 : 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};
Rule in cache: 3
Rule staged: 105
Rule before check and clean: 
@rule{
    @premise new(*[Ka@2034], Ak(), tuple2(pk(sk@2035), [Na@2036]));
    @premise new(*[Na@2036], An(), tuple2(pk(sk@2035), [Ka@2034]));
    @premise know(*sk@2035, #t1@2037);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@2031], [Na@2032], pk(skA()), pk(skB())), hash([Ka@2038], [Ka@2034])), hash([Ka@2038], [Ka@2034])));
    @premise new(*[Ka@2034], Bk(), tuple4(pk(skA()), [Nb@2031], [Ka@2038], [Na@2032]));
    @premise new(*[Kb@2039], Bk(), tuple4(pk(skA()), [Nb@2031], [Ka@2038], [Na@2032]));
    @premise new(*[Nb@2031], Bn(), tuple4(pk(skA()), [Ka@2040], [Ka@2038], [Na@2032]));
    @premise new(*[Na@2032], An(), tuple2(pk(skB()), [Ka@2038]));
    @premise new(*[Ka@2038], Ak(), tuple2(pk(skB()), [Na@2032]));
    @premise know(*[Ka@2038], #t1@2041);
    @conclusion know(*tuple4([Nb@2031], [Na@2032], pk(skA()), pk(skB())), #t@2033);
    @constraint #t1@489 - #t1@2037 >= 0;
    @constraint #t@2033 - #t1@489 >= 0;
    @constraint #t@2033 - #t1@2041 >= 0;
};
Rule invalid. 

Compose by at 6 : 
@rule{
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*sk@826, #t1@827);
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @conclusion know(*[Kb@824], #t@825);
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
    @constraint #t@825 - #t1@827 >= 0;
};
Rule in cache: 3
Rule staged: 105
Rule before check and clean: 
@rule{
    @premise new(*[Kb@2045], Bk(), tuple4(pk(sk@2046), [Nb@2047], x1@2048, Ni@2049));
    @premise new(*[Nb@2047], Bn(), tuple4(pk(sk@2046), [Ka@2050], x1@2048, Ni@2049));
    @premise know(*sk@2046, #t1@2051);
    @premise know(*x1@2048, #t1@2052);
    @premise know(*Ni@2049, #t2@2053);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@2042], [Na@2043], pk(skA()), pk(skB())), hash([Ka@2054], [Kb@2045])), hash([Ka@2054], [Kb@2045])));
    @premise new(*[Kb@2045], Bk(), tuple4(pk(skA()), [Nb@2042], [Ka@2054], [Na@2043]));
    @premise new(*[Kb@2055], Bk(), tuple4(pk(skA()), [Nb@2042], [Ka@2054], [Na@2043]));
    @premise new(*[Nb@2042], Bn(), tuple4(pk(skA()), [Ka@2056], [Ka@2054], [Na@2043]));
    @premise new(*[Na@2043], An(), tuple2(pk(skB()), [Ka@2054]));
    @premise new(*[Ka@2054], Ak(), tuple2(pk(skB()), [Na@2043]));
    @premise know(*[Ka@2054], #t1@2057);
    @conclusion know(*tuple4([Nb@2042], [Na@2043], pk(skA()), pk(skB())), #t@2044);
    @constraint #t@825 - #t1@2051 >= 0;
    @constraint #t@825 - #t1@2052 >= 0;
    @constraint #t@825 - #t2@2053 >= 0;
    @constraint #t@2044 - #t@825 >= 0;
    @constraint #t@2044 - #t1@2057 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@2047], [Na@2043], pk(skA()), pk(skB())), hash([Ka@2054], [Kb@2045])), hash([Ka@2054], [Kb@2045])));
    @premise new(*[Kb@2045], Bk(), tuple4(pk(skA()), [Nb@2047], [Ka@2054], [Na@2043]));
    @premise new(*[Nb@2047], Bn(), tuple4(pk(skA()), [Ka@2050], [Ka@2054], [Na@2043]));
    @premise new(*[Kb@2055], Bk(), tuple4(pk(skA()), [Nb@2047], [Ka@2054], [Na@2043]));
    @premise new(*[Ka@2054], Ak(), tuple2(pk(skB()), [Na@2043]));
    @premise new(*[Na@2043], An(), tuple2(pk(skB()), [Ka@2054]));
    @premise know(*skA(), #t1@2051);
    @premise know(*[Ka@2054], #t1@2052);
    @premise know(*[Na@2043], #t2@2053);
    @conclusion know(*tuple4([Nb@2047], [Na@2043], pk(skA()), pk(skB())), #t@2044);
    @constraint #t@2044 - #t1@2051 >= 0;
    @constraint #t@2044 - #t1@2052 >= 0;
    @constraint #t@2044 - #t2@2053 >= 0;
};

Compose by at 6 : 
@rule{
    @premise new(*[Kb@1733], Bk(), tuple4(pk(sk@1734), [Nb@1731], x1@1735, Ni@1736));
    @premise new(*[Nb@1731], Bn(), tuple4(pk(sk@1734), [Ka@1737], x1@1735, Ni@1736));
    @premise know(*sk@1734, #t1@1738);
    @premise know(*x1@1735, #t1@1739);
    @premise know(*Ni@1736, #t2@1740);
    @conclusion know(*[Nb@1731], #t1@1732);
    @constraint #t1@1732 - #t1@1738 >= 0;
    @constraint #t1@1732 - #t1@1739 >= 0;
    @constraint #t1@1732 - #t2@1740 >= 0;
};
Rule in cache: 4
Rule staged: 105
Rule before check and clean: 
@rule{
    @premise new(*[Kb@2061], Bk(), tuple4(pk(sk@2062), [Nb@2063], x1@2064, Ni@2065));
    @premise new(*[Nb@2063], Bn(), tuple4(pk(sk@2062), [Ka@2066], x1@2064, Ni@2065));
    @premise know(*sk@2062, #t1@2067);
    @premise know(*x1@2064, #t1@2068);
    @premise know(*Ni@2065, #t2@2069);
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@2058], [Na@2059], pk(skA()), pk(skB())), hash([Ka@2070], [Nb@2063])), hash([Ka@2070], [Nb@2063])));
    @premise new(*[Nb@2063], Bk(), tuple4(pk(skA()), [Nb@2058], [Ka@2070], [Na@2059]));
    @premise new(*[Kb@2071], Bk(), tuple4(pk(skA()), [Nb@2058], [Ka@2070], [Na@2059]));
    @premise new(*[Nb@2058], Bn(), tuple4(pk(skA()), [Ka@2072], [Ka@2070], [Na@2059]));
    @premise new(*[Na@2059], An(), tuple2(pk(skB()), [Ka@2070]));
    @premise new(*[Ka@2070], Ak(), tuple2(pk(skB()), [Na@2059]));
    @premise know(*[Ka@2070], #t1@2073);
    @conclusion know(*tuple4([Nb@2058], [Na@2059], pk(skA()), pk(skB())), #t@2060);
    @constraint #t1@1732 - #t1@2067 >= 0;
    @constraint #t1@1732 - #t1@2068 >= 0;
    @constraint #t1@1732 - #t2@2069 >= 0;
    @constraint #t@2060 - #t1@1732 >= 0;
    @constraint #t@2060 - #t1@2073 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1964), *senc(senc(tuple4(x1@1962, [Na@1963], pk(skA()), pk(sk@1964)), hash([Ka@1966], m2@1967)), hash([Ka@1966], m2@1967)));
    @premise new(*[Ka@1966], Ak(), tuple2(pk(sk@1964), [Na@1963]));
    @premise new(*[Na@1963], An(), tuple2(pk(sk@1964), [Ka@1966]));
    @premise know(*hash([Ka@1966], m2@1967), #t1@1971);
    @premise know(*m2@1967, #t2@1969);
    @premise know(*x1@1962, #t1@1970);
    @premise know(*sk@1964, #t1@1968);
    @conclusion know(*tuple4(x1@1962, [Na@1963], pk(skA()), pk(sk@1964)), #t@1965);
    @constraint -#t1@1971 + #t@1965 >= 0;
    @constraint #t@1965 - #t1@1968 >= 0;
    @constraint #t@1965 - #t2@1969 >= 0;
    @constraint #t@1965 - #t1@1970 >= 0;
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};
Rule in cache: 3
Rule staged: 106
Rule before check and clean: 
@rule{
    @premise know(*[Ka@2078], #t1@2079);
    @premise know(*m2@2080, #t2@2081);
    @premise init(*pk(skA()), *pk(sk@2076), *senc(senc(tuple4(x1@2074, [Na@2075], pk(skA()), pk(sk@2076)), hash([Ka@2078], m2@2080)), hash([Ka@2078], m2@2080)));
    @premise new(*[Ka@2078], Ak(), tuple2(pk(sk@2076), [Na@2075]));
    @premise new(*[Na@2075], An(), tuple2(pk(sk@2076), [Ka@2078]));
    @premise know(*m2@2080, #t2@2082);
    @premise know(*x1@2074, #t1@2083);
    @premise know(*sk@2076, #t1@2084);
    @conclusion know(*tuple4(x1@2074, [Na@2075], pk(skA()), pk(sk@2076)), #t@2077);
    @constraint #t@2077 - #t@86 >= 0;
    @constraint #t@86 - #t2@2081 >= 0;
    @constraint -#t1@2079 + #t@86 >= 0;
    @constraint #t@2077 - #t1@2084 >= 0;
    @constraint #t@2077 - #t2@2082 >= 0;
    @constraint #t@2077 - #t1@2083 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2076), *senc(senc(tuple4(x1@2074, [Na@2075], pk(skA()), pk(sk@2076)), hash([Ka@2078], m2@2080)), hash([Ka@2078], m2@2080)));
    @premise new(*[Ka@2078], Ak(), tuple2(pk(sk@2076), [Na@2075]));
    @premise new(*[Na@2075], An(), tuple2(pk(sk@2076), [Ka@2078]));
    @premise know(*[Ka@2078], #t1@2079);
    @premise know(*m2@2080, #t2@2081);
    @premise know(*x1@2074, #t1@2083);
    @premise know(*sk@2076, #t1@2084);
    @conclusion know(*tuple4(x1@2074, [Na@2075], pk(skA()), pk(sk@2076)), #t@2077);
    @constraint #t@2077 - #t1@2083 >= 0;
    @constraint #t@2077 - #t1@2084 >= 0;
    @constraint #t@2077 - #t2@2081 >= 0;
    @constraint #t@2077 - #t1@2079 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skA()), *senc(senc(tuple4([Na@1972], [Na@1972], pk(skA()), pk(skA())), hash([Ka@1974], m2@1975)), hash([Ka@1974], m2@1975)));
    @premise new(*[Ka@1974], Ak(), tuple2(pk(skA()), [Na@1972]));
    @premise new(*[Na@1972], An(), tuple2(pk(skA()), [Ka@1974]));
    @premise know(*aenc(m2@1975, pk(skA())), #t1@1980);
    @premise know(*skA(), #t1@1977);
    @premise know(*[Na@1972], #t1@1979);
    @premise know(*m2@1975, #t2@1978);
    @conclusion know(*senc(tuple4([Na@1972], [Na@1972], pk(skA()), pk(skA())), hash([Ka@1974], m2@1975)), #t@1976);
    @constraint -#t1@1980 + #t@1976 >= 0;
    @constraint #t@1976 - #t1@1977 >= 0;
    @constraint #t@1976 - #t2@1978 >= 0;
    @constraint #t@1976 - #t1@1979 >= 0;
};
Rule implied by: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1779), *senc(senc(tuple4(x1@1777, [Na@1778], pk(skA()), pk(sk@1779)), hash([Ka@1783], m2@1781)), hash([Ka@1783], m2@1781)));
    @premise new(*[Ka@1783], Ak(), tuple2(pk(sk@1779), [Na@1778]));
    @premise new(*[Na@1778], An(), tuple2(pk(sk@1779), [Ka@1783]));
    @premise know(*sk@1779, #t1@1785);
    @premise know(*m2@1781, #t2@1786);
    @premise know(*x1@1777, #t1@1787);
    @conclusion know(*senc(tuple4(x1@1777, [Na@1778], pk(skA()), pk(sk@1779)), hash([Ka@1783], m2@1781)), #t@1782);
    @constraint #t@1782 - #t1@1785 >= 0;
    @constraint #t@1782 - #t2@1786 >= 0;
    @constraint #t@1782 - #t1@1787 >= 0;
};
Rule not added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1982], [Na@1983], pk(skA()), pk(skB())), hash([Ka@1986], [Kb@1985])), hash([Ka@1986], [Kb@1985])));
    @premise new(*[Nb@1982], Bn(), tuple4(pk(skA()), [Ka@1990], Ki@1984, [Na@1983]));
    @premise new(*[Kb@1985], Bk(), tuple4(pk(skA()), [Nb@1982], Ki@1984, [Na@1983]));
    @premise new(*[Na@1983], An(), tuple2(pk(skB()), [Ka@1986]));
    @premise new(*[Ka@1986], Ak(), tuple2(pk(skB()), [Na@1983]));
    @premise know(*skB(), #t1@1987);
    @premise know(*[Nb@1982], #t1@1989);
    @premise know(*[Kb@1985], #t2@1988);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1982], [Na@1983], pk(skA()), pk(skB())), hash(Ki@1984, [Kb@1985])), hash(Ki@1984, [Kb@1985])));
};
Rule added at 5.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@2047], [Na@2043], pk(skA()), pk(skB())), hash([Ka@2054], [Kb@2045])), hash([Ka@2054], [Kb@2045])));
    @premise new(*[Kb@2045], Bk(), tuple4(pk(skA()), [Nb@2047], [Ka@2054], [Na@2043]));
    @premise new(*[Nb@2047], Bn(), tuple4(pk(skA()), [Ka@2050], [Ka@2054], [Na@2043]));
    @premise new(*[Kb@2055], Bk(), tuple4(pk(skA()), [Nb@2047], [Ka@2054], [Na@2043]));
    @premise new(*[Ka@2054], Ak(), tuple2(pk(skB()), [Na@2043]));
    @premise new(*[Na@2043], An(), tuple2(pk(skB()), [Ka@2054]));
    @premise know(*skA(), #t1@2051);
    @premise know(*[Ka@2054], #t1@2052);
    @premise know(*[Na@2043], #t2@2053);
    @conclusion know(*tuple4([Nb@2047], [Na@2043], pk(skA()), pk(skB())), #t@2044);
    @constraint #t@2044 - #t1@2051 >= 0;
    @constraint #t@2044 - #t1@2052 >= 0;
    @constraint #t@2044 - #t2@2053 >= 0;
};
Rule added at 6.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2076), *senc(senc(tuple4(x1@2074, [Na@2075], pk(skA()), pk(sk@2076)), hash([Ka@2078], m2@2080)), hash([Ka@2078], m2@2080)));
    @premise new(*[Ka@2078], Ak(), tuple2(pk(sk@2076), [Na@2075]));
    @premise new(*[Na@2075], An(), tuple2(pk(sk@2076), [Ka@2078]));
    @premise know(*[Ka@2078], #t1@2079);
    @premise know(*m2@2080, #t2@2081);
    @premise know(*x1@2074, #t1@2083);
    @premise know(*sk@2076, #t1@2084);
    @conclusion know(*tuple4(x1@2074, [Na@2075], pk(skA()), pk(sk@2076)), #t@2077);
    @constraint #t@2077 - #t1@2083 >= 0;
    @constraint #t@2077 - #t1@2084 >= 0;
    @constraint #t@2077 - #t2@2081 >= 0;
    @constraint #t@2077 - #t1@2079 >= 0;
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};
Rule in cache: 0
Rule staged: 109
Rule before check and clean: 
@rule{
    @premise new(*[Ka@2089], Ak(), tuple2(pkR@2090, [Na@2091]));
    @premise new(*[Na@2091], An(), tuple2(pkR@2090, [Ka@2089]));
    @premise init(*pk(skA()), *pk(sk@2087), *senc(senc(tuple4(x1@2085, [Na@2086], pk(skA()), pk(sk@2087)), hash([Na@2091], m2@2092)), hash([Na@2091], m2@2092)));
    @premise new(*[Na@2091], Ak(), tuple2(pk(sk@2087), [Na@2086]));
    @premise new(*[Na@2086], An(), tuple2(pk(sk@2087), [Na@2091]));
    @premise know(*m2@2092, #t2@2093);
    @premise know(*x1@2085, #t1@2094);
    @premise know(*sk@2087, #t1@2095);
    @conclusion know(*tuple4(x1@2085, [Na@2086], pk(skA()), pk(sk@2087)), #t@2088);
    @constraint #t@2088 - #t1@275 >= 0;
    @constraint #t@2088 - #t2@2093 >= 0;
    @constraint #t@2088 - #t1@2095 >= 0;
    @constraint #t@2088 - #t1@2094 >= 0;
};
Rule invalid. 

Compose by at 3 : 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};
Rule in cache: 0
Rule staged: 109
Rule before check and clean: 
@rule{
    @premise new(*[Kb@2100], Bk(), tuple4(pk(skA()), [Nb@2101], [Ka@2102], Ni@2103));
    @premise new(*[Nb@2101], Bn(), tuple4(pk(skA()), [Ka@2104], [Ka@2102], Ni@2103));
    @premise new(*[Ka@2102], Ak(), tuple2(pk(skB()), [Na@2105]));
    @premise new(*[Na@2105], An(), tuple2(pk(skB()), [Ka@2102]));
    @premise know(*Ni@2103, #t2@2106);
    @premise init(*pk(skA()), *pk(sk@2098), *senc(senc(tuple4(x1@2096, [Na@2097], pk(skA()), pk(sk@2098)), hash([Nb@2101], m2@2107)), hash([Nb@2101], m2@2107)));
    @premise new(*[Nb@2101], Ak(), tuple2(pk(sk@2098), [Na@2097]));
    @premise new(*[Na@2097], An(), tuple2(pk(sk@2098), [Nb@2101]));
    @premise know(*m2@2107, #t2@2108);
    @premise know(*x1@2096, #t1@2109);
    @premise know(*sk@2098, #t1@2110);
    @conclusion know(*tuple4(x1@2096, [Na@2097], pk(skA()), pk(sk@2098)), #t@2099);
    @constraint #t@381 - #t2@2106 >= 0;
    @constraint #t@2099 - #t@381 >= 0;
    @constraint #t@2099 - #t2@2108 >= 0;
    @constraint #t@2099 - #t1@2110 >= 0;
    @constraint #t@2099 - #t1@2109 >= 0;
};
Rule invalid. 

Compose by at 3 : 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};
Rule in cache: 0
Rule staged: 109
Rule before check and clean: 
@rule{
    @premise new(*[Kb@2115], Bk(), tuple4(x0@2116, [Nb@2117], x1@2118, Ni@2119));
    @premise new(*[Nb@2117], Bn(), tuple4(x0@2116, [Ka@2120], x1@2118, Ni@2119));
    @premise know(*x0@2116, #t0@2121);
    @premise know(*x1@2118, #t1@2122);
    @premise know(*Ni@2119, #t2@2123);
    @premise init(*pk(skA()), *pk(sk@2113), *senc(senc(tuple4(x1@2111, [Na@2112], pk(skA()), pk(sk@2113)), hash([Nb@2117], m2@2124)), hash([Nb@2117], m2@2124)));
    @premise new(*[Nb@2117], Ak(), tuple2(pk(sk@2113), [Na@2112]));
    @premise new(*[Na@2112], An(), tuple2(pk(sk@2113), [Nb@2117]));
    @premise know(*m2@2124, #t2@2125);
    @premise know(*x1@2111, #t1@2126);
    @premise know(*sk@2113, #t1@2127);
    @conclusion know(*tuple4(x1@2111, [Na@2112], pk(skA()), pk(sk@2113)), #t@2114);
    @constraint #t@464 - #t1@2122 >= 0;
    @constraint #t@464 - #t0@2121 >= 0;
    @constraint #t@464 - #t2@2123 >= 0;
    @constraint #t@2114 - #t@464 >= 0;
    @constraint #t@2114 - #t2@2125 >= 0;
    @constraint #t@2114 - #t1@2127 >= 0;
    @constraint #t@2114 - #t1@2126 >= 0;
};
Rule invalid. 

Compose by at 3 : 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};
Rule in cache: 0
Rule staged: 109
Rule before check and clean: 
@rule{
    @premise new(*[Ka@2132], Ak(), tuple2(pk(sk@2133), [Na@2134]));
    @premise new(*[Na@2134], An(), tuple2(pk(sk@2133), [Ka@2132]));
    @premise know(*sk@2133, #t1@2135);
    @premise init(*pk(skA()), *pk(sk@2130), *senc(senc(tuple4(x1@2128, [Na@2129], pk(skA()), pk(sk@2130)), hash([Ka@2132], m2@2136)), hash([Ka@2132], m2@2136)));
    @premise new(*[Ka@2132], Ak(), tuple2(pk(sk@2130), [Na@2129]));
    @premise new(*[Na@2129], An(), tuple2(pk(sk@2130), [Ka@2132]));
    @premise know(*m2@2136, #t2@2137);
    @premise know(*x1@2128, #t1@2138);
    @premise know(*sk@2130, #t1@2139);
    @conclusion know(*tuple4(x1@2128, [Na@2129], pk(skA()), pk(sk@2130)), #t@2131);
    @constraint #t1@489 - #t1@2135 >= 0;
    @constraint #t@2131 - #t1@489 >= 0;
    @constraint #t@2131 - #t2@2137 >= 0;
    @constraint #t@2131 - #t1@2139 >= 0;
    @constraint #t@2131 - #t1@2138 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2133), *senc(senc(tuple4(x1@2128, [Na@2134], pk(skA()), pk(sk@2133)), hash([Ka@2132], m2@2136)), hash([Ka@2132], m2@2136)));
    @premise new(*[Ka@2132], Ak(), tuple2(pk(sk@2133), [Na@2134]));
    @premise new(*[Na@2134], An(), tuple2(pk(sk@2133), [Ka@2132]));
    @premise know(*sk@2133, #t1@2135);
    @premise know(*m2@2136, #t2@2137);
    @premise know(*x1@2128, #t1@2138);
    @conclusion know(*tuple4(x1@2128, [Na@2134], pk(skA()), pk(sk@2133)), #t@2131);
    @constraint #t@2131 - #t1@2135 >= 0;
    @constraint #t@2131 - #t2@2137 >= 0;
    @constraint #t@2131 - #t1@2138 >= 0;
};

Compose by at 3 : 
@rule{
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*sk@826, #t1@827);
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @conclusion know(*[Kb@824], #t@825);
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
    @constraint #t@825 - #t1@827 >= 0;
};
Rule in cache: 1
Rule staged: 109
Rule before check and clean: 
@rule{
    @premise new(*[Kb@2144], Bk(), tuple4(pk(sk@2145), [Nb@2146], x1@2147, Ni@2148));
    @premise new(*[Nb@2146], Bn(), tuple4(pk(sk@2145), [Ka@2149], x1@2147, Ni@2148));
    @premise know(*sk@2145, #t1@2150);
    @premise know(*x1@2147, #t1@2151);
    @premise know(*Ni@2148, #t2@2152);
    @premise init(*pk(skA()), *pk(sk@2142), *senc(senc(tuple4(x1@2140, [Na@2141], pk(skA()), pk(sk@2142)), hash([Kb@2144], m2@2153)), hash([Kb@2144], m2@2153)));
    @premise new(*[Kb@2144], Ak(), tuple2(pk(sk@2142), [Na@2141]));
    @premise new(*[Na@2141], An(), tuple2(pk(sk@2142), [Kb@2144]));
    @premise know(*m2@2153, #t2@2154);
    @premise know(*x1@2140, #t1@2155);
    @premise know(*sk@2142, #t1@2156);
    @conclusion know(*tuple4(x1@2140, [Na@2141], pk(skA()), pk(sk@2142)), #t@2143);
    @constraint #t@825 - #t1@2150 >= 0;
    @constraint #t@825 - #t1@2151 >= 0;
    @constraint #t@825 - #t2@2152 >= 0;
    @constraint #t@2143 - #t@825 >= 0;
    @constraint #t@2143 - #t2@2154 >= 0;
    @constraint #t@2143 - #t1@2156 >= 0;
    @constraint #t@2143 - #t1@2155 >= 0;
};
Rule invalid. 

Compose by at 3 : 
@rule{
    @premise new(*[Kb@1733], Bk(), tuple4(pk(sk@1734), [Nb@1731], x1@1735, Ni@1736));
    @premise new(*[Nb@1731], Bn(), tuple4(pk(sk@1734), [Ka@1737], x1@1735, Ni@1736));
    @premise know(*sk@1734, #t1@1738);
    @premise know(*x1@1735, #t1@1739);
    @premise know(*Ni@1736, #t2@1740);
    @conclusion know(*[Nb@1731], #t1@1732);
    @constraint #t1@1732 - #t1@1738 >= 0;
    @constraint #t1@1732 - #t1@1739 >= 0;
    @constraint #t1@1732 - #t2@1740 >= 0;
};
Rule in cache: 1
Rule staged: 109
Rule before check and clean: 
@rule{
    @premise new(*[Kb@2161], Bk(), tuple4(pk(sk@2162), [Nb@2163], x1@2164, Ni@2165));
    @premise new(*[Nb@2163], Bn(), tuple4(pk(sk@2162), [Ka@2166], x1@2164, Ni@2165));
    @premise know(*sk@2162, #t1@2167);
    @premise know(*x1@2164, #t1@2168);
    @premise know(*Ni@2165, #t2@2169);
    @premise init(*pk(skA()), *pk(sk@2159), *senc(senc(tuple4(x1@2157, [Na@2158], pk(skA()), pk(sk@2159)), hash([Nb@2163], m2@2170)), hash([Nb@2163], m2@2170)));
    @premise new(*[Nb@2163], Ak(), tuple2(pk(sk@2159), [Na@2158]));
    @premise new(*[Na@2158], An(), tuple2(pk(sk@2159), [Nb@2163]));
    @premise know(*m2@2170, #t2@2171);
    @premise know(*x1@2157, #t1@2172);
    @premise know(*sk@2159, #t1@2173);
    @conclusion know(*tuple4(x1@2157, [Na@2158], pk(skA()), pk(sk@2159)), #t@2160);
    @constraint #t1@1732 - #t1@2167 >= 0;
    @constraint #t1@1732 - #t1@2168 >= 0;
    @constraint #t1@1732 - #t2@2169 >= 0;
    @constraint #t@2160 - #t1@1732 >= 0;
    @constraint #t@2160 - #t2@2171 >= 0;
    @constraint #t@2160 - #t1@2173 >= 0;
    @constraint #t@2160 - #t1@2172 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2133), *senc(senc(tuple4(x1@2128, [Na@2134], pk(skA()), pk(sk@2133)), hash([Ka@2132], m2@2136)), hash([Ka@2132], m2@2136)));
    @premise new(*[Ka@2132], Ak(), tuple2(pk(sk@2133), [Na@2134]));
    @premise new(*[Na@2134], An(), tuple2(pk(sk@2133), [Ka@2132]));
    @premise know(*sk@2133, #t1@2135);
    @premise know(*m2@2136, #t2@2137);
    @premise know(*x1@2128, #t1@2138);
    @conclusion know(*tuple4(x1@2128, [Na@2134], pk(skA()), pk(sk@2133)), #t@2131);
    @constraint #t@2131 - #t1@2135 >= 0;
    @constraint #t@2131 - #t2@2137 >= 0;
    @constraint #t@2131 - #t1@2138 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *pk(sk@1964), *senc(senc(tuple4(x1@1962, [Na@1963], pk(skA()), pk(sk@1964)), hash([Ka@1966], m2@1967)), hash([Ka@1966], m2@1967)));
    @premise new(*[Ka@1966], Ak(), tuple2(pk(sk@1964), [Na@1963]));
    @premise new(*[Na@1963], An(), tuple2(pk(sk@1964), [Ka@1966]));
    @premise know(*hash([Ka@1966], m2@1967), #t1@1971);
    @premise know(*m2@1967, #t2@1969);
    @premise know(*x1@1962, #t1@1970);
    @premise know(*sk@1964, #t1@1968);
    @conclusion know(*tuple4(x1@1962, [Na@1963], pk(skA()), pk(sk@1964)), #t@1965);
    @constraint -#t1@1971 + #t@1965 >= 0;
    @constraint #t@1965 - #t1@1968 >= 0;
    @constraint #t@1965 - #t2@1969 >= 0;
    @constraint #t@1965 - #t1@1970 >= 0;
};
Rule deleted: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2076), *senc(senc(tuple4(x1@2074, [Na@2075], pk(skA()), pk(sk@2076)), hash([Ka@2078], m2@2080)), hash([Ka@2078], m2@2080)));
    @premise new(*[Ka@2078], Ak(), tuple2(pk(sk@2076), [Na@2075]));
    @premise new(*[Na@2075], An(), tuple2(pk(sk@2076), [Ka@2078]));
    @premise know(*[Ka@2078], #t1@2079);
    @premise know(*m2@2080, #t2@2081);
    @premise know(*x1@2074, #t1@2083);
    @premise know(*sk@2076, #t1@2084);
    @conclusion know(*tuple4(x1@2074, [Na@2075], pk(skA()), pk(sk@2076)), #t@2077);
    @constraint #t@2077 - #t1@2083 >= 0;
    @constraint #t@2077 - #t1@2084 >= 0;
    @constraint #t@2077 - #t2@2081 >= 0;
    @constraint #t@2077 - #t1@2079 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};
Rule in cache: 0
Rule staged: 110
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2176), *senc(senc(tuple4(x1@2174, [Na@2177], pk(skA()), pk(sk@2176)), hash([Ka@2178], m2@2179)), hash([Ka@2178], m2@2179)));
    @premise new(*[Ka@2178], Ak(), tuple2(pk(sk@2176), [Na@2177]));
    @premise new(*[Na@2177], An(), tuple2(pk(sk@2176), [Ka@2178]));
    @premise know(*sk@2176, #t1@2180);
    @premise know(*m2@2179, #t2@2181);
    @premise know(*x1@2174, #t1@2182);
    @conclusion know(*x1@2174, #t0@2175);
    @constraint #t@2131 - #t1@2180 >= 0;
    @constraint #t0@2175 - #t@2131 >= 0;
    @constraint #t@2131 - #t2@2181 >= 0;
    @constraint #t@2131 - #t1@2182 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};
Rule in cache: 0
Rule staged: 110
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2185), *senc(senc(tuple4(x1@2186, [Na@2183], pk(skA()), pk(sk@2185)), hash([Ka@2187], m2@2188)), hash([Ka@2187], m2@2188)));
    @premise new(*[Ka@2187], Ak(), tuple2(pk(sk@2185), [Na@2183]));
    @premise new(*[Na@2183], An(), tuple2(pk(sk@2185), [Ka@2187]));
    @premise know(*sk@2185, #t1@2189);
    @premise know(*m2@2188, #t2@2190);
    @premise know(*x1@2186, #t1@2191);
    @conclusion know(*[Na@2183], #t1@2184);
    @constraint #t@2131 - #t1@2189 >= 0;
    @constraint #t1@2184 - #t@2131 >= 0;
    @constraint #t@2131 - #t2@2190 >= 0;
    @constraint #t@2131 - #t1@2191 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2185), *senc(senc(tuple4(x1@2186, [Na@2183], pk(skA()), pk(sk@2185)), hash([Ka@2187], m2@2188)), hash([Ka@2187], m2@2188)));
    @premise new(*[Ka@2187], Ak(), tuple2(pk(sk@2185), [Na@2183]));
    @premise new(*[Na@2183], An(), tuple2(pk(sk@2185), [Ka@2187]));
    @premise know(*sk@2185, #t1@2189);
    @premise know(*m2@2188, #t2@2190);
    @premise know(*x1@2186, #t1@2191);
    @conclusion know(*[Na@2183], #t1@2184);
    @constraint #t1@2184 - #t1@2189 >= 0;
    @constraint #t1@2184 - #t2@2190 >= 0;
    @constraint #t1@2184 - #t1@2191 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};
Rule in cache: 1
Rule staged: 110
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2193), *senc(senc(tuple4(x1@2194, [Na@2195], pk(skA()), pk(sk@2193)), hash([Ka@2196], m2@2197)), hash([Ka@2196], m2@2197)));
    @premise new(*[Ka@2196], Ak(), tuple2(pk(sk@2193), [Na@2195]));
    @premise new(*[Na@2195], An(), tuple2(pk(sk@2193), [Ka@2196]));
    @premise know(*sk@2193, #t1@2198);
    @premise know(*m2@2197, #t2@2199);
    @premise know(*x1@2194, #t1@2200);
    @conclusion know(*pk(skA()), #t2@2192);
    @constraint #t@2131 - #t1@2198 >= 0;
    @constraint #t2@2192 - #t@2131 >= 0;
    @constraint #t@2131 - #t2@2199 >= 0;
    @constraint #t@2131 - #t1@2200 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2193), *senc(senc(tuple4(x1@2194, [Na@2195], pk(skA()), pk(sk@2193)), hash([Ka@2196], m2@2197)), hash([Ka@2196], m2@2197)));
    @premise new(*[Ka@2196], Ak(), tuple2(pk(sk@2193), [Na@2195]));
    @premise new(*[Na@2195], An(), tuple2(pk(sk@2193), [Ka@2196]));
    @premise know(*sk@2193, #t1@2198);
    @premise know(*m2@2197, #t2@2199);
    @premise know(*x1@2194, #t1@2200);
    @conclusion know(*pk(skA()), #t2@2192);
    @constraint #t2@2192 - #t1@2198 >= 0;
    @constraint #t2@2192 - #t2@2199 >= 0;
    @constraint #t2@2192 - #t1@2200 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};
Rule in cache: 2
Rule staged: 110
Rule before check and clean: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2201), *senc(senc(tuple4(x1@2203, [Na@2204], pk(skA()), pk(sk@2201)), hash([Ka@2205], m2@2206)), hash([Ka@2205], m2@2206)));
    @premise new(*[Ka@2205], Ak(), tuple2(pk(sk@2201), [Na@2204]));
    @premise new(*[Na@2204], An(), tuple2(pk(sk@2201), [Ka@2205]));
    @premise know(*sk@2201, #t1@2207);
    @premise know(*m2@2206, #t2@2208);
    @premise know(*x1@2203, #t1@2209);
    @conclusion know(*pk(sk@2201), #t3@2202);
    @constraint #t@2131 - #t1@2207 >= 0;
    @constraint #t3@2202 - #t@2131 >= 0;
    @constraint #t@2131 - #t2@2208 >= 0;
    @constraint #t@2131 - #t1@2209 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2201), *senc(senc(tuple4(x1@2203, [Na@2204], pk(skA()), pk(sk@2201)), hash([Ka@2205], m2@2206)), hash([Ka@2205], m2@2206)));
    @premise new(*[Ka@2205], Ak(), tuple2(pk(sk@2201), [Na@2204]));
    @premise new(*[Na@2204], An(), tuple2(pk(sk@2201), [Ka@2205]));
    @premise know(*sk@2201, #t1@2207);
    @premise know(*m2@2206, #t2@2208);
    @premise know(*x1@2203, #t1@2209);
    @conclusion know(*pk(sk@2201), #t3@2202);
    @constraint #t3@2202 - #t1@2207 >= 0;
    @constraint #t3@2202 - #t2@2208 >= 0;
    @constraint #t3@2202 - #t1@2209 >= 0;
};

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2185), *senc(senc(tuple4(x1@2186, [Na@2183], pk(skA()), pk(sk@2185)), hash([Ka@2187], m2@2188)), hash([Ka@2187], m2@2188)));
    @premise new(*[Ka@2187], Ak(), tuple2(pk(sk@2185), [Na@2183]));
    @premise new(*[Na@2183], An(), tuple2(pk(sk@2185), [Ka@2187]));
    @premise know(*sk@2185, #t1@2189);
    @premise know(*m2@2188, #t2@2190);
    @premise know(*x1@2186, #t1@2191);
    @conclusion know(*[Na@2183], #t1@2184);
    @constraint #t1@2184 - #t1@2189 >= 0;
    @constraint #t1@2184 - #t2@2190 >= 0;
    @constraint #t1@2184 - #t1@2191 >= 0;
};
Rule implied by: 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};
Rule not added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2193), *senc(senc(tuple4(x1@2194, [Na@2195], pk(skA()), pk(sk@2193)), hash([Ka@2196], m2@2197)), hash([Ka@2196], m2@2197)));
    @premise new(*[Ka@2196], Ak(), tuple2(pk(sk@2193), [Na@2195]));
    @premise new(*[Na@2195], An(), tuple2(pk(sk@2193), [Ka@2196]));
    @premise know(*sk@2193, #t1@2198);
    @premise know(*m2@2197, #t2@2199);
    @premise know(*x1@2194, #t1@2200);
    @conclusion know(*pk(skA()), #t2@2192);
    @constraint #t2@2192 - #t1@2198 >= 0;
    @constraint #t2@2192 - #t2@2199 >= 0;
    @constraint #t2@2192 - #t1@2200 >= 0;
};
Rule implied by: 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};
Rule not added.

Stage rule: 
@rule{
    @premise init(*pk(skA()), *pk(sk@2201), *senc(senc(tuple4(x1@2203, [Na@2204], pk(skA()), pk(sk@2201)), hash([Ka@2205], m2@2206)), hash([Ka@2205], m2@2206)));
    @premise new(*[Ka@2205], Ak(), tuple2(pk(sk@2201), [Na@2204]));
    @premise new(*[Na@2204], An(), tuple2(pk(sk@2201), [Ka@2205]));
    @premise know(*sk@2201, #t1@2207);
    @premise know(*m2@2206, #t2@2208);
    @premise know(*x1@2203, #t1@2209);
    @conclusion know(*pk(sk@2201), #t3@2202);
    @constraint #t3@2202 - #t1@2207 >= 0;
    @constraint #t3@2202 - #t2@2208 >= 0;
    @constraint #t3@2202 - #t1@2209 >= 0;
};
Rule implied by: 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};
Rule not added.

Details:
General Rules: 
Rule No. [0.0]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};

Rule No. [0.1]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};

Rule No. [0.2]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};

Rule No. [0.3]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};

Rule No. [0.4]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple3(x0@32, x1@33, x2@34), #t@35);
    @conclusion know(*x0@32, #t0@36);
    @constraint -#t@35 + #t0@36 >= 0;
};

Rule No. [0.5]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple3(x0@37, x1@38, x2@39), #t@40);
    @conclusion know(*x1@38, #t1@41);
    @constraint -#t@40 + #t1@41 >= 0;
};

Rule No. [0.6]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple3(x0@42, x1@43, x2@44), #t@45);
    @conclusion know(*x2@44, #t2@46);
    @constraint -#t@45 + #t2@46 >= 0;
};

Rule No. [0.7]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};

Rule No. [0.8]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};

Rule No. [0.9]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};

Rule No. [0.10]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};

Rule No. [0.11]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};

Rule No. [1.0]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*m1@82, #t1@83);
    @premise know(*m2@84, #t2@85);
    @conclusion know(*hash(m1@82, m2@84), #t@86);
    @constraint -#t1@83 + #t@86 >= 0;
    @constraint #t@86 - #t2@85 >= 0;
};

Rule No. [1.1]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*sk@88, #t1@89);
    @conclusion know(*pk(sk@88), #t@90);
    @constraint -#t1@89 + #t@90 >= 0;
};

Rule No. [1.2]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*m@92, #t1@93);
    @premise know(*sk@94, #t2@95);
    @conclusion know(*sign(m@92, sk@94), #t@96);
    @constraint -#t1@93 + #t@96 >= 0;
    @constraint #t@96 - #t2@95 >= 0;
};

Rule No. [1.3]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*sign(m@97, sk@98), #t1@99);
    @conclusion know(*m@97, #t@100);
    @constraint -#t1@99 + #t@100 >= 0;
};

Rule No. [1.4]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise know(*m@102, #t1@103);
    @premise know(*pk(sk@104), #t2@105);
    @conclusion know(*aenc(m@102, pk(sk@104)), #t@106);
    @constraint -#t1@103 + #t@106 >= 0;
    @constraint #t@106 - #t2@105 >= 0;
};

Rule No. [1.5]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise know(*sk@107, #t1@108);
    @premise know(*aenc(m@109, pk(sk@107)), #t2@110);
    @conclusion know(*m@109, #t@111);
    @constraint -#t1@108 + #t@111 >= 0;
    @constraint #t@111 - #t2@110 >= 0;
};

Rule No. [1.6]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*m@113, #t1@114);
    @premise know(*k@115, #t2@116);
    @conclusion know(*senc(m@113, k@115), #t@117);
    @constraint -#t1@114 + #t@117 >= 0;
    @constraint #t@117 - #t2@116 >= 0;
};

Rule No. [1.7]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise know(*k@118, #t1@119);
    @premise know(*senc(m@120, k@118), #t2@121);
    @conclusion know(*m@120, #t@122);
    @constraint -#t1@119 + #t@122 >= 0;
    @constraint #t@122 - #t2@121 >= 0;
};

Rule No. [1.8]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @conclusion know(*pk(skA()), #t@125);
};

Rule No. [1.9]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @conclusion know(*pk(skB()), #t@126);
};

Rule No. [1.10]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise new(*[Ka@129], Ak(), tuple2(pkR@130, [Na@131]));
    @premise new(*[Na@131], An(), tuple2(pkR@130, [Ka@129]));
    @conclusion know(*tuple2(aenc(tuple2(pk(skA()), [Ka@129]), pkR@130), [Na@131]), #t@132);
};

Rule No. [1.11]
Valid Rule
Intial Rule
Selectable at 2:
@rule{
    @premise new(*[Kb@135], Bk(), tuple4(pkI@136, [Nb@137], Ki@138, Ni@139));
    @premise new(*[Nb@137], Bn(), tuple4(pkI@136, [Ka@140], Ki@138, Ni@139));
    @premise know(*aenc(tuple2(pkI@136, Ki@138), pk(skB())), #t1@141);
    @premise know(*Ni@139, #t2@142);
    @conclusion know(*aenc([Kb@135], pkI@136), #t@143);
    @constraint -#t1@141 + #t@143 >= 0;
    @constraint #t@143 - #t2@142 >= 0;
};

Rule No. [1.12]
Valid Rule
Intial Rule
Selectable at 2:
@rule{
    @premise new(*[Kb@144], Bk(), tuple4(pkI@145, [Nb@146], Ki@147, Ni@148));
    @premise new(*[Nb@146], Bn(), tuple4(pkI@145, [Ka@149], Ki@147, Ni@148));
    @premise know(*aenc(tuple2(pkI@145, Ki@147), pk(skB())), #t1@150);
    @premise know(*Ni@148, #t2@151);
    @conclusion know(*[Nb@146], #t@152);
    @constraint -#t1@150 + #t@152 >= 0;
    @constraint #t@152 - #t2@151 >= 0;
};

Rule No. [1.13]
Valid Rule
Intial Rule
Selectable at 2:
@rule{
    @premise new(*[Kb@153], Bk(), tuple4(pkI@154, [Nb@155], Ki@156, Ni@157));
    @premise new(*[Nb@155], Bn(), tuple4(pkI@154, [Ka@158], Ki@156, Ni@157));
    @premise know(*aenc(tuple2(pkI@154, Ki@156), pk(skB())), #t1@159);
    @premise know(*Ni@157, #t2@160);
    @conclusion know(*senc(tuple4(Ni@157, [Nb@155], pk(skB()), pkI@154), hash(Ki@156, [Kb@153])), #t@161);
    @constraint -#t1@159 + #t@161 >= 0;
    @constraint #t@161 - #t2@160 >= 0;
};

Rule No. [1.14]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise init(*pk(skA()), *pkR@162, *senc(senc(tuple4(Nr@163, [Na@164], pk(skA()), pkR@162), hash([Ka@165], Kr@166)), hash([Ka@165], Kr@166)));
    @premise know(*senc(tuple4([Na@164], Nr@163, pkR@162, pk(skA())), hash([Ka@165], Kr@166)), #t3@169);
    @premise know(*aenc(Kr@166, pk(skA())), #t1@167);
    @premise new(*[Ka@165], Ak(), tuple2(pkR@162, [Na@164]));
    @premise new(*[Na@164], An(), tuple2(pkR@162, [Ka@165]));
    @premise know(*Nr@163, #t2@168);
    @conclusion know(*senc(tuple4(Nr@163, [Na@164], pk(skA()), pkR@162), hash([Ka@165], Kr@166)), #t@170);
    @constraint -#t1@167 + #t@170 >= 0;
    @constraint #t@170 - #t2@168 >= 0;
    @constraint #t@170 - #t3@169 >= 0;
};

Rule No. [1.15]
Valid Rule
Intial Rule
Selectable at 2:
@rule{
    @premise new(*[Kb@171], Bk(), tuple4(pk(skA()), [Nb@172], Ki@173, Ni@174));
    @premise new(*[Nb@172], Bn(), tuple4(pk(skA()), [Ka@175], Ki@173, Ni@174));
    @premise know(*senc(tuple4([Nb@172], Ni@174, pk(skA()), pk(skB())), hash(Kr@176, [Kb@171])), #t1@177);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@172], Ni@174, pk(skA()), pk(skB())), hash(Ki@173, [Kb@171])), hash(Ki@173, [Kb@171])));
};

Rule No. [1.16]
Valid Rule
Composed by Rule [1.1] and [1.4]
Not Selectable : 
@rule{
    @premise know(*sk@254, #t1@256);
    @premise know(*m@253, #t1@257);
    @conclusion know(*aenc(m@253, pk(sk@254)), #t@255);
    @constraint -#t1@257 + #t@255 >= 0;
    @constraint #t@255 - #t1@256 >= 0;
};

Rule No. [1.17]
Valid Rule
Composed by Rule [1.8] and [1.4]
Not Selectable : 
@rule{
    @premise know(*m@264, #t1@266);
    @conclusion know(*aenc(m@264, pk(skA())), #t@265);
    @constraint -#t1@266 + #t@265 >= 0;
};

Rule No. [1.18]
Valid Rule
Composed by Rule [1.9] and [1.4]
Not Selectable : 
@rule{
    @premise know(*m@267, #t1@269);
    @conclusion know(*aenc(m@267, pk(skB())), #t@268);
    @constraint -#t1@269 + #t@268 >= 0;
};

Rule No. [1.19]
Valid Rule
Composed by Rule [1.10] and [0.1]
Not Selectable : 
@rule{
    @premise new(*[Ka@270], Ak(), tuple2(pkR@271, [Na@273]));
    @premise new(*[Na@273], An(), tuple2(pkR@271, [Ka@270]));
    @conclusion know(*aenc(tuple2(pk(skA()), [Ka@270]), pkR@271), #t0@272);
};

Rule No. [1.20]
Valid Rule
Composed by Rule [1.10] and [0.2]
Not Selectable : 
@rule{
    @premise new(*[Ka@276], Ak(), tuple2(pkR@277, [Na@274]));
    @premise new(*[Na@274], An(), tuple2(pkR@277, [Ka@276]));
    @conclusion know(*[Na@274], #t1@275);
};

Rule No. [1.21]
Valid Rule
Composed by Rule [1.6] and [1.14]
Selectable at 1:
@rule{
    @premise init(*pk(skA()), *pkR@280, *senc(senc(tuple4(Nr@278, [Na@279], pk(skA()), pkR@280), hash([Ka@281], Kr@282)), hash([Ka@281], Kr@282)));
    @premise know(*tuple4([Na@279], Nr@278, pkR@280, pk(skA())), #t1@284);
    @premise know(*aenc(Kr@282, pk(skA())), #t1@286);
    @premise new(*[Ka@281], Ak(), tuple2(pkR@280, [Na@279]));
    @premise new(*[Na@279], An(), tuple2(pkR@280, [Ka@281]));
    @premise know(*hash([Ka@281], Kr@282), #t2@285);
    @premise know(*Nr@278, #t2@287);
    @conclusion know(*senc(tuple4(Nr@278, [Na@279], pk(skA()), pkR@280), hash([Ka@281], Kr@282)), #t@283);
    @constraint -#t1@286 + #t@283 >= 0;
    @constraint #t@283 - #t2@287 >= 0;
    @constraint #t@283 - #t2@285 >= 0;
    @constraint #t@283 - #t1@284 >= 0;
};

Rule No. [1.22]
Valid Rule
Composed by Rule [1.6] and [1.15]
Selectable at 0:
@rule{
    @premise know(*tuple4([Nb@288], Ni@289, pk(skA()), pk(skB())), #t1@292);
    @premise know(*hash(Kr@293, [Kb@291]), #t2@294);
    @premise new(*[Kb@291], Bk(), tuple4(pk(skA()), [Nb@288], Ki@290, Ni@289));
    @premise new(*[Nb@288], Bn(), tuple4(pk(skA()), [Ka@295], Ki@290, Ni@289));
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@288], Ni@289, pk(skA()), pk(skB())), hash(Ki@290, [Kb@291])), hash(Ki@290, [Kb@291])));
};

Rule No. [1.23]
Replaced by Rule [1.26]
Composed by Rule [1.16] and [1.11]
Selectable at 2:
@rule{
    @premise new(*[Kb@302], Bk(), tuple4(pkI@303, [Nb@308], Ki@306, Ni@309));
    @premise new(*[Nb@308], Bn(), tuple4(pkI@303, [Ka@310], Ki@306, Ni@309));
    @premise know(*tuple2(pkI@303, Ki@306), #t1@307);
    @premise know(*skB(), #t1@305);
    @premise know(*Ni@309, #t2@311);
    @conclusion know(*aenc([Kb@302], pkI@303), #t@304);
    @constraint #t@304 - #t2@311 >= 0;
    @constraint #t@304 - #t1@305 >= 0;
    @constraint #t@304 - #t1@307 >= 0;
};

Rule No. [1.24]
Replaced by Rule [1.27]
Composed by Rule [1.16] and [1.12]
Selectable at 2:
@rule{
    @premise new(*[Kb@318], Bk(), tuple4(pkI@315, [Nb@312], Ki@316, Ni@319));
    @premise new(*[Nb@312], Bn(), tuple4(pkI@315, [Ka@320], Ki@316, Ni@319));
    @premise know(*tuple2(pkI@315, Ki@316), #t1@317);
    @premise know(*skB(), #t1@314);
    @premise know(*Ni@319, #t2@321);
    @conclusion know(*[Nb@312], #t@313);
    @constraint #t@313 - #t2@321 >= 0;
    @constraint #t@313 - #t1@314 >= 0;
    @constraint #t@313 - #t1@317 >= 0;
};

Rule No. [1.25]
Replaced by Rule [1.28]
Composed by Rule [1.16] and [1.13]
Selectable at 2:
@rule{
    @premise new(*[Kb@326], Bk(), tuple4(pkI@324, [Nb@323], Ki@325, Ni@322));
    @premise new(*[Nb@323], Bn(), tuple4(pkI@324, [Ka@330], Ki@325, Ni@322));
    @premise know(*tuple2(pkI@324, Ki@325), #t1@329);
    @premise know(*skB(), #t1@328);
    @premise know(*Ni@322, #t2@331);
    @conclusion know(*senc(tuple4(Ni@322, [Nb@323], pk(skB()), pkI@324), hash(Ki@325, [Kb@326])), #t@327);
    @constraint #t@327 - #t2@331 >= 0;
    @constraint #t@327 - #t1@328 >= 0;
    @constraint #t@327 - #t1@329 >= 0;
};

Rule No. [1.26]
Valid Rule
Composed by Rule [1.18] and [1.11]
Selectable at 0:
@rule{
    @premise know(*tuple2(pkI@341, Ki@343), #t1@344);
    @premise new(*[Kb@340], Bk(), tuple4(pkI@341, [Nb@345], Ki@343, Ni@346));
    @premise new(*[Nb@345], Bn(), tuple4(pkI@341, [Ka@347], Ki@343, Ni@346));
    @premise know(*Ni@346, #t2@348);
    @conclusion know(*aenc([Kb@340], pkI@341), #t@342);
    @constraint #t@342 - #t2@348 >= 0;
    @constraint #t@342 - #t1@344 >= 0;
};

Rule No. [1.27]
Valid Rule
Composed by Rule [1.18] and [1.12]
Selectable at 0:
@rule{
    @premise know(*tuple2(pkI@351, Ki@352), #t1@353);
    @premise new(*[Kb@354], Bk(), tuple4(pkI@351, [Nb@349], Ki@352, Ni@355));
    @premise new(*[Nb@349], Bn(), tuple4(pkI@351, [Ka@356], Ki@352, Ni@355));
    @premise know(*Ni@355, #t2@357);
    @conclusion know(*[Nb@349], #t@350);
    @constraint #t@350 - #t2@357 >= 0;
    @constraint #t@350 - #t1@353 >= 0;
};

Rule No. [1.28]
Valid Rule
Composed by Rule [1.18] and [1.13]
Selectable at 0:
@rule{
    @premise know(*tuple2(pkI@360, Ki@361), #t1@364);
    @premise new(*[Kb@362], Bk(), tuple4(pkI@360, [Nb@359], Ki@361, Ni@358));
    @premise new(*[Nb@359], Bn(), tuple4(pkI@360, [Ka@365], Ki@361, Ni@358));
    @premise know(*Ni@358, #t2@366);
    @conclusion know(*senc(tuple4(Ni@358, [Nb@359], pk(skB()), pkI@360), hash(Ki@361, [Kb@362])), #t@363);
    @constraint #t@363 - #t2@366 >= 0;
    @constraint #t@363 - #t1@364 >= 0;
};

Rule No. [1.29]
Valid Rule
Composed by Rule [1.19] and [1.5]
Not Selectable : 
@rule{
    @premise new(*[Ka@367], Ak(), tuple2(pk(sk@369), [Na@370]));
    @premise new(*[Na@370], An(), tuple2(pk(sk@369), [Ka@367]));
    @premise know(*sk@369, #t1@371);
    @conclusion know(*tuple2(pk(skA()), [Ka@367]), #t@368);
    @constraint -#t1@371 + #t@368 >= 0;
};

Rule No. [1.30]
Valid Rule
Composed by Rule [1.19] and [1.11]
Not Selectable : 
@rule{
    @premise new(*[Kb@372], Bk(), tuple4(pk(skA()), [Nb@376], [Ka@374], Ni@377));
    @premise new(*[Nb@376], Bn(), tuple4(pk(skA()), [Ka@378], [Ka@374], Ni@377));
    @premise new(*[Ka@374], Ak(), tuple2(pk(skB()), [Na@375]));
    @premise new(*[Na@375], An(), tuple2(pk(skB()), [Ka@374]));
    @premise know(*Ni@377, #t2@379);
    @conclusion know(*aenc([Kb@372], pk(skA())), #t@373);
    @constraint #t@373 - #t2@379 >= 0;
};

Rule No. [1.31]
Valid Rule
Composed by Rule [1.19] and [1.12]
Not Selectable : 
@rule{
    @premise new(*[Kb@384], Bk(), tuple4(pk(skA()), [Nb@380], [Ka@382], Ni@385));
    @premise new(*[Nb@380], Bn(), tuple4(pk(skA()), [Ka@386], [Ka@382], Ni@385));
    @premise new(*[Ka@382], Ak(), tuple2(pk(skB()), [Na@383]));
    @premise new(*[Na@383], An(), tuple2(pk(skB()), [Ka@382]));
    @premise know(*Ni@385, #t2@387);
    @conclusion know(*[Nb@380], #t@381);
    @constraint #t@381 - #t2@387 >= 0;
};

Rule No. [1.32]
Valid Rule
Composed by Rule [1.19] and [1.13]
Not Selectable : 
@rule{
    @premise new(*[Kb@391], Bk(), tuple4(pk(skA()), [Nb@389], [Ka@390], Ni@388));
    @premise new(*[Nb@389], Bn(), tuple4(pk(skA()), [Ka@394], [Ka@390], Ni@388));
    @premise new(*[Ka@390], Ak(), tuple2(pk(skB()), [Na@393]));
    @premise new(*[Na@393], An(), tuple2(pk(skB()), [Ka@390]));
    @premise know(*Ni@388, #t2@395);
    @conclusion know(*senc(tuple4(Ni@388, [Nb@389], pk(skB()), pk(skA())), hash([Ka@390], [Kb@391])), #t@392);
    @constraint #t@392 - #t2@395 >= 0;
};

Rule No. [1.33]
Valid Rule
Composed by Rule [0.7] and [1.21]
Selectable at 1:
@rule{
    @premise init(*pk(skA()), *x2@398, *senc(senc(tuple4(x1@396, [Na@397], pk(skA()), x2@398), hash([Ka@399], Kr@400)), hash([Ka@399], Kr@400)));
    @premise know(*aenc(Kr@400, pk(skA())), #t1@406);
    @premise new(*[Na@397], An(), tuple2(x2@398, [Ka@399]));
    @premise new(*[Ka@399], Ak(), tuple2(x2@398, [Na@397]));
    @premise know(*pk(skA()), #t3@405);
    @premise know(*hash([Ka@399], Kr@400), #t2@407);
    @premise know(*[Na@397], #t0@402);
    @premise know(*x2@398, #t2@404);
    @premise know(*x1@396, #t1@403);
    @conclusion know(*senc(tuple4(x1@396, [Na@397], pk(skA()), x2@398), hash([Ka@399], Kr@400)), #t@401);
    @constraint -#t1@406 + #t@401 >= 0;
    @constraint #t@401 - #t2@407 >= 0;
    @constraint #t@401 - #t3@405 >= 0;
    @constraint #t@401 - #t2@404 >= 0;
    @constraint #t@401 - #t1@403 >= 0;
    @constraint #t@401 - #t0@402 >= 0;
};

Rule No. [1.34]
Replaced by Rule [1.50]
Composed by Rule [0.7] and [1.22]
Selectable at 2:
@rule{
    @premise new(*[Nb@409], Bn(), tuple4(pk(skA()), [Ka@419], Ki@411, x1@410));
    @premise new(*[Kb@412], Bk(), tuple4(pk(skA()), [Nb@409], Ki@411, x1@410));
    @premise know(*pk(skA()), #t2@415);
    @premise know(*pk(skB()), #t3@416);
    @premise know(*hash(Kr@417, [Kb@412]), #t2@418);
    @premise know(*[Nb@409], #t0@413);
    @premise know(*x1@410, #t1@414);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@409], x1@410, pk(skA()), pk(skB())), hash(Ki@411, [Kb@412])), hash(Ki@411, [Kb@412])));
};

Rule No. [1.35]
Replaced by Rule [1.38]
Composed by Rule [0.0] and [1.23]
Selectable at 2:
@rule{
    @premise new(*[Kb@420], Bk(), tuple4(x0@421, [Nb@426], x1@424, Ni@427));
    @premise new(*[Nb@426], Bn(), tuple4(x0@421, [Ka@428], x1@424, Ni@427));
    @premise know(*skB(), #t1@429);
    @premise know(*x0@421, #t0@423);
    @premise know(*x1@424, #t1@425);
    @premise know(*Ni@427, #t2@430);
    @conclusion know(*aenc([Kb@420], x0@421), #t@422);
    @constraint #t@422 - #t2@430 >= 0;
    @constraint #t@422 - #t1@429 >= 0;
    @constraint #t@422 - #t1@425 >= 0;
    @constraint #t@422 - #t0@423 >= 0;
};

Rule No. [1.36]
Replaced by Rule [1.39]
Composed by Rule [0.0] and [1.24]
Selectable at 2:
@rule{
    @premise new(*[Kb@437], Bk(), tuple4(x0@433, [Nb@431], x1@435, Ni@438));
    @premise new(*[Nb@431], Bn(), tuple4(x0@433, [Ka@439], x1@435, Ni@438));
    @premise know(*skB(), #t1@440);
    @premise know(*x0@433, #t0@434);
    @premise know(*x1@435, #t1@436);
    @premise know(*Ni@438, #t2@441);
    @conclusion know(*[Nb@431], #t@432);
    @constraint #t@432 - #t2@441 >= 0;
    @constraint #t@432 - #t1@440 >= 0;
    @constraint #t@432 - #t1@436 >= 0;
    @constraint #t@432 - #t0@434 >= 0;
};

Rule No. [1.37]
Replaced by Rule [1.40]
Composed by Rule [0.0] and [1.25]
Selectable at 2:
@rule{
    @premise new(*[Kb@446], Bk(), tuple4(x0@444, [Nb@443], x1@445, Ni@442));
    @premise new(*[Nb@443], Bn(), tuple4(x0@444, [Ka@450], x1@445, Ni@442));
    @premise know(*skB(), #t1@451);
    @premise know(*x0@444, #t0@448);
    @premise know(*x1@445, #t1@449);
    @premise know(*Ni@442, #t2@452);
    @conclusion know(*senc(tuple4(Ni@442, [Nb@443], pk(skB()), x0@444), hash(x1@445, [Kb@446])), #t@447);
    @constraint #t@447 - #t2@452 >= 0;
    @constraint #t@447 - #t1@451 >= 0;
    @constraint #t@447 - #t1@449 >= 0;
    @constraint #t@447 - #t0@448 >= 0;
};

Rule No. [1.38]
Valid Rule
Composed by Rule [0.0] and [1.26]
Not Selectable : 
@rule{
    @premise new(*[Kb@453], Bk(), tuple4(x0@454, [Nb@459], x1@457, Ni@460));
    @premise new(*[Nb@459], Bn(), tuple4(x0@454, [Ka@461], x1@457, Ni@460));
    @premise know(*x0@454, #t0@456);
    @premise know(*x1@457, #t1@458);
    @premise know(*Ni@460, #t2@462);
    @conclusion know(*aenc([Kb@453], x0@454), #t@455);
    @constraint #t@455 - #t2@462 >= 0;
    @constraint #t@455 - #t1@458 >= 0;
    @constraint #t@455 - #t0@456 >= 0;
};

Rule No. [1.39]
Valid Rule
Composed by Rule [0.0] and [1.27]
Not Selectable : 
@rule{
    @premise new(*[Kb@469], Bk(), tuple4(x0@465, [Nb@463], x1@467, Ni@470));
    @premise new(*[Nb@463], Bn(), tuple4(x0@465, [Ka@471], x1@467, Ni@470));
    @premise know(*x0@465, #t0@466);
    @premise know(*x1@467, #t1@468);
    @premise know(*Ni@470, #t2@472);
    @conclusion know(*[Nb@463], #t@464);
    @constraint #t@464 - #t2@472 >= 0;
    @constraint #t@464 - #t1@468 >= 0;
    @constraint #t@464 - #t0@466 >= 0;
};

Rule No. [1.40]
Valid Rule
Composed by Rule [0.0] and [1.28]
Not Selectable : 
@rule{
    @premise new(*[Kb@477], Bk(), tuple4(x0@475, [Nb@474], x1@476, Ni@473));
    @premise new(*[Nb@474], Bn(), tuple4(x0@475, [Ka@481], x1@476, Ni@473));
    @premise know(*x0@475, #t0@479);
    @premise know(*x1@476, #t1@480);
    @premise know(*Ni@473, #t2@482);
    @conclusion know(*senc(tuple4(Ni@473, [Nb@474], pk(skB()), x0@475), hash(x1@476, [Kb@477])), #t@478);
    @constraint #t@478 - #t2@482 >= 0;
    @constraint #t@478 - #t1@480 >= 0;
    @constraint #t@478 - #t0@479 >= 0;
};

Rule No. [1.41]
Valid Rule
Composed by Rule [1.29] and [0.2]
Not Selectable : 
@rule{
    @premise new(*[Ka@488], Ak(), tuple2(pk(sk@490), [Na@491]));
    @premise new(*[Na@491], An(), tuple2(pk(sk@490), [Ka@488]));
    @premise know(*sk@490, #t1@492);
    @conclusion know(*[Ka@488], #t1@489);
    @constraint #t1@489 - #t1@492 >= 0;
};

Rule No. [1.42]
Valid Rule
Composed by Rule [1.30] and [1.5]
Selectable at 4:
@rule{
    @premise new(*[Kb@493], Bk(), tuple4(pk(skA()), [Nb@495], [Ka@496], Ni@497));
    @premise new(*[Nb@495], Bn(), tuple4(pk(skA()), [Ka@498], [Ka@496], Ni@497));
    @premise new(*[Ka@496], Ak(), tuple2(pk(skB()), [Na@499]));
    @premise new(*[Na@499], An(), tuple2(pk(skB()), [Ka@496]));
    @premise know(*skA(), #t1@501);
    @premise know(*Ni@497, #t2@500);
    @conclusion know(*[Kb@493], #t@494);
    @constraint #t@494 - #t2@500 >= 0;
    @constraint -#t1@501 + #t@494 >= 0;
};

Rule No. [1.43]
Valid Rule
Composed by Rule [1.32] and [1.7]
Selectable at 4:
@rule{
    @premise new(*[Kb@505], Bk(), tuple4(pk(skA()), [Nb@503], [Ka@506], Ni@502));
    @premise new(*[Nb@503], Bn(), tuple4(pk(skA()), [Ka@507], [Ka@506], Ni@502));
    @premise new(*[Ka@506], Ak(), tuple2(pk(skB()), [Na@508]));
    @premise new(*[Na@508], An(), tuple2(pk(skB()), [Ka@506]));
    @premise know(*hash([Ka@506], [Kb@505]), #t1@510);
    @premise know(*Ni@502, #t2@509);
    @conclusion know(*tuple4(Ni@502, [Nb@503], pk(skB()), pk(skA())), #t@504);
    @constraint #t@504 - #t2@509 >= 0;
    @constraint -#t1@510 + #t@504 >= 0;
};

Rule No. [1.44]
Replaced by Rule [1.57]
Composed by Rule [1.32] and [1.14]
Selectable at 5:
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@511], [Na@517], pk(skA()), pk(skB())), hash([Ka@513], [Kb@514])), hash([Ka@513], [Kb@514])));
    @premise new(*[Kb@514], Bk(), tuple4(pk(skA()), [Nb@511], [Ka@513], [Na@517]));
    @premise new(*[Nb@511], Bn(), tuple4(pk(skA()), [Ka@516], [Ka@513], [Na@517]));
    @premise new(*[Ka@513], Ak(), tuple2(pk(skB()), [Na@517]));
    @premise new(*[Na@517], An(), tuple2(pk(skB()), [Ka@513]));
    @premise know(*aenc([Kb@514], pk(skA())), #t1@519);
    @premise know(*[Na@517], #t2@518);
    @premise know(*[Nb@511], #t2@520);
    @conclusion know(*senc(tuple4([Nb@511], [Na@517], pk(skA()), pk(skB())), hash([Ka@513], [Kb@514])), #t@515);
    @constraint #t@515 - #t2@518 >= 0;
    @constraint #t@515 - #t2@520 >= 0;
    @constraint -#t1@519 + #t@515 >= 0;
};

Rule No. [1.45]
Replaced by Rule [1.46]
Composed by Rule [1.16] and [1.33]
Selectable at 3:
@rule{
    @premise init(*pk(skA()), *x2@523, *senc(senc(tuple4(x1@521, [Na@522], pk(skA()), x2@523), hash([Ka@524], m@525)), hash([Ka@524], m@525)));
    @premise new(*[Na@522], An(), tuple2(x2@523, [Ka@524]));
    @premise new(*[Ka@524], Ak(), tuple2(x2@523, [Na@522]));
    @premise know(*pk(skA()), #t3@529);
    @premise know(*hash([Ka@524], m@525), #t2@530);
    @premise know(*skA(), #t1@527);
    @premise know(*[Na@522], #t0@531);
    @premise know(*m@525, #t1@528);
    @premise know(*x2@523, #t2@532);
    @premise know(*x1@521, #t1@533);
    @conclusion know(*senc(tuple4(x1@521, [Na@522], pk(skA()), x2@523), hash([Ka@524], m@525)), #t@526);
    @constraint #t@526 - #t2@530 >= 0;
    @constraint #t@526 - #t3@529 >= 0;
    @constraint #t@526 - #t2@532 >= 0;
    @constraint #t@526 - #t1@533 >= 0;
    @constraint #t@526 - #t0@531 >= 0;
    @constraint #t@526 - #t1@527 >= 0;
    @constraint #t@526 - #t1@528 >= 0;
};

Rule No. [1.46]
Replaced by Rule [1.59]
Composed by Rule [1.17] and [1.33]
Selectable at 3:
@rule{
    @premise init(*pk(skA()), *x2@536, *senc(senc(tuple4(x1@534, [Na@535], pk(skA()), x2@536), hash([Ka@537], m@538)), hash([Ka@537], m@538)));
    @premise new(*[Na@535], An(), tuple2(x2@536, [Ka@537]));
    @premise new(*[Ka@537], Ak(), tuple2(x2@536, [Na@535]));
    @premise know(*pk(skA()), #t3@541);
    @premise know(*hash([Ka@537], m@538), #t2@542);
    @premise know(*[Na@535], #t0@543);
    @premise know(*m@538, #t1@540);
    @premise know(*x2@536, #t2@544);
    @premise know(*x1@534, #t1@545);
    @conclusion know(*senc(tuple4(x1@534, [Na@535], pk(skA()), x2@536), hash([Ka@537], m@538)), #t@539);
    @constraint #t@539 - #t3@541 >= 0;
    @constraint #t@539 - #t2@544 >= 0;
    @constraint #t@539 - #t1@545 >= 0;
    @constraint #t@539 - #t0@543 >= 0;
    @constraint #t@539 - #t2@542 >= 0;
    @constraint #t@539 - #t1@540 >= 0;
};

Rule No. [1.47]
Valid Rule
Composed by Rule [1.19] and [1.33]
Selectable at 1:
@rule{
    @premise init(*pk(skA()), *x2@548, *senc(senc(tuple4(x1@546, [Na@547], pk(skA()), x2@548), hash([Ka@549], tuple2(pk(skA()), [Ka@550]))), hash([Ka@549], tuple2(pk(skA()), [Ka@550]))));
    @premise know(*hash([Ka@549], tuple2(pk(skA()), [Ka@550])), #t2@554);
    @premise new(*[Ka@550], Ak(), tuple2(pk(skA()), [Na@552]));
    @premise new(*[Na@552], An(), tuple2(pk(skA()), [Ka@550]));
    @premise new(*[Na@547], An(), tuple2(x2@548, [Ka@549]));
    @premise new(*[Ka@549], Ak(), tuple2(x2@548, [Na@547]));
    @premise know(*pk(skA()), #t3@553);
    @premise know(*[Na@547], #t0@555);
    @premise know(*x2@548, #t2@556);
    @premise know(*x1@546, #t1@557);
    @conclusion know(*senc(tuple4(x1@546, [Na@547], pk(skA()), x2@548), hash([Ka@549], tuple2(pk(skA()), [Ka@550]))), #t@551);
    @constraint #t@551 - #t3@553 >= 0;
    @constraint #t@551 - #t2@556 >= 0;
    @constraint #t@551 - #t1@557 >= 0;
    @constraint #t@551 - #t0@555 >= 0;
    @constraint #t@551 - #t2@554 >= 0;
};

Rule No. [1.48]
Valid Rule
Composed by Rule [1.30] and [1.33]
Selectable at 7:
@rule{
    @premise init(*pk(skA()), *x2@560, *senc(senc(tuple4(x1@558, [Na@559], pk(skA()), x2@560), hash([Ka@561], [Kb@562])), hash([Ka@561], [Kb@562])));
    @premise new(*[Kb@562], Bk(), tuple4(pk(skA()), [Nb@564], [Ka@565], Ni@566));
    @premise new(*[Nb@564], Bn(), tuple4(pk(skA()), [Ka@567], [Ka@565], Ni@566));
    @premise new(*[Ka@565], Ak(), tuple2(pk(skB()), [Na@568]));
    @premise new(*[Na@568], An(), tuple2(pk(skB()), [Ka@565]));
    @premise new(*[Na@559], An(), tuple2(x2@560, [Ka@561]));
    @premise new(*[Ka@561], Ak(), tuple2(x2@560, [Na@559]));
    @premise know(*hash([Ka@561], [Kb@562]), #t2@571);
    @premise know(*pk(skA()), #t3@570);
    @premise know(*[Na@559], #t0@572);
    @premise know(*Ni@566, #t2@569);
    @premise know(*x2@560, #t2@573);
    @premise know(*x1@558, #t1@574);
    @conclusion know(*senc(tuple4(x1@558, [Na@559], pk(skA()), x2@560), hash([Ka@561], [Kb@562])), #t@563);
    @constraint #t@563 - #t3@570 >= 0;
    @constraint #t@563 - #t2@573 >= 0;
    @constraint #t@563 - #t1@574 >= 0;
    @constraint #t@563 - #t0@572 >= 0;
    @constraint #t@563 - #t2@571 >= 0;
    @constraint #t@563 - #t2@569 >= 0;
};

Rule No. [1.49]
Replaced by Rule [1.50]
Composed by Rule [1.1] and [1.34]
Selectable at 2:
@rule{
    @premise new(*[Nb@575], Bn(), tuple4(pk(skA()), [Ka@580], Ki@577, x1@576));
    @premise new(*[Kb@578], Bk(), tuple4(pk(skA()), [Nb@575], Ki@577, x1@576));
    @premise know(*pk(skB()), #t3@581);
    @premise know(*hash(Kr@582, [Kb@578]), #t2@583);
    @premise know(*skA(), #t1@579);
    @premise know(*[Nb@575], #t0@584);
    @premise know(*x1@576, #t1@585);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@575], x1@576, pk(skA()), pk(skB())), hash(Ki@577, [Kb@578])), hash(Ki@577, [Kb@578])));
};

Rule No. [1.50]
Replaced by Rule [1.65]
Composed by Rule [1.8] and [1.34]
Selectable at 2:
@rule{
    @premise new(*[Nb@586], Bn(), tuple4(pk(skA()), [Ka@590], Ki@588, x1@587));
    @premise new(*[Kb@589], Bk(), tuple4(pk(skA()), [Nb@586], Ki@588, x1@587));
    @premise know(*pk(skB()), #t3@591);
    @premise know(*hash(Kr@592, [Kb@589]), #t2@593);
    @premise know(*[Nb@586], #t0@594);
    @premise know(*x1@587, #t1@595);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@586], x1@587, pk(skA()), pk(skB())), hash(Ki@588, [Kb@589])), hash(Ki@588, [Kb@589])));
};

Rule No. [1.51]
Replaced by Rule [1.66]
Composed by Rule [1.38] and [1.5]
Selectable at 2:
@rule{
    @premise new(*[Kb@596], Bk(), tuple4(pk(sk@598), [Nb@599], x1@600, Ni@601));
    @premise new(*[Nb@599], Bn(), tuple4(pk(sk@598), [Ka@602], x1@600, Ni@601));
    @premise know(*pk(sk@598), #t0@603);
    @premise know(*x1@600, #t1@604);
    @premise know(*Ni@601, #t2@605);
    @premise know(*sk@598, #t1@606);
    @conclusion know(*[Kb@596], #t@597);
    @constraint -#t1@606 + #t@597 >= 0;
    @constraint #t@597 - #t1@604 >= 0;
    @constraint #t@597 - #t0@603 >= 0;
    @constraint #t@597 - #t2@605 >= 0;
};

Rule No. [1.52]
Valid Rule
Composed by Rule [1.38] and [1.33]
Selectable at 5:
@rule{
    @premise init(*pk(skA()), *x2@609, *senc(senc(tuple4(x1@607, [Na@608], pk(skA()), x2@609), hash([Ka@610], [Kb@611])), hash([Ka@610], [Kb@611])));
    @premise new(*[Kb@611], Bk(), tuple4(pk(skA()), [Nb@613], x1@614, Ni@615));
    @premise new(*[Nb@613], Bn(), tuple4(pk(skA()), [Ka@616], x1@614, Ni@615));
    @premise new(*[Na@608], An(), tuple2(x2@609, [Ka@610]));
    @premise new(*[Ka@610], Ak(), tuple2(x2@609, [Na@608]));
    @premise know(*hash([Ka@610], [Kb@611]), #t2@621);
    @premise know(*pk(skA()), #t0@617);
    @premise know(*[Na@608], #t0@622);
    @premise know(*Ni@615, #t2@619);
    @premise know(*x1@614, #t1@618);
    @premise know(*x2@609, #t2@623);
    @premise know(*x1@607, #t1@624);
    @conclusion know(*senc(tuple4(x1@607, [Na@608], pk(skA()), x2@609), hash([Ka@610], [Kb@611])), #t@612);
    @constraint #t@612 - #t2@621 >= 0;
    @constraint #t@612 - #t0@622 >= 0;
    @constraint #t@612 - #t2@623 >= 0;
    @constraint #t@612 - #t1@624 >= 0;
    @constraint #t@612 - #t1@618 >= 0;
    @constraint #t@612 - #t0@617 >= 0;
    @constraint #t@612 - #t2@619 >= 0;
};

Rule No. [1.53]
Valid Rule
Composed by Rule [1.40] and [1.7]
Selectable at 2:
@rule{
    @premise new(*[Kb@629], Bk(), tuple4(x0@627, [Nb@626], x1@630, Ni@625));
    @premise new(*[Nb@626], Bn(), tuple4(x0@627, [Ka@631], x1@630, Ni@625));
    @premise know(*hash(x1@630, [Kb@629]), #t1@635);
    @premise know(*x0@627, #t0@632);
    @premise know(*x1@630, #t1@633);
    @premise know(*Ni@625, #t2@634);
    @conclusion know(*tuple4(Ni@625, [Nb@626], pk(skB()), x0@627), #t@628);
    @constraint -#t1@635 + #t@628 >= 0;
    @constraint #t@628 - #t1@633 >= 0;
    @constraint #t@628 - #t0@632 >= 0;
    @constraint #t@628 - #t2@634 >= 0;
};

Rule No. [1.54]
Valid Rule
Composed by Rule [1.0] and [1.43]
Selectable at 4:
@rule{
    @premise new(*[Nb@648], Bn(), tuple4(pk(skA()), [Ka@654], [Ka@650], Ni@647));
    @premise new(*[Kb@652], Bk(), tuple4(pk(skA()), [Nb@648], [Ka@650], Ni@647));
    @premise new(*[Na@655], An(), tuple2(pk(skB()), [Ka@650]));
    @premise new(*[Ka@650], Ak(), tuple2(pk(skB()), [Na@655]));
    @premise know(*[Ka@650], #t1@651);
    @premise know(*[Kb@652], #t2@653);
    @premise know(*Ni@647, #t2@656);
    @conclusion know(*tuple4(Ni@647, [Nb@648], pk(skB()), pk(skA())), #t@649);
    @constraint #t@649 - #t2@656 >= 0;
    @constraint #t@649 - #t2@653 >= 0;
    @constraint #t@649 - #t1@651 >= 0;
};

Rule No. [1.55]
Replaced by Rule [1.56]
Composed by Rule [1.16] and [1.44]
Selectable at 5:
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@657], [Na@658], pk(skA()), pk(skB())), hash([Ka@659], [Kb@660])), hash([Ka@659], [Kb@660])));
    @premise new(*[Nb@657], Bn(), tuple4(pk(skA()), [Ka@664], [Ka@659], [Na@658]));
    @premise new(*[Kb@660], Bk(), tuple4(pk(skA()), [Nb@657], [Ka@659], [Na@658]));
    @premise new(*[Na@658], An(), tuple2(pk(skB()), [Ka@659]));
    @premise new(*[Ka@659], Ak(), tuple2(pk(skB()), [Na@658]));
    @premise know(*skA(), #t1@662);
    @premise know(*[Kb@660], #t1@663);
    @premise know(*[Na@658], #t2@665);
    @premise know(*[Nb@657], #t2@666);
    @conclusion know(*senc(tuple4([Nb@657], [Na@658], pk(skA()), pk(skB())), hash([Ka@659], [Kb@660])), #t@661);
    @constraint #t@661 - #t2@666 >= 0;
    @constraint #t@661 - #t2@665 >= 0;
    @constraint #t@661 - #t1@662 >= 0;
    @constraint #t@661 - #t1@663 >= 0;
};

Rule No. [1.56]
Replaced by Rule [1.57]
Composed by Rule [1.17] and [1.44]
Selectable at 5:
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@667], [Na@668], pk(skA()), pk(skB())), hash([Ka@669], [Kb@670])), hash([Ka@669], [Kb@670])));
    @premise new(*[Kb@670], Bk(), tuple4(pk(skA()), [Nb@667], [Ka@669], [Na@668]));
    @premise new(*[Nb@667], Bn(), tuple4(pk(skA()), [Ka@673], [Ka@669], [Na@668]));
    @premise new(*[Ka@669], Ak(), tuple2(pk(skB()), [Na@668]));
    @premise new(*[Na@668], An(), tuple2(pk(skB()), [Ka@669]));
    @premise know(*[Kb@670], #t1@672);
    @premise know(*[Na@668], #t2@674);
    @premise know(*[Nb@667], #t2@675);
    @conclusion know(*senc(tuple4([Nb@667], [Na@668], pk(skA()), pk(skB())), hash([Ka@669], [Kb@670])), #t@671);
    @constraint #t@671 - #t2@674 >= 0;
    @constraint #t@671 - #t2@675 >= 0;
    @constraint #t@671 - #t1@672 >= 0;
};

Rule No. [1.57]
Replaced by Rule [1.70]
Composed by Rule [1.30] and [1.44]
Selectable at 5:
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@681], [Na@685], pk(skA()), pk(skB())), hash([Ka@682], [Kb@679])), hash([Ka@682], [Kb@679])));
    @premise new(*[Kb@679], Bk(), tuple4(pk(skA()), [Nb@681], [Ka@682], [Na@685]));
    @premise new(*[Nb@681], Bn(), tuple4(pk(skA()), [Ka@684], [Ka@682], [Na@685]));
    @premise new(*[Na@685], An(), tuple2(pk(skB()), [Ka@682]));
    @premise new(*[Ka@682], Ak(), tuple2(pk(skB()), [Na@685]));
    @premise know(*[Na@685], #t2@686);
    @premise know(*[Nb@681], #t2@689);
    @conclusion know(*senc(tuple4([Nb@681], [Na@685], pk(skA()), pk(skB())), hash([Ka@682], [Kb@679])), #t@680);
    @constraint #t@680 - #t2@686 >= 0;
    @constraint #t@680 - #t2@689 >= 0;
};

Rule No. [1.58]
Replaced by Rule [1.59]
Composed by Rule [1.1] and [1.45]
Selectable at 3:
@rule{
    @premise init(*pk(skA()), *x2@707, *senc(senc(tuple4(x1@705, [Na@706], pk(skA()), x2@707), hash([Ka@708], m@709)), hash([Ka@708], m@709)));
    @premise new(*[Na@706], An(), tuple2(x2@707, [Ka@708]));
    @premise new(*[Ka@708], Ak(), tuple2(x2@707, [Na@706]));
    @premise know(*hash([Ka@708], m@709), #t2@712);
    @premise know(*skA(), #t1@711);
    @premise know(*[Na@706], #t0@714);
    @premise know(*m@709, #t1@715);
    @premise know(*x2@707, #t2@716);
    @premise know(*x1@705, #t1@717);
    @conclusion know(*senc(tuple4(x1@705, [Na@706], pk(skA()), x2@707), hash([Ka@708], m@709)), #t@710);
    @constraint #t@710 - #t1@715 >= 0;
    @constraint #t@710 - #t2@716 >= 0;
    @constraint #t@710 - #t1@717 >= 0;
    @constraint #t@710 - #t0@714 >= 0;
    @constraint #t@710 - #t2@712 >= 0;
    @constraint #t@710 - #t1@711 >= 0;
};

Rule No. [1.59]
Valid Rule
Composed by Rule [1.8] and [1.46]
Selectable at 3:
@rule{
    @premise init(*pk(skA()), *x2@744, *senc(senc(tuple4(x1@742, [Na@743], pk(skA()), x2@744), hash([Ka@745], m@746)), hash([Ka@745], m@746)));
    @premise new(*[Na@743], An(), tuple2(x2@744, [Ka@745]));
    @premise new(*[Ka@745], Ak(), tuple2(x2@744, [Na@743]));
    @premise know(*hash([Ka@745], m@746), #t2@748);
    @premise know(*[Na@743], #t0@749);
    @premise know(*m@746, #t1@750);
    @premise know(*x2@744, #t2@751);
    @premise know(*x1@742, #t1@752);
    @conclusion know(*senc(tuple4(x1@742, [Na@743], pk(skA()), x2@744), hash([Ka@745], m@746)), #t@747);
    @constraint #t@747 - #t1@752 >= 0;
    @constraint #t@747 - #t1@750 >= 0;
    @constraint #t@747 - #t2@751 >= 0;
    @constraint #t@747 - #t0@749 >= 0;
    @constraint #t@747 - #t2@748 >= 0;
};

Rule No. [1.60]
Replaced by Rule [1.72]
Composed by Rule [1.0] and [1.47]
Selectable at 3:
@rule{
    @premise init(*pk(skA()), *x2@755, *senc(senc(tuple4(x1@753, [Na@754], pk(skA()), x2@755), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))));
    @premise new(*[Ka@757], Ak(), tuple2(pk(skA()), [Na@761]));
    @premise new(*[Na@761], An(), tuple2(pk(skA()), [Ka@757]));
    @premise know(*tuple2(pk(skA()), [Ka@757]), #t2@760);
    @premise new(*[Na@754], An(), tuple2(x2@755, [Ka@756]));
    @premise new(*[Ka@756], Ak(), tuple2(x2@755, [Na@754]));
    @premise know(*pk(skA()), #t3@762);
    @premise know(*[Ka@756], #t1@759);
    @premise know(*[Na@754], #t0@763);
    @premise know(*x2@755, #t2@764);
    @premise know(*x1@753, #t1@765);
    @conclusion know(*senc(tuple4(x1@753, [Na@754], pk(skA()), x2@755), hash([Ka@756], tuple2(pk(skA()), [Ka@757]))), #t@758);
    @constraint #t@758 - #t0@763 >= 0;
    @constraint #t@758 - #t3@762 >= 0;
    @constraint #t@758 - #t2@764 >= 0;
    @constraint #t@758 - #t1@765 >= 0;
    @constraint #t@758 - #t2@760 >= 0;
    @constraint #t@758 - #t1@759 >= 0;
};

Rule No. [1.61]
Replaced by Rule [1.72]
Composed by Rule [1.0] and [1.48]
Selectable at 7:
@rule{
    @premise init(*pk(skA()), *x2@768, *senc(senc(tuple4(x1@766, [Na@767], pk(skA()), x2@768), hash([Ka@769], [Kb@770])), hash([Ka@769], [Kb@770])));
    @premise new(*[Nb@774], Bn(), tuple4(pk(skA()), [Ka@777], [Ka@775], Ni@776));
    @premise new(*[Kb@770], Bk(), tuple4(pk(skA()), [Nb@774], [Ka@775], Ni@776));
    @premise new(*[Na@778], An(), tuple2(pk(skB()), [Ka@775]));
    @premise new(*[Ka@775], Ak(), tuple2(pk(skB()), [Na@778]));
    @premise new(*[Na@767], An(), tuple2(x2@768, [Ka@769]));
    @premise new(*[Ka@769], Ak(), tuple2(x2@768, [Na@767]));
    @premise know(*pk(skA()), #t3@779);
    @premise know(*[Ka@769], #t1@772);
    @premise know(*[Kb@770], #t2@773);
    @premise know(*[Na@767], #t0@780);
    @premise know(*Ni@776, #t2@781);
    @premise know(*x2@768, #t2@782);
    @premise know(*x1@766, #t1@783);
    @conclusion know(*senc(tuple4(x1@766, [Na@767], pk(skA()), x2@768), hash([Ka@769], [Kb@770])), #t@771);
    @constraint #t@771 - #t0@780 >= 0;
    @constraint #t@771 - #t2@781 >= 0;
    @constraint #t@771 - #t3@779 >= 0;
    @constraint #t@771 - #t2@782 >= 0;
    @constraint #t@771 - #t1@783 >= 0;
    @constraint #t@771 - #t2@773 >= 0;
    @constraint #t@771 - #t1@772 >= 0;
};

Rule No. [1.62]
Replaced by Rule [1.63]
Composed by Rule [1.1] and [1.49]
Selectable at 2:
@rule{
    @premise new(*[Nb@784], Bn(), tuple4(pk(skA()), [Ka@789], Ki@786, x1@785));
    @premise new(*[Kb@787], Bk(), tuple4(pk(skA()), [Nb@784], Ki@786, x1@785));
    @premise know(*hash(Kr@790, [Kb@787]), #t2@791);
    @premise know(*skB(), #t1@788);
    @premise know(*skA(), #t1@792);
    @premise know(*[Nb@784], #t0@793);
    @premise know(*x1@785, #t1@794);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@784], x1@785, pk(skA()), pk(skB())), hash(Ki@786, [Kb@787])), hash(Ki@786, [Kb@787])));
};

Rule No. [1.63]
Replaced by Rule [1.65]
Composed by Rule [1.9] and [1.49]
Selectable at 2:
@rule{
    @premise new(*[Nb@795], Bn(), tuple4(pk(skA()), [Ka@799], Ki@797, x1@796));
    @premise new(*[Kb@798], Bk(), tuple4(pk(skA()), [Nb@795], Ki@797, x1@796));
    @premise know(*hash(Kr@800, [Kb@798]), #t2@801);
    @premise know(*skA(), #t1@802);
    @premise know(*[Nb@795], #t0@803);
    @premise know(*x1@796, #t1@804);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@795], x1@796, pk(skA()), pk(skB())), hash(Ki@797, [Kb@798])), hash(Ki@797, [Kb@798])));
};

Rule No. [1.64]
Replaced by Rule [1.65]
Composed by Rule [1.1] and [1.50]
Selectable at 2:
@rule{
    @premise new(*[Nb@805], Bn(), tuple4(pk(skA()), [Ka@810], Ki@807, x1@806));
    @premise new(*[Kb@808], Bk(), tuple4(pk(skA()), [Nb@805], Ki@807, x1@806));
    @premise know(*hash(Kr@811, [Kb@808]), #t2@812);
    @premise know(*skB(), #t1@809);
    @premise know(*[Nb@805], #t0@813);
    @premise know(*x1@806, #t1@814);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@805], x1@806, pk(skA()), pk(skB())), hash(Ki@807, [Kb@808])), hash(Ki@807, [Kb@808])));
};

Rule No. [1.65]
Valid Rule
Composed by Rule [1.9] and [1.50]
Selectable at 2:
@rule{
    @premise new(*[Nb@815], Bn(), tuple4(pk(skA()), [Ka@819], Ki@817, x1@816));
    @premise new(*[Kb@818], Bk(), tuple4(pk(skA()), [Nb@815], Ki@817, x1@816));
    @premise know(*hash(Kr@820, [Kb@818]), #t2@821);
    @premise know(*[Nb@815], #t0@822);
    @premise know(*x1@816, #t1@823);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@815], x1@816, pk(skA()), pk(skB())), hash(Ki@817, [Kb@818])), hash(Ki@817, [Kb@818])));
};

Rule No. [1.66]
Valid Rule
Composed by Rule [1.1] and [1.51]
Not Selectable : 
@rule{
    @premise new(*[Kb@824], Bk(), tuple4(pk(sk@826), [Nb@828], x1@829, Ni@830));
    @premise new(*[Nb@828], Bn(), tuple4(pk(sk@826), [Ka@831], x1@829, Ni@830));
    @premise know(*sk@826, #t1@827);
    @premise know(*x1@829, #t1@832);
    @premise know(*Ni@830, #t2@833);
    @conclusion know(*[Kb@824], #t@825);
    @constraint #t@825 - #t1@832 >= 0;
    @constraint #t@825 - #t2@833 >= 0;
    @constraint #t@825 - #t1@827 >= 0;
};

Rule No. [1.67]
Replaced by Rule [1.72]
Composed by Rule [1.0] and [1.52]
Selectable at 5:
@rule{
    @premise init(*pk(skA()), *x2@855, *senc(senc(tuple4(x1@853, [Na@854], pk(skA()), x2@855), hash([Ka@856], [Kb@857])), hash([Ka@856], [Kb@857])));
    @premise new(*[Kb@857], Bk(), tuple4(pk(skA()), [Nb@861], x1@862, Ni@863));
    @premise new(*[Nb@861], Bn(), tuple4(pk(skA()), [Ka@864], x1@862, Ni@863));
    @premise new(*[Ka@856], Ak(), tuple2(x2@855, [Na@854]));
    @premise new(*[Na@854], An(), tuple2(x2@855, [Ka@856]));
    @premise know(*pk(skA()), #t0@865);
    @premise know(*[Ka@856], #t1@859);
    @premise know(*[Kb@857], #t2@860);
    @premise know(*[Na@854], #t0@866);
    @premise know(*Ni@863, #t2@867);
    @premise know(*x1@862, #t1@868);
    @premise know(*x2@855, #t2@869);
    @premise know(*x1@853, #t1@870);
    @conclusion know(*senc(tuple4(x1@853, [Na@854], pk(skA()), x2@855), hash([Ka@856], [Kb@857])), #t@858);
    @constraint #t@858 - #t0@866 >= 0;
    @constraint #t@858 - #t1@868 >= 0;
    @constraint #t@858 - #t0@865 >= 0;
    @constraint #t@858 - #t2@867 >= 0;
    @constraint #t@858 - #t2@869 >= 0;
    @constraint #t@858 - #t1@870 >= 0;
    @constraint #t@858 - #t2@860 >= 0;
    @constraint #t@858 - #t1@859 >= 0;
};

Rule No. [1.68]
Valid Rule
Composed by Rule [1.0] and [1.53]
Selectable at 2:
@rule{
    @premise new(*[Kb@877], Bk(), tuple4(x0@873, [Nb@872], m1@875, Ni@871));
    @premise new(*[Nb@872], Bn(), tuple4(x0@873, [Ka@879], m1@875, Ni@871));
    @premise know(*[Kb@877], #t2@878);
    @premise know(*m1@875, #t1@876);
    @premise know(*x0@873, #t0@880);
    @premise know(*Ni@871, #t2@882);
    @conclusion know(*tuple4(Ni@871, [Nb@872], pk(skB()), x0@873), #t@874);
    @constraint #t@874 - #t2@882 >= 0;
    @constraint #t@874 - #t0@880 >= 0;
    @constraint #t@874 - #t2@878 >= 0;
    @constraint #t@874 - #t1@876 >= 0;
};

Rule No. [1.69]
Valid Rule
Composed by Rule [1.41] and [1.54]
Selectable at 4:
@rule{
    @premise new(*[Nb@927], Bn(), tuple4(pk(skA()), [Ka@933], [Ka@929], Ni@926));
    @premise new(*[Kb@934], Bk(), tuple4(pk(skA()), [Nb@927], [Ka@929], Ni@926));
    @premise new(*[Ka@929], Ak(), tuple2(pk(skB()), [Na@931]));
    @premise new(*[Na@931], An(), tuple2(pk(skB()), [Ka@929]));
    @premise know(*skB(), #t1@932);
    @premise know(*[Kb@934], #t2@936);
    @premise know(*Ni@926, #t2@937);
    @conclusion know(*tuple4(Ni@926, [Nb@927], pk(skB()), pk(skA())), #t@928);
    @constraint #t@928 - #t1@932 >= 0;
    @constraint #t@928 - #t2@936 >= 0;
    @constraint #t@928 - #t2@937 >= 0;
};

Rule No. [1.70]
Replaced by Rule [1.85]
Composed by Rule [1.20] and [1.57]
Selectable at 5:
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@989], [Na@990], pk(skA()), pk(skB())), hash([Ka@994], [Kb@992])), hash([Ka@994], [Kb@992])));
    @premise new(*[Kb@992], Bk(), tuple4(pk(skA()), [Nb@989], [Ka@994], [Na@990]));
    @premise new(*[Nb@989], Bn(), tuple4(pk(skA()), [Ka@996], [Ka@994], [Na@990]));
    @premise new(*[Ka@994], Ak(), tuple2(pk(skB()), [Na@990]));
    @premise new(*[Na@990], An(), tuple2(pk(skB()), [Ka@994]));
    @premise know(*[Nb@989], #t2@997);
    @conclusion know(*senc(tuple4([Nb@989], [Na@990], pk(skA()), pk(skB())), hash([Ka@994], [Kb@992])), #t@993);
    @constraint #t@993 - #t2@997 >= 0;
};

Rule No. [1.71]
Replaced by Rule [1.72]
Composed by Rule [1.0] and [1.58]
Selectable at 3:
@rule{
    @premise init(*pk(skA()), *x2@1038, *senc(senc(tuple4(x1@1036, [Na@1037], pk(skA()), x2@1038), hash([Ka@1039], m2@1040)), hash([Ka@1039], m2@1040)));
    @premise new(*[Ka@1039], Ak(), tuple2(x2@1038, [Na@1037]));
    @premise new(*[Na@1037], An(), tuple2(x2@1038, [Ka@1039]));
    @premise know(*skA(), #t1@1044);
    @premise know(*[Ka@1039], #t1@1042);
    @premise know(*[Na@1037], #t0@1045);
    @premise know(*m2@1040, #t2@1043);
    @premise know(*x2@1038, #t2@1047);
    @premise know(*x1@1036, #t1@1048);
    @conclusion know(*senc(tuple4(x1@1036, [Na@1037], pk(skA()), x2@1038), hash([Ka@1039], m2@1040)), #t@1041);
    @constraint #t@1041 - #t0@1045 >= 0;
    @constraint #t@1041 - #t1@1044 >= 0;
    @constraint #t@1041 - #t2@1047 >= 0;
    @constraint #t@1041 - #t1@1048 >= 0;
    @constraint #t@1041 - #t2@1043 >= 0;
    @constraint #t@1041 - #t1@1042 >= 0;
};

Rule No. [1.72]
Valid Rule
Composed by Rule [1.0] and [1.59]
Selectable at 3:
@rule{
    @premise init(*pk(skA()), *x2@1051, *senc(senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), hash([Ka@1052], m2@1053)));
    @premise new(*[Ka@1052], Ak(), tuple2(x2@1051, [Na@1050]));
    @premise new(*[Na@1050], An(), tuple2(x2@1051, [Ka@1052]));
    @premise know(*[Ka@1052], #t1@1055);
    @premise know(*[Na@1050], #t0@1057);
    @premise know(*m2@1053, #t2@1056);
    @premise know(*x2@1051, #t2@1059);
    @premise know(*x1@1049, #t1@1060);
    @conclusion know(*senc(tuple4(x1@1049, [Na@1050], pk(skA()), x2@1051), hash([Ka@1052], m2@1053)), #t@1054);
    @constraint #t@1054 - #t0@1057 >= 0;
    @constraint #t@1054 - #t2@1059 >= 0;
    @constraint #t@1054 - #t1@1060 >= 0;
    @constraint #t@1054 - #t2@1056 >= 0;
    @constraint #t@1054 - #t1@1055 >= 0;
};

Rule No. [1.73]
Replaced by Rule [1.82]
Composed by Rule [0.0] and [1.60]
Selectable at 5:
@rule{
    @premise init(*pk(skA()), *x2@1063, *senc(senc(tuple4(x1@1061, [Na@1062], pk(skA()), x2@1063), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))));
    @premise new(*[Ka@1065], Ak(), tuple2(pk(skA()), [Na@1069]));
    @premise new(*[Na@1069], An(), tuple2(pk(skA()), [Ka@1065]));
    @premise new(*[Na@1062], An(), tuple2(x2@1063, [Ka@1064]));
    @premise new(*[Ka@1064], Ak(), tuple2(x2@1063, [Na@1062]));
    @premise know(*pk(skA()), #t0@1067);
    @premise know(*[Ka@1065], #t1@1068);
    @premise know(*[Ka@1064], #t1@1071);
    @premise know(*[Na@1062], #t0@1072);
    @premise know(*x2@1063, #t2@1073);
    @premise know(*x1@1061, #t1@1074);
    @conclusion know(*senc(tuple4(x1@1061, [Na@1062], pk(skA()), x2@1063), hash([Ka@1064], tuple2(pk(skA()), [Ka@1065]))), #t@1066);
    @constraint #t@1066 - #t0@1072 >= 0;
    @constraint #t@1066 - #t1@1071 >= 0;
    @constraint #t@1066 - #t2@1073 >= 0;
    @constraint #t@1066 - #t1@1074 >= 0;
    @constraint #t@1066 - #t1@1068 >= 0;
    @constraint #t@1066 - #t0@1067 >= 0;
};

Rule No. [1.74]
Replaced by Rule [1.75]
Composed by Rule [1.0] and [1.62]
Selectable at 2:
@rule{
    @premise new(*[Nb@1110], Bn(), tuple4(pk(skA()), [Ka@1117], Ki@1112, x1@1111));
    @premise new(*[Kb@1113], Bk(), tuple4(pk(skA()), [Nb@1110], Ki@1112, x1@1111));
    @premise know(*skB(), #t1@1118);
    @premise know(*skA(), #t1@1119);
    @premise know(*[Kb@1113], #t2@1116);
    @premise know(*[Nb@1110], #t0@1120);
    @premise know(*x1@1111, #t1@1121);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1110], x1@1111, pk(skA()), pk(skB())), hash(Ki@1112, [Kb@1113])), hash(Ki@1112, [Kb@1113])));
};

Rule No. [1.75]
Replaced by Rule [1.77]
Composed by Rule [1.0] and [1.63]
Selectable at 2:
@rule{
    @premise new(*[Nb@1122], Bn(), tuple4(pk(skA()), [Ka@1129], Ki@1124, x1@1123));
    @premise new(*[Kb@1125], Bk(), tuple4(pk(skA()), [Nb@1122], Ki@1124, x1@1123));
    @premise know(*skA(), #t1@1130);
    @premise know(*[Kb@1125], #t2@1128);
    @premise know(*[Nb@1122], #t0@1131);
    @premise know(*x1@1123, #t1@1132);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1122], x1@1123, pk(skA()), pk(skB())), hash(Ki@1124, [Kb@1125])), hash(Ki@1124, [Kb@1125])));
};

Rule No. [1.76]
Replaced by Rule [1.77]
Composed by Rule [1.0] and [1.64]
Selectable at 2:
@rule{
    @premise new(*[Nb@1133], Bn(), tuple4(pk(skA()), [Ka@1140], Ki@1135, x1@1134));
    @premise new(*[Kb@1136], Bk(), tuple4(pk(skA()), [Nb@1133], Ki@1135, x1@1134));
    @premise know(*skB(), #t1@1141);
    @premise know(*[Kb@1136], #t2@1139);
    @premise know(*[Nb@1133], #t0@1142);
    @premise know(*x1@1134, #t1@1143);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1133], x1@1134, pk(skA()), pk(skB())), hash(Ki@1135, [Kb@1136])), hash(Ki@1135, [Kb@1136])));
};

Rule No. [1.77]
Valid Rule
Composed by Rule [1.0] and [1.65]
Selectable at 2:
@rule{
    @premise new(*[Nb@1144], Bn(), tuple4(pk(skA()), [Ka@1151], Ki@1146, x1@1145));
    @premise new(*[Kb@1147], Bk(), tuple4(pk(skA()), [Nb@1144], Ki@1146, x1@1145));
    @premise know(*[Kb@1147], #t2@1150);
    @premise know(*[Nb@1144], #t0@1152);
    @premise know(*x1@1145, #t1@1153);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1144], x1@1145, pk(skA()), pk(skB())), hash(Ki@1146, [Kb@1147])), hash(Ki@1146, [Kb@1147])));
};

Rule No. [1.78]
Replaced by Rule [1.84]
Composed by Rule [1.66] and [1.68]
Selectable at 2:
@rule{
    @premise new(*[Kb@1284], Bk(), tuple4(pk(sk@1285), [Nb@1286], x1@1287, Ni@1288));
    @premise new(*[Nb@1286], Bn(), tuple4(pk(sk@1285), [Ka@1289], x1@1287, Ni@1288));
    @premise know(*pk(sk@1285), #t0@1296);
    @premise know(*sk@1285, #t1@1290);
    @premise know(*x1@1287, #t1@1291);
    @premise know(*Ni@1288, #t2@1292);
    @conclusion know(*tuple4(Ni@1288, [Nb@1286], pk(skB()), pk(sk@1285)), #t@1283);
    @constraint #t@1283 - #t0@1296 >= 0;
    @constraint #t@1283 - #t1@1290 >= 0;
    @constraint #t@1283 - #t1@1291 >= 0;
    @constraint #t@1283 - #t2@1292 >= 0;
};

Rule No. [1.79]
Replaced by Rule [1.85]
Composed by Rule [1.31] and [1.70]
Selectable at 6:
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1306], [Na@1315], pk(skA()), pk(skB())), hash([Ka@1312], [Kb@1309])), hash([Ka@1312], [Kb@1309])));
    @premise new(*[Nb@1306], Bn(), tuple4(pk(skA()), [Ka@1314], [Ka@1312], [Na@1315]));
    @premise new(*[Kb@1309], Bk(), tuple4(pk(skA()), [Nb@1306], [Ka@1312], [Na@1315]));
    @premise new(*[Kb@1311], Bk(), tuple4(pk(skA()), [Nb@1306], [Ka@1312], [Na@1315]));
    @premise new(*[Ka@1312], Ak(), tuple2(pk(skB()), [Na@1315]));
    @premise new(*[Na@1315], An(), tuple2(pk(skB()), [Ka@1312]));
    @premise know(*[Na@1315], #t2@1316);
    @conclusion know(*senc(tuple4([Nb@1306], [Na@1315], pk(skA()), pk(skB())), hash([Ka@1312], [Kb@1309])), #t@1310);
    @constraint #t@1310 - #t2@1316 >= 0;
};

Rule No. [1.80]
Replaced by Rule [1.86]
Composed by Rule [1.41] and [1.72]
Selectable at 3:
@rule{
    @premise init(*pk(skA()), *pk(sk@1407), *senc(senc(tuple4(x1@1401, [Na@1408], pk(skA()), pk(sk@1407)), hash([Ka@1404], m2@1405)), hash([Ka@1404], m2@1405)));
    @premise new(*[Ka@1404], Ak(), tuple2(pk(sk@1407), [Na@1408]));
    @premise new(*[Na@1408], An(), tuple2(pk(sk@1407), [Ka@1404]));
    @premise know(*pk(sk@1407), #t2@1412);
    @premise know(*[Na@1408], #t0@1410);
    @premise know(*m2@1405, #t2@1411);
    @premise know(*sk@1407, #t1@1409);
    @premise know(*x1@1401, #t1@1413);
    @conclusion know(*senc(tuple4(x1@1401, [Na@1408], pk(skA()), pk(sk@1407)), hash([Ka@1404], m2@1405)), #t@1406);
    @constraint #t@1406 - #t1@1409 >= 0;
    @constraint #t@1406 - #t2@1411 >= 0;
    @constraint #t@1406 - #t2@1412 >= 0;
    @constraint #t@1406 - #t1@1413 >= 0;
    @constraint #t@1406 - #t0@1410 >= 0;
};

Rule No. [1.81]
Replaced by Rule [1.82]
Composed by Rule [1.1] and [1.73]
Selectable at 5:
@rule{
    @premise init(*pk(skA()), *x2@1434, *senc(senc(tuple4(x1@1432, [Na@1433], pk(skA()), x2@1434), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))));
    @premise new(*[Ka@1436], Ak(), tuple2(pk(skA()), [Na@1439]));
    @premise new(*[Na@1439], An(), tuple2(pk(skA()), [Ka@1436]));
    @premise new(*[Ka@1435], Ak(), tuple2(x2@1434, [Na@1433]));
    @premise new(*[Na@1433], An(), tuple2(x2@1434, [Ka@1435]));
    @premise know(*skA(), #t1@1438);
    @premise know(*[Ka@1436], #t1@1440);
    @premise know(*[Ka@1435], #t1@1441);
    @premise know(*[Na@1433], #t0@1442);
    @premise know(*x2@1434, #t2@1443);
    @premise know(*x1@1432, #t1@1444);
    @conclusion know(*senc(tuple4(x1@1432, [Na@1433], pk(skA()), x2@1434), hash([Ka@1435], tuple2(pk(skA()), [Ka@1436]))), #t@1437);
    @constraint #t@1437 - #t1@1440 >= 0;
    @constraint #t@1437 - #t1@1441 >= 0;
    @constraint #t@1437 - #t2@1443 >= 0;
    @constraint #t@1437 - #t1@1444 >= 0;
    @constraint #t@1437 - #t0@1442 >= 0;
    @constraint #t@1437 - #t1@1438 >= 0;
};

Rule No. [1.82]
Valid Rule
Composed by Rule [1.8] and [1.73]
Selectable at 5:
@rule{
    @premise init(*pk(skA()), *x2@1447, *senc(senc(tuple4(x1@1445, [Na@1446], pk(skA()), x2@1447), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))));
    @premise new(*[Ka@1449], Ak(), tuple2(pk(skA()), [Na@1451]));
    @premise new(*[Na@1451], An(), tuple2(pk(skA()), [Ka@1449]));
    @premise new(*[Na@1446], An(), tuple2(x2@1447, [Ka@1448]));
    @premise new(*[Ka@1448], Ak(), tuple2(x2@1447, [Na@1446]));
    @premise know(*[Ka@1449], #t1@1452);
    @premise know(*[Ka@1448], #t1@1453);
    @premise know(*[Na@1446], #t0@1454);
    @premise know(*x2@1447, #t2@1455);
    @premise know(*x1@1445, #t1@1456);
    @conclusion know(*senc(tuple4(x1@1445, [Na@1446], pk(skA()), x2@1447), hash([Ka@1448], tuple2(pk(skA()), [Ka@1449]))), #t@1450);
    @constraint #t@1450 - #t2@1455 >= 0;
    @constraint #t@1450 - #t1@1452 >= 0;
    @constraint #t@1450 - #t1@1453 >= 0;
    @constraint #t@1450 - #t1@1456 >= 0;
    @constraint #t@1450 - #t0@1454 >= 0;
};

Rule No. [1.83]
Valid Rule
Composed by Rule [1.66] and [1.77]
Selectable at 2:
@rule{
    @premise new(*[Kb@1507], Bk(), tuple4(pk(skA()), [Nb@1509], x1@1510, Ni@1511));
    @premise new(*[Nb@1509], Bn(), tuple4(pk(skA()), [Ka@1512], x1@1510, Ni@1511));
    @premise know(*skA(), #t1@1513);
    @premise know(*[Nb@1509], #t0@1517);
    @premise know(*x1@1510, #t1@1514);
    @premise know(*Ni@1511, #t2@1515);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1509], Ni@1511, pk(skA()), pk(skB())), hash(x1@1510, [Kb@1507])), hash(x1@1510, [Kb@1507])));
};

Rule No. [1.84]
Valid Rule
Composed by Rule [1.1] and [1.78]
Not Selectable : 
@rule{
    @premise new(*[Kb@1524], Bk(), tuple4(pk(sk@1521), [Nb@1520], x1@1525, Ni@1519));
    @premise new(*[Nb@1520], Bn(), tuple4(pk(sk@1521), [Ka@1526], x1@1525, Ni@1519));
    @premise know(*sk@1521, #t1@1523);
    @premise know(*x1@1525, #t1@1528);
    @premise know(*Ni@1519, #t2@1529);
    @conclusion know(*tuple4(Ni@1519, [Nb@1520], pk(skB()), pk(sk@1521)), #t@1522);
    @constraint #t@1522 - #t1@1528 >= 0;
    @constraint #t@1522 - #t2@1529 >= 0;
    @constraint #t@1522 - #t1@1523 >= 0;
};

Rule No. [1.85]
Valid Rule
Composed by Rule [1.20] and [1.79]
Not Selectable : 
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1548], [Na@1549], pk(skA()), pk(skB())), hash([Ka@1553], [Kb@1551])), hash([Ka@1553], [Kb@1551])));
    @premise new(*[Nb@1548], Bn(), tuple4(pk(skA()), [Ka@1555], [Ka@1553], [Na@1549]));
    @premise new(*[Kb@1551], Bk(), tuple4(pk(skA()), [Nb@1548], [Ka@1553], [Na@1549]));
    @premise new(*[Kb@1556], Bk(), tuple4(pk(skA()), [Nb@1548], [Ka@1553], [Na@1549]));
    @premise new(*[Ka@1553], Ak(), tuple2(pk(skB()), [Na@1549]));
    @premise new(*[Na@1549], An(), tuple2(pk(skB()), [Ka@1553]));
    @conclusion know(*senc(tuple4([Nb@1548], [Na@1549], pk(skA()), pk(skB())), hash([Ka@1553], [Kb@1551])), #t@1552);
};

Rule No. [1.86]
Replaced by Rule [1.91]
Composed by Rule [1.1] and [1.80]
Selectable at 3:
@rule{
    @premise init(*pk(skA()), *pk(sk@1612), *senc(senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), hash([Ka@1613], m2@1614)));
    @premise new(*[Na@1611], An(), tuple2(pk(sk@1612), [Ka@1613]));
    @premise new(*[Ka@1613], Ak(), tuple2(pk(sk@1612), [Na@1611]));
    @premise know(*[Na@1611], #t0@1617);
    @premise know(*sk@1612, #t1@1616);
    @premise know(*m2@1614, #t2@1618);
    @premise know(*x1@1610, #t1@1620);
    @conclusion know(*senc(tuple4(x1@1610, [Na@1611], pk(skA()), pk(sk@1612)), hash([Ka@1613], m2@1614)), #t@1615);
    @constraint #t@1615 - #t2@1618 >= 0;
    @constraint #t@1615 - #t1@1620 >= 0;
    @constraint #t@1615 - #t0@1617 >= 0;
    @constraint #t@1615 - #t1@1616 >= 0;
};

Rule No. [1.87]
Valid Rule
Composed by Rule [1.41] and [1.82]
Selectable at 5:
@rule{
    @premise init(*pk(skA()), *x2@1690, *senc(senc(tuple4(x1@1688, [Na@1689], pk(skA()), x2@1690), hash([Ka@1691], tuple2(pk(skA()), [Ka@1692]))), hash([Ka@1691], tuple2(pk(skA()), [Ka@1692]))));
    @premise new(*[Ka@1692], Ak(), tuple2(pk(skA()), [Na@1695]));
    @premise new(*[Na@1695], An(), tuple2(pk(skA()), [Ka@1692]));
    @premise new(*[Ka@1691], Ak(), tuple2(x2@1690, [Na@1689]));
    @premise new(*[Na@1689], An(), tuple2(x2@1690, [Ka@1691]));
    @premise know(*skA(), #t1@1696);
    @premise know(*[Ka@1691], #t1@1698);
    @premise know(*[Na@1689], #t0@1699);
    @premise know(*x2@1690, #t2@1700);
    @premise know(*x1@1688, #t1@1701);
    @conclusion know(*senc(tuple4(x1@1688, [Na@1689], pk(skA()), x2@1690), hash([Ka@1691], tuple2(pk(skA()), [Ka@1692]))), #t@1693);
    @constraint #t@1693 - #t1@1696 >= 0;
    @constraint #t@1693 - #t1@1698 >= 0;
    @constraint #t@1693 - #t2@1700 >= 0;
    @constraint #t@1693 - #t1@1701 >= 0;
    @constraint #t@1693 - #t0@1699 >= 0;
};

Rule No. [1.88]
Valid Rule
Composed by Rule [1.84] and [0.9]
Not Selectable : 
@rule{
    @premise new(*[Kb@1733], Bk(), tuple4(pk(sk@1734), [Nb@1731], x1@1735, Ni@1736));
    @premise new(*[Nb@1731], Bn(), tuple4(pk(sk@1734), [Ka@1737], x1@1735, Ni@1736));
    @premise know(*sk@1734, #t1@1738);
    @premise know(*x1@1735, #t1@1739);
    @premise know(*Ni@1736, #t2@1740);
    @conclusion know(*[Nb@1731], #t1@1732);
    @constraint #t1@1732 - #t1@1738 >= 0;
    @constraint #t1@1732 - #t1@1739 >= 0;
    @constraint #t1@1732 - #t2@1740 >= 0;
};

Rule No. [1.89]
Valid Rule
Composed by Rule [1.85] and [1.7]
Selectable at 6:
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1761], [Na@1762], pk(skA()), pk(skB())), hash([Ka@1764], [Kb@1765])), hash([Ka@1764], [Kb@1765])));
    @premise new(*[Nb@1761], Bn(), tuple4(pk(skA()), [Ka@1766], [Ka@1764], [Na@1762]));
    @premise new(*[Kb@1765], Bk(), tuple4(pk(skA()), [Nb@1761], [Ka@1764], [Na@1762]));
    @premise new(*[Kb@1767], Bk(), tuple4(pk(skA()), [Nb@1761], [Ka@1764], [Na@1762]));
    @premise new(*[Ka@1764], Ak(), tuple2(pk(skB()), [Na@1762]));
    @premise new(*[Na@1762], An(), tuple2(pk(skB()), [Ka@1764]));
    @premise know(*hash([Ka@1764], [Kb@1765]), #t1@1768);
    @conclusion know(*tuple4([Nb@1761], [Na@1762], pk(skA()), pk(skB())), #t@1763);
    @constraint -#t1@1768 + #t@1763 >= 0;
};

Rule No. [1.91]
Valid Rule
Composed by Rule [1.20] and [1.86]
Not Selectable : 
@rule{
    @premise init(*pk(skA()), *pk(sk@1779), *senc(senc(tuple4(x1@1777, [Na@1778], pk(skA()), pk(sk@1779)), hash([Ka@1783], m2@1781)), hash([Ka@1783], m2@1781)));
    @premise new(*[Ka@1783], Ak(), tuple2(pk(sk@1779), [Na@1778]));
    @premise new(*[Na@1778], An(), tuple2(pk(sk@1779), [Ka@1783]));
    @premise know(*sk@1779, #t1@1785);
    @premise know(*m2@1781, #t2@1786);
    @premise know(*x1@1777, #t1@1787);
    @conclusion know(*senc(tuple4(x1@1777, [Na@1778], pk(skA()), pk(sk@1779)), hash([Ka@1783], m2@1781)), #t@1782);
    @constraint #t@1782 - #t1@1785 >= 0;
    @constraint #t@1782 - #t2@1786 >= 0;
    @constraint #t@1782 - #t1@1787 >= 0;
};

Rule No. [1.92]
Valid Rule
Composed by Rule [1.0] and [1.89]
Selectable at 6:
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1953], [Na@1954], pk(skA()), pk(skB())), hash([Ka@1956], [Kb@1958])), hash([Ka@1956], [Kb@1958])));
    @premise new(*[Kb@1958], Bk(), tuple4(pk(skA()), [Nb@1953], [Ka@1956], [Na@1954]));
    @premise new(*[Kb@1961], Bk(), tuple4(pk(skA()), [Nb@1953], [Ka@1956], [Na@1954]));
    @premise new(*[Nb@1953], Bn(), tuple4(pk(skA()), [Ka@1960], [Ka@1956], [Na@1954]));
    @premise new(*[Na@1954], An(), tuple2(pk(skB()), [Ka@1956]));
    @premise new(*[Ka@1956], Ak(), tuple2(pk(skB()), [Na@1954]));
    @premise know(*[Kb@1958], #t2@1959);
    @premise know(*[Ka@1956], #t1@1957);
    @conclusion know(*tuple4([Nb@1953], [Na@1954], pk(skA()), pk(skB())), #t@1955);
    @constraint #t@1955 - #t2@1959 >= 0;
    @constraint #t@1955 - #t1@1957 >= 0;
};

Rule No. [1.93]
Replaced by Rule [1.97]
Composed by Rule [1.91] and [1.7]
Selectable at 3:
@rule{
    @premise init(*pk(skA()), *pk(sk@1964), *senc(senc(tuple4(x1@1962, [Na@1963], pk(skA()), pk(sk@1964)), hash([Ka@1966], m2@1967)), hash([Ka@1966], m2@1967)));
    @premise new(*[Ka@1966], Ak(), tuple2(pk(sk@1964), [Na@1963]));
    @premise new(*[Na@1963], An(), tuple2(pk(sk@1964), [Ka@1966]));
    @premise know(*hash([Ka@1966], m2@1967), #t1@1971);
    @premise know(*m2@1967, #t2@1969);
    @premise know(*x1@1962, #t1@1970);
    @premise know(*sk@1964, #t1@1968);
    @conclusion know(*tuple4(x1@1962, [Na@1963], pk(skA()), pk(sk@1964)), #t@1965);
    @constraint -#t1@1971 + #t@1965 >= 0;
    @constraint #t@1965 - #t1@1968 >= 0;
    @constraint #t@1965 - #t2@1969 >= 0;
    @constraint #t@1965 - #t1@1970 >= 0;
};

Rule No. [1.94]
Valid Rule
Composed by Rule [1.91] and [1.15]
Selectable at 5:
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1982], [Na@1983], pk(skA()), pk(skB())), hash([Ka@1986], [Kb@1985])), hash([Ka@1986], [Kb@1985])));
    @premise new(*[Nb@1982], Bn(), tuple4(pk(skA()), [Ka@1990], Ki@1984, [Na@1983]));
    @premise new(*[Kb@1985], Bk(), tuple4(pk(skA()), [Nb@1982], Ki@1984, [Na@1983]));
    @premise new(*[Na@1983], An(), tuple2(pk(skB()), [Ka@1986]));
    @premise new(*[Ka@1986], Ak(), tuple2(pk(skB()), [Na@1983]));
    @premise know(*skB(), #t1@1987);
    @premise know(*[Nb@1982], #t1@1989);
    @premise know(*[Kb@1985], #t2@1988);
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1982], [Na@1983], pk(skA()), pk(skB())), hash(Ki@1984, [Kb@1985])), hash(Ki@1984, [Kb@1985])));
};

Rule No. [1.95]
Valid Rule
Composed by Rule [1.66] and [1.92]
Selectable at 6:
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@2047], [Na@2043], pk(skA()), pk(skB())), hash([Ka@2054], [Kb@2045])), hash([Ka@2054], [Kb@2045])));
    @premise new(*[Kb@2045], Bk(), tuple4(pk(skA()), [Nb@2047], [Ka@2054], [Na@2043]));
    @premise new(*[Nb@2047], Bn(), tuple4(pk(skA()), [Ka@2050], [Ka@2054], [Na@2043]));
    @premise new(*[Kb@2055], Bk(), tuple4(pk(skA()), [Nb@2047], [Ka@2054], [Na@2043]));
    @premise new(*[Ka@2054], Ak(), tuple2(pk(skB()), [Na@2043]));
    @premise new(*[Na@2043], An(), tuple2(pk(skB()), [Ka@2054]));
    @premise know(*skA(), #t1@2051);
    @premise know(*[Ka@2054], #t1@2052);
    @premise know(*[Na@2043], #t2@2053);
    @conclusion know(*tuple4([Nb@2047], [Na@2043], pk(skA()), pk(skB())), #t@2044);
    @constraint #t@2044 - #t1@2051 >= 0;
    @constraint #t@2044 - #t1@2052 >= 0;
    @constraint #t@2044 - #t2@2053 >= 0;
};

Rule No. [1.96]
Replaced by Rule [1.97]
Composed by Rule [1.0] and [1.93]
Selectable at 3:
@rule{
    @premise init(*pk(skA()), *pk(sk@2076), *senc(senc(tuple4(x1@2074, [Na@2075], pk(skA()), pk(sk@2076)), hash([Ka@2078], m2@2080)), hash([Ka@2078], m2@2080)));
    @premise new(*[Ka@2078], Ak(), tuple2(pk(sk@2076), [Na@2075]));
    @premise new(*[Na@2075], An(), tuple2(pk(sk@2076), [Ka@2078]));
    @premise know(*[Ka@2078], #t1@2079);
    @premise know(*m2@2080, #t2@2081);
    @premise know(*x1@2074, #t1@2083);
    @premise know(*sk@2076, #t1@2084);
    @conclusion know(*tuple4(x1@2074, [Na@2075], pk(skA()), pk(sk@2076)), #t@2077);
    @constraint #t@2077 - #t1@2083 >= 0;
    @constraint #t@2077 - #t1@2084 >= 0;
    @constraint #t@2077 - #t2@2081 >= 0;
    @constraint #t@2077 - #t1@2079 >= 0;
};

Rule No. [1.97]
Valid Rule
Composed by Rule [1.41] and [1.96]
Not Selectable : 
@rule{
    @premise init(*pk(skA()), *pk(sk@2133), *senc(senc(tuple4(x1@2128, [Na@2134], pk(skA()), pk(sk@2133)), hash([Ka@2132], m2@2136)), hash([Ka@2132], m2@2136)));
    @premise new(*[Ka@2132], Ak(), tuple2(pk(sk@2133), [Na@2134]));
    @premise new(*[Na@2134], An(), tuple2(pk(sk@2133), [Ka@2132]));
    @premise know(*sk@2133, #t1@2135);
    @premise know(*m2@2136, #t2@2137);
    @premise know(*x1@2128, #t1@2138);
    @conclusion know(*tuple4(x1@2128, [Na@2134], pk(skA()), pk(sk@2133)), #t@2131);
    @constraint #t@2131 - #t1@2135 >= 0;
    @constraint #t@2131 - #t2@2137 >= 0;
    @constraint #t@2131 - #t1@2138 >= 0;
};


Final Rules: 
Rule No. [1.90]
Valid Rule
Composed by Rule [1.85] and [1.15]
@rule{
    @premise init(*pk(skA()), *pk(skB()), *senc(senc(tuple4([Nb@1769], [Na@1770], pk(skA()), pk(skB())), hash([Ka@1773], [Kb@1772])), hash([Ka@1773], [Kb@1772])));
    @premise new(*[Nb@1769], Bn(), tuple4(pk(skA()), [Ka@1774], [Ka@1773], [Na@1770]));
    @premise new(*[Kb@1772], Bk(), tuple4(pk(skA()), [Nb@1769], [Ka@1773], [Na@1770]));
    @premise new(*[Kb@1775], Bk(), tuple4(pk(skA()), [Nb@1769], [Ka@1773], [Na@1770]));
    @premise new(*[Ka@1773], Ak(), tuple2(pk(skB()), [Na@1770]));
    @premise new(*[Na@1770], An(), tuple2(pk(skB()), [Ka@1773]));
    @conclusion accept(pk(skA()), pk(skB()), senc(senc(tuple4([Nb@1769], [Na@1770], pk(skA()), pk(skB())), hash([Ka@1773], [Kb@1772])), hash([Ka@1773], [Kb@1772])));
};
with parameter relation:
[@universe]


0. Requested parameter relation:
[@universe]


Overall generated rule count : 203
Basis size : 110
Verification time: 302

Proved as secure.

