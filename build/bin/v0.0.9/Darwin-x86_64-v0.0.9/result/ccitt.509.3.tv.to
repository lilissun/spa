Rule in cache: 0
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};

Rule in cache: 1
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};

Rule in cache: 2
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};

Rule in cache: 3
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};

Rule in cache: 4
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple3(x0@32, x1@33, x2@34), #t@35);
    @conclusion know(*x0@32, #t0@36);
    @constraint -#t@35 + #t0@36 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple3(x0@32, x1@33, x2@34), #t@35);
    @conclusion know(*x0@32, #t0@36);
    @constraint -#t@35 + #t0@36 >= 0;
};

Rule in cache: 5
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple3(x0@37, x1@38, x2@39), #t@40);
    @conclusion know(*x1@38, #t1@41);
    @constraint -#t@40 + #t1@41 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple3(x0@37, x1@38, x2@39), #t@40);
    @conclusion know(*x1@38, #t1@41);
    @constraint -#t@40 + #t1@41 >= 0;
};

Rule in cache: 6
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple3(x0@42, x1@43, x2@44), #t@45);
    @conclusion know(*x2@44, #t2@46);
    @constraint -#t@45 + #t2@46 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple3(x0@42, x1@43, x2@44), #t@45);
    @conclusion know(*x2@44, #t2@46);
    @constraint -#t@45 + #t2@46 >= 0;
};

Rule in cache: 7
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};

Rule in cache: 8
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};

Rule in cache: 9
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};

Rule in cache: 10
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};

Rule in cache: 11
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};

Rule in cache: 12
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};

Rule in cache: 13
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple5(x0@93, x1@94, x2@95, x3@96, x4@97), #t@98);
    @conclusion know(*x0@93, #t0@99);
    @constraint -#t@98 + #t0@99 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple5(x0@93, x1@94, x2@95, x3@96, x4@97), #t@98);
    @conclusion know(*x0@93, #t0@99);
    @constraint -#t@98 + #t0@99 >= 0;
};

Rule in cache: 14
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple5(x0@100, x1@101, x2@102, x3@103, x4@104), #t@105);
    @conclusion know(*x1@101, #t1@106);
    @constraint -#t@105 + #t1@106 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple5(x0@100, x1@101, x2@102, x3@103, x4@104), #t@105);
    @conclusion know(*x1@101, #t1@106);
    @constraint -#t@105 + #t1@106 >= 0;
};

Rule in cache: 15
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple5(x0@107, x1@108, x2@109, x3@110, x4@111), #t@112);
    @conclusion know(*x2@109, #t2@113);
    @constraint -#t@112 + #t2@113 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple5(x0@107, x1@108, x2@109, x3@110, x4@111), #t@112);
    @conclusion know(*x2@109, #t2@113);
    @constraint -#t@112 + #t2@113 >= 0;
};

Rule in cache: 16
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple5(x0@114, x1@115, x2@116, x3@117, x4@118), #t@119);
    @conclusion know(*x3@117, #t3@120);
    @constraint -#t@119 + #t3@120 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple5(x0@114, x1@115, x2@116, x3@117, x4@118), #t@119);
    @conclusion know(*x3@117, #t3@120);
    @constraint -#t@119 + #t3@120 >= 0;
};

Rule in cache: 17
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple5(x0@121, x1@122, x2@123, x3@124, x4@125), #t@126);
    @conclusion know(*x4@125, #t4@127);
    @constraint -#t@126 + #t4@127 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple5(x0@121, x1@122, x2@123, x3@124, x4@125), #t@126);
    @conclusion know(*x4@125, #t4@127);
    @constraint -#t@126 + #t4@127 >= 0;
};

Rule in cache: 18
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};

Rule in cache: 19
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple6(x0@142, x1@143, x2@144, x3@145, x4@146, x5@147), #t@148);
    @conclusion know(*x0@142, #t0@149);
    @constraint -#t@148 + #t0@149 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple6(x0@142, x1@143, x2@144, x3@145, x4@146, x5@147), #t@148);
    @conclusion know(*x0@142, #t0@149);
    @constraint -#t@148 + #t0@149 >= 0;
};

Rule in cache: 20
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple6(x0@150, x1@151, x2@152, x3@153, x4@154, x5@155), #t@156);
    @conclusion know(*x1@151, #t1@157);
    @constraint -#t@156 + #t1@157 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple6(x0@150, x1@151, x2@152, x3@153, x4@154, x5@155), #t@156);
    @conclusion know(*x1@151, #t1@157);
    @constraint -#t@156 + #t1@157 >= 0;
};

Rule in cache: 21
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple6(x0@158, x1@159, x2@160, x3@161, x4@162, x5@163), #t@164);
    @conclusion know(*x2@160, #t2@165);
    @constraint -#t@164 + #t2@165 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple6(x0@158, x1@159, x2@160, x3@161, x4@162, x5@163), #t@164);
    @conclusion know(*x2@160, #t2@165);
    @constraint -#t@164 + #t2@165 >= 0;
};

Rule in cache: 22
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple6(x0@166, x1@167, x2@168, x3@169, x4@170, x5@171), #t@172);
    @conclusion know(*x3@169, #t3@173);
    @constraint -#t@172 + #t3@173 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple6(x0@166, x1@167, x2@168, x3@169, x4@170, x5@171), #t@172);
    @conclusion know(*x3@169, #t3@173);
    @constraint -#t@172 + #t3@173 >= 0;
};

Rule in cache: 23
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple6(x0@174, x1@175, x2@176, x3@177, x4@178, x5@179), #t@180);
    @conclusion know(*x4@178, #t4@181);
    @constraint -#t@180 + #t4@181 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple6(x0@174, x1@175, x2@176, x3@177, x4@178, x5@179), #t@180);
    @conclusion know(*x4@178, #t4@181);
    @constraint -#t@180 + #t4@181 >= 0;
};

Rule in cache: 24
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple6(x0@182, x1@183, x2@184, x3@185, x4@186, x5@187), #t@188);
    @conclusion know(*x5@187, #t5@189);
    @constraint -#t@188 + #t5@189 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple6(x0@182, x1@183, x2@184, x3@185, x4@186, x5@187), #t@188);
    @conclusion know(*x5@187, #t5@189);
    @constraint -#t@188 + #t5@189 >= 0;
};

Rule in cache: 25
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m@191, #t1@192);
    @conclusion know(*hash(m@191), #t@193);
    @constraint -#t1@192 + #t@193 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@191, #t1@192);
    @conclusion know(*hash(m@191), #t@193);
    @constraint -#t1@192 + #t@193 >= 0;
};

Rule in cache: 26
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};

Rule in cache: 27
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};

Rule in cache: 28
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};

Rule in cache: 29
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};

Rule in cache: 30
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};

Rule in cache: 31
Rule staged: 0
Rule before check and clean: 
@rule{
    @conclusion know(*A(), #t@221);
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*A(), #t@221);
};

Rule in cache: 32
Rule staged: 0
Rule before check and clean: 
@rule{
    @conclusion know(*B(), #t@222);
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*B(), #t@222);
};

Rule in cache: 33
Rule staged: 0
Rule before check and clean: 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};

Rule in cache: 34
Rule staged: 0
Rule before check and clean: 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};

Rule in cache: 35
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};

Rule in cache: 36
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};

Rule in cache: 37
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise new(*[Na@240], newA(), tuple3(skA(), skR@241, #ta@242));
    @conclusion know(*sign(tuple5(#ta@242, [Na@240], pk(skR@241), X(skA(), pk(skR@241)), aenc(Y(skA(), pk(skR@241)), pk(skR@241))), skA()), #ta@242);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@240], newA(), tuple3(skA(), skR@241, #ta@242));
    @conclusion know(*sign(tuple5(#ta@242, [Na@240], pk(skR@241), X(skA(), pk(skR@241)), aenc(Y(skA(), pk(skR@241)), pk(skR@241))), skA()), #ta@242);
};

Rule in cache: 38
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise new(*[Nb@244], newB(), tuple4(skI@245, skB(), #tb@246, Na@247));
    @premise know(*sign(tuple5(#ta@248, Na@247, pk(skB()), X(skI@245, pk(skB())), aenc(Y(skI@245, pk(skB())), pk(skB()))), skI@245), #t1@249);
    @conclusion know(*sign(tuple6(#tb@246, [Nb@244], pk(skI@245), Na@247, X(skB(), pk(skI@245)), aenc(Y(skB(), pk(skI@245)), pk(skI@245))), skB()), #t@250);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@244], newB(), tuple4(skI@245, skB(), #tb@246, Na@247));
    @premise know(*sign(tuple5(#ta@248, Na@247, pk(skB()), X(skI@245, pk(skB())), aenc(Y(skI@245, pk(skB())), pk(skB()))), skI@245), #t1@249);
    @conclusion know(*sign(tuple6(#tb@246, [Nb@244], pk(skI@245), Na@247, X(skB(), pk(skI@245)), aenc(Y(skB(), pk(skI@245)), pk(skI@245))), skB()), #t@250);
};

Rule in cache: 39
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise new(*[Na@251], newA(), tuple3(skA(), skR@252, #ta@253));
    @premise init(*skA(), *skR@252, *#ta@253, *Nb@254, *[Na@251]);
    @premise know(*sign(tuple6(#tb@255, Nb@254, pk(skA()), [Na@251], X(skR@252, pk(skA())), aenc(Y(skR@252, pk(skA())), pk(skA()))), skR@252), #t1@256);
    @conclusion know(*sign(Nb@254, skA()), #t@257);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@251], newA(), tuple3(skA(), skR@252, #ta@253));
    @premise init(*skA(), *skR@252, *#ta@253, *Nb@254, *[Na@251]);
    @premise know(*sign(tuple6(#tb@255, Nb@254, pk(skA()), [Na@251], X(skR@252, pk(skA())), aenc(Y(skR@252, pk(skA())), pk(skA()))), skR@252), #t1@256);
    @conclusion know(*sign(Nb@254, skA()), #t@257);
};

Rule in cache: 40
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise new(*[Nb@258], newB(), tuple4(skA(), skB(), #tb@259, Na@260));
    @premise know(*sign([Nb@258], skA()), #t1@261);
    @conclusion accept(skA(), skB(), #tb@259, [Nb@258], Na@260);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@258], newB(), tuple4(skA(), skB(), #tb@259, Na@260));
    @premise know(*sign([Nb@258], skA()), #t1@261);
    @conclusion accept(skA(), skB(), #tb@259, [Nb@258], Na@260);
};

Stage rule: 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule in cache: 39
Rule staged: 2
Rule before check and clean: 
@rule{
    @premise know(*x0@268, #t0@270);
    @premise know(*x1@271, #t1@272);
    @conclusion know(*x0@268, #t0@269);
    @constraint #t0@269 - #t@15 >= 0;
    @constraint #t@15 - #t1@272 >= 0;
    @constraint -#t0@270 + #t@15 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule in cache: 38
Rule staged: 3
Rule before check and clean: 
@rule{
    @premise know(*x0@275, #t0@276);
    @premise know(*x1@273, #t1@277);
    @conclusion know(*x1@273, #t1@274);
    @constraint #t1@274 - #t@15 >= 0;
    @constraint #t@15 - #t1@277 >= 0;
    @constraint -#t0@276 + #t@15 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple3(x0@32, x1@33, x2@34), #t@35);
    @conclusion know(*x0@32, #t0@36);
    @constraint -#t@35 + #t0@36 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule in cache: 36
Rule staged: 5
Rule before check and clean: 
@rule{
    @premise know(*x0@278, #t0@280);
    @premise know(*x1@281, #t1@282);
    @premise know(*x2@283, #t2@284);
    @conclusion know(*x0@278, #t0@279);
    @constraint #t0@279 - #t@31 >= 0;
    @constraint #t@31 - #t2@284 >= 0;
    @constraint #t@31 - #t1@282 >= 0;
    @constraint -#t0@280 + #t@31 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple3(x0@37, x1@38, x2@39), #t@40);
    @conclusion know(*x1@38, #t1@41);
    @constraint -#t@40 + #t1@41 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule in cache: 35
Rule staged: 6
Rule before check and clean: 
@rule{
    @premise know(*x0@287, #t0@288);
    @premise know(*x1@285, #t1@289);
    @premise know(*x2@290, #t2@291);
    @conclusion know(*x1@285, #t1@286);
    @constraint #t1@286 - #t@31 >= 0;
    @constraint #t@31 - #t2@291 >= 0;
    @constraint #t@31 - #t1@289 >= 0;
    @constraint -#t0@288 + #t@31 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple3(x0@42, x1@43, x2@44), #t@45);
    @conclusion know(*x2@44, #t2@46);
    @constraint -#t@45 + #t2@46 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule in cache: 34
Rule staged: 7
Rule before check and clean: 
@rule{
    @premise know(*x0@294, #t0@295);
    @premise know(*x1@296, #t1@297);
    @premise know(*x2@292, #t2@298);
    @conclusion know(*x2@292, #t2@293);
    @constraint #t2@293 - #t@31 >= 0;
    @constraint #t@31 - #t2@298 >= 0;
    @constraint #t@31 - #t1@297 >= 0;
    @constraint -#t0@295 + #t@31 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 32
Rule staged: 9
Rule before check and clean: 
@rule{
    @premise know(*x0@299, #t0@301);
    @premise know(*x1@302, #t1@303);
    @premise know(*x2@304, #t2@305);
    @premise know(*x3@306, #t3@307);
    @conclusion know(*x0@299, #t0@300);
    @constraint #t@56 - #t1@303 >= 0;
    @constraint #t0@300 - #t@56 >= 0;
    @constraint #t@56 - #t3@307 >= 0;
    @constraint #t@56 - #t2@305 >= 0;
    @constraint -#t0@301 + #t@56 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 31
Rule staged: 10
Rule before check and clean: 
@rule{
    @premise know(*x0@310, #t0@311);
    @premise know(*x1@308, #t1@312);
    @premise know(*x2@313, #t2@314);
    @premise know(*x3@315, #t3@316);
    @conclusion know(*x1@308, #t1@309);
    @constraint #t@56 - #t1@312 >= 0;
    @constraint #t1@309 - #t@56 >= 0;
    @constraint #t@56 - #t3@316 >= 0;
    @constraint #t@56 - #t2@314 >= 0;
    @constraint -#t0@311 + #t@56 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 30
Rule staged: 11
Rule before check and clean: 
@rule{
    @premise know(*x0@319, #t0@320);
    @premise know(*x1@321, #t1@322);
    @premise know(*x2@317, #t2@323);
    @premise know(*x3@324, #t3@325);
    @conclusion know(*x2@317, #t2@318);
    @constraint #t@56 - #t1@322 >= 0;
    @constraint #t2@318 - #t@56 >= 0;
    @constraint #t@56 - #t3@325 >= 0;
    @constraint #t@56 - #t2@323 >= 0;
    @constraint -#t0@320 + #t@56 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 29
Rule staged: 12
Rule before check and clean: 
@rule{
    @premise know(*x0@328, #t0@329);
    @premise know(*x1@330, #t1@331);
    @premise know(*x2@332, #t2@333);
    @premise know(*x3@326, #t3@334);
    @conclusion know(*x3@326, #t3@327);
    @constraint #t@56 - #t1@331 >= 0;
    @constraint #t3@327 - #t@56 >= 0;
    @constraint #t@56 - #t3@334 >= 0;
    @constraint #t@56 - #t2@333 >= 0;
    @constraint -#t0@329 + #t@56 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple5(x0@93, x1@94, x2@95, x3@96, x4@97), #t@98);
    @conclusion know(*x0@93, #t0@99);
    @constraint -#t@98 + #t0@99 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule in cache: 27
Rule staged: 14
Rule before check and clean: 
@rule{
    @premise know(*x0@335, #t0@337);
    @premise know(*x1@338, #t1@339);
    @premise know(*x2@340, #t2@341);
    @premise know(*x3@342, #t3@343);
    @premise know(*x4@344, #t4@345);
    @conclusion know(*x0@335, #t0@336);
    @constraint #t@92 - #t1@339 >= 0;
    @constraint #t0@336 - #t@92 >= 0;
    @constraint #t@92 - #t4@345 >= 0;
    @constraint #t@92 - #t3@343 >= 0;
    @constraint #t@92 - #t2@341 >= 0;
    @constraint -#t0@337 + #t@92 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple5(x0@100, x1@101, x2@102, x3@103, x4@104), #t@105);
    @conclusion know(*x1@101, #t1@106);
    @constraint -#t@105 + #t1@106 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule in cache: 26
Rule staged: 15
Rule before check and clean: 
@rule{
    @premise know(*x0@348, #t0@349);
    @premise know(*x1@346, #t1@350);
    @premise know(*x2@351, #t2@352);
    @premise know(*x3@353, #t3@354);
    @premise know(*x4@355, #t4@356);
    @conclusion know(*x1@346, #t1@347);
    @constraint #t@92 - #t1@350 >= 0;
    @constraint #t1@347 - #t@92 >= 0;
    @constraint #t@92 - #t4@356 >= 0;
    @constraint #t@92 - #t3@354 >= 0;
    @constraint #t@92 - #t2@352 >= 0;
    @constraint -#t0@349 + #t@92 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple5(x0@107, x1@108, x2@109, x3@110, x4@111), #t@112);
    @conclusion know(*x2@109, #t2@113);
    @constraint -#t@112 + #t2@113 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule in cache: 25
Rule staged: 16
Rule before check and clean: 
@rule{
    @premise know(*x0@359, #t0@360);
    @premise know(*x1@361, #t1@362);
    @premise know(*x2@357, #t2@363);
    @premise know(*x3@364, #t3@365);
    @premise know(*x4@366, #t4@367);
    @conclusion know(*x2@357, #t2@358);
    @constraint #t@92 - #t1@362 >= 0;
    @constraint #t2@358 - #t@92 >= 0;
    @constraint #t@92 - #t4@367 >= 0;
    @constraint #t@92 - #t3@365 >= 0;
    @constraint #t@92 - #t2@363 >= 0;
    @constraint -#t0@360 + #t@92 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple5(x0@114, x1@115, x2@116, x3@117, x4@118), #t@119);
    @conclusion know(*x3@117, #t3@120);
    @constraint -#t@119 + #t3@120 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule in cache: 24
Rule staged: 17
Rule before check and clean: 
@rule{
    @premise know(*x0@370, #t0@371);
    @premise know(*x1@372, #t1@373);
    @premise know(*x2@374, #t2@375);
    @premise know(*x3@368, #t3@376);
    @premise know(*x4@377, #t4@378);
    @conclusion know(*x3@368, #t3@369);
    @constraint #t@92 - #t1@373 >= 0;
    @constraint #t3@369 - #t@92 >= 0;
    @constraint #t@92 - #t4@378 >= 0;
    @constraint #t@92 - #t3@376 >= 0;
    @constraint #t@92 - #t2@375 >= 0;
    @constraint -#t0@371 + #t@92 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple5(x0@121, x1@122, x2@123, x3@124, x4@125), #t@126);
    @conclusion know(*x4@125, #t4@127);
    @constraint -#t@126 + #t4@127 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule in cache: 23
Rule staged: 18
Rule before check and clean: 
@rule{
    @premise know(*x0@381, #t0@382);
    @premise know(*x1@383, #t1@384);
    @premise know(*x2@385, #t2@386);
    @premise know(*x3@387, #t3@388);
    @premise know(*x4@379, #t4@389);
    @conclusion know(*x4@379, #t4@380);
    @constraint #t@92 - #t1@384 >= 0;
    @constraint #t4@380 - #t@92 >= 0;
    @constraint #t@92 - #t4@389 >= 0;
    @constraint #t@92 - #t3@388 >= 0;
    @constraint #t@92 - #t2@386 >= 0;
    @constraint -#t0@382 + #t@92 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple6(x0@142, x1@143, x2@144, x3@145, x4@146, x5@147), #t@148);
    @conclusion know(*x0@142, #t0@149);
    @constraint -#t@148 + #t0@149 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule in cache: 21
Rule staged: 20
Rule before check and clean: 
@rule{
    @premise know(*x0@390, #t0@392);
    @premise know(*x1@393, #t1@394);
    @premise know(*x2@395, #t2@396);
    @premise know(*x3@397, #t3@398);
    @premise know(*x4@399, #t4@400);
    @premise know(*x5@401, #t5@402);
    @conclusion know(*x0@390, #t0@391);
    @constraint #t@141 - #t2@396 >= 0;
    @constraint #t0@391 - #t@141 >= 0;
    @constraint #t@141 - #t5@402 >= 0;
    @constraint #t@141 - #t4@400 >= 0;
    @constraint #t@141 - #t3@398 >= 0;
    @constraint #t@141 - #t1@394 >= 0;
    @constraint -#t0@392 + #t@141 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple6(x0@150, x1@151, x2@152, x3@153, x4@154, x5@155), #t@156);
    @conclusion know(*x1@151, #t1@157);
    @constraint -#t@156 + #t1@157 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule in cache: 20
Rule staged: 21
Rule before check and clean: 
@rule{
    @premise know(*x0@405, #t0@406);
    @premise know(*x1@403, #t1@407);
    @premise know(*x2@408, #t2@409);
    @premise know(*x3@410, #t3@411);
    @premise know(*x4@412, #t4@413);
    @premise know(*x5@414, #t5@415);
    @conclusion know(*x1@403, #t1@404);
    @constraint #t@141 - #t2@409 >= 0;
    @constraint #t1@404 - #t@141 >= 0;
    @constraint #t@141 - #t5@415 >= 0;
    @constraint #t@141 - #t4@413 >= 0;
    @constraint #t@141 - #t3@411 >= 0;
    @constraint #t@141 - #t1@407 >= 0;
    @constraint -#t0@406 + #t@141 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple6(x0@158, x1@159, x2@160, x3@161, x4@162, x5@163), #t@164);
    @conclusion know(*x2@160, #t2@165);
    @constraint -#t@164 + #t2@165 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule in cache: 19
Rule staged: 22
Rule before check and clean: 
@rule{
    @premise know(*x0@418, #t0@419);
    @premise know(*x1@420, #t1@421);
    @premise know(*x2@416, #t2@422);
    @premise know(*x3@423, #t3@424);
    @premise know(*x4@425, #t4@426);
    @premise know(*x5@427, #t5@428);
    @conclusion know(*x2@416, #t2@417);
    @constraint #t@141 - #t2@422 >= 0;
    @constraint #t2@417 - #t@141 >= 0;
    @constraint #t@141 - #t5@428 >= 0;
    @constraint #t@141 - #t4@426 >= 0;
    @constraint #t@141 - #t3@424 >= 0;
    @constraint #t@141 - #t1@421 >= 0;
    @constraint -#t0@419 + #t@141 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple6(x0@166, x1@167, x2@168, x3@169, x4@170, x5@171), #t@172);
    @conclusion know(*x3@169, #t3@173);
    @constraint -#t@172 + #t3@173 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule in cache: 18
Rule staged: 23
Rule before check and clean: 
@rule{
    @premise know(*x0@431, #t0@432);
    @premise know(*x1@433, #t1@434);
    @premise know(*x2@435, #t2@436);
    @premise know(*x3@429, #t3@437);
    @premise know(*x4@438, #t4@439);
    @premise know(*x5@440, #t5@441);
    @conclusion know(*x3@429, #t3@430);
    @constraint #t@141 - #t2@436 >= 0;
    @constraint #t3@430 - #t@141 >= 0;
    @constraint #t@141 - #t5@441 >= 0;
    @constraint #t@141 - #t4@439 >= 0;
    @constraint #t@141 - #t3@437 >= 0;
    @constraint #t@141 - #t1@434 >= 0;
    @constraint -#t0@432 + #t@141 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple6(x0@174, x1@175, x2@176, x3@177, x4@178, x5@179), #t@180);
    @conclusion know(*x4@178, #t4@181);
    @constraint -#t@180 + #t4@181 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule in cache: 17
Rule staged: 24
Rule before check and clean: 
@rule{
    @premise know(*x0@444, #t0@445);
    @premise know(*x1@446, #t1@447);
    @premise know(*x2@448, #t2@449);
    @premise know(*x3@450, #t3@451);
    @premise know(*x4@442, #t4@452);
    @premise know(*x5@453, #t5@454);
    @conclusion know(*x4@442, #t4@443);
    @constraint #t@141 - #t2@449 >= 0;
    @constraint #t4@443 - #t@141 >= 0;
    @constraint #t@141 - #t5@454 >= 0;
    @constraint #t@141 - #t4@452 >= 0;
    @constraint #t@141 - #t3@451 >= 0;
    @constraint #t@141 - #t1@447 >= 0;
    @constraint -#t0@445 + #t@141 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple6(x0@182, x1@183, x2@184, x3@185, x4@186, x5@187), #t@188);
    @conclusion know(*x5@187, #t5@189);
    @constraint -#t@188 + #t5@189 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule in cache: 16
Rule staged: 25
Rule before check and clean: 
@rule{
    @premise know(*x0@457, #t0@458);
    @premise know(*x1@459, #t1@460);
    @premise know(*x2@461, #t2@462);
    @premise know(*x3@463, #t3@464);
    @premise know(*x4@465, #t4@466);
    @premise know(*x5@455, #t5@467);
    @conclusion know(*x5@455, #t5@456);
    @constraint #t@141 - #t2@462 >= 0;
    @constraint #t5@456 - #t@141 >= 0;
    @constraint #t@141 - #t5@467 >= 0;
    @constraint #t@141 - #t4@466 >= 0;
    @constraint #t@141 - #t3@464 >= 0;
    @constraint #t@141 - #t1@460 >= 0;
    @constraint -#t0@458 + #t@141 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*m@191, #t1@192);
    @conclusion know(*hash(m@191), #t@193);
    @constraint -#t1@192 + #t@193 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};
Rule in cache: 12
Rule staged: 29
Rule before check and clean: 
@rule{
    @premise know(*m@468, #t1@470);
    @premise know(*sk@471, #t2@472);
    @conclusion know(*m@468, #t@469);
    @constraint #t@469 - #t@203 >= 0;
    @constraint #t@203 - #t2@472 >= 0;
    @constraint -#t1@470 + #t@203 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 11
Rule staged: 30
Rule before check and clean: 
@rule{
    @premise know(*sk@474, #t1@476);
    @premise know(*m@473, #t1@477);
    @conclusion know(*aenc(m@473, pk(sk@474)), #t@475);
    @constraint -#t1@477 + #t@475 >= 0;
    @constraint -#t1@476 + #t@197 >= 0;
    @constraint #t@475 - #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@474, #t1@476);
    @premise know(*m@473, #t1@477);
    @conclusion know(*aenc(m@473, pk(sk@474)), #t@475);
    @constraint -#t1@477 + #t@475 >= 0;
    @constraint #t@475 - #t1@476 >= 0;
};

Stage rule: 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule added at 1.

Stage rule: 
@rule{
    @conclusion know(*A(), #t@221);
};
Rule added.

Stage rule: 
@rule{
    @conclusion know(*B(), #t@222);
};
Rule added.

Stage rule: 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};
Rule in cache: 8
Rule staged: 34
Rule before check and clean: 
@rule{
    @premise know(*m@478, #t1@480);
    @conclusion know(*aenc(m@478, pk(skA())), #t@479);
    @constraint -#t1@480 + #t@479 >= 0;
    @constraint #t@479 - #t@225 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@478, #t1@480);
    @conclusion know(*aenc(m@478, pk(skA())), #t@479);
    @constraint -#t1@480 + #t@479 >= 0;
};

Stage rule: 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};
Rule in cache: 8
Rule staged: 35
Rule before check and clean: 
@rule{
    @premise know(*m@481, #t1@483);
    @conclusion know(*aenc(m@481, pk(skB())), #t@482);
    @constraint -#t1@483 + #t@482 >= 0;
    @constraint #t@482 - #t@226 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@481, #t1@483);
    @conclusion know(*aenc(m@481, pk(skB())), #t@482);
    @constraint -#t1@483 + #t@482 >= 0;
};

Stage rule: 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Na@240], newA(), tuple3(skA(), skR@241, #ta@242));
    @conclusion know(*sign(tuple5(#ta@242, [Na@240], pk(skR@241), X(skA(), pk(skR@241)), aenc(Y(skA(), pk(skR@241)), pk(skR@241))), skA()), #ta@242);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};
Rule in cache: 6
Rule staged: 38
Rule before check and clean: 
@rule{
    @premise new(*[Na@485], newA(), tuple3(skA(), skR@486, #ta@484));
    @conclusion know(*tuple5(#ta@484, [Na@485], pk(skR@486), X(skA(), pk(skR@486)), aenc(Y(skA(), pk(skR@486)), pk(skR@486))), #t@487);
    @constraint -#ta@484 + #t@487 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@485], newA(), tuple3(skA(), skR@486, #ta@484));
    @conclusion know(*tuple5(#ta@484, [Na@485], pk(skR@486), X(skA(), pk(skR@486)), aenc(Y(skA(), pk(skR@486)), pk(skR@486))), #t@487);
    @constraint -#ta@484 + #t@487 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Nb@244], newB(), tuple4(skI@245, skB(), #tb@246, Na@247));
    @premise know(*sign(tuple5(#ta@248, Na@247, pk(skB()), X(skI@245, pk(skB())), aenc(Y(skI@245, pk(skB())), pk(skB()))), skI@245), #t1@249);
    @conclusion know(*sign(tuple6(#tb@246, [Nb@244], pk(skI@245), Na@247, X(skB(), pk(skI@245)), aenc(Y(skB(), pk(skI@245)), pk(skI@245))), skB()), #t@250);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};
Rule in cache: 6
Rule staged: 39
Rule before check and clean: 
@rule{
    @premise know(*tuple5(#ta@493, Na@491, pk(skB()), X(sk@490, pk(skB())), aenc(Y(sk@490, pk(skB())), pk(skB()))), #t1@494);
    @premise know(*sk@490, #t2@495);
    @premise new(*[Nb@489], newB(), tuple4(sk@490, skB(), #tb@488, Na@491));
    @conclusion know(*sign(tuple6(#tb@488, [Nb@489], pk(sk@490), Na@491, X(skB(), pk(sk@490)), aenc(Y(skB(), pk(sk@490)), pk(sk@490))), skB()), #t@492);
    @constraint -#t1@494 + #t@203 >= 0;
    @constraint #t@203 - #t2@495 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*tuple5(#ta@493, Na@491, pk(skB()), X(sk@490, pk(skB())), aenc(Y(sk@490, pk(skB())), pk(skB()))), #t1@494);
    @premise know(*sk@490, #t2@495);
    @premise new(*[Nb@489], newB(), tuple4(sk@490, skB(), #tb@488, Na@491));
    @conclusion know(*sign(tuple6(#tb@488, [Nb@489], pk(sk@490), Na@491, X(skB(), pk(sk@490)), aenc(Y(skB(), pk(sk@490)), pk(sk@490))), skB()), #t@492);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@240], newA(), tuple3(skA(), skR@241, #ta@242));
    @conclusion know(*sign(tuple5(#ta@242, [Na@240], pk(skR@241), X(skA(), pk(skR@241)), aenc(Y(skA(), pk(skR@241)), pk(skR@241))), skA()), #ta@242);
};
Rule in cache: 7
Rule staged: 39
Rule before check and clean: 
@rule{
    @premise new(*[Na@498], newA(), tuple3(skA(), skB(), #ta@500));
    @premise new(*[Nb@497], newB(), tuple4(skA(), skB(), #tb@496, [Na@498]));
    @conclusion know(*sign(tuple6(#tb@496, [Nb@497], pk(skA()), [Na@498], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@499);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@498], newA(), tuple3(skA(), skB(), #ta@500));
    @premise new(*[Nb@497], newB(), tuple4(skA(), skB(), #tb@496, [Na@498]));
    @conclusion know(*sign(tuple6(#tb@496, [Nb@497], pk(skA()), [Na@498], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@499);
};

Stage rule: 
@rule{
    @premise new(*[Na@251], newA(), tuple3(skA(), skR@252, #ta@253));
    @premise init(*skA(), *skR@252, *#ta@253, *Nb@254, *[Na@251]);
    @premise know(*sign(tuple6(#tb@255, Nb@254, pk(skA()), [Na@251], X(skR@252, pk(skA())), aenc(Y(skR@252, pk(skA())), pk(skA()))), skR@252), #t1@256);
    @conclusion know(*sign(Nb@254, skA()), #t@257);
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};
Rule in cache: 7
Rule staged: 40
Rule before check and clean: 
@rule{
    @premise know(*tuple6(#tb@503, Nb@501, pk(skA()), [Na@504], X(sk@505, pk(skA())), aenc(Y(sk@505, pk(skA())), pk(skA()))), #t1@506);
    @premise know(*sk@505, #t2@507);
    @premise new(*[Na@504], newA(), tuple3(skA(), sk@505, #ta@508));
    @premise init(*skA(), *sk@505, *#ta@508, *Nb@501, *[Na@504]);
    @conclusion know(*sign(Nb@501, skA()), #t@502);
    @constraint -#t1@506 + #t@203 >= 0;
    @constraint #t@203 - #t2@507 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*tuple6(#tb@503, Nb@501, pk(skA()), [Na@504], X(sk@505, pk(skA())), aenc(Y(sk@505, pk(skA())), pk(skA()))), #t1@506);
    @premise know(*sk@505, #t2@507);
    @premise new(*[Na@504], newA(), tuple3(skA(), sk@505, #ta@508));
    @premise init(*skA(), *sk@505, *#ta@508, *Nb@501, *[Na@504]);
    @conclusion know(*sign(Nb@501, skA()), #t@502);
};

Stage rule: 
@rule{
    @premise new(*[Nb@258], newB(), tuple4(skA(), skB(), #tb@259, Na@260));
    @premise know(*sign([Nb@258], skA()), #t1@261);
    @conclusion accept(skA(), skB(), #tb@259, [Nb@258], Na@260);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};
Rule in cache: 7
Rule staged: 41
Rule before check and clean: 
@rule{
    @premise know(*[Nb@510], #t1@512);
    @premise know(*skA(), #t2@513);
    @premise new(*[Nb@510], newB(), tuple4(skA(), skB(), #tb@509, Na@511));
    @conclusion accept(skA(), skB(), #tb@509, [Nb@510], Na@511);
    @constraint -#t1@512 + #t@203 >= 0;
    @constraint #t@203 - #t2@513 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*[Nb@510], #t1@512);
    @premise know(*skA(), #t2@513);
    @premise new(*[Nb@510], newB(), tuple4(skA(), skB(), #tb@509, Na@511));
    @conclusion accept(skA(), skB(), #tb@509, [Nb@510], Na@511);
};

Stage rule: 
@rule{
    @premise know(*sk@474, #t1@476);
    @premise know(*m@473, #t1@477);
    @conclusion know(*aenc(m@473, pk(sk@474)), #t@475);
    @constraint -#t1@477 + #t@475 >= 0;
    @constraint #t@475 - #t1@476 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 7
Rule staged: 42
Rule before check and clean: 
@rule{
    @premise know(*sk@516, #t1@517);
    @premise know(*m@514, #t1@518);
    @premise know(*sk@516, #t1@519);
    @conclusion know(*m@514, #t@515);
    @constraint -#t1@519 + #t@515 >= 0;
    @constraint #t@475 - #t1@517 >= 0;
    @constraint -#t1@518 + #t@475 >= 0;
    @constraint #t@515 - #t@475 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*m@478, #t1@480);
    @conclusion know(*aenc(m@478, pk(skA())), #t@479);
    @constraint -#t1@480 + #t@479 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 6
Rule staged: 43
Rule before check and clean: 
@rule{
    @premise know(*m@520, #t1@522);
    @premise know(*skA(), #t1@523);
    @conclusion know(*m@520, #t@521);
    @constraint -#t1@523 + #t@521 >= 0;
    @constraint -#t1@522 + #t@479 >= 0;
    @constraint #t@521 - #t@479 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*m@481, #t1@483);
    @conclusion know(*aenc(m@481, pk(skB())), #t@482);
    @constraint -#t1@483 + #t@482 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 5
Rule staged: 44
Rule before check and clean: 
@rule{
    @premise know(*m@524, #t1@526);
    @premise know(*skB(), #t1@527);
    @conclusion know(*m@524, #t@525);
    @constraint -#t1@527 + #t@525 >= 0;
    @constraint -#t1@526 + #t@482 >= 0;
    @constraint #t@525 - #t@482 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise new(*[Na@485], newA(), tuple3(skA(), skR@486, #ta@484));
    @conclusion know(*tuple5(#ta@484, [Na@485], pk(skR@486), X(skA(), pk(skR@486)), aenc(Y(skA(), pk(skR@486)), pk(skR@486))), #t@487);
    @constraint -#ta@484 + #t@487 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@93, x1@94, x2@95, x3@96, x4@97), #t@98);
    @conclusion know(*x0@93, #t0@99);
    @constraint -#t@98 + #t0@99 >= 0;
};
Rule in cache: 4
Rule staged: 45
Rule before check and clean: 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@531, #ta@528));
    @conclusion know(*#ta@528, #t0@529);
    @constraint #t0@529 - #t@487 >= 0;
    @constraint -#ta@528 + #t@487 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@531, #ta@528));
    @conclusion know(*#ta@528, #t0@529);
    @constraint #t0@529 - #ta@528 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@100, x1@101, x2@102, x3@103, x4@104), #t@105);
    @conclusion know(*x1@101, #t1@106);
    @constraint -#t@105 + #t1@106 >= 0;
};
Rule in cache: 5
Rule staged: 45
Rule before check and clean: 
@rule{
    @premise new(*[Na@532], newA(), tuple3(skA(), skR@534, #ta@535));
    @conclusion know(*[Na@532], #t1@533);
    @constraint #t1@533 - #t@487 >= 0;
    @constraint -#ta@535 + #t@487 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@532], newA(), tuple3(skA(), skR@534, #ta@535));
    @conclusion know(*[Na@532], #t1@533);
    @constraint #t1@533 - #ta@535 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@107, x1@108, x2@109, x3@110, x4@111), #t@112);
    @conclusion know(*x2@109, #t2@113);
    @constraint -#t@112 + #t2@113 >= 0;
};
Rule in cache: 6
Rule staged: 45
Rule before check and clean: 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*pk(skR@536), #t2@537);
    @constraint #t2@537 - #t@487 >= 0;
    @constraint -#ta@539 + #t@487 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*pk(skR@536), #t2@537);
    @constraint #t2@537 - #ta@539 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@114, x1@115, x2@116, x3@117, x4@118), #t@119);
    @conclusion know(*x3@117, #t3@120);
    @constraint -#t@119 + #t3@120 >= 0;
};
Rule in cache: 7
Rule staged: 45
Rule before check and clean: 
@rule{
    @premise new(*[Na@542], newA(), tuple3(skA(), skR@540, #ta@543));
    @conclusion know(*X(skA(), pk(skR@540)), #t3@541);
    @constraint #t3@541 - #t@487 >= 0;
    @constraint -#ta@543 + #t@487 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@542], newA(), tuple3(skA(), skR@540, #ta@543));
    @conclusion know(*X(skA(), pk(skR@540)), #t3@541);
    @constraint #t3@541 - #ta@543 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@121, x1@122, x2@123, x3@124, x4@125), #t@126);
    @conclusion know(*x4@125, #t4@127);
    @constraint -#t@126 + #t4@127 >= 0;
};
Rule in cache: 8
Rule staged: 45
Rule before check and clean: 
@rule{
    @premise new(*[Na@546], newA(), tuple3(skA(), skR@544, #ta@547));
    @conclusion know(*aenc(Y(skA(), pk(skR@544)), pk(skR@544)), #t4@545);
    @constraint #t4@545 - #t@487 >= 0;
    @constraint -#ta@547 + #t@487 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@546], newA(), tuple3(skA(), skR@544, #ta@547));
    @conclusion know(*aenc(Y(skA(), pk(skR@544)), pk(skR@544)), #t4@545);
    @constraint #t4@545 - #ta@547 >= 0;
};

Stage rule: 
@rule{
    @premise know(*tuple5(#ta@493, Na@491, pk(skB()), X(sk@490, pk(skB())), aenc(Y(sk@490, pk(skB())), pk(skB()))), #t1@494);
    @premise know(*sk@490, #t2@495);
    @premise new(*[Nb@489], newB(), tuple4(sk@490, skB(), #tb@488, Na@491));
    @conclusion know(*sign(tuple6(#tb@488, [Nb@489], pk(sk@490), Na@491, X(skB(), pk(sk@490)), aenc(Y(skB(), pk(sk@490)), pk(sk@490))), skB()), #t@492);
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule in cache: 8
Rule staged: 46
Rule before check and clean: 
@rule{
    @premise know(*#ta@553, #t0@554);
    @premise know(*x1@551, #t1@555);
    @premise know(*pk(skB()), #t2@556);
    @premise know(*X(sk@550, pk(skB())), #t3@557);
    @premise know(*aenc(Y(sk@550, pk(skB())), pk(skB())), #t4@558);
    @premise know(*sk@550, #t2@559);
    @premise new(*[Nb@549], newB(), tuple4(sk@550, skB(), #tb@548, x1@551));
    @conclusion know(*sign(tuple6(#tb@548, [Nb@549], pk(sk@550), x1@551, X(skB(), pk(sk@550)), aenc(Y(skB(), pk(sk@550)), pk(sk@550))), skB()), #t@552);
    @constraint #t@92 - #t1@555 >= 0;
    @constraint #t@92 - #t4@558 >= 0;
    @constraint #t@92 - #t3@557 >= 0;
    @constraint #t@92 - #t2@556 >= 0;
    @constraint -#t0@554 + #t@92 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*aenc(Y(sk@550, pk(skB())), pk(skB())), #t4@558);
    @premise new(*[Nb@549], newB(), tuple4(sk@550, skB(), #tb@548, x1@551));
    @premise know(*X(sk@550, pk(skB())), #t3@557);
    @premise know(*pk(skB()), #t2@556);
    @premise know(*x1@551, #t1@555);
    @premise know(*sk@550, #t2@559);
    @conclusion know(*sign(tuple6(#tb@548, [Nb@549], pk(sk@550), x1@551, X(skB(), pk(sk@550)), aenc(Y(skB(), pk(sk@550)), pk(sk@550))), skB()), #t@552);
};

Stage rule: 
@rule{
    @premise new(*[Na@498], newA(), tuple3(skA(), skB(), #ta@500));
    @premise new(*[Nb@497], newB(), tuple4(skA(), skB(), #tb@496, [Na@498]));
    @conclusion know(*sign(tuple6(#tb@496, [Nb@497], pk(skA()), [Na@498], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@499);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};
Rule in cache: 8
Rule staged: 47
Rule before check and clean: 
@rule{
    @premise new(*[Na@562], newA(), tuple3(skA(), skB(), #ta@564));
    @premise new(*[Nb@561], newB(), tuple4(skA(), skB(), #tb@560, [Na@562]));
    @conclusion know(*tuple6(#tb@560, [Nb@561], pk(skA()), [Na@562], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), #t@563);
    @constraint -#t@499 + #t@563 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@562], newA(), tuple3(skA(), skB(), #ta@564));
    @premise new(*[Nb@561], newB(), tuple4(skA(), skB(), #tb@560, [Na@562]));
    @conclusion know(*tuple6(#tb@560, [Nb@561], pk(skA()), [Na@562], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), #t@563);
};

Compose to at 2 : 
@rule{
    @premise new(*[Na@251], newA(), tuple3(skA(), skR@252, #ta@253));
    @premise init(*skA(), *skR@252, *#ta@253, *Nb@254, *[Na@251]);
    @premise know(*sign(tuple6(#tb@255, Nb@254, pk(skA()), [Na@251], X(skR@252, pk(skA())), aenc(Y(skR@252, pk(skA())), pk(skA()))), skR@252), #t1@256);
    @conclusion know(*sign(Nb@254, skA()), #t@257);
};
Rule in cache: 9
Rule staged: 47
Rule before check and clean: 
@rule{
    @premise new(*[Na@567], newA(), tuple3(skA(), skB(), #ta@568));
    @premise new(*[Nb@565], newB(), tuple4(skA(), skB(), #tb@569, [Na@567]));
    @premise new(*[Na@567], newA(), tuple3(skA(), skB(), #ta@570));
    @premise init(*skA(), *skB(), *#ta@570, *[Nb@565], *[Na@567]);
    @conclusion know(*sign([Nb@565], skA()), #t@566);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@567], newA(), tuple3(skA(), skB(), #ta@568));
    @premise new(*[Nb@565], newB(), tuple4(skA(), skB(), #tb@569, [Na@567]));
    @premise init(*skA(), *skB(), *#ta@568, *[Nb@565], *[Na@567]);
    @conclusion know(*sign([Nb@565], skA()), #t@566);
};

Stage rule: 
@rule{
    @premise know(*tuple6(#tb@503, Nb@501, pk(skA()), [Na@504], X(sk@505, pk(skA())), aenc(Y(sk@505, pk(skA())), pk(skA()))), #t1@506);
    @premise know(*sk@505, #t2@507);
    @premise new(*[Na@504], newA(), tuple3(skA(), sk@505, #ta@508));
    @premise init(*skA(), *sk@505, *#ta@508, *Nb@501, *[Na@504]);
    @conclusion know(*sign(Nb@501, skA()), #t@502);
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule in cache: 9
Rule staged: 48
Rule before check and clean: 
@rule{
    @premise know(*#tb@573, #t0@574);
    @premise know(*x1@571, #t1@575);
    @premise know(*pk(skA()), #t2@576);
    @premise know(*[Na@577], #t3@578);
    @premise know(*X(sk@579, pk(skA())), #t4@580);
    @premise know(*aenc(Y(sk@579, pk(skA())), pk(skA())), #t5@581);
    @premise know(*sk@579, #t2@582);
    @premise new(*[Na@577], newA(), tuple3(skA(), sk@579, #ta@583));
    @premise init(*skA(), *sk@579, *#ta@583, *x1@571, *[Na@577]);
    @conclusion know(*sign(x1@571, skA()), #t@572);
    @constraint #t@141 - #t2@576 >= 0;
    @constraint #t@141 - #t5@581 >= 0;
    @constraint #t@141 - #t4@580 >= 0;
    @constraint #t@141 - #t3@578 >= 0;
    @constraint #t@141 - #t1@575 >= 0;
    @constraint -#t0@574 + #t@141 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*aenc(Y(sk@579, pk(skA())), pk(skA())), #t5@581);
    @premise new(*[Na@577], newA(), tuple3(skA(), sk@579, #ta@583));
    @premise know(*X(sk@579, pk(skA())), #t4@580);
    @premise know(*pk(skA()), #t2@576);
    @premise init(*skA(), *sk@579, *#ta@583, *x1@571, *[Na@577]);
    @premise know(*[Na@577], #t3@578);
    @premise know(*sk@579, #t2@582);
    @premise know(*x1@571, #t1@575);
    @conclusion know(*sign(x1@571, skA()), #t@572);
};

Stage rule: 
@rule{
    @premise know(*[Nb@510], #t1@512);
    @premise know(*skA(), #t2@513);
    @premise new(*[Nb@510], newB(), tuple4(skA(), skB(), #tb@509, Na@511));
    @conclusion accept(skA(), skB(), #tb@509, [Nb@510], Na@511);
};
Rule added at 0.

Stage rule: 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@531, #ta@528));
    @conclusion know(*#ta@528, #t0@529);
    @constraint #t0@529 - #ta@528 >= 0;
};
Rule added.

Check rule against queries: 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@531, #ta@528));
    @conclusion know(*#ta@528, #t0@529);
    @constraint #t0@529 - #ta@528 >= 0;
};
Before checking:
0. Requested parameter relation:
[@universe]

After checking:
0. Requested parameter relation:
[@universe]


Stage rule: 
@rule{
    @premise new(*[Na@532], newA(), tuple3(skA(), skR@534, #ta@535));
    @conclusion know(*[Na@532], #t1@533);
    @constraint #t1@533 - #ta@535 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*[Nb@510], #t1@512);
    @premise know(*skA(), #t2@513);
    @premise new(*[Nb@510], newB(), tuple4(skA(), skB(), #tb@509, Na@511));
    @conclusion accept(skA(), skB(), #tb@509, [Nb@510], Na@511);
};
Rule in cache: 7
Rule staged: 51
Rule before check and clean: 
@rule{
    @premise new(*[Na@585], newA(), tuple3(skA(), skR@587, #ta@588));
    @premise know(*skA(), #t2@589);
    @premise new(*[Na@585], newB(), tuple4(skA(), skB(), #tb@584, Na@586));
    @conclusion accept(skA(), skB(), #tb@584, [Na@585], Na@586);
    @constraint #t1@533 - #ta@588 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*pk(skR@536), #t2@537);
    @constraint #t2@537 - #ta@539 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};
Rule in cache: 6
Rule staged: 52
Rule before check and clean: 
@rule{
    @premise new(*[Na@593], newA(), tuple3(skA(), skR@591, #ta@594));
    @premise know(*m@590, #t1@595);
    @conclusion know(*aenc(m@590, pk(skR@591)), #t@592);
    @constraint -#t1@595 + #t@592 >= 0;
    @constraint #t2@537 - #ta@594 >= 0;
    @constraint #t@592 - #t2@537 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@593], newA(), tuple3(skA(), skR@591, #ta@594));
    @premise know(*m@590, #t1@595);
    @conclusion know(*aenc(m@590, pk(skR@591)), #t@592);
    @constraint #t@592 - #ta@594 >= 0;
    @constraint -#t1@595 + #t@592 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Na@542], newA(), tuple3(skA(), skR@540, #ta@543));
    @conclusion know(*X(skA(), pk(skR@540)), #t3@541);
    @constraint #t3@541 - #ta@543 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Na@546], newA(), tuple3(skA(), skR@544, #ta@547));
    @conclusion know(*aenc(Y(skA(), pk(skR@544)), pk(skR@544)), #t4@545);
    @constraint #t4@545 - #ta@547 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 5
Rule staged: 54
Rule before check and clean: 
@rule{
    @premise new(*[Na@598], newA(), tuple3(skA(), skR@596, #ta@599));
    @premise know(*skR@596, #t1@600);
    @conclusion know(*Y(skA(), pk(skR@596)), #t@597);
    @constraint -#t1@600 + #t@597 >= 0;
    @constraint #t4@545 - #ta@599 >= 0;
    @constraint #t@597 - #t4@545 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@598], newA(), tuple3(skA(), skR@596, #ta@599));
    @premise know(*skR@596, #t1@600);
    @conclusion know(*Y(skA(), pk(skR@596)), #t@597);
    @constraint #t@597 - #ta@599 >= 0;
    @constraint -#t1@600 + #t@597 >= 0;
};

Stage rule: 
@rule{
    @premise know(*aenc(Y(sk@550, pk(skB())), pk(skB())), #t4@558);
    @premise new(*[Nb@549], newB(), tuple4(sk@550, skB(), #tb@548, x1@551));
    @premise know(*X(sk@550, pk(skB())), #t3@557);
    @premise know(*pk(skB()), #t2@556);
    @premise know(*x1@551, #t1@555);
    @premise know(*sk@550, #t2@559);
    @conclusion know(*sign(tuple6(#tb@548, [Nb@549], pk(sk@550), x1@551, X(skB(), pk(sk@550)), aenc(Y(skB(), pk(sk@550)), pk(sk@550))), skB()), #t@552);
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*sk@474, #t1@476);
    @premise know(*m@473, #t1@477);
    @conclusion know(*aenc(m@473, pk(sk@474)), #t@475);
    @constraint -#t1@477 + #t@475 >= 0;
    @constraint #t@475 - #t1@476 >= 0;
};
Rule in cache: 5
Rule staged: 55
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@606);
    @premise know(*Y(sk@603, pk(skB())), #t1@607);
    @premise new(*[Nb@602], newB(), tuple4(sk@603, skB(), #tb@601, x1@604));
    @premise know(*X(sk@603, pk(skB())), #t3@608);
    @premise know(*pk(skB()), #t2@609);
    @premise know(*x1@604, #t1@610);
    @premise know(*sk@603, #t2@611);
    @conclusion know(*sign(tuple6(#tb@601, [Nb@602], pk(sk@603), x1@604, X(skB(), pk(sk@603)), aenc(Y(skB(), pk(sk@603)), pk(sk@603))), skB()), #t@605);
    @constraint #t@475 - #t1@606 >= 0;
    @constraint -#t1@607 + #t@475 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@602], newB(), tuple4(sk@603, skB(), #tb@601, x1@604));
    @premise know(*X(sk@603, pk(skB())), #t3@608);
    @premise know(*Y(sk@603, pk(skB())), #t1@607);
    @premise know(*pk(skB()), #t2@609);
    @premise know(*skB(), #t1@606);
    @premise know(*x1@604, #t1@610);
    @premise know(*sk@603, #t2@611);
    @conclusion know(*sign(tuple6(#tb@601, [Nb@602], pk(sk@603), x1@604, X(skB(), pk(sk@603)), aenc(Y(skB(), pk(sk@603)), pk(sk@603))), skB()), #t@605);
};

Compose by at 0 : 
@rule{
    @premise know(*m@481, #t1@483);
    @conclusion know(*aenc(m@481, pk(skB())), #t@482);
    @constraint -#t1@483 + #t@482 >= 0;
};
Rule in cache: 6
Rule staged: 55
Rule before check and clean: 
@rule{
    @premise know(*Y(sk@614, pk(skB())), #t1@617);
    @premise new(*[Nb@613], newB(), tuple4(sk@614, skB(), #tb@612, x1@615));
    @premise know(*X(sk@614, pk(skB())), #t3@618);
    @premise know(*pk(skB()), #t2@619);
    @premise know(*x1@615, #t1@620);
    @premise know(*sk@614, #t2@621);
    @conclusion know(*sign(tuple6(#tb@612, [Nb@613], pk(sk@614), x1@615, X(skB(), pk(sk@614)), aenc(Y(skB(), pk(sk@614)), pk(sk@614))), skB()), #t@616);
    @constraint -#t1@617 + #t@482 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@613], newB(), tuple4(sk@614, skB(), #tb@612, x1@615));
    @premise know(*Y(sk@614, pk(skB())), #t1@617);
    @premise know(*X(sk@614, pk(skB())), #t3@618);
    @premise know(*pk(skB()), #t2@619);
    @premise know(*x1@615, #t1@620);
    @premise know(*sk@614, #t2@621);
    @conclusion know(*sign(tuple6(#tb@612, [Nb@613], pk(sk@614), x1@615, X(skB(), pk(sk@614)), aenc(Y(skB(), pk(sk@614)), pk(sk@614))), skB()), #t@616);
};

Compose by at 0 : 
@rule{
    @premise new(*[Na@546], newA(), tuple3(skA(), skR@544, #ta@547));
    @conclusion know(*aenc(Y(skA(), pk(skR@544)), pk(skR@544)), #t4@545);
    @constraint #t4@545 - #ta@547 >= 0;
};
Rule in cache: 7
Rule staged: 55
Rule before check and clean: 
@rule{
    @premise new(*[Na@626], newA(), tuple3(skA(), skB(), #ta@627));
    @premise new(*[Nb@623], newB(), tuple4(skA(), skB(), #tb@622, x1@624));
    @premise know(*X(skA(), pk(skB())), #t3@628);
    @premise know(*pk(skB()), #t2@629);
    @premise know(*x1@624, #t1@630);
    @premise know(*skA(), #t2@631);
    @conclusion know(*sign(tuple6(#tb@622, [Nb@623], pk(skA()), x1@624, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@625);
    @constraint #t4@545 - #ta@627 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@623], newB(), tuple4(skA(), skB(), #tb@622, x1@624));
    @premise new(*[Na@626], newA(), tuple3(skA(), skB(), #ta@627));
    @premise know(*X(skA(), pk(skB())), #t3@628);
    @premise know(*pk(skB()), #t2@629);
    @premise know(*skA(), #t2@631);
    @premise know(*x1@624, #t1@630);
    @conclusion know(*sign(tuple6(#tb@622, [Nb@623], pk(skA()), x1@624, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@625);
};

Stage rule: 
@rule{
    @premise new(*[Na@562], newA(), tuple3(skA(), skB(), #ta@564));
    @premise new(*[Nb@561], newB(), tuple4(skA(), skB(), #tb@560, [Na@562]));
    @conclusion know(*tuple6(#tb@560, [Nb@561], pk(skA()), [Na@562], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), #t@563);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple6(x0@142, x1@143, x2@144, x3@145, x4@146, x5@147), #t@148);
    @conclusion know(*x0@142, #t0@149);
    @constraint -#t@148 + #t0@149 >= 0;
};
Rule in cache: 7
Rule staged: 56
Rule before check and clean: 
@rule{
    @premise new(*[Na@634], newA(), tuple3(skA(), skB(), #ta@635));
    @premise new(*[Nb@636], newB(), tuple4(skA(), skB(), #tb@632, [Na@634]));
    @conclusion know(*#tb@632, #t0@633);
    @constraint #t0@633 - #t@563 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@634], newA(), tuple3(skA(), skB(), #ta@635));
    @premise new(*[Nb@636], newB(), tuple4(skA(), skB(), #tb@632, [Na@634]));
    @conclusion know(*#tb@632, #t0@633);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple6(x0@150, x1@151, x2@152, x3@153, x4@154, x5@155), #t@156);
    @conclusion know(*x1@151, #t1@157);
    @constraint -#t@156 + #t1@157 >= 0;
};
Rule in cache: 8
Rule staged: 56
Rule before check and clean: 
@rule{
    @premise new(*[Na@639], newA(), tuple3(skA(), skB(), #ta@640));
    @premise new(*[Nb@637], newB(), tuple4(skA(), skB(), #tb@641, [Na@639]));
    @conclusion know(*[Nb@637], #t1@638);
    @constraint #t1@638 - #t@563 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@639], newA(), tuple3(skA(), skB(), #ta@640));
    @premise new(*[Nb@637], newB(), tuple4(skA(), skB(), #tb@641, [Na@639]));
    @conclusion know(*[Nb@637], #t1@638);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple6(x0@158, x1@159, x2@160, x3@161, x4@162, x5@163), #t@164);
    @conclusion know(*x2@160, #t2@165);
    @constraint -#t@164 + #t2@165 >= 0;
};
Rule in cache: 9
Rule staged: 56
Rule before check and clean: 
@rule{
    @premise new(*[Na@643], newA(), tuple3(skA(), skB(), #ta@644));
    @premise new(*[Nb@645], newB(), tuple4(skA(), skB(), #tb@646, [Na@643]));
    @conclusion know(*pk(skA()), #t2@642);
    @constraint #t2@642 - #t@563 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@643], newA(), tuple3(skA(), skB(), #ta@644));
    @premise new(*[Nb@645], newB(), tuple4(skA(), skB(), #tb@646, [Na@643]));
    @conclusion know(*pk(skA()), #t2@642);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple6(x0@166, x1@167, x2@168, x3@169, x4@170, x5@171), #t@172);
    @conclusion know(*x3@169, #t3@173);
    @constraint -#t@172 + #t3@173 >= 0;
};
Rule in cache: 10
Rule staged: 56
Rule before check and clean: 
@rule{
    @premise new(*[Na@647], newA(), tuple3(skA(), skB(), #ta@649));
    @premise new(*[Nb@650], newB(), tuple4(skA(), skB(), #tb@651, [Na@647]));
    @conclusion know(*[Na@647], #t3@648);
    @constraint #t3@648 - #t@563 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@647], newA(), tuple3(skA(), skB(), #ta@649));
    @premise new(*[Nb@650], newB(), tuple4(skA(), skB(), #tb@651, [Na@647]));
    @conclusion know(*[Na@647], #t3@648);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple6(x0@174, x1@175, x2@176, x3@177, x4@178, x5@179), #t@180);
    @conclusion know(*x4@178, #t4@181);
    @constraint -#t@180 + #t4@181 >= 0;
};
Rule in cache: 11
Rule staged: 56
Rule before check and clean: 
@rule{
    @premise new(*[Na@653], newA(), tuple3(skA(), skB(), #ta@654));
    @premise new(*[Nb@655], newB(), tuple4(skA(), skB(), #tb@656, [Na@653]));
    @conclusion know(*X(skB(), pk(skA())), #t4@652);
    @constraint #t4@652 - #t@563 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@653], newA(), tuple3(skA(), skB(), #ta@654));
    @premise new(*[Nb@655], newB(), tuple4(skA(), skB(), #tb@656, [Na@653]));
    @conclusion know(*X(skB(), pk(skA())), #t4@652);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple6(x0@182, x1@183, x2@184, x3@185, x4@186, x5@187), #t@188);
    @conclusion know(*x5@187, #t5@189);
    @constraint -#t@188 + #t5@189 >= 0;
};
Rule in cache: 12
Rule staged: 56
Rule before check and clean: 
@rule{
    @premise new(*[Na@658], newA(), tuple3(skA(), skB(), #ta@659));
    @premise new(*[Nb@660], newB(), tuple4(skA(), skB(), #tb@661, [Na@658]));
    @conclusion know(*aenc(Y(skB(), pk(skA())), pk(skA())), #t5@657);
    @constraint #t5@657 - #t@563 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@658], newA(), tuple3(skA(), skB(), #ta@659));
    @premise new(*[Nb@660], newB(), tuple4(skA(), skB(), #tb@661, [Na@658]));
    @conclusion know(*aenc(Y(skB(), pk(skA())), pk(skA())), #t5@657);
};

Stage rule: 
@rule{
    @premise new(*[Na@567], newA(), tuple3(skA(), skB(), #ta@568));
    @premise new(*[Nb@565], newB(), tuple4(skA(), skB(), #tb@569, [Na@567]));
    @premise init(*skA(), *skB(), *#ta@568, *[Nb@565], *[Na@567]);
    @conclusion know(*sign([Nb@565], skA()), #t@566);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};
Rule in cache: 12
Rule staged: 57
Rule before check and clean: 
@rule{
    @premise new(*[Na@664], newA(), tuple3(skA(), skB(), #ta@665));
    @premise new(*[Nb@662], newB(), tuple4(skA(), skB(), #tb@666, [Na@664]));
    @premise init(*skA(), *skB(), *#ta@665, *[Nb@662], *[Na@664]);
    @conclusion know(*[Nb@662], #t@663);
    @constraint -#t@566 + #t@663 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@664], newA(), tuple3(skA(), skB(), #ta@665));
    @premise new(*[Nb@662], newB(), tuple4(skA(), skB(), #tb@666, [Na@664]));
    @premise init(*skA(), *skB(), *#ta@665, *[Nb@662], *[Na@664]);
    @conclusion know(*[Nb@662], #t@663);
};

Compose to at 1 : 
@rule{
    @premise new(*[Nb@258], newB(), tuple4(skA(), skB(), #tb@259, Na@260));
    @premise know(*sign([Nb@258], skA()), #t1@261);
    @conclusion accept(skA(), skB(), #tb@259, [Nb@258], Na@260);
};
Rule in cache: 13
Rule staged: 57
Rule before check and clean: 
@rule{
    @premise new(*[Na@670], newA(), tuple3(skA(), skB(), #ta@671));
    @premise new(*[Nb@668], newB(), tuple4(skA(), skB(), #tb@672, [Na@670]));
    @premise init(*skA(), *skB(), *#ta@671, *[Nb@668], *[Na@670]);
    @premise new(*[Nb@668], newB(), tuple4(skA(), skB(), #tb@667, Na@669));
    @conclusion accept(skA(), skB(), #tb@667, [Nb@668], Na@669);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@670], newA(), tuple3(skA(), skB(), #ta@671));
    @premise new(*[Nb@668], newB(), tuple4(skA(), skB(), #tb@672, [Na@670]));
    @premise init(*skA(), *skB(), *#ta@671, *[Nb@668], *[Na@670]);
    @conclusion accept(skA(), skB(), #tb@672, [Nb@668], [Na@670]);
};

Stage rule: 
@rule{
    @premise know(*aenc(Y(sk@579, pk(skA())), pk(skA())), #t5@581);
    @premise new(*[Na@577], newA(), tuple3(skA(), sk@579, #ta@583));
    @premise know(*X(sk@579, pk(skA())), #t4@580);
    @premise know(*pk(skA()), #t2@576);
    @premise init(*skA(), *sk@579, *#ta@583, *x1@571, *[Na@577]);
    @premise know(*[Na@577], #t3@578);
    @premise know(*sk@579, #t2@582);
    @premise know(*x1@571, #t1@575);
    @conclusion know(*sign(x1@571, skA()), #t@572);
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*sk@474, #t1@476);
    @premise know(*m@473, #t1@477);
    @conclusion know(*aenc(m@473, pk(sk@474)), #t@475);
    @constraint -#t1@477 + #t@475 >= 0;
    @constraint #t@475 - #t1@476 >= 0;
};
Rule in cache: 13
Rule staged: 58
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@675);
    @premise know(*Y(sk@676, pk(skA())), #t1@677);
    @premise new(*[Na@678], newA(), tuple3(skA(), sk@676, #ta@679));
    @premise know(*X(sk@676, pk(skA())), #t4@680);
    @premise know(*pk(skA()), #t2@681);
    @premise init(*skA(), *sk@676, *#ta@679, *x1@673, *[Na@678]);
    @premise know(*[Na@678], #t3@682);
    @premise know(*sk@676, #t2@683);
    @premise know(*x1@673, #t1@684);
    @conclusion know(*sign(x1@673, skA()), #t@674);
    @constraint #t@475 - #t1@675 >= 0;
    @constraint -#t1@677 + #t@475 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@678], newA(), tuple3(skA(), sk@676, #ta@679));
    @premise know(*Y(sk@676, pk(skA())), #t1@677);
    @premise know(*X(sk@676, pk(skA())), #t4@680);
    @premise know(*pk(skA()), #t2@681);
    @premise init(*skA(), *sk@676, *#ta@679, *x1@673, *[Na@678]);
    @premise know(*skA(), #t1@675);
    @premise know(*[Na@678], #t3@682);
    @premise know(*sk@676, #t2@683);
    @premise know(*x1@673, #t1@684);
    @conclusion know(*sign(x1@673, skA()), #t@674);
};

Compose by at 0 : 
@rule{
    @premise know(*m@478, #t1@480);
    @conclusion know(*aenc(m@478, pk(skA())), #t@479);
    @constraint -#t1@480 + #t@479 >= 0;
};
Rule in cache: 14
Rule staged: 58
Rule before check and clean: 
@rule{
    @premise know(*Y(sk@687, pk(skA())), #t1@688);
    @premise new(*[Na@689], newA(), tuple3(skA(), sk@687, #ta@690));
    @premise know(*X(sk@687, pk(skA())), #t4@691);
    @premise know(*pk(skA()), #t2@692);
    @premise init(*skA(), *sk@687, *#ta@690, *x1@685, *[Na@689]);
    @premise know(*[Na@689], #t3@693);
    @premise know(*sk@687, #t2@694);
    @premise know(*x1@685, #t1@695);
    @conclusion know(*sign(x1@685, skA()), #t@686);
    @constraint -#t1@688 + #t@479 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@689], newA(), tuple3(skA(), sk@687, #ta@690));
    @premise know(*Y(sk@687, pk(skA())), #t1@688);
    @premise know(*X(sk@687, pk(skA())), #t4@691);
    @premise know(*pk(skA()), #t2@692);
    @premise init(*skA(), *sk@687, *#ta@690, *x1@685, *[Na@689]);
    @premise know(*[Na@689], #t3@693);
    @premise know(*sk@687, #t2@694);
    @premise know(*x1@685, #t1@695);
    @conclusion know(*sign(x1@685, skA()), #t@686);
};

Compose by at 0 : 
@rule{
    @premise new(*[Na@546], newA(), tuple3(skA(), skR@544, #ta@547));
    @conclusion know(*aenc(Y(skA(), pk(skR@544)), pk(skR@544)), #t4@545);
    @constraint #t4@545 - #ta@547 >= 0;
};
Rule in cache: 15
Rule staged: 58
Rule before check and clean: 
@rule{
    @premise new(*[Na@698], newA(), tuple3(skA(), skA(), #ta@699));
    @premise new(*[Na@700], newA(), tuple3(skA(), skA(), #ta@701));
    @premise know(*X(skA(), pk(skA())), #t4@702);
    @premise know(*pk(skA()), #t2@703);
    @premise init(*skA(), *skA(), *#ta@701, *x1@696, *[Na@700]);
    @premise know(*[Na@700], #t3@704);
    @premise know(*skA(), #t2@705);
    @premise know(*x1@696, #t1@706);
    @conclusion know(*sign(x1@696, skA()), #t@697);
    @constraint #t4@545 - #ta@699 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@698], newA(), tuple3(skA(), skA(), #ta@699));
    @premise new(*[Na@700], newA(), tuple3(skA(), skA(), #ta@701));
    @premise know(*X(skA(), pk(skA())), #t4@702);
    @premise init(*skA(), *skA(), *#ta@701, *x1@696, *[Na@700]);
    @premise know(*pk(skA()), #t2@703);
    @premise know(*skA(), #t2@705);
    @premise know(*[Na@700], #t3@704);
    @premise know(*x1@696, #t1@706);
    @conclusion know(*sign(x1@696, skA()), #t@697);
};

Stage rule: 
@rule{
    @premise new(*[Na@593], newA(), tuple3(skA(), skR@591, #ta@594));
    @premise know(*m@590, #t1@595);
    @conclusion know(*aenc(m@590, pk(skR@591)), #t@592);
    @constraint #t@592 - #ta@594 >= 0;
    @constraint -#t1@595 + #t@592 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 15
Rule staged: 59
Rule before check and clean: 
@rule{
    @premise new(*[Na@709], newA(), tuple3(skA(), skR@710, #ta@711));
    @premise know(*m@707, #t1@712);
    @premise know(*skR@710, #t1@713);
    @conclusion know(*m@707, #t@708);
    @constraint -#t1@713 + #t@708 >= 0;
    @constraint #t@592 - #ta@711 >= 0;
    @constraint -#t1@712 + #t@592 >= 0;
    @constraint #t@708 - #t@592 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*aenc(Y(sk@550, pk(skB())), pk(skB())), #t4@558);
    @premise new(*[Nb@549], newB(), tuple4(sk@550, skB(), #tb@548, x1@551));
    @premise know(*X(sk@550, pk(skB())), #t3@557);
    @premise know(*pk(skB()), #t2@556);
    @premise know(*x1@551, #t1@555);
    @premise know(*sk@550, #t2@559);
    @conclusion know(*sign(tuple6(#tb@548, [Nb@549], pk(sk@550), x1@551, X(skB(), pk(sk@550)), aenc(Y(skB(), pk(sk@550)), pk(sk@550))), skB()), #t@552);
};
Rule in cache: 15
Rule staged: 59
Rule before check and clean: 
@rule{
    @premise new(*[Na@719], newA(), tuple3(skA(), skB(), #ta@720));
    @premise know(*Y(sk@716, pk(skB())), #t1@721);
    @premise new(*[Nb@715], newB(), tuple4(sk@716, skB(), #tb@714, x1@717));
    @premise know(*X(sk@716, pk(skB())), #t3@722);
    @premise know(*pk(skB()), #t2@723);
    @premise know(*x1@717, #t1@724);
    @premise know(*sk@716, #t2@725);
    @conclusion know(*sign(tuple6(#tb@714, [Nb@715], pk(sk@716), x1@717, X(skB(), pk(sk@716)), aenc(Y(skB(), pk(sk@716)), pk(sk@716))), skB()), #t@718);
    @constraint #t@592 - #ta@720 >= 0;
    @constraint -#t1@721 + #t@592 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@719], newA(), tuple3(skA(), skB(), #ta@720));
    @premise new(*[Nb@715], newB(), tuple4(sk@716, skB(), #tb@714, x1@717));
    @premise know(*Y(sk@716, pk(skB())), #t1@721);
    @premise know(*X(sk@716, pk(skB())), #t3@722);
    @premise know(*pk(skB()), #t2@723);
    @premise know(*x1@717, #t1@724);
    @premise know(*sk@716, #t2@725);
    @conclusion know(*sign(tuple6(#tb@714, [Nb@715], pk(sk@716), x1@717, X(skB(), pk(sk@716)), aenc(Y(skB(), pk(sk@716)), pk(sk@716))), skB()), #t@718);
};

Compose to at 0 : 
@rule{
    @premise know(*aenc(Y(sk@579, pk(skA())), pk(skA())), #t5@581);
    @premise new(*[Na@577], newA(), tuple3(skA(), sk@579, #ta@583));
    @premise know(*X(sk@579, pk(skA())), #t4@580);
    @premise know(*pk(skA()), #t2@576);
    @premise init(*skA(), *sk@579, *#ta@583, *x1@571, *[Na@577]);
    @premise know(*[Na@577], #t3@578);
    @premise know(*sk@579, #t2@582);
    @premise know(*x1@571, #t1@575);
    @conclusion know(*sign(x1@571, skA()), #t@572);
};
Rule in cache: 16
Rule staged: 59
Rule before check and clean: 
@rule{
    @premise new(*[Na@728], newA(), tuple3(skA(), skA(), #ta@729));
    @premise know(*Y(sk@730, pk(skA())), #t1@731);
    @premise new(*[Na@732], newA(), tuple3(skA(), sk@730, #ta@733));
    @premise know(*X(sk@730, pk(skA())), #t4@734);
    @premise know(*pk(skA()), #t2@735);
    @premise init(*skA(), *sk@730, *#ta@733, *x1@726, *[Na@732]);
    @premise know(*[Na@732], #t3@736);
    @premise know(*sk@730, #t2@737);
    @premise know(*x1@726, #t1@738);
    @conclusion know(*sign(x1@726, skA()), #t@727);
    @constraint #t@592 - #ta@729 >= 0;
    @constraint -#t1@731 + #t@592 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@728], newA(), tuple3(skA(), skA(), #ta@729));
    @premise new(*[Na@732], newA(), tuple3(skA(), sk@730, #ta@733));
    @premise know(*Y(sk@730, pk(skA())), #t1@731);
    @premise know(*X(sk@730, pk(skA())), #t4@734);
    @premise know(*pk(skA()), #t2@735);
    @premise init(*skA(), *sk@730, *#ta@733, *x1@726, *[Na@732]);
    @premise know(*[Na@732], #t3@736);
    @premise know(*sk@730, #t2@737);
    @premise know(*x1@726, #t1@738);
    @conclusion know(*sign(x1@726, skA()), #t@727);
};

Stage rule: 
@rule{
    @premise new(*[Na@598], newA(), tuple3(skA(), skR@596, #ta@599));
    @premise know(*skR@596, #t1@600);
    @conclusion know(*Y(skA(), pk(skR@596)), #t@597);
    @constraint #t@597 - #ta@599 >= 0;
    @constraint -#t1@600 + #t@597 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Nb@602], newB(), tuple4(sk@603, skB(), #tb@601, x1@604));
    @premise know(*X(sk@603, pk(skB())), #t3@608);
    @premise know(*Y(sk@603, pk(skB())), #t1@607);
    @premise know(*pk(skB()), #t2@609);
    @premise know(*skB(), #t1@606);
    @premise know(*x1@604, #t1@610);
    @premise know(*sk@603, #t2@611);
    @conclusion know(*sign(tuple6(#tb@601, [Nb@602], pk(sk@603), x1@604, X(skB(), pk(sk@603)), aenc(Y(skB(), pk(sk@603)), pk(sk@603))), skB()), #t@605);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule in cache: 15
Rule staged: 61
Rule before check and clean: 
@rule{
    @premise know(*sk@741, #t1@744);
    @premise know(*pk(skB()), #t2@745);
    @premise new(*[Nb@740], newB(), tuple4(sk@741, skB(), #tb@739, x1@742));
    @premise know(*Y(sk@741, pk(skB())), #t1@746);
    @premise know(*pk(skB()), #t2@747);
    @premise know(*skB(), #t1@748);
    @premise know(*x1@742, #t1@749);
    @premise know(*sk@741, #t2@750);
    @conclusion know(*sign(tuple6(#tb@739, [Nb@740], pk(sk@741), x1@742, X(skB(), pk(sk@741)), aenc(Y(skB(), pk(sk@741)), pk(sk@741))), skB()), #t@743);
    @constraint #t@232 - #t2@745 >= 0;
    @constraint -#t1@744 + #t@232 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@740], newB(), tuple4(sk@741, skB(), #tb@739, x1@742));
    @premise know(*Y(sk@741, pk(skB())), #t1@746);
    @premise know(*pk(skB()), #t2@745);
    @premise know(*skB(), #t1@748);
    @premise know(*sk@741, #t1@744);
    @premise know(*x1@742, #t1@749);
    @conclusion know(*sign(tuple6(#tb@739, [Nb@740], pk(sk@741), x1@742, X(skB(), pk(sk@741)), aenc(Y(skB(), pk(sk@741)), pk(sk@741))), skB()), #t@743);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@542], newA(), tuple3(skA(), skR@540, #ta@543));
    @conclusion know(*X(skA(), pk(skR@540)), #t3@541);
    @constraint #t3@541 - #ta@543 >= 0;
};
Rule in cache: 16
Rule staged: 61
Rule before check and clean: 
@rule{
    @premise new(*[Na@755], newA(), tuple3(skA(), skB(), #ta@756));
    @premise new(*[Nb@752], newB(), tuple4(skA(), skB(), #tb@751, x1@753));
    @premise know(*Y(skA(), pk(skB())), #t1@757);
    @premise know(*pk(skB()), #t2@758);
    @premise know(*skB(), #t1@759);
    @premise know(*x1@753, #t1@760);
    @premise know(*skA(), #t2@761);
    @conclusion know(*sign(tuple6(#tb@751, [Nb@752], pk(skA()), x1@753, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@754);
    @constraint #t3@541 - #ta@756 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@752], newB(), tuple4(skA(), skB(), #tb@751, x1@753));
    @premise new(*[Na@755], newA(), tuple3(skA(), skB(), #ta@756));
    @premise know(*Y(skA(), pk(skB())), #t1@757);
    @premise know(*pk(skB()), #t2@758);
    @premise know(*skB(), #t1@759);
    @premise know(*skA(), #t2@761);
    @premise know(*x1@753, #t1@760);
    @conclusion know(*sign(tuple6(#tb@751, [Nb@752], pk(skA()), x1@753, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@754);
};

Stage rule: 
@rule{
    @premise new(*[Nb@613], newB(), tuple4(sk@614, skB(), #tb@612, x1@615));
    @premise know(*Y(sk@614, pk(skB())), #t1@617);
    @premise know(*X(sk@614, pk(skB())), #t3@618);
    @premise know(*pk(skB()), #t2@619);
    @premise know(*x1@615, #t1@620);
    @premise know(*sk@614, #t2@621);
    @conclusion know(*sign(tuple6(#tb@612, [Nb@613], pk(sk@614), x1@615, X(skB(), pk(sk@614)), aenc(Y(skB(), pk(sk@614)), pk(sk@614))), skB()), #t@616);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@602], newB(), tuple4(sk@603, skB(), #tb@601, x1@604));
    @premise know(*X(sk@603, pk(skB())), #t3@608);
    @premise know(*Y(sk@603, pk(skB())), #t1@607);
    @premise know(*pk(skB()), #t2@609);
    @premise know(*skB(), #t1@606);
    @premise know(*x1@604, #t1@610);
    @premise know(*sk@603, #t2@611);
    @conclusion know(*sign(tuple6(#tb@601, [Nb@602], pk(sk@603), x1@604, X(skB(), pk(sk@603)), aenc(Y(skB(), pk(sk@603)), pk(sk@603))), skB()), #t@605);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};
Rule in cache: 16
Rule staged: 62
Rule before check and clean: 
@rule{
    @premise know(*sk@764, #t1@767);
    @premise know(*pk(skB()), #t2@768);
    @premise new(*[Nb@763], newB(), tuple4(sk@764, skB(), #tb@762, x1@765));
    @premise know(*X(sk@764, pk(skB())), #t3@769);
    @premise know(*pk(skB()), #t2@770);
    @premise know(*x1@765, #t1@771);
    @premise know(*sk@764, #t2@772);
    @conclusion know(*sign(tuple6(#tb@762, [Nb@763], pk(sk@764), x1@765, X(skB(), pk(sk@764)), aenc(Y(skB(), pk(sk@764)), pk(sk@764))), skB()), #t@766);
    @constraint #t@238 - #t2@768 >= 0;
    @constraint -#t1@767 + #t@238 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@763], newB(), tuple4(sk@764, skB(), #tb@762, x1@765));
    @premise know(*X(sk@764, pk(skB())), #t3@769);
    @premise know(*pk(skB()), #t2@768);
    @premise know(*sk@764, #t1@767);
    @premise know(*x1@765, #t1@771);
    @conclusion know(*sign(tuple6(#tb@762, [Nb@763], pk(sk@764), x1@765, X(skB(), pk(sk@764)), aenc(Y(skB(), pk(sk@764)), pk(sk@764))), skB()), #t@766);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@598], newA(), tuple3(skA(), skR@596, #ta@599));
    @premise know(*skR@596, #t1@600);
    @conclusion know(*Y(skA(), pk(skR@596)), #t@597);
    @constraint #t@597 - #ta@599 >= 0;
    @constraint -#t1@600 + #t@597 >= 0;
};
Rule in cache: 17
Rule staged: 62
Rule before check and clean: 
@rule{
    @premise new(*[Na@777], newA(), tuple3(skA(), skB(), #ta@778));
    @premise know(*skB(), #t1@779);
    @premise new(*[Nb@774], newB(), tuple4(skA(), skB(), #tb@773, x1@775));
    @premise know(*X(skA(), pk(skB())), #t3@780);
    @premise know(*pk(skB()), #t2@781);
    @premise know(*x1@775, #t1@782);
    @premise know(*skA(), #t2@783);
    @conclusion know(*sign(tuple6(#tb@773, [Nb@774], pk(skA()), x1@775, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@776);
    @constraint #t@597 - #ta@778 >= 0;
    @constraint -#t1@779 + #t@597 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@774], newB(), tuple4(skA(), skB(), #tb@773, x1@775));
    @premise new(*[Na@777], newA(), tuple3(skA(), skB(), #ta@778));
    @premise know(*X(skA(), pk(skB())), #t3@780);
    @premise know(*pk(skB()), #t2@781);
    @premise know(*skB(), #t1@779);
    @premise know(*skA(), #t2@783);
    @premise know(*x1@775, #t1@782);
    @conclusion know(*sign(tuple6(#tb@773, [Nb@774], pk(skA()), x1@775, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@776);
};

Stage rule: 
@rule{
    @premise new(*[Nb@623], newB(), tuple4(skA(), skB(), #tb@622, x1@624));
    @premise new(*[Na@626], newA(), tuple3(skA(), skB(), #ta@627));
    @premise know(*X(skA(), pk(skB())), #t3@628);
    @premise know(*pk(skB()), #t2@629);
    @premise know(*skA(), #t2@631);
    @premise know(*x1@624, #t1@630);
    @conclusion know(*sign(tuple6(#tb@622, [Nb@623], pk(skA()), x1@624, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@625);
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule in cache: 17
Rule staged: 63
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@788);
    @premise know(*pk(skB()), #t2@789);
    @premise new(*[Nb@785], newB(), tuple4(skA(), skB(), #tb@784, x1@786));
    @premise new(*[Na@790], newA(), tuple3(skA(), skB(), #ta@791));
    @premise know(*pk(skB()), #t2@792);
    @premise know(*skA(), #t2@793);
    @premise know(*x1@786, #t1@794);
    @conclusion know(*sign(tuple6(#tb@784, [Nb@785], pk(skA()), x1@786, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@787);
    @constraint #t@232 - #t2@789 >= 0;
    @constraint -#t1@788 + #t@232 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@785], newB(), tuple4(skA(), skB(), #tb@784, x1@786));
    @premise new(*[Na@790], newA(), tuple3(skA(), skB(), #ta@791));
    @premise know(*pk(skB()), #t2@789);
    @premise know(*skA(), #t1@788);
    @premise know(*x1@786, #t1@794);
    @conclusion know(*sign(tuple6(#tb@784, [Nb@785], pk(skA()), x1@786, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@787);
};

Compose by at 2 : 
@rule{
    @premise new(*[Na@542], newA(), tuple3(skA(), skR@540, #ta@543));
    @conclusion know(*X(skA(), pk(skR@540)), #t3@541);
    @constraint #t3@541 - #ta@543 >= 0;
};
Rule in cache: 18
Rule staged: 63
Rule before check and clean: 
@rule{
    @premise new(*[Na@799], newA(), tuple3(skA(), skB(), #ta@800));
    @premise new(*[Nb@796], newB(), tuple4(skA(), skB(), #tb@795, x1@797));
    @premise new(*[Na@801], newA(), tuple3(skA(), skB(), #ta@802));
    @premise know(*pk(skB()), #t2@803);
    @premise know(*skA(), #t2@804);
    @premise know(*x1@797, #t1@805);
    @conclusion know(*sign(tuple6(#tb@795, [Nb@796], pk(skA()), x1@797, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@798);
    @constraint #t3@541 - #ta@800 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@796], newB(), tuple4(skA(), skB(), #tb@795, x1@797));
    @premise new(*[Na@799], newA(), tuple3(skA(), skB(), #ta@800));
    @premise new(*[Na@801], newA(), tuple3(skA(), skB(), #ta@802));
    @premise know(*pk(skB()), #t2@803);
    @premise know(*skA(), #t2@804);
    @premise know(*x1@797, #t1@805);
    @conclusion know(*sign(tuple6(#tb@795, [Nb@796], pk(skA()), x1@797, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@798);
};

Stage rule: 
@rule{
    @premise new(*[Na@634], newA(), tuple3(skA(), skB(), #ta@635));
    @premise new(*[Nb@636], newB(), tuple4(skA(), skB(), #tb@632, [Na@634]));
    @conclusion know(*#tb@632, #t0@633);
};
Rule added.

Check rule against queries: 
@rule{
    @premise new(*[Na@634], newA(), tuple3(skA(), skB(), #ta@635));
    @premise new(*[Nb@636], newB(), tuple4(skA(), skB(), #tb@632, [Na@634]));
    @conclusion know(*#tb@632, #t0@633);
};
Before checking:
0. Requested parameter relation:
[@universe]

After checking:
0. Requested parameter relation:
[@universe]


Stage rule: 
@rule{
    @premise new(*[Na@639], newA(), tuple3(skA(), skB(), #ta@640));
    @premise new(*[Nb@637], newB(), tuple4(skA(), skB(), #tb@641, [Na@639]));
    @conclusion know(*[Nb@637], #t1@638);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*[Nb@510], #t1@512);
    @premise know(*skA(), #t2@513);
    @premise new(*[Nb@510], newB(), tuple4(skA(), skB(), #tb@509, Na@511));
    @conclusion accept(skA(), skB(), #tb@509, [Nb@510], Na@511);
};
Rule in cache: 17
Rule staged: 65
Rule before check and clean: 
@rule{
    @premise new(*[Na@809], newA(), tuple3(skA(), skB(), #ta@810));
    @premise new(*[Nb@807], newB(), tuple4(skA(), skB(), #tb@811, [Na@809]));
    @premise know(*skA(), #t2@812);
    @premise new(*[Nb@807], newB(), tuple4(skA(), skB(), #tb@806, Na@808));
    @conclusion accept(skA(), skB(), #tb@806, [Nb@807], Na@808);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@809], newA(), tuple3(skA(), skB(), #ta@810));
    @premise new(*[Nb@807], newB(), tuple4(skA(), skB(), #tb@811, [Na@809]));
    @premise know(*skA(), #t2@812);
    @conclusion accept(skA(), skB(), #tb@811, [Nb@807], [Na@809]);
};

Stage rule: 
@rule{
    @premise new(*[Na@643], newA(), tuple3(skA(), skB(), #ta@644));
    @premise new(*[Nb@645], newB(), tuple4(skA(), skB(), #tb@646, [Na@643]));
    @conclusion know(*pk(skA()), #t2@642);
};
Rule implied by: 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@647], newA(), tuple3(skA(), skB(), #ta@649));
    @premise new(*[Nb@650], newB(), tuple4(skA(), skB(), #tb@651, [Na@647]));
    @conclusion know(*[Na@647], #t3@648);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*[Nb@510], #t1@512);
    @premise know(*skA(), #t2@513);
    @premise new(*[Nb@510], newB(), tuple4(skA(), skB(), #tb@509, Na@511));
    @conclusion accept(skA(), skB(), #tb@509, [Nb@510], Na@511);
};
Rule in cache: 16
Rule staged: 66
Rule before check and clean: 
@rule{
    @premise new(*[Na@814], newA(), tuple3(skA(), skB(), #ta@816));
    @premise new(*[Nb@817], newB(), tuple4(skA(), skB(), #tb@818, [Na@814]));
    @premise know(*skA(), #t2@819);
    @premise new(*[Na@814], newB(), tuple4(skA(), skB(), #tb@813, Na@815));
    @conclusion accept(skA(), skB(), #tb@813, [Na@814], Na@815);
};
Rule invalid. 

Stage rule: 
@rule{
    @premise new(*[Na@653], newA(), tuple3(skA(), skB(), #ta@654));
    @premise new(*[Nb@655], newB(), tuple4(skA(), skB(), #tb@656, [Na@653]));
    @conclusion know(*X(skB(), pk(skA())), #t4@652);
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Na@658], newA(), tuple3(skA(), skB(), #ta@659));
    @premise new(*[Nb@660], newB(), tuple4(skA(), skB(), #tb@661, [Na@658]));
    @conclusion know(*aenc(Y(skB(), pk(skA())), pk(skA())), #t5@657);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 14
Rule staged: 68
Rule before check and clean: 
@rule{
    @premise new(*[Na@821], newA(), tuple3(skA(), skB(), #ta@822));
    @premise new(*[Nb@823], newB(), tuple4(skA(), skB(), #tb@824, [Na@821]));
    @premise know(*skA(), #t1@825);
    @conclusion know(*Y(skB(), pk(skA())), #t@820);
    @constraint -#t1@825 + #t@820 >= 0;
    @constraint #t@820 - #t5@657 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@821], newA(), tuple3(skA(), skB(), #ta@822));
    @premise new(*[Nb@823], newB(), tuple4(skA(), skB(), #tb@824, [Na@821]));
    @premise know(*skA(), #t1@825);
    @conclusion know(*Y(skB(), pk(skA())), #t@820);
    @constraint -#t1@825 + #t@820 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*aenc(Y(sk@579, pk(skA())), pk(skA())), #t5@581);
    @premise new(*[Na@577], newA(), tuple3(skA(), sk@579, #ta@583));
    @premise know(*X(sk@579, pk(skA())), #t4@580);
    @premise know(*pk(skA()), #t2@576);
    @premise init(*skA(), *sk@579, *#ta@583, *x1@571, *[Na@577]);
    @premise know(*[Na@577], #t3@578);
    @premise know(*sk@579, #t2@582);
    @premise know(*x1@571, #t1@575);
    @conclusion know(*sign(x1@571, skA()), #t@572);
};
Rule in cache: 15
Rule staged: 68
Rule before check and clean: 
@rule{
    @premise new(*[Na@828], newA(), tuple3(skA(), skB(), #ta@829));
    @premise new(*[Nb@830], newB(), tuple4(skA(), skB(), #tb@831, [Na@828]));
    @premise new(*[Na@832], newA(), tuple3(skA(), skB(), #ta@833));
    @premise know(*X(skB(), pk(skA())), #t4@834);
    @premise know(*pk(skA()), #t2@835);
    @premise init(*skA(), *skB(), *#ta@833, *x1@826, *[Na@832]);
    @premise know(*[Na@832], #t3@836);
    @premise know(*skB(), #t2@837);
    @premise know(*x1@826, #t1@838);
    @conclusion know(*sign(x1@826, skA()), #t@827);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@830], newB(), tuple4(skA(), skB(), #tb@831, [Na@828]));
    @premise new(*[Na@828], newA(), tuple3(skA(), skB(), #ta@829));
    @premise new(*[Na@832], newA(), tuple3(skA(), skB(), #ta@833));
    @premise know(*X(skB(), pk(skA())), #t4@834);
    @premise init(*skA(), *skB(), *#ta@833, *x1@826, *[Na@832]);
    @premise know(*pk(skA()), #t2@835);
    @premise know(*skB(), #t2@837);
    @premise know(*[Na@832], #t3@836);
    @premise know(*x1@826, #t1@838);
    @conclusion know(*sign(x1@826, skA()), #t@827);
};

Stage rule: 
@rule{
    @premise new(*[Na@664], newA(), tuple3(skA(), skB(), #ta@665));
    @premise new(*[Nb@662], newB(), tuple4(skA(), skB(), #tb@666, [Na@664]));
    @premise init(*skA(), *skB(), *#ta@665, *[Nb@662], *[Na@664]);
    @conclusion know(*[Nb@662], #t@663);
};
Rule implied by: 
@rule{
    @premise new(*[Na@639], newA(), tuple3(skA(), skB(), #ta@640));
    @premise new(*[Nb@637], newB(), tuple4(skA(), skB(), #tb@641, [Na@639]));
    @conclusion know(*[Nb@637], #t1@638);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@670], newA(), tuple3(skA(), skB(), #ta@671));
    @premise new(*[Nb@668], newB(), tuple4(skA(), skB(), #tb@672, [Na@670]));
    @premise init(*skA(), *skB(), *#ta@671, *[Nb@668], *[Na@670]);
    @conclusion accept(skA(), skB(), #tb@672, [Nb@668], [Na@670]);
};
Rule added.

Check rule against queries: 
@rule{
    @premise new(*[Na@670], newA(), tuple3(skA(), skB(), #ta@671));
    @premise new(*[Nb@668], newB(), tuple4(skA(), skB(), #tb@672, [Na@670]));
    @premise init(*skA(), *skB(), *#ta@671, *[Nb@668], *[Na@670]);
    @conclusion accept(skA(), skB(), #tb@672, [Nb@668], [Na@670]);
};
Before checking:
0. Requested parameter relation:
[@universe]

After checking:
0. Requested parameter relation:
[@universe]


Stage rule: 
@rule{
    @premise new(*[Na@678], newA(), tuple3(skA(), sk@676, #ta@679));
    @premise know(*Y(sk@676, pk(skA())), #t1@677);
    @premise know(*X(sk@676, pk(skA())), #t4@680);
    @premise know(*pk(skA()), #t2@681);
    @premise init(*skA(), *sk@676, *#ta@679, *x1@673, *[Na@678]);
    @premise know(*skA(), #t1@675);
    @premise know(*[Na@678], #t3@682);
    @premise know(*sk@676, #t2@683);
    @premise know(*x1@673, #t1@684);
    @conclusion know(*sign(x1@673, skA()), #t@674);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};
Rule in cache: 13
Rule staged: 70
Rule before check and clean: 
@rule{
    @premise know(*sk@841, #t1@842);
    @premise know(*pk(skA()), #t2@843);
    @premise new(*[Na@844], newA(), tuple3(skA(), sk@841, #ta@845));
    @premise know(*X(sk@841, pk(skA())), #t4@846);
    @premise know(*pk(skA()), #t2@847);
    @premise init(*skA(), *sk@841, *#ta@845, *x1@839, *[Na@844]);
    @premise know(*skA(), #t1@848);
    @premise know(*[Na@844], #t3@849);
    @premise know(*sk@841, #t2@850);
    @premise know(*x1@839, #t1@851);
    @conclusion know(*sign(x1@839, skA()), #t@840);
    @constraint #t@238 - #t2@843 >= 0;
    @constraint -#t1@842 + #t@238 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@844], newA(), tuple3(skA(), sk@841, #ta@845));
    @premise know(*X(sk@841, pk(skA())), #t4@846);
    @premise know(*pk(skA()), #t2@843);
    @premise init(*skA(), *sk@841, *#ta@845, *x1@839, *[Na@844]);
    @premise know(*skA(), #t1@848);
    @premise know(*[Na@844], #t3@849);
    @premise know(*sk@841, #t1@842);
    @premise know(*x1@839, #t1@851);
    @conclusion know(*sign(x1@839, skA()), #t@840);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@598], newA(), tuple3(skA(), skR@596, #ta@599));
    @premise know(*skR@596, #t1@600);
    @conclusion know(*Y(skA(), pk(skR@596)), #t@597);
    @constraint #t@597 - #ta@599 >= 0;
    @constraint -#t1@600 + #t@597 >= 0;
};
Rule in cache: 14
Rule staged: 70
Rule before check and clean: 
@rule{
    @premise new(*[Na@854], newA(), tuple3(skA(), skA(), #ta@855));
    @premise know(*skA(), #t1@856);
    @premise new(*[Na@857], newA(), tuple3(skA(), skA(), #ta@858));
    @premise know(*X(skA(), pk(skA())), #t4@859);
    @premise know(*pk(skA()), #t2@860);
    @premise init(*skA(), *skA(), *#ta@858, *x1@852, *[Na@857]);
    @premise know(*skA(), #t1@861);
    @premise know(*[Na@857], #t3@862);
    @premise know(*skA(), #t2@863);
    @premise know(*x1@852, #t1@864);
    @conclusion know(*sign(x1@852, skA()), #t@853);
    @constraint #t@597 - #ta@855 >= 0;
    @constraint -#t1@856 + #t@597 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@854], newA(), tuple3(skA(), skA(), #ta@855));
    @premise new(*[Na@857], newA(), tuple3(skA(), skA(), #ta@858));
    @premise know(*X(skA(), pk(skA())), #t4@859);
    @premise init(*skA(), *skA(), *#ta@858, *x1@852, *[Na@857]);
    @premise know(*pk(skA()), #t2@860);
    @premise know(*skA(), #t1@856);
    @premise know(*[Na@857], #t3@862);
    @premise know(*x1@852, #t1@864);
    @conclusion know(*sign(x1@852, skA()), #t@853);
};

Stage rule: 
@rule{
    @premise new(*[Na@689], newA(), tuple3(skA(), sk@687, #ta@690));
    @premise know(*Y(sk@687, pk(skA())), #t1@688);
    @premise know(*X(sk@687, pk(skA())), #t4@691);
    @premise know(*pk(skA()), #t2@692);
    @premise init(*skA(), *sk@687, *#ta@690, *x1@685, *[Na@689]);
    @premise know(*[Na@689], #t3@693);
    @premise know(*sk@687, #t2@694);
    @premise know(*x1@685, #t1@695);
    @conclusion know(*sign(x1@685, skA()), #t@686);
};
Rule deleted: 
@rule{
    @premise new(*[Na@678], newA(), tuple3(skA(), sk@676, #ta@679));
    @premise know(*Y(sk@676, pk(skA())), #t1@677);
    @premise know(*X(sk@676, pk(skA())), #t4@680);
    @premise know(*pk(skA()), #t2@681);
    @premise init(*skA(), *sk@676, *#ta@679, *x1@673, *[Na@678]);
    @premise know(*skA(), #t1@675);
    @premise know(*[Na@678], #t3@682);
    @premise know(*sk@676, #t2@683);
    @premise know(*x1@673, #t1@684);
    @conclusion know(*sign(x1@673, skA()), #t@674);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};
Rule in cache: 14
Rule staged: 71
Rule before check and clean: 
@rule{
    @premise know(*sk@867, #t1@868);
    @premise know(*pk(skA()), #t2@869);
    @premise new(*[Na@870], newA(), tuple3(skA(), sk@867, #ta@871));
    @premise know(*X(sk@867, pk(skA())), #t4@872);
    @premise know(*pk(skA()), #t2@873);
    @premise init(*skA(), *sk@867, *#ta@871, *x1@865, *[Na@870]);
    @premise know(*[Na@870], #t3@874);
    @premise know(*sk@867, #t2@875);
    @premise know(*x1@865, #t1@876);
    @conclusion know(*sign(x1@865, skA()), #t@866);
    @constraint #t@238 - #t2@869 >= 0;
    @constraint -#t1@868 + #t@238 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@870], newA(), tuple3(skA(), sk@867, #ta@871));
    @premise know(*X(sk@867, pk(skA())), #t4@872);
    @premise know(*pk(skA()), #t2@869);
    @premise init(*skA(), *sk@867, *#ta@871, *x1@865, *[Na@870]);
    @premise know(*[Na@870], #t3@874);
    @premise know(*sk@867, #t1@868);
    @premise know(*x1@865, #t1@876);
    @conclusion know(*sign(x1@865, skA()), #t@866);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@598], newA(), tuple3(skA(), skR@596, #ta@599));
    @premise know(*skR@596, #t1@600);
    @conclusion know(*Y(skA(), pk(skR@596)), #t@597);
    @constraint #t@597 - #ta@599 >= 0;
    @constraint -#t1@600 + #t@597 >= 0;
};
Rule in cache: 15
Rule staged: 71
Rule before check and clean: 
@rule{
    @premise new(*[Na@879], newA(), tuple3(skA(), skA(), #ta@880));
    @premise know(*skA(), #t1@881);
    @premise new(*[Na@882], newA(), tuple3(skA(), skA(), #ta@883));
    @premise know(*X(skA(), pk(skA())), #t4@884);
    @premise know(*pk(skA()), #t2@885);
    @premise init(*skA(), *skA(), *#ta@883, *x1@877, *[Na@882]);
    @premise know(*[Na@882], #t3@886);
    @premise know(*skA(), #t2@887);
    @premise know(*x1@877, #t1@888);
    @conclusion know(*sign(x1@877, skA()), #t@878);
    @constraint #t@597 - #ta@880 >= 0;
    @constraint -#t1@881 + #t@597 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@879], newA(), tuple3(skA(), skA(), #ta@880));
    @premise new(*[Na@882], newA(), tuple3(skA(), skA(), #ta@883));
    @premise know(*X(skA(), pk(skA())), #t4@884);
    @premise init(*skA(), *skA(), *#ta@883, *x1@877, *[Na@882]);
    @premise know(*pk(skA()), #t2@885);
    @premise know(*skA(), #t1@881);
    @premise know(*[Na@882], #t3@886);
    @premise know(*x1@877, #t1@888);
    @conclusion know(*sign(x1@877, skA()), #t@878);
};

Stage rule: 
@rule{
    @premise new(*[Na@698], newA(), tuple3(skA(), skA(), #ta@699));
    @premise new(*[Na@700], newA(), tuple3(skA(), skA(), #ta@701));
    @premise know(*X(skA(), pk(skA())), #t4@702);
    @premise init(*skA(), *skA(), *#ta@701, *x1@696, *[Na@700]);
    @premise know(*pk(skA()), #t2@703);
    @premise know(*skA(), #t2@705);
    @premise know(*[Na@700], #t3@704);
    @premise know(*x1@696, #t1@706);
    @conclusion know(*sign(x1@696, skA()), #t@697);
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule in cache: 15
Rule staged: 72
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@891);
    @premise know(*pk(skA()), #t2@892);
    @premise new(*[Na@893], newA(), tuple3(skA(), skA(), #ta@894));
    @premise new(*[Na@895], newA(), tuple3(skA(), skA(), #ta@896));
    @premise init(*skA(), *skA(), *#ta@896, *x1@889, *[Na@895]);
    @premise know(*pk(skA()), #t2@897);
    @premise know(*skA(), #t2@898);
    @premise know(*[Na@895], #t3@899);
    @premise know(*x1@889, #t1@900);
    @conclusion know(*sign(x1@889, skA()), #t@890);
    @constraint #t@232 - #t2@892 >= 0;
    @constraint -#t1@891 + #t@232 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@895], newA(), tuple3(skA(), skA(), #ta@896));
    @premise new(*[Na@893], newA(), tuple3(skA(), skA(), #ta@894));
    @premise init(*skA(), *skA(), *#ta@896, *x1@889, *[Na@895]);
    @premise know(*pk(skA()), #t2@892);
    @premise know(*skA(), #t1@891);
    @premise know(*[Na@895], #t3@899);
    @premise know(*x1@889, #t1@900);
    @conclusion know(*sign(x1@889, skA()), #t@890);
};

Compose by at 2 : 
@rule{
    @premise new(*[Na@542], newA(), tuple3(skA(), skR@540, #ta@543));
    @conclusion know(*X(skA(), pk(skR@540)), #t3@541);
    @constraint #t3@541 - #ta@543 >= 0;
};
Rule in cache: 16
Rule staged: 72
Rule before check and clean: 
@rule{
    @premise new(*[Na@903], newA(), tuple3(skA(), skA(), #ta@904));
    @premise new(*[Na@905], newA(), tuple3(skA(), skA(), #ta@906));
    @premise new(*[Na@907], newA(), tuple3(skA(), skA(), #ta@908));
    @premise init(*skA(), *skA(), *#ta@908, *x1@901, *[Na@907]);
    @premise know(*pk(skA()), #t2@909);
    @premise know(*skA(), #t2@910);
    @premise know(*[Na@907], #t3@911);
    @premise know(*x1@901, #t1@912);
    @conclusion know(*sign(x1@901, skA()), #t@902);
    @constraint #t3@541 - #ta@904 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@903], newA(), tuple3(skA(), skA(), #ta@904));
    @premise new(*[Na@905], newA(), tuple3(skA(), skA(), #ta@906));
    @premise new(*[Na@907], newA(), tuple3(skA(), skA(), #ta@908));
    @premise init(*skA(), *skA(), *#ta@908, *x1@901, *[Na@907]);
    @premise know(*pk(skA()), #t2@909);
    @premise know(*skA(), #t2@910);
    @premise know(*[Na@907], #t3@911);
    @premise know(*x1@901, #t1@912);
    @conclusion know(*sign(x1@901, skA()), #t@902);
};

Stage rule: 
@rule{
    @premise new(*[Na@719], newA(), tuple3(skA(), skB(), #ta@720));
    @premise new(*[Nb@715], newB(), tuple4(sk@716, skB(), #tb@714, x1@717));
    @premise know(*Y(sk@716, pk(skB())), #t1@721);
    @premise know(*X(sk@716, pk(skB())), #t3@722);
    @premise know(*pk(skB()), #t2@723);
    @premise know(*x1@717, #t1@724);
    @premise know(*sk@716, #t2@725);
    @conclusion know(*sign(tuple6(#tb@714, [Nb@715], pk(sk@716), x1@717, X(skB(), pk(sk@716)), aenc(Y(skB(), pk(sk@716)), pk(sk@716))), skB()), #t@718);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@613], newB(), tuple4(sk@614, skB(), #tb@612, x1@615));
    @premise know(*Y(sk@614, pk(skB())), #t1@617);
    @premise know(*X(sk@614, pk(skB())), #t3@618);
    @premise know(*pk(skB()), #t2@619);
    @premise know(*x1@615, #t1@620);
    @premise know(*sk@614, #t2@621);
    @conclusion know(*sign(tuple6(#tb@612, [Nb@613], pk(sk@614), x1@615, X(skB(), pk(sk@614)), aenc(Y(skB(), pk(sk@614)), pk(sk@614))), skB()), #t@616);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@728], newA(), tuple3(skA(), skA(), #ta@729));
    @premise new(*[Na@732], newA(), tuple3(skA(), sk@730, #ta@733));
    @premise know(*Y(sk@730, pk(skA())), #t1@731);
    @premise know(*X(sk@730, pk(skA())), #t4@734);
    @premise know(*pk(skA()), #t2@735);
    @premise init(*skA(), *sk@730, *#ta@733, *x1@726, *[Na@732]);
    @premise know(*[Na@732], #t3@736);
    @premise know(*sk@730, #t2@737);
    @premise know(*x1@726, #t1@738);
    @conclusion know(*sign(x1@726, skA()), #t@727);
};
Rule implied by: 
@rule{
    @premise new(*[Na@689], newA(), tuple3(skA(), sk@687, #ta@690));
    @premise know(*Y(sk@687, pk(skA())), #t1@688);
    @premise know(*X(sk@687, pk(skA())), #t4@691);
    @premise know(*pk(skA()), #t2@692);
    @premise init(*skA(), *sk@687, *#ta@690, *x1@685, *[Na@689]);
    @premise know(*[Na@689], #t3@693);
    @premise know(*sk@687, #t2@694);
    @premise know(*x1@685, #t1@695);
    @conclusion know(*sign(x1@685, skA()), #t@686);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@740], newB(), tuple4(sk@741, skB(), #tb@739, x1@742));
    @premise know(*Y(sk@741, pk(skB())), #t1@746);
    @premise know(*pk(skB()), #t2@745);
    @premise know(*skB(), #t1@748);
    @premise know(*sk@741, #t1@744);
    @premise know(*x1@742, #t1@749);
    @conclusion know(*sign(tuple6(#tb@739, [Nb@740], pk(sk@741), x1@742, X(skB(), pk(sk@741)), aenc(Y(skB(), pk(sk@741)), pk(sk@741))), skB()), #t@743);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};
Rule in cache: 14
Rule staged: 73
Rule before check and clean: 
@rule{
    @premise know(*sk@915, #t1@918);
    @premise know(*pk(skB()), #t2@919);
    @premise new(*[Nb@914], newB(), tuple4(sk@915, skB(), #tb@913, x1@916));
    @premise know(*pk(skB()), #t2@920);
    @premise know(*skB(), #t1@921);
    @premise know(*sk@915, #t1@922);
    @premise know(*x1@916, #t1@923);
    @conclusion know(*sign(tuple6(#tb@913, [Nb@914], pk(sk@915), x1@916, X(skB(), pk(sk@915)), aenc(Y(skB(), pk(sk@915)), pk(sk@915))), skB()), #t@917);
    @constraint #t@238 - #t2@919 >= 0;
    @constraint -#t1@918 + #t@238 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@914], newB(), tuple4(sk@915, skB(), #tb@913, x1@916));
    @premise know(*pk(skB()), #t2@919);
    @premise know(*skB(), #t1@921);
    @premise know(*sk@915, #t1@918);
    @premise know(*x1@916, #t1@923);
    @conclusion know(*sign(tuple6(#tb@913, [Nb@914], pk(sk@915), x1@916, X(skB(), pk(sk@915)), aenc(Y(skB(), pk(sk@915)), pk(sk@915))), skB()), #t@917);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@598], newA(), tuple3(skA(), skR@596, #ta@599));
    @premise know(*skR@596, #t1@600);
    @conclusion know(*Y(skA(), pk(skR@596)), #t@597);
    @constraint #t@597 - #ta@599 >= 0;
    @constraint -#t1@600 + #t@597 >= 0;
};
Rule in cache: 15
Rule staged: 73
Rule before check and clean: 
@rule{
    @premise new(*[Na@928], newA(), tuple3(skA(), skB(), #ta@929));
    @premise know(*skB(), #t1@930);
    @premise new(*[Nb@925], newB(), tuple4(skA(), skB(), #tb@924, x1@926));
    @premise know(*pk(skB()), #t2@931);
    @premise know(*skB(), #t1@932);
    @premise know(*skA(), #t1@933);
    @premise know(*x1@926, #t1@934);
    @conclusion know(*sign(tuple6(#tb@924, [Nb@925], pk(skA()), x1@926, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@927);
    @constraint #t@597 - #ta@929 >= 0;
    @constraint -#t1@930 + #t@597 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@925], newB(), tuple4(skA(), skB(), #tb@924, x1@926));
    @premise new(*[Na@928], newA(), tuple3(skA(), skB(), #ta@929));
    @premise know(*pk(skB()), #t2@931);
    @premise know(*skB(), #t1@930);
    @premise know(*skA(), #t1@933);
    @premise know(*x1@926, #t1@934);
    @conclusion know(*sign(tuple6(#tb@924, [Nb@925], pk(skA()), x1@926, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@927);
};

Stage rule: 
@rule{
    @premise new(*[Nb@752], newB(), tuple4(skA(), skB(), #tb@751, x1@753));
    @premise new(*[Na@755], newA(), tuple3(skA(), skB(), #ta@756));
    @premise know(*Y(skA(), pk(skB())), #t1@757);
    @premise know(*pk(skB()), #t2@758);
    @premise know(*skB(), #t1@759);
    @premise know(*skA(), #t2@761);
    @premise know(*x1@753, #t1@760);
    @conclusion know(*sign(tuple6(#tb@751, [Nb@752], pk(skA()), x1@753, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@754);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@740], newB(), tuple4(sk@741, skB(), #tb@739, x1@742));
    @premise know(*Y(sk@741, pk(skB())), #t1@746);
    @premise know(*pk(skB()), #t2@745);
    @premise know(*skB(), #t1@748);
    @premise know(*sk@741, #t1@744);
    @premise know(*x1@742, #t1@749);
    @conclusion know(*sign(tuple6(#tb@739, [Nb@740], pk(sk@741), x1@742, X(skB(), pk(sk@741)), aenc(Y(skB(), pk(sk@741)), pk(sk@741))), skB()), #t@743);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@763], newB(), tuple4(sk@764, skB(), #tb@762, x1@765));
    @premise know(*X(sk@764, pk(skB())), #t3@769);
    @premise know(*pk(skB()), #t2@768);
    @premise know(*sk@764, #t1@767);
    @premise know(*x1@765, #t1@771);
    @conclusion know(*sign(tuple6(#tb@762, [Nb@763], pk(sk@764), x1@765, X(skB(), pk(sk@764)), aenc(Y(skB(), pk(sk@764)), pk(sk@764))), skB()), #t@766);
};
Rule deleted: 
@rule{
    @premise know(*aenc(Y(sk@550, pk(skB())), pk(skB())), #t4@558);
    @premise new(*[Nb@549], newB(), tuple4(sk@550, skB(), #tb@548, x1@551));
    @premise know(*X(sk@550, pk(skB())), #t3@557);
    @premise know(*pk(skB()), #t2@556);
    @premise know(*x1@551, #t1@555);
    @premise know(*sk@550, #t2@559);
    @conclusion know(*sign(tuple6(#tb@548, [Nb@549], pk(sk@550), x1@551, X(skB(), pk(sk@550)), aenc(Y(skB(), pk(sk@550)), pk(sk@550))), skB()), #t@552);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@613], newB(), tuple4(sk@614, skB(), #tb@612, x1@615));
    @premise know(*Y(sk@614, pk(skB())), #t1@617);
    @premise know(*X(sk@614, pk(skB())), #t3@618);
    @premise know(*pk(skB()), #t2@619);
    @premise know(*x1@615, #t1@620);
    @premise know(*sk@614, #t2@621);
    @conclusion know(*sign(tuple6(#tb@612, [Nb@613], pk(sk@614), x1@615, X(skB(), pk(sk@614)), aenc(Y(skB(), pk(sk@614)), pk(sk@614))), skB()), #t@616);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@623], newB(), tuple4(skA(), skB(), #tb@622, x1@624));
    @premise new(*[Na@626], newA(), tuple3(skA(), skB(), #ta@627));
    @premise know(*X(skA(), pk(skB())), #t3@628);
    @premise know(*pk(skB()), #t2@629);
    @premise know(*skA(), #t2@631);
    @premise know(*x1@624, #t1@630);
    @conclusion know(*sign(tuple6(#tb@622, [Nb@623], pk(skA()), x1@624, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@625);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule in cache: 14
Rule staged: 74
Rule before check and clean: 
@rule{
    @premise know(*sk@937, #t1@940);
    @premise know(*pk(skB()), #t2@941);
    @premise new(*[Nb@936], newB(), tuple4(sk@937, skB(), #tb@935, x1@938));
    @premise know(*pk(skB()), #t2@942);
    @premise know(*sk@937, #t1@943);
    @premise know(*x1@938, #t1@944);
    @conclusion know(*sign(tuple6(#tb@935, [Nb@936], pk(sk@937), x1@938, X(skB(), pk(sk@937)), aenc(Y(skB(), pk(sk@937)), pk(sk@937))), skB()), #t@939);
    @constraint #t@232 - #t2@941 >= 0;
    @constraint -#t1@940 + #t@232 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@937, #t1@940);
    @premise know(*pk(skB()), #t2@941);
    @premise new(*[Nb@936], newB(), tuple4(sk@937, skB(), #tb@935, x1@938));
    @premise know(*x1@938, #t1@944);
    @conclusion know(*sign(tuple6(#tb@935, [Nb@936], pk(sk@937), x1@938, X(skB(), pk(sk@937)), aenc(Y(skB(), pk(sk@937)), pk(sk@937))), skB()), #t@939);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@542], newA(), tuple3(skA(), skR@540, #ta@543));
    @conclusion know(*X(skA(), pk(skR@540)), #t3@541);
    @constraint #t3@541 - #ta@543 >= 0;
};
Rule in cache: 15
Rule staged: 74
Rule before check and clean: 
@rule{
    @premise new(*[Na@949], newA(), tuple3(skA(), skB(), #ta@950));
    @premise new(*[Nb@946], newB(), tuple4(skA(), skB(), #tb@945, x1@947));
    @premise know(*pk(skB()), #t2@951);
    @premise know(*skA(), #t1@952);
    @premise know(*x1@947, #t1@953);
    @conclusion know(*sign(tuple6(#tb@945, [Nb@946], pk(skA()), x1@947, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@948);
    @constraint #t3@541 - #ta@950 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@946], newB(), tuple4(skA(), skB(), #tb@945, x1@947));
    @premise new(*[Na@949], newA(), tuple3(skA(), skB(), #ta@950));
    @premise know(*pk(skB()), #t2@951);
    @premise know(*skA(), #t1@952);
    @premise know(*x1@947, #t1@953);
    @conclusion know(*sign(tuple6(#tb@945, [Nb@946], pk(skA()), x1@947, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@948);
};

Stage rule: 
@rule{
    @premise new(*[Nb@774], newB(), tuple4(skA(), skB(), #tb@773, x1@775));
    @premise new(*[Na@777], newA(), tuple3(skA(), skB(), #ta@778));
    @premise know(*X(skA(), pk(skB())), #t3@780);
    @premise know(*pk(skB()), #t2@781);
    @premise know(*skB(), #t1@779);
    @premise know(*skA(), #t2@783);
    @premise know(*x1@775, #t1@782);
    @conclusion know(*sign(tuple6(#tb@773, [Nb@774], pk(skA()), x1@775, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@776);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@763], newB(), tuple4(sk@764, skB(), #tb@762, x1@765));
    @premise know(*X(sk@764, pk(skB())), #t3@769);
    @premise know(*pk(skB()), #t2@768);
    @premise know(*sk@764, #t1@767);
    @premise know(*x1@765, #t1@771);
    @conclusion know(*sign(tuple6(#tb@762, [Nb@763], pk(sk@764), x1@765, X(skB(), pk(sk@764)), aenc(Y(skB(), pk(sk@764)), pk(sk@764))), skB()), #t@766);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@785], newB(), tuple4(skA(), skB(), #tb@784, x1@786));
    @premise new(*[Na@790], newA(), tuple3(skA(), skB(), #ta@791));
    @premise know(*pk(skB()), #t2@789);
    @premise know(*skA(), #t1@788);
    @premise know(*x1@786, #t1@794);
    @conclusion know(*sign(tuple6(#tb@784, [Nb@785], pk(skA()), x1@786, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@787);
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 14
Rule staged: 75
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@958);
    @premise new(*[Nb@955], newB(), tuple4(skA(), skB(), #tb@954, x1@956));
    @premise new(*[Na@959], newA(), tuple3(skA(), skB(), #ta@960));
    @premise know(*skA(), #t1@961);
    @premise know(*x1@956, #t1@962);
    @conclusion know(*sign(tuple6(#tb@954, [Nb@955], pk(skA()), x1@956, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@957);
    @constraint -#t1@958 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@955], newB(), tuple4(skA(), skB(), #tb@954, x1@956));
    @premise new(*[Na@959], newA(), tuple3(skA(), skB(), #ta@960));
    @premise know(*skB(), #t1@958);
    @premise know(*skA(), #t1@961);
    @premise know(*x1@956, #t1@962);
    @conclusion know(*sign(tuple6(#tb@954, [Nb@955], pk(skA()), x1@956, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@957);
};

Compose by at 2 : 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};
Rule in cache: 15
Rule staged: 75
Rule before check and clean: 
@rule{
    @premise new(*[Nb@964], newB(), tuple4(skA(), skB(), #tb@963, x1@965));
    @premise new(*[Na@967], newA(), tuple3(skA(), skB(), #ta@968));
    @premise know(*skA(), #t1@969);
    @premise know(*x1@965, #t1@970);
    @conclusion know(*sign(tuple6(#tb@963, [Nb@964], pk(skA()), x1@965, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@966);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@964], newB(), tuple4(skA(), skB(), #tb@963, x1@965));
    @premise new(*[Na@967], newA(), tuple3(skA(), skB(), #ta@968));
    @premise know(*skA(), #t1@969);
    @premise know(*x1@965, #t1@970);
    @conclusion know(*sign(tuple6(#tb@963, [Nb@964], pk(skA()), x1@965, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@966);
};

Compose by at 2 : 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*pk(skR@536), #t2@537);
    @constraint #t2@537 - #ta@539 >= 0;
};
Rule in cache: 16
Rule staged: 75
Rule before check and clean: 
@rule{
    @premise new(*[Na@975], newA(), tuple3(skA(), skB(), #ta@976));
    @premise new(*[Nb@972], newB(), tuple4(skA(), skB(), #tb@971, x1@973));
    @premise new(*[Na@977], newA(), tuple3(skA(), skB(), #ta@978));
    @premise know(*skA(), #t1@979);
    @premise know(*x1@973, #t1@980);
    @conclusion know(*sign(tuple6(#tb@971, [Nb@972], pk(skA()), x1@973, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@974);
    @constraint #t2@537 - #ta@976 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@972], newB(), tuple4(skA(), skB(), #tb@971, x1@973));
    @premise new(*[Na@975], newA(), tuple3(skA(), skB(), #ta@976));
    @premise new(*[Na@977], newA(), tuple3(skA(), skB(), #ta@978));
    @premise know(*skA(), #t1@979);
    @premise know(*x1@973, #t1@980);
    @conclusion know(*sign(tuple6(#tb@971, [Nb@972], pk(skA()), x1@973, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@974);
};

Stage rule: 
@rule{
    @premise new(*[Nb@796], newB(), tuple4(skA(), skB(), #tb@795, x1@797));
    @premise new(*[Na@799], newA(), tuple3(skA(), skB(), #ta@800));
    @premise new(*[Na@801], newA(), tuple3(skA(), skB(), #ta@802));
    @premise know(*pk(skB()), #t2@803);
    @premise know(*skA(), #t2@804);
    @premise know(*x1@797, #t1@805);
    @conclusion know(*sign(tuple6(#tb@795, [Nb@796], pk(skA()), x1@797, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@798);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@785], newB(), tuple4(skA(), skB(), #tb@784, x1@786));
    @premise new(*[Na@790], newA(), tuple3(skA(), skB(), #ta@791));
    @premise know(*pk(skB()), #t2@789);
    @premise know(*skA(), #t1@788);
    @premise know(*x1@786, #t1@794);
    @conclusion know(*sign(tuple6(#tb@784, [Nb@785], pk(skA()), x1@786, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@787);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@809], newA(), tuple3(skA(), skB(), #ta@810));
    @premise new(*[Nb@807], newB(), tuple4(skA(), skB(), #tb@811, [Na@809]));
    @premise know(*skA(), #t2@812);
    @conclusion accept(skA(), skB(), #tb@811, [Nb@807], [Na@809]);
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Na@821], newA(), tuple3(skA(), skB(), #ta@822));
    @premise new(*[Nb@823], newB(), tuple4(skA(), skB(), #tb@824, [Na@821]));
    @premise know(*skA(), #t1@825);
    @conclusion know(*Y(skB(), pk(skA())), #t@820);
    @constraint -#t1@825 + #t@820 >= 0;
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Nb@830], newB(), tuple4(skA(), skB(), #tb@831, [Na@828]));
    @premise new(*[Na@828], newA(), tuple3(skA(), skB(), #ta@829));
    @premise new(*[Na@832], newA(), tuple3(skA(), skB(), #ta@833));
    @premise know(*X(skB(), pk(skA())), #t4@834);
    @premise init(*skA(), *skB(), *#ta@833, *x1@826, *[Na@832]);
    @premise know(*pk(skA()), #t2@835);
    @premise know(*skB(), #t2@837);
    @premise know(*[Na@832], #t3@836);
    @premise know(*x1@826, #t1@838);
    @conclusion know(*sign(x1@826, skA()), #t@827);
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule in cache: 13
Rule staged: 78
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@983);
    @premise know(*pk(skA()), #t2@984);
    @premise new(*[Nb@985], newB(), tuple4(skA(), skB(), #tb@986, [Na@987]));
    @premise new(*[Na@987], newA(), tuple3(skA(), skB(), #ta@988));
    @premise new(*[Na@989], newA(), tuple3(skA(), skB(), #ta@990));
    @premise init(*skA(), *skB(), *#ta@990, *x1@981, *[Na@989]);
    @premise know(*pk(skA()), #t2@991);
    @premise know(*skB(), #t2@992);
    @premise know(*[Na@989], #t3@993);
    @premise know(*x1@981, #t1@994);
    @conclusion know(*sign(x1@981, skA()), #t@982);
    @constraint #t@232 - #t2@984 >= 0;
    @constraint -#t1@983 + #t@232 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@985], newB(), tuple4(skA(), skB(), #tb@986, [Na@987]));
    @premise new(*[Na@989], newA(), tuple3(skA(), skB(), #ta@990));
    @premise new(*[Na@987], newA(), tuple3(skA(), skB(), #ta@988));
    @premise init(*skA(), *skB(), *#ta@990, *x1@981, *[Na@989]);
    @premise know(*pk(skA()), #t2@984);
    @premise know(*skB(), #t1@983);
    @premise know(*[Na@989], #t3@993);
    @premise know(*x1@981, #t1@994);
    @conclusion know(*sign(x1@981, skA()), #t@982);
};

Compose by at 3 : 
@rule{
    @premise new(*[Na@653], newA(), tuple3(skA(), skB(), #ta@654));
    @premise new(*[Nb@655], newB(), tuple4(skA(), skB(), #tb@656, [Na@653]));
    @conclusion know(*X(skB(), pk(skA())), #t4@652);
};
Rule in cache: 14
Rule staged: 78
Rule before check and clean: 
@rule{
    @premise new(*[Na@997], newA(), tuple3(skA(), skB(), #ta@998));
    @premise new(*[Nb@999], newB(), tuple4(skA(), skB(), #tb@1000, [Na@997]));
    @premise new(*[Nb@1001], newB(), tuple4(skA(), skB(), #tb@1002, [Na@1003]));
    @premise new(*[Na@1003], newA(), tuple3(skA(), skB(), #ta@1004));
    @premise new(*[Na@1005], newA(), tuple3(skA(), skB(), #ta@1006));
    @premise init(*skA(), *skB(), *#ta@1006, *x1@995, *[Na@1005]);
    @premise know(*pk(skA()), #t2@1007);
    @premise know(*skB(), #t2@1008);
    @premise know(*[Na@1005], #t3@1009);
    @premise know(*x1@995, #t1@1010);
    @conclusion know(*sign(x1@995, skA()), #t@996);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@999], newB(), tuple4(skA(), skB(), #tb@1000, [Na@997]));
    @premise new(*[Nb@1001], newB(), tuple4(skA(), skB(), #tb@1002, [Na@1003]));
    @premise new(*[Na@997], newA(), tuple3(skA(), skB(), #ta@998));
    @premise new(*[Na@1003], newA(), tuple3(skA(), skB(), #ta@1004));
    @premise new(*[Na@1005], newA(), tuple3(skA(), skB(), #ta@1006));
    @premise init(*skA(), *skB(), *#ta@1006, *x1@995, *[Na@1005]);
    @premise know(*pk(skA()), #t2@1007);
    @premise know(*skB(), #t2@1008);
    @premise know(*[Na@1005], #t3@1009);
    @premise know(*x1@995, #t1@1010);
    @conclusion know(*sign(x1@995, skA()), #t@996);
};

Stage rule: 
@rule{
    @premise new(*[Na@844], newA(), tuple3(skA(), sk@841, #ta@845));
    @premise know(*X(sk@841, pk(skA())), #t4@846);
    @premise know(*pk(skA()), #t2@843);
    @premise init(*skA(), *sk@841, *#ta@845, *x1@839, *[Na@844]);
    @premise know(*skA(), #t1@848);
    @premise know(*[Na@844], #t3@849);
    @premise know(*sk@841, #t1@842);
    @premise know(*x1@839, #t1@851);
    @conclusion know(*sign(x1@839, skA()), #t@840);
};
Rule deleted: 
@rule{
    @premise new(*[Na@698], newA(), tuple3(skA(), skA(), #ta@699));
    @premise new(*[Na@700], newA(), tuple3(skA(), skA(), #ta@701));
    @premise know(*X(skA(), pk(skA())), #t4@702);
    @premise init(*skA(), *skA(), *#ta@701, *x1@696, *[Na@700]);
    @premise know(*pk(skA()), #t2@703);
    @premise know(*skA(), #t2@705);
    @premise know(*[Na@700], #t3@704);
    @premise know(*x1@696, #t1@706);
    @conclusion know(*sign(x1@696, skA()), #t@697);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule in cache: 14
Rule staged: 79
Rule before check and clean: 
@rule{
    @premise know(*sk@1013, #t1@1014);
    @premise know(*pk(skA()), #t2@1015);
    @premise new(*[Na@1016], newA(), tuple3(skA(), sk@1013, #ta@1017));
    @premise know(*pk(skA()), #t2@1018);
    @premise init(*skA(), *sk@1013, *#ta@1017, *x1@1011, *[Na@1016]);
    @premise know(*skA(), #t1@1019);
    @premise know(*[Na@1016], #t3@1020);
    @premise know(*sk@1013, #t1@1021);
    @premise know(*x1@1011, #t1@1022);
    @conclusion know(*sign(x1@1011, skA()), #t@1012);
    @constraint #t@232 - #t2@1015 >= 0;
    @constraint -#t1@1014 + #t@232 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1016], newA(), tuple3(skA(), sk@1013, #ta@1017));
    @premise know(*pk(skA()), #t2@1015);
    @premise init(*skA(), *sk@1013, *#ta@1017, *x1@1011, *[Na@1016]);
    @premise know(*skA(), #t1@1019);
    @premise know(*[Na@1016], #t3@1020);
    @premise know(*sk@1013, #t1@1014);
    @premise know(*x1@1011, #t1@1022);
    @conclusion know(*sign(x1@1011, skA()), #t@1012);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@542], newA(), tuple3(skA(), skR@540, #ta@543));
    @conclusion know(*X(skA(), pk(skR@540)), #t3@541);
    @constraint #t3@541 - #ta@543 >= 0;
};
Rule in cache: 15
Rule staged: 79
Rule before check and clean: 
@rule{
    @premise new(*[Na@1025], newA(), tuple3(skA(), skA(), #ta@1026));
    @premise new(*[Na@1027], newA(), tuple3(skA(), skA(), #ta@1028));
    @premise know(*pk(skA()), #t2@1029);
    @premise init(*skA(), *skA(), *#ta@1028, *x1@1023, *[Na@1027]);
    @premise know(*skA(), #t1@1030);
    @premise know(*[Na@1027], #t3@1031);
    @premise know(*skA(), #t1@1032);
    @premise know(*x1@1023, #t1@1033);
    @conclusion know(*sign(x1@1023, skA()), #t@1024);
    @constraint #t3@541 - #ta@1026 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1025], newA(), tuple3(skA(), skA(), #ta@1026));
    @premise new(*[Na@1027], newA(), tuple3(skA(), skA(), #ta@1028));
    @premise init(*skA(), *skA(), *#ta@1028, *x1@1023, *[Na@1027]);
    @premise know(*pk(skA()), #t2@1029);
    @premise know(*skA(), #t1@1030);
    @premise know(*[Na@1027], #t3@1031);
    @premise know(*x1@1023, #t1@1033);
    @conclusion know(*sign(x1@1023, skA()), #t@1024);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@653], newA(), tuple3(skA(), skB(), #ta@654));
    @premise new(*[Nb@655], newB(), tuple4(skA(), skB(), #tb@656, [Na@653]));
    @conclusion know(*X(skB(), pk(skA())), #t4@652);
};
Rule in cache: 16
Rule staged: 79
Rule before check and clean: 
@rule{
    @premise new(*[Na@1036], newA(), tuple3(skA(), skB(), #ta@1037));
    @premise new(*[Nb@1038], newB(), tuple4(skA(), skB(), #tb@1039, [Na@1036]));
    @premise new(*[Na@1040], newA(), tuple3(skA(), skB(), #ta@1041));
    @premise know(*pk(skA()), #t2@1042);
    @premise init(*skA(), *skB(), *#ta@1041, *x1@1034, *[Na@1040]);
    @premise know(*skA(), #t1@1043);
    @premise know(*[Na@1040], #t3@1044);
    @premise know(*skB(), #t1@1045);
    @premise know(*x1@1034, #t1@1046);
    @conclusion know(*sign(x1@1034, skA()), #t@1035);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1038], newB(), tuple4(skA(), skB(), #tb@1039, [Na@1036]));
    @premise new(*[Na@1036], newA(), tuple3(skA(), skB(), #ta@1037));
    @premise new(*[Na@1040], newA(), tuple3(skA(), skB(), #ta@1041));
    @premise init(*skA(), *skB(), *#ta@1041, *x1@1034, *[Na@1040]);
    @premise know(*pk(skA()), #t2@1042);
    @premise know(*skA(), #t1@1043);
    @premise know(*skB(), #t1@1045);
    @premise know(*[Na@1040], #t3@1044);
    @premise know(*x1@1034, #t1@1046);
    @conclusion know(*sign(x1@1034, skA()), #t@1035);
};

Stage rule: 
@rule{
    @premise new(*[Na@854], newA(), tuple3(skA(), skA(), #ta@855));
    @premise new(*[Na@857], newA(), tuple3(skA(), skA(), #ta@858));
    @premise know(*X(skA(), pk(skA())), #t4@859);
    @premise init(*skA(), *skA(), *#ta@858, *x1@852, *[Na@857]);
    @premise know(*pk(skA()), #t2@860);
    @premise know(*skA(), #t1@856);
    @premise know(*[Na@857], #t3@862);
    @premise know(*x1@852, #t1@864);
    @conclusion know(*sign(x1@852, skA()), #t@853);
};
Rule implied by: 
@rule{
    @premise new(*[Na@844], newA(), tuple3(skA(), sk@841, #ta@845));
    @premise know(*X(sk@841, pk(skA())), #t4@846);
    @premise know(*pk(skA()), #t2@843);
    @premise init(*skA(), *sk@841, *#ta@845, *x1@839, *[Na@844]);
    @premise know(*skA(), #t1@848);
    @premise know(*[Na@844], #t3@849);
    @premise know(*sk@841, #t1@842);
    @premise know(*x1@839, #t1@851);
    @conclusion know(*sign(x1@839, skA()), #t@840);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@870], newA(), tuple3(skA(), sk@867, #ta@871));
    @premise know(*X(sk@867, pk(skA())), #t4@872);
    @premise know(*pk(skA()), #t2@869);
    @premise init(*skA(), *sk@867, *#ta@871, *x1@865, *[Na@870]);
    @premise know(*[Na@870], #t3@874);
    @premise know(*sk@867, #t1@868);
    @premise know(*x1@865, #t1@876);
    @conclusion know(*sign(x1@865, skA()), #t@866);
};
Rule deleted: 
@rule{
    @premise know(*aenc(Y(sk@579, pk(skA())), pk(skA())), #t5@581);
    @premise new(*[Na@577], newA(), tuple3(skA(), sk@579, #ta@583));
    @premise know(*X(sk@579, pk(skA())), #t4@580);
    @premise know(*pk(skA()), #t2@576);
    @premise init(*skA(), *sk@579, *#ta@583, *x1@571, *[Na@577]);
    @premise know(*[Na@577], #t3@578);
    @premise know(*sk@579, #t2@582);
    @premise know(*x1@571, #t1@575);
    @conclusion know(*sign(x1@571, skA()), #t@572);
};
Rule deleted: 
@rule{
    @premise new(*[Na@689], newA(), tuple3(skA(), sk@687, #ta@690));
    @premise know(*Y(sk@687, pk(skA())), #t1@688);
    @premise know(*X(sk@687, pk(skA())), #t4@691);
    @premise know(*pk(skA()), #t2@692);
    @premise init(*skA(), *sk@687, *#ta@690, *x1@685, *[Na@689]);
    @premise know(*[Na@689], #t3@693);
    @premise know(*sk@687, #t2@694);
    @premise know(*x1@685, #t1@695);
    @conclusion know(*sign(x1@685, skA()), #t@686);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@830], newB(), tuple4(skA(), skB(), #tb@831, [Na@828]));
    @premise new(*[Na@828], newA(), tuple3(skA(), skB(), #ta@829));
    @premise new(*[Na@832], newA(), tuple3(skA(), skB(), #ta@833));
    @premise know(*X(skB(), pk(skA())), #t4@834);
    @premise init(*skA(), *skB(), *#ta@833, *x1@826, *[Na@832]);
    @premise know(*pk(skA()), #t2@835);
    @premise know(*skB(), #t2@837);
    @premise know(*[Na@832], #t3@836);
    @premise know(*x1@826, #t1@838);
    @conclusion know(*sign(x1@826, skA()), #t@827);
};
Rule deleted: 
@rule{
    @premise new(*[Na@844], newA(), tuple3(skA(), sk@841, #ta@845));
    @premise know(*X(sk@841, pk(skA())), #t4@846);
    @premise know(*pk(skA()), #t2@843);
    @premise init(*skA(), *sk@841, *#ta@845, *x1@839, *[Na@844]);
    @premise know(*skA(), #t1@848);
    @premise know(*[Na@844], #t3@849);
    @premise know(*sk@841, #t1@842);
    @premise know(*x1@839, #t1@851);
    @conclusion know(*sign(x1@839, skA()), #t@840);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule in cache: 15
Rule staged: 80
Rule before check and clean: 
@rule{
    @premise know(*sk@1049, #t1@1050);
    @premise know(*pk(skA()), #t2@1051);
    @premise new(*[Na@1052], newA(), tuple3(skA(), sk@1049, #ta@1053));
    @premise know(*pk(skA()), #t2@1054);
    @premise init(*skA(), *sk@1049, *#ta@1053, *x1@1047, *[Na@1052]);
    @premise know(*[Na@1052], #t3@1055);
    @premise know(*sk@1049, #t1@1056);
    @premise know(*x1@1047, #t1@1057);
    @conclusion know(*sign(x1@1047, skA()), #t@1048);
    @constraint #t@232 - #t2@1051 >= 0;
    @constraint -#t1@1050 + #t@232 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1052], newA(), tuple3(skA(), sk@1049, #ta@1053));
    @premise know(*pk(skA()), #t2@1051);
    @premise init(*skA(), *sk@1049, *#ta@1053, *x1@1047, *[Na@1052]);
    @premise know(*[Na@1052], #t3@1055);
    @premise know(*sk@1049, #t1@1050);
    @premise know(*x1@1047, #t1@1057);
    @conclusion know(*sign(x1@1047, skA()), #t@1048);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@542], newA(), tuple3(skA(), skR@540, #ta@543));
    @conclusion know(*X(skA(), pk(skR@540)), #t3@541);
    @constraint #t3@541 - #ta@543 >= 0;
};
Rule in cache: 16
Rule staged: 80
Rule before check and clean: 
@rule{
    @premise new(*[Na@1060], newA(), tuple3(skA(), skA(), #ta@1061));
    @premise new(*[Na@1062], newA(), tuple3(skA(), skA(), #ta@1063));
    @premise know(*pk(skA()), #t2@1064);
    @premise init(*skA(), *skA(), *#ta@1063, *x1@1058, *[Na@1062]);
    @premise know(*[Na@1062], #t3@1065);
    @premise know(*skA(), #t1@1066);
    @premise know(*x1@1058, #t1@1067);
    @conclusion know(*sign(x1@1058, skA()), #t@1059);
    @constraint #t3@541 - #ta@1061 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1060], newA(), tuple3(skA(), skA(), #ta@1061));
    @premise new(*[Na@1062], newA(), tuple3(skA(), skA(), #ta@1063));
    @premise init(*skA(), *skA(), *#ta@1063, *x1@1058, *[Na@1062]);
    @premise know(*pk(skA()), #t2@1064);
    @premise know(*skA(), #t1@1066);
    @premise know(*[Na@1062], #t3@1065);
    @premise know(*x1@1058, #t1@1067);
    @conclusion know(*sign(x1@1058, skA()), #t@1059);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@653], newA(), tuple3(skA(), skB(), #ta@654));
    @premise new(*[Nb@655], newB(), tuple4(skA(), skB(), #tb@656, [Na@653]));
    @conclusion know(*X(skB(), pk(skA())), #t4@652);
};
Rule in cache: 17
Rule staged: 80
Rule before check and clean: 
@rule{
    @premise new(*[Na@1070], newA(), tuple3(skA(), skB(), #ta@1071));
    @premise new(*[Nb@1072], newB(), tuple4(skA(), skB(), #tb@1073, [Na@1070]));
    @premise new(*[Na@1074], newA(), tuple3(skA(), skB(), #ta@1075));
    @premise know(*pk(skA()), #t2@1076);
    @premise init(*skA(), *skB(), *#ta@1075, *x1@1068, *[Na@1074]);
    @premise know(*[Na@1074], #t3@1077);
    @premise know(*skB(), #t1@1078);
    @premise know(*x1@1068, #t1@1079);
    @conclusion know(*sign(x1@1068, skA()), #t@1069);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1072], newB(), tuple4(skA(), skB(), #tb@1073, [Na@1070]));
    @premise new(*[Na@1070], newA(), tuple3(skA(), skB(), #ta@1071));
    @premise new(*[Na@1074], newA(), tuple3(skA(), skB(), #ta@1075));
    @premise init(*skA(), *skB(), *#ta@1075, *x1@1068, *[Na@1074]);
    @premise know(*pk(skA()), #t2@1076);
    @premise know(*skB(), #t1@1078);
    @premise know(*[Na@1074], #t3@1077);
    @premise know(*x1@1068, #t1@1079);
    @conclusion know(*sign(x1@1068, skA()), #t@1069);
};

Stage rule: 
@rule{
    @premise new(*[Na@879], newA(), tuple3(skA(), skA(), #ta@880));
    @premise new(*[Na@882], newA(), tuple3(skA(), skA(), #ta@883));
    @premise know(*X(skA(), pk(skA())), #t4@884);
    @premise init(*skA(), *skA(), *#ta@883, *x1@877, *[Na@882]);
    @premise know(*pk(skA()), #t2@885);
    @premise know(*skA(), #t1@881);
    @premise know(*[Na@882], #t3@886);
    @premise know(*x1@877, #t1@888);
    @conclusion know(*sign(x1@877, skA()), #t@878);
};
Rule implied by: 
@rule{
    @premise new(*[Na@870], newA(), tuple3(skA(), sk@867, #ta@871));
    @premise know(*X(sk@867, pk(skA())), #t4@872);
    @premise know(*pk(skA()), #t2@869);
    @premise init(*skA(), *sk@867, *#ta@871, *x1@865, *[Na@870]);
    @premise know(*[Na@870], #t3@874);
    @premise know(*sk@867, #t1@868);
    @premise know(*x1@865, #t1@876);
    @conclusion know(*sign(x1@865, skA()), #t@866);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@895], newA(), tuple3(skA(), skA(), #ta@896));
    @premise new(*[Na@893], newA(), tuple3(skA(), skA(), #ta@894));
    @premise init(*skA(), *skA(), *#ta@896, *x1@889, *[Na@895]);
    @premise know(*pk(skA()), #t2@892);
    @premise know(*skA(), #t1@891);
    @premise know(*[Na@895], #t3@899);
    @premise know(*x1@889, #t1@900);
    @conclusion know(*sign(x1@889, skA()), #t@890);
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 16
Rule staged: 81
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1082);
    @premise new(*[Na@1083], newA(), tuple3(skA(), skA(), #ta@1084));
    @premise new(*[Na@1085], newA(), tuple3(skA(), skA(), #ta@1086));
    @premise init(*skA(), *skA(), *#ta@1084, *x1@1080, *[Na@1083]);
    @premise know(*skA(), #t1@1087);
    @premise know(*[Na@1083], #t3@1088);
    @premise know(*x1@1080, #t1@1089);
    @conclusion know(*sign(x1@1080, skA()), #t@1081);
    @constraint -#t1@1082 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1083], newA(), tuple3(skA(), skA(), #ta@1084));
    @premise new(*[Na@1085], newA(), tuple3(skA(), skA(), #ta@1086));
    @premise init(*skA(), *skA(), *#ta@1084, *x1@1080, *[Na@1083]);
    @premise know(*skA(), #t1@1082);
    @premise know(*[Na@1083], #t3@1088);
    @premise know(*x1@1080, #t1@1089);
    @conclusion know(*sign(x1@1080, skA()), #t@1081);
};

Compose by at 3 : 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};
Rule in cache: 17
Rule staged: 81
Rule before check and clean: 
@rule{
    @premise new(*[Na@1092], newA(), tuple3(skA(), skA(), #ta@1093));
    @premise new(*[Na@1094], newA(), tuple3(skA(), skA(), #ta@1095));
    @premise init(*skA(), *skA(), *#ta@1093, *x1@1090, *[Na@1092]);
    @premise know(*skA(), #t1@1096);
    @premise know(*[Na@1092], #t3@1097);
    @premise know(*x1@1090, #t1@1098);
    @conclusion know(*sign(x1@1090, skA()), #t@1091);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1092], newA(), tuple3(skA(), skA(), #ta@1093));
    @premise new(*[Na@1094], newA(), tuple3(skA(), skA(), #ta@1095));
    @premise init(*skA(), *skA(), *#ta@1093, *x1@1090, *[Na@1092]);
    @premise know(*skA(), #t1@1096);
    @premise know(*[Na@1092], #t3@1097);
    @premise know(*x1@1090, #t1@1098);
    @conclusion know(*sign(x1@1090, skA()), #t@1091);
};

Compose by at 3 : 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*pk(skR@536), #t2@537);
    @constraint #t2@537 - #ta@539 >= 0;
};
Rule in cache: 18
Rule staged: 81
Rule before check and clean: 
@rule{
    @premise new(*[Na@1101], newA(), tuple3(skA(), skA(), #ta@1102));
    @premise new(*[Na@1103], newA(), tuple3(skA(), skA(), #ta@1104));
    @premise new(*[Na@1105], newA(), tuple3(skA(), skA(), #ta@1106));
    @premise init(*skA(), *skA(), *#ta@1104, *x1@1099, *[Na@1103]);
    @premise know(*skA(), #t1@1107);
    @premise know(*[Na@1103], #t3@1108);
    @premise know(*x1@1099, #t1@1109);
    @conclusion know(*sign(x1@1099, skA()), #t@1100);
    @constraint #t2@537 - #ta@1102 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1101], newA(), tuple3(skA(), skA(), #ta@1102));
    @premise new(*[Na@1103], newA(), tuple3(skA(), skA(), #ta@1104));
    @premise new(*[Na@1105], newA(), tuple3(skA(), skA(), #ta@1106));
    @premise init(*skA(), *skA(), *#ta@1104, *x1@1099, *[Na@1103]);
    @premise know(*skA(), #t1@1107);
    @premise know(*[Na@1103], #t3@1108);
    @premise know(*x1@1099, #t1@1109);
    @conclusion know(*sign(x1@1099, skA()), #t@1100);
};

Stage rule: 
@rule{
    @premise new(*[Na@903], newA(), tuple3(skA(), skA(), #ta@904));
    @premise new(*[Na@905], newA(), tuple3(skA(), skA(), #ta@906));
    @premise new(*[Na@907], newA(), tuple3(skA(), skA(), #ta@908));
    @premise init(*skA(), *skA(), *#ta@908, *x1@901, *[Na@907]);
    @premise know(*pk(skA()), #t2@909);
    @premise know(*skA(), #t2@910);
    @premise know(*[Na@907], #t3@911);
    @premise know(*x1@901, #t1@912);
    @conclusion know(*sign(x1@901, skA()), #t@902);
};
Rule implied by: 
@rule{
    @premise new(*[Na@895], newA(), tuple3(skA(), skA(), #ta@896));
    @premise new(*[Na@893], newA(), tuple3(skA(), skA(), #ta@894));
    @premise init(*skA(), *skA(), *#ta@896, *x1@889, *[Na@895]);
    @premise know(*pk(skA()), #t2@892);
    @premise know(*skA(), #t1@891);
    @premise know(*[Na@895], #t3@899);
    @premise know(*x1@889, #t1@900);
    @conclusion know(*sign(x1@889, skA()), #t@890);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@914], newB(), tuple4(sk@915, skB(), #tb@913, x1@916));
    @premise know(*pk(skB()), #t2@919);
    @premise know(*skB(), #t1@921);
    @premise know(*sk@915, #t1@918);
    @premise know(*x1@916, #t1@923);
    @conclusion know(*sign(tuple6(#tb@913, [Nb@914], pk(sk@915), x1@916, X(skB(), pk(sk@915)), aenc(Y(skB(), pk(sk@915)), pk(sk@915))), skB()), #t@917);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@740], newB(), tuple4(sk@741, skB(), #tb@739, x1@742));
    @premise know(*Y(sk@741, pk(skB())), #t1@746);
    @premise know(*pk(skB()), #t2@745);
    @premise know(*skB(), #t1@748);
    @premise know(*sk@741, #t1@744);
    @premise know(*x1@742, #t1@749);
    @conclusion know(*sign(tuple6(#tb@739, [Nb@740], pk(sk@741), x1@742, X(skB(), pk(sk@741)), aenc(Y(skB(), pk(sk@741)), pk(sk@741))), skB()), #t@743);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 17
Rule staged: 82
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@1115);
    @premise new(*[Nb@1111], newB(), tuple4(sk@1112, skB(), #tb@1110, x1@1113));
    @premise know(*skB(), #t1@1116);
    @premise know(*sk@1112, #t1@1117);
    @premise know(*x1@1113, #t1@1118);
    @conclusion know(*sign(tuple6(#tb@1110, [Nb@1111], pk(sk@1112), x1@1113, X(skB(), pk(sk@1112)), aenc(Y(skB(), pk(sk@1112)), pk(sk@1112))), skB()), #t@1114);
    @constraint -#t1@1115 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*skB(), #t1@1115);
    @premise new(*[Nb@1111], newB(), tuple4(sk@1112, skB(), #tb@1110, x1@1113));
    @premise know(*sk@1112, #t1@1117);
    @premise know(*x1@1113, #t1@1118);
    @conclusion know(*sign(tuple6(#tb@1110, [Nb@1111], pk(sk@1112), x1@1113, X(skB(), pk(sk@1112)), aenc(Y(skB(), pk(sk@1112)), pk(sk@1112))), skB()), #t@1114);
};

Compose by at 1 : 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};
Rule in cache: 18
Rule staged: 82
Rule before check and clean: 
@rule{
    @premise new(*[Nb@1120], newB(), tuple4(sk@1121, skB(), #tb@1119, x1@1122));
    @premise know(*skB(), #t1@1124);
    @premise know(*sk@1121, #t1@1125);
    @premise know(*x1@1122, #t1@1126);
    @conclusion know(*sign(tuple6(#tb@1119, [Nb@1120], pk(sk@1121), x1@1122, X(skB(), pk(sk@1121)), aenc(Y(skB(), pk(sk@1121)), pk(sk@1121))), skB()), #t@1123);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1120], newB(), tuple4(sk@1121, skB(), #tb@1119, x1@1122));
    @premise know(*skB(), #t1@1124);
    @premise know(*sk@1121, #t1@1125);
    @premise know(*x1@1122, #t1@1126);
    @conclusion know(*sign(tuple6(#tb@1119, [Nb@1120], pk(sk@1121), x1@1122, X(skB(), pk(sk@1121)), aenc(Y(skB(), pk(sk@1121)), pk(sk@1121))), skB()), #t@1123);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*pk(skR@536), #t2@537);
    @constraint #t2@537 - #ta@539 >= 0;
};
Rule in cache: 19
Rule staged: 82
Rule before check and clean: 
@rule{
    @premise new(*[Na@1132], newA(), tuple3(skA(), skB(), #ta@1133));
    @premise new(*[Nb@1128], newB(), tuple4(sk@1129, skB(), #tb@1127, x1@1130));
    @premise know(*skB(), #t1@1134);
    @premise know(*sk@1129, #t1@1135);
    @premise know(*x1@1130, #t1@1136);
    @conclusion know(*sign(tuple6(#tb@1127, [Nb@1128], pk(sk@1129), x1@1130, X(skB(), pk(sk@1129)), aenc(Y(skB(), pk(sk@1129)), pk(sk@1129))), skB()), #t@1131);
    @constraint #t2@537 - #ta@1133 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1132], newA(), tuple3(skA(), skB(), #ta@1133));
    @premise new(*[Nb@1128], newB(), tuple4(sk@1129, skB(), #tb@1127, x1@1130));
    @premise know(*skB(), #t1@1134);
    @premise know(*sk@1129, #t1@1135);
    @premise know(*x1@1130, #t1@1136);
    @conclusion know(*sign(tuple6(#tb@1127, [Nb@1128], pk(sk@1129), x1@1130, X(skB(), pk(sk@1129)), aenc(Y(skB(), pk(sk@1129)), pk(sk@1129))), skB()), #t@1131);
};

Stage rule: 
@rule{
    @premise new(*[Nb@925], newB(), tuple4(skA(), skB(), #tb@924, x1@926));
    @premise new(*[Na@928], newA(), tuple3(skA(), skB(), #ta@929));
    @premise know(*pk(skB()), #t2@931);
    @premise know(*skB(), #t1@930);
    @premise know(*skA(), #t1@933);
    @premise know(*x1@926, #t1@934);
    @conclusion know(*sign(tuple6(#tb@924, [Nb@925], pk(skA()), x1@926, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@927);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@785], newB(), tuple4(skA(), skB(), #tb@784, x1@786));
    @premise new(*[Na@790], newA(), tuple3(skA(), skB(), #ta@791));
    @premise know(*pk(skB()), #t2@789);
    @premise know(*skA(), #t1@788);
    @premise know(*x1@786, #t1@794);
    @conclusion know(*sign(tuple6(#tb@784, [Nb@785], pk(skA()), x1@786, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@787);
};
Rule not added.

Stage rule: 
@rule{
    @premise know(*sk@937, #t1@940);
    @premise know(*pk(skB()), #t2@941);
    @premise new(*[Nb@936], newB(), tuple4(sk@937, skB(), #tb@935, x1@938));
    @premise know(*x1@938, #t1@944);
    @conclusion know(*sign(tuple6(#tb@935, [Nb@936], pk(sk@937), x1@938, X(skB(), pk(sk@937)), aenc(Y(skB(), pk(sk@937)), pk(sk@937))), skB()), #t@939);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@763], newB(), tuple4(sk@764, skB(), #tb@762, x1@765));
    @premise know(*X(sk@764, pk(skB())), #t3@769);
    @premise know(*pk(skB()), #t2@768);
    @premise know(*sk@764, #t1@767);
    @premise know(*x1@765, #t1@771);
    @conclusion know(*sign(tuple6(#tb@762, [Nb@763], pk(sk@764), x1@765, X(skB(), pk(sk@764)), aenc(Y(skB(), pk(sk@764)), pk(sk@764))), skB()), #t@766);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@785], newB(), tuple4(skA(), skB(), #tb@784, x1@786));
    @premise new(*[Na@790], newA(), tuple3(skA(), skB(), #ta@791));
    @premise know(*pk(skB()), #t2@789);
    @premise know(*skA(), #t1@788);
    @premise know(*x1@786, #t1@794);
    @conclusion know(*sign(tuple6(#tb@784, [Nb@785], pk(skA()), x1@786, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@787);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@914], newB(), tuple4(sk@915, skB(), #tb@913, x1@916));
    @premise know(*pk(skB()), #t2@919);
    @premise know(*skB(), #t1@921);
    @premise know(*sk@915, #t1@918);
    @premise know(*x1@916, #t1@923);
    @conclusion know(*sign(tuple6(#tb@913, [Nb@914], pk(sk@915), x1@916, X(skB(), pk(sk@915)), aenc(Y(skB(), pk(sk@915)), pk(sk@915))), skB()), #t@917);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 18
Rule staged: 83
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@1142);
    @premise know(*sk@1139, #t1@1143);
    @premise new(*[Nb@1138], newB(), tuple4(sk@1139, skB(), #tb@1137, x1@1140));
    @premise know(*x1@1140, #t1@1144);
    @conclusion know(*sign(tuple6(#tb@1137, [Nb@1138], pk(sk@1139), x1@1140, X(skB(), pk(sk@1139)), aenc(Y(skB(), pk(sk@1139)), pk(sk@1139))), skB()), #t@1141);
    @constraint -#t1@1142 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*skB(), #t1@1142);
    @premise know(*sk@1139, #t1@1143);
    @premise new(*[Nb@1138], newB(), tuple4(sk@1139, skB(), #tb@1137, x1@1140));
    @premise know(*x1@1140, #t1@1144);
    @conclusion know(*sign(tuple6(#tb@1137, [Nb@1138], pk(sk@1139), x1@1140, X(skB(), pk(sk@1139)), aenc(Y(skB(), pk(sk@1139)), pk(sk@1139))), skB()), #t@1141);
};

Compose by at 1 : 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};
Rule in cache: 19
Rule staged: 83
Rule before check and clean: 
@rule{
    @premise know(*sk@1147, #t1@1150);
    @premise new(*[Nb@1146], newB(), tuple4(sk@1147, skB(), #tb@1145, x1@1148));
    @premise know(*x1@1148, #t1@1151);
    @conclusion know(*sign(tuple6(#tb@1145, [Nb@1146], pk(sk@1147), x1@1148, X(skB(), pk(sk@1147)), aenc(Y(skB(), pk(sk@1147)), pk(sk@1147))), skB()), #t@1149);
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1147, #t1@1150);
    @premise new(*[Nb@1146], newB(), tuple4(sk@1147, skB(), #tb@1145, x1@1148));
    @premise know(*x1@1148, #t1@1151);
    @conclusion know(*sign(tuple6(#tb@1145, [Nb@1146], pk(sk@1147), x1@1148, X(skB(), pk(sk@1147)), aenc(Y(skB(), pk(sk@1147)), pk(sk@1147))), skB()), #t@1149);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*pk(skR@536), #t2@537);
    @constraint #t2@537 - #ta@539 >= 0;
};
Rule in cache: 20
Rule staged: 83
Rule before check and clean: 
@rule{
    @premise new(*[Na@1157], newA(), tuple3(skA(), skB(), #ta@1158));
    @premise know(*sk@1154, #t1@1159);
    @premise new(*[Nb@1153], newB(), tuple4(sk@1154, skB(), #tb@1152, x1@1155));
    @premise know(*x1@1155, #t1@1160);
    @conclusion know(*sign(tuple6(#tb@1152, [Nb@1153], pk(sk@1154), x1@1155, X(skB(), pk(sk@1154)), aenc(Y(skB(), pk(sk@1154)), pk(sk@1154))), skB()), #t@1156);
    @constraint #t2@537 - #ta@1158 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1157], newA(), tuple3(skA(), skB(), #ta@1158));
    @premise know(*sk@1154, #t1@1159);
    @premise new(*[Nb@1153], newB(), tuple4(sk@1154, skB(), #tb@1152, x1@1155));
    @premise know(*x1@1155, #t1@1160);
    @conclusion know(*sign(tuple6(#tb@1152, [Nb@1153], pk(sk@1154), x1@1155, X(skB(), pk(sk@1154)), aenc(Y(skB(), pk(sk@1154)), pk(sk@1154))), skB()), #t@1156);
};

Stage rule: 
@rule{
    @premise new(*[Nb@946], newB(), tuple4(skA(), skB(), #tb@945, x1@947));
    @premise new(*[Na@949], newA(), tuple3(skA(), skB(), #ta@950));
    @premise know(*pk(skB()), #t2@951);
    @premise know(*skA(), #t1@952);
    @premise know(*x1@947, #t1@953);
    @conclusion know(*sign(tuple6(#tb@945, [Nb@946], pk(skA()), x1@947, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@948);
};
Rule implied by: 
@rule{
    @premise know(*sk@937, #t1@940);
    @premise know(*pk(skB()), #t2@941);
    @premise new(*[Nb@936], newB(), tuple4(sk@937, skB(), #tb@935, x1@938));
    @premise know(*x1@938, #t1@944);
    @conclusion know(*sign(tuple6(#tb@935, [Nb@936], pk(sk@937), x1@938, X(skB(), pk(sk@937)), aenc(Y(skB(), pk(sk@937)), pk(sk@937))), skB()), #t@939);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@955], newB(), tuple4(skA(), skB(), #tb@954, x1@956));
    @premise new(*[Na@959], newA(), tuple3(skA(), skB(), #ta@960));
    @premise know(*skB(), #t1@958);
    @premise know(*skA(), #t1@961);
    @premise know(*x1@956, #t1@962);
    @conclusion know(*sign(tuple6(#tb@954, [Nb@955], pk(skA()), x1@956, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@957);
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Nb@964], newB(), tuple4(skA(), skB(), #tb@963, x1@965));
    @premise new(*[Na@967], newA(), tuple3(skA(), skB(), #ta@968));
    @premise know(*skA(), #t1@969);
    @premise know(*x1@965, #t1@970);
    @conclusion know(*sign(tuple6(#tb@963, [Nb@964], pk(skA()), x1@965, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@966);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@955], newB(), tuple4(skA(), skB(), #tb@954, x1@956));
    @premise new(*[Na@959], newA(), tuple3(skA(), skB(), #ta@960));
    @premise know(*skB(), #t1@958);
    @premise know(*skA(), #t1@961);
    @premise know(*x1@956, #t1@962);
    @conclusion know(*sign(tuple6(#tb@954, [Nb@955], pk(skA()), x1@956, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@957);
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Nb@972], newB(), tuple4(skA(), skB(), #tb@971, x1@973));
    @premise new(*[Na@975], newA(), tuple3(skA(), skB(), #ta@976));
    @premise new(*[Na@977], newA(), tuple3(skA(), skB(), #ta@978));
    @premise know(*skA(), #t1@979);
    @premise know(*x1@973, #t1@980);
    @conclusion know(*sign(tuple6(#tb@971, [Nb@972], pk(skA()), x1@973, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@974);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@964], newB(), tuple4(skA(), skB(), #tb@963, x1@965));
    @premise new(*[Na@967], newA(), tuple3(skA(), skB(), #ta@968));
    @premise know(*skA(), #t1@969);
    @premise know(*x1@965, #t1@970);
    @conclusion know(*sign(tuple6(#tb@963, [Nb@964], pk(skA()), x1@965, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@966);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@985], newB(), tuple4(skA(), skB(), #tb@986, [Na@987]));
    @premise new(*[Na@989], newA(), tuple3(skA(), skB(), #ta@990));
    @premise new(*[Na@987], newA(), tuple3(skA(), skB(), #ta@988));
    @premise init(*skA(), *skB(), *#ta@990, *x1@981, *[Na@989]);
    @premise know(*pk(skA()), #t2@984);
    @premise know(*skB(), #t1@983);
    @premise know(*[Na@989], #t3@993);
    @premise know(*x1@981, #t1@994);
    @conclusion know(*sign(x1@981, skA()), #t@982);
};
Rule added at 4.

Compose by at 4 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 16
Rule staged: 86
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1163);
    @premise new(*[Nb@1164], newB(), tuple4(skA(), skB(), #tb@1165, [Na@1166]));
    @premise new(*[Na@1167], newA(), tuple3(skA(), skB(), #ta@1168));
    @premise new(*[Na@1166], newA(), tuple3(skA(), skB(), #ta@1169));
    @premise init(*skA(), *skB(), *#ta@1168, *x1@1161, *[Na@1167]);
    @premise know(*skB(), #t1@1170);
    @premise know(*[Na@1167], #t3@1171);
    @premise know(*x1@1161, #t1@1172);
    @conclusion know(*sign(x1@1161, skA()), #t@1162);
    @constraint -#t1@1163 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1164], newB(), tuple4(skA(), skB(), #tb@1165, [Na@1166]));
    @premise new(*[Na@1167], newA(), tuple3(skA(), skB(), #ta@1168));
    @premise new(*[Na@1166], newA(), tuple3(skA(), skB(), #ta@1169));
    @premise init(*skA(), *skB(), *#ta@1168, *x1@1161, *[Na@1167]);
    @premise know(*skA(), #t1@1163);
    @premise know(*skB(), #t1@1170);
    @premise know(*[Na@1167], #t3@1171);
    @premise know(*x1@1161, #t1@1172);
    @conclusion know(*sign(x1@1161, skA()), #t@1162);
};

Compose by at 4 : 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};
Rule in cache: 17
Rule staged: 86
Rule before check and clean: 
@rule{
    @premise new(*[Nb@1175], newB(), tuple4(skA(), skB(), #tb@1176, [Na@1177]));
    @premise new(*[Na@1178], newA(), tuple3(skA(), skB(), #ta@1179));
    @premise new(*[Na@1177], newA(), tuple3(skA(), skB(), #ta@1180));
    @premise init(*skA(), *skB(), *#ta@1179, *x1@1173, *[Na@1178]);
    @premise know(*skB(), #t1@1181);
    @premise know(*[Na@1178], #t3@1182);
    @premise know(*x1@1173, #t1@1183);
    @conclusion know(*sign(x1@1173, skA()), #t@1174);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1175], newB(), tuple4(skA(), skB(), #tb@1176, [Na@1177]));
    @premise new(*[Na@1178], newA(), tuple3(skA(), skB(), #ta@1179));
    @premise new(*[Na@1177], newA(), tuple3(skA(), skB(), #ta@1180));
    @premise init(*skA(), *skB(), *#ta@1179, *x1@1173, *[Na@1178]);
    @premise know(*skB(), #t1@1181);
    @premise know(*[Na@1178], #t3@1182);
    @premise know(*x1@1173, #t1@1183);
    @conclusion know(*sign(x1@1173, skA()), #t@1174);
};

Compose by at 4 : 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*pk(skR@536), #t2@537);
    @constraint #t2@537 - #ta@539 >= 0;
};
Rule in cache: 18
Rule staged: 86
Rule before check and clean: 
@rule{
    @premise new(*[Na@1186], newA(), tuple3(skA(), skA(), #ta@1187));
    @premise new(*[Nb@1188], newB(), tuple4(skA(), skB(), #tb@1189, [Na@1190]));
    @premise new(*[Na@1191], newA(), tuple3(skA(), skB(), #ta@1192));
    @premise new(*[Na@1190], newA(), tuple3(skA(), skB(), #ta@1193));
    @premise init(*skA(), *skB(), *#ta@1192, *x1@1184, *[Na@1191]);
    @premise know(*skB(), #t1@1194);
    @premise know(*[Na@1191], #t3@1195);
    @premise know(*x1@1184, #t1@1196);
    @conclusion know(*sign(x1@1184, skA()), #t@1185);
    @constraint #t2@537 - #ta@1187 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1188], newB(), tuple4(skA(), skB(), #tb@1189, [Na@1190]));
    @premise new(*[Na@1186], newA(), tuple3(skA(), skA(), #ta@1187));
    @premise new(*[Na@1191], newA(), tuple3(skA(), skB(), #ta@1192));
    @premise new(*[Na@1190], newA(), tuple3(skA(), skB(), #ta@1193));
    @premise init(*skA(), *skB(), *#ta@1192, *x1@1184, *[Na@1191]);
    @premise know(*skB(), #t1@1194);
    @premise know(*[Na@1191], #t3@1195);
    @premise know(*x1@1184, #t1@1196);
    @conclusion know(*sign(x1@1184, skA()), #t@1185);
};

Stage rule: 
@rule{
    @premise new(*[Nb@999], newB(), tuple4(skA(), skB(), #tb@1000, [Na@997]));
    @premise new(*[Nb@1001], newB(), tuple4(skA(), skB(), #tb@1002, [Na@1003]));
    @premise new(*[Na@997], newA(), tuple3(skA(), skB(), #ta@998));
    @premise new(*[Na@1003], newA(), tuple3(skA(), skB(), #ta@1004));
    @premise new(*[Na@1005], newA(), tuple3(skA(), skB(), #ta@1006));
    @premise init(*skA(), *skB(), *#ta@1006, *x1@995, *[Na@1005]);
    @premise know(*pk(skA()), #t2@1007);
    @premise know(*skB(), #t2@1008);
    @premise know(*[Na@1005], #t3@1009);
    @premise know(*x1@995, #t1@1010);
    @conclusion know(*sign(x1@995, skA()), #t@996);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@985], newB(), tuple4(skA(), skB(), #tb@986, [Na@987]));
    @premise new(*[Na@989], newA(), tuple3(skA(), skB(), #ta@990));
    @premise new(*[Na@987], newA(), tuple3(skA(), skB(), #ta@988));
    @premise init(*skA(), *skB(), *#ta@990, *x1@981, *[Na@989]);
    @premise know(*pk(skA()), #t2@984);
    @premise know(*skB(), #t1@983);
    @premise know(*[Na@989], #t3@993);
    @premise know(*x1@981, #t1@994);
    @conclusion know(*sign(x1@981, skA()), #t@982);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1016], newA(), tuple3(skA(), sk@1013, #ta@1017));
    @premise know(*pk(skA()), #t2@1015);
    @premise init(*skA(), *sk@1013, *#ta@1017, *x1@1011, *[Na@1016]);
    @premise know(*skA(), #t1@1019);
    @premise know(*[Na@1016], #t3@1020);
    @premise know(*sk@1013, #t1@1014);
    @premise know(*x1@1011, #t1@1022);
    @conclusion know(*sign(x1@1011, skA()), #t@1012);
};
Rule deleted: 
@rule{
    @premise new(*[Na@895], newA(), tuple3(skA(), skA(), #ta@896));
    @premise new(*[Na@893], newA(), tuple3(skA(), skA(), #ta@894));
    @premise init(*skA(), *skA(), *#ta@896, *x1@889, *[Na@895]);
    @premise know(*pk(skA()), #t2@892);
    @premise know(*skA(), #t1@891);
    @premise know(*[Na@895], #t3@899);
    @premise know(*x1@889, #t1@900);
    @conclusion know(*sign(x1@889, skA()), #t@890);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 17
Rule staged: 87
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1199);
    @premise new(*[Na@1200], newA(), tuple3(skA(), sk@1201, #ta@1202));
    @premise init(*skA(), *sk@1201, *#ta@1202, *x1@1197, *[Na@1200]);
    @premise know(*skA(), #t1@1203);
    @premise know(*[Na@1200], #t3@1204);
    @premise know(*sk@1201, #t1@1205);
    @premise know(*x1@1197, #t1@1206);
    @conclusion know(*sign(x1@1197, skA()), #t@1198);
    @constraint -#t1@1199 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1200], newA(), tuple3(skA(), sk@1201, #ta@1202));
    @premise init(*skA(), *sk@1201, *#ta@1202, *x1@1197, *[Na@1200]);
    @premise know(*skA(), #t1@1199);
    @premise know(*[Na@1200], #t3@1204);
    @premise know(*sk@1201, #t1@1205);
    @premise know(*x1@1197, #t1@1206);
    @conclusion know(*sign(x1@1197, skA()), #t@1198);
};

Compose by at 1 : 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};
Rule in cache: 18
Rule staged: 87
Rule before check and clean: 
@rule{
    @premise new(*[Na@1209], newA(), tuple3(skA(), sk@1210, #ta@1211));
    @premise init(*skA(), *sk@1210, *#ta@1211, *x1@1207, *[Na@1209]);
    @premise know(*skA(), #t1@1212);
    @premise know(*[Na@1209], #t3@1213);
    @premise know(*sk@1210, #t1@1214);
    @premise know(*x1@1207, #t1@1215);
    @conclusion know(*sign(x1@1207, skA()), #t@1208);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1209], newA(), tuple3(skA(), sk@1210, #ta@1211));
    @premise init(*skA(), *sk@1210, *#ta@1211, *x1@1207, *[Na@1209]);
    @premise know(*skA(), #t1@1212);
    @premise know(*[Na@1209], #t3@1213);
    @premise know(*sk@1210, #t1@1214);
    @premise know(*x1@1207, #t1@1215);
    @conclusion know(*sign(x1@1207, skA()), #t@1208);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*pk(skR@536), #t2@537);
    @constraint #t2@537 - #ta@539 >= 0;
};
Rule in cache: 19
Rule staged: 87
Rule before check and clean: 
@rule{
    @premise new(*[Na@1218], newA(), tuple3(skA(), skA(), #ta@1219));
    @premise new(*[Na@1220], newA(), tuple3(skA(), sk@1221, #ta@1222));
    @premise init(*skA(), *sk@1221, *#ta@1222, *x1@1216, *[Na@1220]);
    @premise know(*skA(), #t1@1223);
    @premise know(*[Na@1220], #t3@1224);
    @premise know(*sk@1221, #t1@1225);
    @premise know(*x1@1216, #t1@1226);
    @conclusion know(*sign(x1@1216, skA()), #t@1217);
    @constraint #t2@537 - #ta@1219 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1218], newA(), tuple3(skA(), skA(), #ta@1219));
    @premise new(*[Na@1220], newA(), tuple3(skA(), sk@1221, #ta@1222));
    @premise init(*skA(), *sk@1221, *#ta@1222, *x1@1216, *[Na@1220]);
    @premise know(*skA(), #t1@1223);
    @premise know(*[Na@1220], #t3@1224);
    @premise know(*sk@1221, #t1@1225);
    @premise know(*x1@1216, #t1@1226);
    @conclusion know(*sign(x1@1216, skA()), #t@1217);
};

Stage rule: 
@rule{
    @premise new(*[Na@1025], newA(), tuple3(skA(), skA(), #ta@1026));
    @premise new(*[Na@1027], newA(), tuple3(skA(), skA(), #ta@1028));
    @premise init(*skA(), *skA(), *#ta@1028, *x1@1023, *[Na@1027]);
    @premise know(*pk(skA()), #t2@1029);
    @premise know(*skA(), #t1@1030);
    @premise know(*[Na@1027], #t3@1031);
    @premise know(*x1@1023, #t1@1033);
    @conclusion know(*sign(x1@1023, skA()), #t@1024);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1016], newA(), tuple3(skA(), sk@1013, #ta@1017));
    @premise know(*pk(skA()), #t2@1015);
    @premise init(*skA(), *sk@1013, *#ta@1017, *x1@1011, *[Na@1016]);
    @premise know(*skA(), #t1@1019);
    @premise know(*[Na@1016], #t3@1020);
    @premise know(*sk@1013, #t1@1014);
    @premise know(*x1@1011, #t1@1022);
    @conclusion know(*sign(x1@1011, skA()), #t@1012);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@1038], newB(), tuple4(skA(), skB(), #tb@1039, [Na@1036]));
    @premise new(*[Na@1036], newA(), tuple3(skA(), skB(), #ta@1037));
    @premise new(*[Na@1040], newA(), tuple3(skA(), skB(), #ta@1041));
    @premise init(*skA(), *skB(), *#ta@1041, *x1@1034, *[Na@1040]);
    @premise know(*pk(skA()), #t2@1042);
    @premise know(*skA(), #t1@1043);
    @premise know(*skB(), #t1@1045);
    @premise know(*[Na@1040], #t3@1044);
    @premise know(*x1@1034, #t1@1046);
    @conclusion know(*sign(x1@1034, skA()), #t@1035);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@985], newB(), tuple4(skA(), skB(), #tb@986, [Na@987]));
    @premise new(*[Na@989], newA(), tuple3(skA(), skB(), #ta@990));
    @premise new(*[Na@987], newA(), tuple3(skA(), skB(), #ta@988));
    @premise init(*skA(), *skB(), *#ta@990, *x1@981, *[Na@989]);
    @premise know(*pk(skA()), #t2@984);
    @premise know(*skB(), #t1@983);
    @premise know(*[Na@989], #t3@993);
    @premise know(*x1@981, #t1@994);
    @conclusion know(*sign(x1@981, skA()), #t@982);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1052], newA(), tuple3(skA(), sk@1049, #ta@1053));
    @premise know(*pk(skA()), #t2@1051);
    @premise init(*skA(), *sk@1049, *#ta@1053, *x1@1047, *[Na@1052]);
    @premise know(*[Na@1052], #t3@1055);
    @premise know(*sk@1049, #t1@1050);
    @premise know(*x1@1047, #t1@1057);
    @conclusion know(*sign(x1@1047, skA()), #t@1048);
};
Rule deleted: 
@rule{
    @premise new(*[Na@870], newA(), tuple3(skA(), sk@867, #ta@871));
    @premise know(*X(sk@867, pk(skA())), #t4@872);
    @premise know(*pk(skA()), #t2@869);
    @premise init(*skA(), *sk@867, *#ta@871, *x1@865, *[Na@870]);
    @premise know(*[Na@870], #t3@874);
    @premise know(*sk@867, #t1@868);
    @premise know(*x1@865, #t1@876);
    @conclusion know(*sign(x1@865, skA()), #t@866);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@985], newB(), tuple4(skA(), skB(), #tb@986, [Na@987]));
    @premise new(*[Na@989], newA(), tuple3(skA(), skB(), #ta@990));
    @premise new(*[Na@987], newA(), tuple3(skA(), skB(), #ta@988));
    @premise init(*skA(), *skB(), *#ta@990, *x1@981, *[Na@989]);
    @premise know(*pk(skA()), #t2@984);
    @premise know(*skB(), #t1@983);
    @premise know(*[Na@989], #t3@993);
    @premise know(*x1@981, #t1@994);
    @conclusion know(*sign(x1@981, skA()), #t@982);
};
Rule deleted: 
@rule{
    @premise new(*[Na@1016], newA(), tuple3(skA(), sk@1013, #ta@1017));
    @premise know(*pk(skA()), #t2@1015);
    @premise init(*skA(), *sk@1013, *#ta@1017, *x1@1011, *[Na@1016]);
    @premise know(*skA(), #t1@1019);
    @premise know(*[Na@1016], #t3@1020);
    @premise know(*sk@1013, #t1@1014);
    @premise know(*x1@1011, #t1@1022);
    @conclusion know(*sign(x1@1011, skA()), #t@1012);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 17
Rule staged: 88
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1229);
    @premise new(*[Na@1230], newA(), tuple3(skA(), sk@1231, #ta@1232));
    @premise init(*skA(), *sk@1231, *#ta@1232, *x1@1227, *[Na@1230]);
    @premise know(*[Na@1230], #t3@1233);
    @premise know(*sk@1231, #t1@1234);
    @premise know(*x1@1227, #t1@1235);
    @conclusion know(*sign(x1@1227, skA()), #t@1228);
    @constraint -#t1@1229 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1230], newA(), tuple3(skA(), sk@1231, #ta@1232));
    @premise init(*skA(), *sk@1231, *#ta@1232, *x1@1227, *[Na@1230]);
    @premise know(*skA(), #t1@1229);
    @premise know(*[Na@1230], #t3@1233);
    @premise know(*sk@1231, #t1@1234);
    @premise know(*x1@1227, #t1@1235);
    @conclusion know(*sign(x1@1227, skA()), #t@1228);
};

Compose by at 1 : 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};
Rule in cache: 18
Rule staged: 88
Rule before check and clean: 
@rule{
    @premise new(*[Na@1238], newA(), tuple3(skA(), sk@1239, #ta@1240));
    @premise init(*skA(), *sk@1239, *#ta@1240, *x1@1236, *[Na@1238]);
    @premise know(*[Na@1238], #t3@1241);
    @premise know(*sk@1239, #t1@1242);
    @premise know(*x1@1236, #t1@1243);
    @conclusion know(*sign(x1@1236, skA()), #t@1237);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1238], newA(), tuple3(skA(), sk@1239, #ta@1240));
    @premise init(*skA(), *sk@1239, *#ta@1240, *x1@1236, *[Na@1238]);
    @premise know(*[Na@1238], #t3@1241);
    @premise know(*sk@1239, #t1@1242);
    @premise know(*x1@1236, #t1@1243);
    @conclusion know(*sign(x1@1236, skA()), #t@1237);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*pk(skR@536), #t2@537);
    @constraint #t2@537 - #ta@539 >= 0;
};
Rule in cache: 19
Rule staged: 88
Rule before check and clean: 
@rule{
    @premise new(*[Na@1246], newA(), tuple3(skA(), skA(), #ta@1247));
    @premise new(*[Na@1248], newA(), tuple3(skA(), sk@1249, #ta@1250));
    @premise init(*skA(), *sk@1249, *#ta@1250, *x1@1244, *[Na@1248]);
    @premise know(*[Na@1248], #t3@1251);
    @premise know(*sk@1249, #t1@1252);
    @premise know(*x1@1244, #t1@1253);
    @conclusion know(*sign(x1@1244, skA()), #t@1245);
    @constraint #t2@537 - #ta@1247 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1246], newA(), tuple3(skA(), skA(), #ta@1247));
    @premise new(*[Na@1248], newA(), tuple3(skA(), sk@1249, #ta@1250));
    @premise init(*skA(), *sk@1249, *#ta@1250, *x1@1244, *[Na@1248]);
    @premise know(*[Na@1248], #t3@1251);
    @premise know(*sk@1249, #t1@1252);
    @premise know(*x1@1244, #t1@1253);
    @conclusion know(*sign(x1@1244, skA()), #t@1245);
};

Stage rule: 
@rule{
    @premise new(*[Na@1060], newA(), tuple3(skA(), skA(), #ta@1061));
    @premise new(*[Na@1062], newA(), tuple3(skA(), skA(), #ta@1063));
    @premise init(*skA(), *skA(), *#ta@1063, *x1@1058, *[Na@1062]);
    @premise know(*pk(skA()), #t2@1064);
    @premise know(*skA(), #t1@1066);
    @premise know(*[Na@1062], #t3@1065);
    @premise know(*x1@1058, #t1@1067);
    @conclusion know(*sign(x1@1058, skA()), #t@1059);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1052], newA(), tuple3(skA(), sk@1049, #ta@1053));
    @premise know(*pk(skA()), #t2@1051);
    @premise init(*skA(), *sk@1049, *#ta@1053, *x1@1047, *[Na@1052]);
    @premise know(*[Na@1052], #t3@1055);
    @premise know(*sk@1049, #t1@1050);
    @premise know(*x1@1047, #t1@1057);
    @conclusion know(*sign(x1@1047, skA()), #t@1048);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@1072], newB(), tuple4(skA(), skB(), #tb@1073, [Na@1070]));
    @premise new(*[Na@1070], newA(), tuple3(skA(), skB(), #ta@1071));
    @premise new(*[Na@1074], newA(), tuple3(skA(), skB(), #ta@1075));
    @premise init(*skA(), *skB(), *#ta@1075, *x1@1068, *[Na@1074]);
    @premise know(*pk(skA()), #t2@1076);
    @premise know(*skB(), #t1@1078);
    @premise know(*[Na@1074], #t3@1077);
    @premise know(*x1@1068, #t1@1079);
    @conclusion know(*sign(x1@1068, skA()), #t@1069);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1052], newA(), tuple3(skA(), sk@1049, #ta@1053));
    @premise know(*pk(skA()), #t2@1051);
    @premise init(*skA(), *sk@1049, *#ta@1053, *x1@1047, *[Na@1052]);
    @premise know(*[Na@1052], #t3@1055);
    @premise know(*sk@1049, #t1@1050);
    @premise know(*x1@1047, #t1@1057);
    @conclusion know(*sign(x1@1047, skA()), #t@1048);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1083], newA(), tuple3(skA(), skA(), #ta@1084));
    @premise new(*[Na@1085], newA(), tuple3(skA(), skA(), #ta@1086));
    @premise init(*skA(), *skA(), *#ta@1084, *x1@1080, *[Na@1083]);
    @premise know(*skA(), #t1@1082);
    @premise know(*[Na@1083], #t3@1088);
    @premise know(*x1@1080, #t1@1089);
    @conclusion know(*sign(x1@1080, skA()), #t@1081);
};
Rule added at 3.

Stage rule: 
@rule{
    @premise new(*[Na@1092], newA(), tuple3(skA(), skA(), #ta@1093));
    @premise new(*[Na@1094], newA(), tuple3(skA(), skA(), #ta@1095));
    @premise init(*skA(), *skA(), *#ta@1093, *x1@1090, *[Na@1092]);
    @premise know(*skA(), #t1@1096);
    @premise know(*[Na@1092], #t3@1097);
    @premise know(*x1@1090, #t1@1098);
    @conclusion know(*sign(x1@1090, skA()), #t@1091);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1083], newA(), tuple3(skA(), skA(), #ta@1084));
    @premise new(*[Na@1085], newA(), tuple3(skA(), skA(), #ta@1086));
    @premise init(*skA(), *skA(), *#ta@1084, *x1@1080, *[Na@1083]);
    @premise know(*skA(), #t1@1082);
    @premise know(*[Na@1083], #t3@1088);
    @premise know(*x1@1080, #t1@1089);
    @conclusion know(*sign(x1@1080, skA()), #t@1081);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1101], newA(), tuple3(skA(), skA(), #ta@1102));
    @premise new(*[Na@1103], newA(), tuple3(skA(), skA(), #ta@1104));
    @premise new(*[Na@1105], newA(), tuple3(skA(), skA(), #ta@1106));
    @premise init(*skA(), *skA(), *#ta@1104, *x1@1099, *[Na@1103]);
    @premise know(*skA(), #t1@1107);
    @premise know(*[Na@1103], #t3@1108);
    @premise know(*x1@1099, #t1@1109);
    @conclusion know(*sign(x1@1099, skA()), #t@1100);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1083], newA(), tuple3(skA(), skA(), #ta@1084));
    @premise new(*[Na@1085], newA(), tuple3(skA(), skA(), #ta@1086));
    @premise init(*skA(), *skA(), *#ta@1084, *x1@1080, *[Na@1083]);
    @premise know(*skA(), #t1@1082);
    @premise know(*[Na@1083], #t3@1088);
    @premise know(*x1@1080, #t1@1089);
    @conclusion know(*sign(x1@1080, skA()), #t@1081);
};
Rule not added.

Stage rule: 
@rule{
    @premise know(*skB(), #t1@1115);
    @premise new(*[Nb@1111], newB(), tuple4(sk@1112, skB(), #tb@1110, x1@1113));
    @premise know(*sk@1112, #t1@1117);
    @premise know(*x1@1113, #t1@1118);
    @conclusion know(*sign(tuple6(#tb@1110, [Nb@1111], pk(sk@1112), x1@1113, X(skB(), pk(sk@1112)), aenc(Y(skB(), pk(sk@1112)), pk(sk@1112))), skB()), #t@1114);
};
Rule added at 0.

Stage rule: 
@rule{
    @premise new(*[Nb@1120], newB(), tuple4(sk@1121, skB(), #tb@1119, x1@1122));
    @premise know(*skB(), #t1@1124);
    @premise know(*sk@1121, #t1@1125);
    @premise know(*x1@1122, #t1@1126);
    @conclusion know(*sign(tuple6(#tb@1119, [Nb@1120], pk(sk@1121), x1@1122, X(skB(), pk(sk@1121)), aenc(Y(skB(), pk(sk@1121)), pk(sk@1121))), skB()), #t@1123);
};
Rule implied by: 
@rule{
    @premise know(*skB(), #t1@1115);
    @premise new(*[Nb@1111], newB(), tuple4(sk@1112, skB(), #tb@1110, x1@1113));
    @premise know(*sk@1112, #t1@1117);
    @premise know(*x1@1113, #t1@1118);
    @conclusion know(*sign(tuple6(#tb@1110, [Nb@1111], pk(sk@1112), x1@1113, X(skB(), pk(sk@1112)), aenc(Y(skB(), pk(sk@1112)), pk(sk@1112))), skB()), #t@1114);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1132], newA(), tuple3(skA(), skB(), #ta@1133));
    @premise new(*[Nb@1128], newB(), tuple4(sk@1129, skB(), #tb@1127, x1@1130));
    @premise know(*skB(), #t1@1134);
    @premise know(*sk@1129, #t1@1135);
    @premise know(*x1@1130, #t1@1136);
    @conclusion know(*sign(tuple6(#tb@1127, [Nb@1128], pk(sk@1129), x1@1130, X(skB(), pk(sk@1129)), aenc(Y(skB(), pk(sk@1129)), pk(sk@1129))), skB()), #t@1131);
};
Rule implied by: 
@rule{
    @premise know(*skB(), #t1@1115);
    @premise new(*[Nb@1111], newB(), tuple4(sk@1112, skB(), #tb@1110, x1@1113));
    @premise know(*sk@1112, #t1@1117);
    @premise know(*x1@1113, #t1@1118);
    @conclusion know(*sign(tuple6(#tb@1110, [Nb@1111], pk(sk@1112), x1@1113, X(skB(), pk(sk@1112)), aenc(Y(skB(), pk(sk@1112)), pk(sk@1112))), skB()), #t@1114);
};
Rule not added.

Stage rule: 
@rule{
    @premise know(*skB(), #t1@1142);
    @premise know(*sk@1139, #t1@1143);
    @premise new(*[Nb@1138], newB(), tuple4(sk@1139, skB(), #tb@1137, x1@1140));
    @premise know(*x1@1140, #t1@1144);
    @conclusion know(*sign(tuple6(#tb@1137, [Nb@1138], pk(sk@1139), x1@1140, X(skB(), pk(sk@1139)), aenc(Y(skB(), pk(sk@1139)), pk(sk@1139))), skB()), #t@1141);
};
Rule implied by: 
@rule{
    @premise know(*skB(), #t1@1115);
    @premise new(*[Nb@1111], newB(), tuple4(sk@1112, skB(), #tb@1110, x1@1113));
    @premise know(*sk@1112, #t1@1117);
    @premise know(*x1@1113, #t1@1118);
    @conclusion know(*sign(tuple6(#tb@1110, [Nb@1111], pk(sk@1112), x1@1113, X(skB(), pk(sk@1112)), aenc(Y(skB(), pk(sk@1112)), pk(sk@1112))), skB()), #t@1114);
};
Rule not added.

Stage rule: 
@rule{
    @premise know(*sk@1147, #t1@1150);
    @premise new(*[Nb@1146], newB(), tuple4(sk@1147, skB(), #tb@1145, x1@1148));
    @premise know(*x1@1148, #t1@1151);
    @conclusion know(*sign(tuple6(#tb@1145, [Nb@1146], pk(sk@1147), x1@1148, X(skB(), pk(sk@1147)), aenc(Y(skB(), pk(sk@1147)), pk(sk@1147))), skB()), #t@1149);
};
Rule deleted: 
@rule{
    @premise know(*sk@937, #t1@940);
    @premise know(*pk(skB()), #t2@941);
    @premise new(*[Nb@936], newB(), tuple4(sk@937, skB(), #tb@935, x1@938));
    @premise know(*x1@938, #t1@944);
    @conclusion know(*sign(tuple6(#tb@935, [Nb@936], pk(sk@937), x1@938, X(skB(), pk(sk@937)), aenc(Y(skB(), pk(sk@937)), pk(sk@937))), skB()), #t@939);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@964], newB(), tuple4(skA(), skB(), #tb@963, x1@965));
    @premise new(*[Na@967], newA(), tuple3(skA(), skB(), #ta@968));
    @premise know(*skA(), #t1@969);
    @premise know(*x1@965, #t1@970);
    @conclusion know(*sign(tuple6(#tb@963, [Nb@964], pk(skA()), x1@965, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@966);
};
Rule deleted: 
@rule{
    @premise know(*skB(), #t1@1115);
    @premise new(*[Nb@1111], newB(), tuple4(sk@1112, skB(), #tb@1110, x1@1113));
    @premise know(*sk@1112, #t1@1117);
    @premise know(*x1@1113, #t1@1118);
    @conclusion know(*sign(tuple6(#tb@1110, [Nb@1111], pk(sk@1112), x1@1113, X(skB(), pk(sk@1112)), aenc(Y(skB(), pk(sk@1112)), pk(sk@1112))), skB()), #t@1114);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};
Rule in cache: 10
Rule staged: 91
Rule before check and clean: 
@rule{
    @premise know(*sk@1256, #t1@1259);
    @premise new(*[Nb@1255], newB(), tuple4(sk@1256, skB(), #tb@1254, x1@1257));
    @premise know(*x1@1257, #t1@1260);
    @conclusion know(*tuple6(#tb@1254, [Nb@1255], pk(sk@1256), x1@1257, X(skB(), pk(sk@1256)), aenc(Y(skB(), pk(sk@1256)), pk(sk@1256))), #t@1258);
    @constraint -#t@1149 + #t@1258 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1256, #t1@1259);
    @premise new(*[Nb@1255], newB(), tuple4(sk@1256, skB(), #tb@1254, x1@1257));
    @premise know(*x1@1257, #t1@1260);
    @conclusion know(*tuple6(#tb@1254, [Nb@1255], pk(sk@1256), x1@1257, X(skB(), pk(sk@1256)), aenc(Y(skB(), pk(sk@1256)), pk(sk@1256))), #t@1258);
};

Compose to at 2 : 
@rule{
    @premise new(*[Na@251], newA(), tuple3(skA(), skR@252, #ta@253));
    @premise init(*skA(), *skR@252, *#ta@253, *Nb@254, *[Na@251]);
    @premise know(*sign(tuple6(#tb@255, Nb@254, pk(skA()), [Na@251], X(skR@252, pk(skA())), aenc(Y(skR@252, pk(skA())), pk(skA()))), skR@252), #t1@256);
    @conclusion know(*sign(Nb@254, skA()), #t@257);
};
Rule in cache: 11
Rule staged: 91
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1263);
    @premise new(*[Nb@1261], newB(), tuple4(skA(), skB(), #tb@1264, [Na@1265]));
    @premise know(*[Na@1265], #t1@1266);
    @premise new(*[Na@1265], newA(), tuple3(skA(), skB(), #ta@1267));
    @premise init(*skA(), *skB(), *#ta@1267, *[Nb@1261], *[Na@1265]);
    @conclusion know(*sign([Nb@1261], skA()), #t@1262);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1261], newB(), tuple4(skA(), skB(), #tb@1264, [Na@1265]));
    @premise new(*[Na@1265], newA(), tuple3(skA(), skB(), #ta@1267));
    @premise init(*skA(), *skB(), *#ta@1267, *[Nb@1261], *[Na@1265]);
    @premise know(*skA(), #t1@1263);
    @premise know(*[Na@1265], #t1@1266);
    @conclusion know(*sign([Nb@1261], skA()), #t@1262);
};

Stage rule: 
@rule{
    @premise new(*[Na@1157], newA(), tuple3(skA(), skB(), #ta@1158));
    @premise know(*sk@1154, #t1@1159);
    @premise new(*[Nb@1153], newB(), tuple4(sk@1154, skB(), #tb@1152, x1@1155));
    @premise know(*x1@1155, #t1@1160);
    @conclusion know(*sign(tuple6(#tb@1152, [Nb@1153], pk(sk@1154), x1@1155, X(skB(), pk(sk@1154)), aenc(Y(skB(), pk(sk@1154)), pk(sk@1154))), skB()), #t@1156);
};
Rule implied by: 
@rule{
    @premise know(*sk@1147, #t1@1150);
    @premise new(*[Nb@1146], newB(), tuple4(sk@1147, skB(), #tb@1145, x1@1148));
    @premise know(*x1@1148, #t1@1151);
    @conclusion know(*sign(tuple6(#tb@1145, [Nb@1146], pk(sk@1147), x1@1148, X(skB(), pk(sk@1147)), aenc(Y(skB(), pk(sk@1147)), pk(sk@1147))), skB()), #t@1149);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@1164], newB(), tuple4(skA(), skB(), #tb@1165, [Na@1166]));
    @premise new(*[Na@1167], newA(), tuple3(skA(), skB(), #ta@1168));
    @premise new(*[Na@1166], newA(), tuple3(skA(), skB(), #ta@1169));
    @premise init(*skA(), *skB(), *#ta@1168, *x1@1161, *[Na@1167]);
    @premise know(*skA(), #t1@1163);
    @premise know(*skB(), #t1@1170);
    @premise know(*[Na@1167], #t3@1171);
    @premise know(*x1@1161, #t1@1172);
    @conclusion know(*sign(x1@1161, skA()), #t@1162);
};
Rule added at 4.

Stage rule: 
@rule{
    @premise new(*[Nb@1175], newB(), tuple4(skA(), skB(), #tb@1176, [Na@1177]));
    @premise new(*[Na@1178], newA(), tuple3(skA(), skB(), #ta@1179));
    @premise new(*[Na@1177], newA(), tuple3(skA(), skB(), #ta@1180));
    @premise init(*skA(), *skB(), *#ta@1179, *x1@1173, *[Na@1178]);
    @premise know(*skB(), #t1@1181);
    @premise know(*[Na@1178], #t3@1182);
    @premise know(*x1@1173, #t1@1183);
    @conclusion know(*sign(x1@1173, skA()), #t@1174);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@1164], newB(), tuple4(skA(), skB(), #tb@1165, [Na@1166]));
    @premise new(*[Na@1167], newA(), tuple3(skA(), skB(), #ta@1168));
    @premise new(*[Na@1166], newA(), tuple3(skA(), skB(), #ta@1169));
    @premise init(*skA(), *skB(), *#ta@1168, *x1@1161, *[Na@1167]);
    @premise know(*skA(), #t1@1163);
    @premise know(*skB(), #t1@1170);
    @premise know(*[Na@1167], #t3@1171);
    @premise know(*x1@1161, #t1@1172);
    @conclusion know(*sign(x1@1161, skA()), #t@1162);
};
Rule added at 4.

Stage rule: 
@rule{
    @premise new(*[Nb@1188], newB(), tuple4(skA(), skB(), #tb@1189, [Na@1190]));
    @premise new(*[Na@1186], newA(), tuple3(skA(), skA(), #ta@1187));
    @premise new(*[Na@1191], newA(), tuple3(skA(), skB(), #ta@1192));
    @premise new(*[Na@1190], newA(), tuple3(skA(), skB(), #ta@1193));
    @premise init(*skA(), *skB(), *#ta@1192, *x1@1184, *[Na@1191]);
    @premise know(*skB(), #t1@1194);
    @premise know(*[Na@1191], #t3@1195);
    @premise know(*x1@1184, #t1@1196);
    @conclusion know(*sign(x1@1184, skA()), #t@1185);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@1175], newB(), tuple4(skA(), skB(), #tb@1176, [Na@1177]));
    @premise new(*[Na@1178], newA(), tuple3(skA(), skB(), #ta@1179));
    @premise new(*[Na@1177], newA(), tuple3(skA(), skB(), #ta@1180));
    @premise init(*skA(), *skB(), *#ta@1179, *x1@1173, *[Na@1178]);
    @premise know(*skB(), #t1@1181);
    @premise know(*[Na@1178], #t3@1182);
    @premise know(*x1@1173, #t1@1183);
    @conclusion know(*sign(x1@1173, skA()), #t@1174);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1200], newA(), tuple3(skA(), sk@1201, #ta@1202));
    @premise init(*skA(), *sk@1201, *#ta@1202, *x1@1197, *[Na@1200]);
    @premise know(*skA(), #t1@1199);
    @premise know(*[Na@1200], #t3@1204);
    @premise know(*sk@1201, #t1@1205);
    @premise know(*x1@1197, #t1@1206);
    @conclusion know(*sign(x1@1197, skA()), #t@1198);
};
Rule deleted: 
@rule{
    @premise new(*[Na@1083], newA(), tuple3(skA(), skA(), #ta@1084));
    @premise new(*[Na@1085], newA(), tuple3(skA(), skA(), #ta@1086));
    @premise init(*skA(), *skA(), *#ta@1084, *x1@1080, *[Na@1083]);
    @premise know(*skA(), #t1@1082);
    @premise know(*[Na@1083], #t3@1088);
    @premise know(*x1@1080, #t1@1089);
    @conclusion know(*sign(x1@1080, skA()), #t@1081);
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Na@1209], newA(), tuple3(skA(), sk@1210, #ta@1211));
    @premise init(*skA(), *sk@1210, *#ta@1211, *x1@1207, *[Na@1209]);
    @premise know(*skA(), #t1@1212);
    @premise know(*[Na@1209], #t3@1213);
    @premise know(*sk@1210, #t1@1214);
    @premise know(*x1@1207, #t1@1215);
    @conclusion know(*sign(x1@1207, skA()), #t@1208);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1200], newA(), tuple3(skA(), sk@1201, #ta@1202));
    @premise init(*skA(), *sk@1201, *#ta@1202, *x1@1197, *[Na@1200]);
    @premise know(*skA(), #t1@1199);
    @premise know(*[Na@1200], #t3@1204);
    @premise know(*sk@1201, #t1@1205);
    @premise know(*x1@1197, #t1@1206);
    @conclusion know(*sign(x1@1197, skA()), #t@1198);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1218], newA(), tuple3(skA(), skA(), #ta@1219));
    @premise new(*[Na@1220], newA(), tuple3(skA(), sk@1221, #ta@1222));
    @premise init(*skA(), *sk@1221, *#ta@1222, *x1@1216, *[Na@1220]);
    @premise know(*skA(), #t1@1223);
    @premise know(*[Na@1220], #t3@1224);
    @premise know(*sk@1221, #t1@1225);
    @premise know(*x1@1216, #t1@1226);
    @conclusion know(*sign(x1@1216, skA()), #t@1217);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1200], newA(), tuple3(skA(), sk@1201, #ta@1202));
    @premise init(*skA(), *sk@1201, *#ta@1202, *x1@1197, *[Na@1200]);
    @premise know(*skA(), #t1@1199);
    @premise know(*[Na@1200], #t3@1204);
    @premise know(*sk@1201, #t1@1205);
    @premise know(*x1@1197, #t1@1206);
    @conclusion know(*sign(x1@1197, skA()), #t@1198);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1230], newA(), tuple3(skA(), sk@1231, #ta@1232));
    @premise init(*skA(), *sk@1231, *#ta@1232, *x1@1227, *[Na@1230]);
    @premise know(*skA(), #t1@1229);
    @premise know(*[Na@1230], #t3@1233);
    @premise know(*sk@1231, #t1@1234);
    @premise know(*x1@1227, #t1@1235);
    @conclusion know(*sign(x1@1227, skA()), #t@1228);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1200], newA(), tuple3(skA(), sk@1201, #ta@1202));
    @premise init(*skA(), *sk@1201, *#ta@1202, *x1@1197, *[Na@1200]);
    @premise know(*skA(), #t1@1199);
    @premise know(*[Na@1200], #t3@1204);
    @premise know(*sk@1201, #t1@1205);
    @premise know(*x1@1197, #t1@1206);
    @conclusion know(*sign(x1@1197, skA()), #t@1198);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1238], newA(), tuple3(skA(), sk@1239, #ta@1240));
    @premise init(*skA(), *sk@1239, *#ta@1240, *x1@1236, *[Na@1238]);
    @premise know(*[Na@1238], #t3@1241);
    @premise know(*sk@1239, #t1@1242);
    @premise know(*x1@1236, #t1@1243);
    @conclusion know(*sign(x1@1236, skA()), #t@1237);
};
Rule deleted: 
@rule{
    @premise new(*[Na@1052], newA(), tuple3(skA(), sk@1049, #ta@1053));
    @premise know(*pk(skA()), #t2@1051);
    @premise init(*skA(), *sk@1049, *#ta@1053, *x1@1047, *[Na@1052]);
    @premise know(*[Na@1052], #t3@1055);
    @premise know(*sk@1049, #t1@1050);
    @premise know(*x1@1047, #t1@1057);
    @conclusion know(*sign(x1@1047, skA()), #t@1048);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@1175], newB(), tuple4(skA(), skB(), #tb@1176, [Na@1177]));
    @premise new(*[Na@1178], newA(), tuple3(skA(), skB(), #ta@1179));
    @premise new(*[Na@1177], newA(), tuple3(skA(), skB(), #ta@1180));
    @premise init(*skA(), *skB(), *#ta@1179, *x1@1173, *[Na@1178]);
    @premise know(*skB(), #t1@1181);
    @premise know(*[Na@1178], #t3@1182);
    @premise know(*x1@1173, #t1@1183);
    @conclusion know(*sign(x1@1173, skA()), #t@1174);
};
Rule deleted: 
@rule{
    @premise new(*[Na@1200], newA(), tuple3(skA(), sk@1201, #ta@1202));
    @premise init(*skA(), *sk@1201, *#ta@1202, *x1@1197, *[Na@1200]);
    @premise know(*skA(), #t1@1199);
    @premise know(*[Na@1200], #t3@1204);
    @premise know(*sk@1201, #t1@1205);
    @premise know(*x1@1197, #t1@1206);
    @conclusion know(*sign(x1@1197, skA()), #t@1198);
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise new(*[Na@532], newA(), tuple3(skA(), skR@534, #ta@535));
    @conclusion know(*[Na@532], #t1@533);
    @constraint #t1@533 - #ta@535 >= 0;
};
Rule in cache: 3
Rule staged: 95
Rule before check and clean: 
@rule{
    @premise new(*[Na@1270], newA(), tuple3(skA(), skR@1271, #ta@1272));
    @premise new(*[Na@1270], newA(), tuple3(skA(), sk@1273, #ta@1274));
    @premise init(*skA(), *sk@1273, *#ta@1274, *x1@1268, *[Na@1270]);
    @premise know(*sk@1273, #t1@1275);
    @premise know(*x1@1268, #t1@1276);
    @conclusion know(*sign(x1@1268, skA()), #t@1269);
    @constraint #t1@533 - #ta@1272 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1270], newA(), tuple3(skA(), skR@1271, #ta@1272));
    @premise init(*skA(), *skR@1271, *#ta@1272, *x1@1268, *[Na@1270]);
    @premise know(*skR@1271, #t1@1275);
    @premise know(*x1@1268, #t1@1276);
    @conclusion know(*sign(x1@1268, skA()), #t@1269);
};

Compose by at 2 : 
@rule{
    @premise new(*[Na@639], newA(), tuple3(skA(), skB(), #ta@640));
    @premise new(*[Nb@637], newB(), tuple4(skA(), skB(), #tb@641, [Na@639]));
    @conclusion know(*[Nb@637], #t1@638);
};
Rule in cache: 4
Rule staged: 95
Rule before check and clean: 
@rule{
    @premise new(*[Na@1279], newA(), tuple3(skA(), skB(), #ta@1280));
    @premise new(*[Nb@1281], newB(), tuple4(skA(), skB(), #tb@1282, [Na@1279]));
    @premise new(*[Nb@1281], newA(), tuple3(skA(), sk@1283, #ta@1284));
    @premise init(*skA(), *sk@1283, *#ta@1284, *x1@1277, *[Nb@1281]);
    @premise know(*sk@1283, #t1@1285);
    @premise know(*x1@1277, #t1@1286);
    @conclusion know(*sign(x1@1277, skA()), #t@1278);
};
Rule invalid. 

Compose by at 2 : 
@rule{
    @premise new(*[Na@647], newA(), tuple3(skA(), skB(), #ta@649));
    @premise new(*[Nb@650], newB(), tuple4(skA(), skB(), #tb@651, [Na@647]));
    @conclusion know(*[Na@647], #t3@648);
};
Rule in cache: 4
Rule staged: 95
Rule before check and clean: 
@rule{
    @premise new(*[Na@1289], newA(), tuple3(skA(), skB(), #ta@1290));
    @premise new(*[Nb@1291], newB(), tuple4(skA(), skB(), #tb@1292, [Na@1289]));
    @premise new(*[Na@1289], newA(), tuple3(skA(), sk@1293, #ta@1294));
    @premise init(*skA(), *sk@1293, *#ta@1294, *x1@1287, *[Na@1289]);
    @premise know(*sk@1293, #t1@1295);
    @premise know(*x1@1287, #t1@1296);
    @conclusion know(*sign(x1@1287, skA()), #t@1288);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1291], newB(), tuple4(skA(), skB(), #tb@1292, [Na@1289]));
    @premise new(*[Na@1289], newA(), tuple3(skA(), skB(), #ta@1290));
    @premise init(*skA(), *skB(), *#ta@1290, *x1@1287, *[Na@1289]);
    @premise know(*skB(), #t1@1295);
    @premise know(*x1@1287, #t1@1296);
    @conclusion know(*sign(x1@1287, skA()), #t@1288);
};

Stage rule: 
@rule{
    @premise new(*[Na@1246], newA(), tuple3(skA(), skA(), #ta@1247));
    @premise new(*[Na@1248], newA(), tuple3(skA(), sk@1249, #ta@1250));
    @premise init(*skA(), *sk@1249, *#ta@1250, *x1@1244, *[Na@1248]);
    @premise know(*[Na@1248], #t3@1251);
    @premise know(*sk@1249, #t1@1252);
    @premise know(*x1@1244, #t1@1253);
    @conclusion know(*sign(x1@1244, skA()), #t@1245);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1238], newA(), tuple3(skA(), sk@1239, #ta@1240));
    @premise init(*skA(), *sk@1239, *#ta@1240, *x1@1236, *[Na@1238]);
    @premise know(*[Na@1238], #t3@1241);
    @premise know(*sk@1239, #t1@1242);
    @premise know(*x1@1236, #t1@1243);
    @conclusion know(*sign(x1@1236, skA()), #t@1237);
};
Rule not added.

Stage rule: 
@rule{
    @premise know(*sk@1256, #t1@1259);
    @premise new(*[Nb@1255], newB(), tuple4(sk@1256, skB(), #tb@1254, x1@1257));
    @premise know(*x1@1257, #t1@1260);
    @conclusion know(*tuple6(#tb@1254, [Nb@1255], pk(sk@1256), x1@1257, X(skB(), pk(sk@1256)), aenc(Y(skB(), pk(sk@1256)), pk(sk@1256))), #t@1258);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple6(x0@142, x1@143, x2@144, x3@145, x4@146, x5@147), #t@148);
    @conclusion know(*x0@142, #t0@149);
    @constraint -#t@148 + #t0@149 >= 0;
};
Rule in cache: 3
Rule staged: 96
Rule before check and clean: 
@rule{
    @premise know(*sk@1299, #t1@1300);
    @premise new(*[Nb@1301], newB(), tuple4(sk@1299, skB(), #tb@1297, x1@1302));
    @premise know(*x1@1302, #t1@1303);
    @conclusion know(*#tb@1297, #t0@1298);
    @constraint #t0@1298 - #t@1258 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1299, #t1@1300);
    @premise new(*[Nb@1301], newB(), tuple4(sk@1299, skB(), #tb@1297, x1@1302));
    @premise know(*x1@1302, #t1@1303);
    @conclusion know(*#tb@1297, #t0@1298);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple6(x0@150, x1@151, x2@152, x3@153, x4@154, x5@155), #t@156);
    @conclusion know(*x1@151, #t1@157);
    @constraint -#t@156 + #t1@157 >= 0;
};
Rule in cache: 4
Rule staged: 96
Rule before check and clean: 
@rule{
    @premise know(*sk@1306, #t1@1307);
    @premise new(*[Nb@1304], newB(), tuple4(sk@1306, skB(), #tb@1308, x1@1309));
    @premise know(*x1@1309, #t1@1310);
    @conclusion know(*[Nb@1304], #t1@1305);
    @constraint #t1@1305 - #t@1258 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1306, #t1@1307);
    @premise new(*[Nb@1304], newB(), tuple4(sk@1306, skB(), #tb@1308, x1@1309));
    @premise know(*x1@1309, #t1@1310);
    @conclusion know(*[Nb@1304], #t1@1305);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple6(x0@158, x1@159, x2@160, x3@161, x4@162, x5@163), #t@164);
    @conclusion know(*x2@160, #t2@165);
    @constraint -#t@164 + #t2@165 >= 0;
};
Rule in cache: 5
Rule staged: 96
Rule before check and clean: 
@rule{
    @premise know(*sk@1311, #t1@1313);
    @premise new(*[Nb@1314], newB(), tuple4(sk@1311, skB(), #tb@1315, x1@1316));
    @premise know(*x1@1316, #t1@1317);
    @conclusion know(*pk(sk@1311), #t2@1312);
    @constraint #t2@1312 - #t@1258 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1311, #t1@1313);
    @premise new(*[Nb@1314], newB(), tuple4(sk@1311, skB(), #tb@1315, x1@1316));
    @premise know(*x1@1316, #t1@1317);
    @conclusion know(*pk(sk@1311), #t2@1312);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple6(x0@166, x1@167, x2@168, x3@169, x4@170, x5@171), #t@172);
    @conclusion know(*x3@169, #t3@173);
    @constraint -#t@172 + #t3@173 >= 0;
};
Rule in cache: 6
Rule staged: 96
Rule before check and clean: 
@rule{
    @premise know(*sk@1320, #t1@1321);
    @premise new(*[Nb@1322], newB(), tuple4(sk@1320, skB(), #tb@1323, x1@1318));
    @premise know(*x1@1318, #t1@1324);
    @conclusion know(*x1@1318, #t3@1319);
    @constraint #t3@1319 - #t@1258 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*tuple6(x0@174, x1@175, x2@176, x3@177, x4@178, x5@179), #t@180);
    @conclusion know(*x4@178, #t4@181);
    @constraint -#t@180 + #t4@181 >= 0;
};
Rule in cache: 6
Rule staged: 96
Rule before check and clean: 
@rule{
    @premise know(*sk@1325, #t1@1327);
    @premise new(*[Nb@1328], newB(), tuple4(sk@1325, skB(), #tb@1329, x1@1330));
    @premise know(*x1@1330, #t1@1331);
    @conclusion know(*X(skB(), pk(sk@1325)), #t4@1326);
    @constraint #t4@1326 - #t@1258 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1325, #t1@1327);
    @premise new(*[Nb@1328], newB(), tuple4(sk@1325, skB(), #tb@1329, x1@1330));
    @premise know(*x1@1330, #t1@1331);
    @conclusion know(*X(skB(), pk(sk@1325)), #t4@1326);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple6(x0@182, x1@183, x2@184, x3@185, x4@186, x5@187), #t@188);
    @conclusion know(*x5@187, #t5@189);
    @constraint -#t@188 + #t5@189 >= 0;
};
Rule in cache: 7
Rule staged: 96
Rule before check and clean: 
@rule{
    @premise know(*sk@1332, #t1@1334);
    @premise new(*[Nb@1335], newB(), tuple4(sk@1332, skB(), #tb@1336, x1@1337));
    @premise know(*x1@1337, #t1@1338);
    @conclusion know(*aenc(Y(skB(), pk(sk@1332)), pk(sk@1332)), #t5@1333);
    @constraint #t5@1333 - #t@1258 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1332, #t1@1334);
    @premise new(*[Nb@1335], newB(), tuple4(sk@1332, skB(), #tb@1336, x1@1337));
    @premise know(*x1@1337, #t1@1338);
    @conclusion know(*aenc(Y(skB(), pk(sk@1332)), pk(sk@1332)), #t5@1333);
};

Stage rule: 
@rule{
    @premise new(*[Nb@1261], newB(), tuple4(skA(), skB(), #tb@1264, [Na@1265]));
    @premise new(*[Na@1265], newA(), tuple3(skA(), skB(), #ta@1267));
    @premise init(*skA(), *skB(), *#ta@1267, *[Nb@1261], *[Na@1265]);
    @premise know(*skA(), #t1@1263);
    @premise know(*[Na@1265], #t1@1266);
    @conclusion know(*sign([Nb@1261], skA()), #t@1262);
};
Rule implied by: 
@rule{
    @premise new(*[Na@567], newA(), tuple3(skA(), skB(), #ta@568));
    @premise new(*[Nb@565], newB(), tuple4(skA(), skB(), #tb@569, [Na@567]));
    @premise init(*skA(), *skB(), *#ta@568, *[Nb@565], *[Na@567]);
    @conclusion know(*sign([Nb@565], skA()), #t@566);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1270], newA(), tuple3(skA(), skR@1271, #ta@1272));
    @premise init(*skA(), *skR@1271, *#ta@1272, *x1@1268, *[Na@1270]);
    @premise know(*skR@1271, #t1@1275);
    @premise know(*x1@1268, #t1@1276);
    @conclusion know(*sign(x1@1268, skA()), #t@1269);
};
Rule deleted: 
@rule{
    @premise new(*[Na@1238], newA(), tuple3(skA(), sk@1239, #ta@1240));
    @premise init(*skA(), *sk@1239, *#ta@1240, *x1@1236, *[Na@1238]);
    @premise know(*[Na@1238], #t3@1241);
    @premise know(*sk@1239, #t1@1242);
    @premise know(*x1@1236, #t1@1243);
    @conclusion know(*sign(x1@1236, skA()), #t@1237);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};
Rule in cache: 6
Rule staged: 97
Rule before check and clean: 
@rule{
    @premise new(*[Na@1341], newA(), tuple3(skA(), skR@1342, #ta@1343));
    @premise init(*skA(), *skR@1342, *#ta@1343, *x1@1339, *[Na@1341]);
    @premise know(*skR@1342, #t1@1344);
    @premise know(*x1@1339, #t1@1345);
    @conclusion know(*x1@1339, #t@1340);
    @constraint -#t@1269 + #t@1340 >= 0;
};
Rule invalid. 

Compose to at 1 : 
@rule{
    @premise new(*[Nb@244], newB(), tuple4(skI@245, skB(), #tb@246, Na@247));
    @premise know(*sign(tuple5(#ta@248, Na@247, pk(skB()), X(skI@245, pk(skB())), aenc(Y(skI@245, pk(skB())), pk(skB()))), skI@245), #t1@249);
    @conclusion know(*sign(tuple6(#tb@246, [Nb@244], pk(skI@245), Na@247, X(skB(), pk(skI@245)), aenc(Y(skB(), pk(skI@245)), pk(skI@245))), skB()), #t@250);
};
Rule in cache: 6
Rule staged: 97
Rule before check and clean: 
@rule{
    @premise new(*[Na@1350], newA(), tuple3(skA(), skR@1351, #ta@1352));
    @premise init(*skA(), *skR@1351, *#ta@1352, *tuple5(#ta@1353, Na@1348, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1350]);
    @premise know(*skR@1351, #t1@1354);
    @premise know(*tuple5(#ta@1353, Na@1348, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), #t1@1355);
    @premise new(*[Nb@1347], newB(), tuple4(skA(), skB(), #tb@1346, Na@1348));
    @conclusion know(*sign(tuple6(#tb@1346, [Nb@1347], pk(skA()), Na@1348, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1349);
};
Rule cached at priority 1: 
@rule{
    @premise init(*skA(), *skR@1351, *#ta@1352, *tuple5(#ta@1353, Na@1348, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1350]);
    @premise know(*tuple5(#ta@1353, Na@1348, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), #t1@1355);
    @premise new(*[Nb@1347], newB(), tuple4(skA(), skB(), #tb@1346, Na@1348));
    @premise new(*[Na@1350], newA(), tuple3(skA(), skR@1351, #ta@1352));
    @premise know(*skR@1351, #t1@1354);
    @conclusion know(*sign(tuple6(#tb@1346, [Nb@1347], pk(skA()), Na@1348, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1349);
};

Compose to at 2 : 
@rule{
    @premise new(*[Na@251], newA(), tuple3(skA(), skR@252, #ta@253));
    @premise init(*skA(), *skR@252, *#ta@253, *Nb@254, *[Na@251]);
    @premise know(*sign(tuple6(#tb@255, Nb@254, pk(skA()), [Na@251], X(skR@252, pk(skA())), aenc(Y(skR@252, pk(skA())), pk(skA()))), skR@252), #t1@256);
    @conclusion know(*sign(Nb@254, skA()), #t@257);
};
Rule in cache: 7
Rule staged: 97
Rule before check and clean: 
@rule{
    @premise new(*[Na@1358], newA(), tuple3(skA(), skR@1359, #ta@1360));
    @premise init(*skA(), *skR@1359, *#ta@1360, *tuple6(#tb@1361, Nb@1356, pk(skA()), [Na@1362], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1358]);
    @premise know(*skR@1359, #t1@1363);
    @premise know(*tuple6(#tb@1361, Nb@1356, pk(skA()), [Na@1362], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), #t1@1364);
    @premise new(*[Na@1362], newA(), tuple3(skA(), skA(), #ta@1365));
    @premise init(*skA(), *skA(), *#ta@1365, *Nb@1356, *[Na@1362]);
    @conclusion know(*sign(Nb@1356, skA()), #t@1357);
};
Rule cached at priority 1: 
@rule{
    @premise init(*skA(), *skR@1359, *#ta@1360, *tuple6(#tb@1361, Nb@1356, pk(skA()), [Na@1362], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1358]);
    @premise know(*tuple6(#tb@1361, Nb@1356, pk(skA()), [Na@1362], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), #t1@1364);
    @premise new(*[Na@1362], newA(), tuple3(skA(), skA(), #ta@1365));
    @premise new(*[Na@1358], newA(), tuple3(skA(), skR@1359, #ta@1360));
    @premise init(*skA(), *skA(), *#ta@1365, *Nb@1356, *[Na@1362]);
    @premise know(*skR@1359, #t1@1363);
    @conclusion know(*sign(Nb@1356, skA()), #t@1357);
};

Compose to at 1 : 
@rule{
    @premise new(*[Nb@258], newB(), tuple4(skA(), skB(), #tb@259, Na@260));
    @premise know(*sign([Nb@258], skA()), #t1@261);
    @conclusion accept(skA(), skB(), #tb@259, [Nb@258], Na@260);
};
Rule in cache: 8
Rule staged: 97
Rule before check and clean: 
@rule{
    @premise new(*[Na@1369], newA(), tuple3(skA(), skR@1370, #ta@1371));
    @premise init(*skA(), *skR@1370, *#ta@1371, *[Nb@1367], *[Na@1369]);
    @premise know(*skR@1370, #t1@1372);
    @premise know(*[Nb@1367], #t1@1373);
    @premise new(*[Nb@1367], newB(), tuple4(skA(), skB(), #tb@1366, Na@1368));
    @conclusion accept(skA(), skB(), #tb@1366, [Nb@1367], Na@1368);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1367], newB(), tuple4(skA(), skB(), #tb@1366, Na@1368));
    @premise new(*[Na@1369], newA(), tuple3(skA(), skR@1370, #ta@1371));
    @premise init(*skA(), *skR@1370, *#ta@1371, *[Nb@1367], *[Na@1369]);
    @premise know(*[Nb@1367], #t1@1373);
    @premise know(*skR@1370, #t1@1372);
    @conclusion accept(skA(), skB(), #tb@1366, [Nb@1367], Na@1368);
};

Stage rule: 
@rule{
    @premise new(*[Nb@1291], newB(), tuple4(skA(), skB(), #tb@1292, [Na@1289]));
    @premise new(*[Na@1289], newA(), tuple3(skA(), skB(), #ta@1290));
    @premise init(*skA(), *skB(), *#ta@1290, *x1@1287, *[Na@1289]);
    @premise know(*skB(), #t1@1295);
    @premise know(*x1@1287, #t1@1296);
    @conclusion know(*sign(x1@1287, skA()), #t@1288);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1270], newA(), tuple3(skA(), skR@1271, #ta@1272));
    @premise init(*skA(), *skR@1271, *#ta@1272, *x1@1268, *[Na@1270]);
    @premise know(*skR@1271, #t1@1275);
    @premise know(*x1@1268, #t1@1276);
    @conclusion know(*sign(x1@1268, skA()), #t@1269);
};
Rule not added.

Stage rule: 
@rule{
    @premise know(*sk@1299, #t1@1300);
    @premise new(*[Nb@1301], newB(), tuple4(sk@1299, skB(), #tb@1297, x1@1302));
    @premise know(*x1@1302, #t1@1303);
    @conclusion know(*#tb@1297, #t0@1298);
};
Rule added.

Check rule against queries: 
@rule{
    @premise know(*sk@1299, #t1@1300);
    @premise new(*[Nb@1301], newB(), tuple4(sk@1299, skB(), #tb@1297, x1@1302));
    @premise know(*x1@1302, #t1@1303);
    @conclusion know(*#tb@1297, #t0@1298);
};
Before checking:
0. Requested parameter relation:
[@universe]

After checking:
0. Requested parameter relation:
[@universe]


Stage rule: 
@rule{
    @premise know(*sk@1306, #t1@1307);
    @premise new(*[Nb@1304], newB(), tuple4(sk@1306, skB(), #tb@1308, x1@1309));
    @premise know(*x1@1309, #t1@1310);
    @conclusion know(*[Nb@1304], #t1@1305);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*[Nb@510], #t1@512);
    @premise know(*skA(), #t2@513);
    @premise new(*[Nb@510], newB(), tuple4(skA(), skB(), #tb@509, Na@511));
    @conclusion accept(skA(), skB(), #tb@509, [Nb@510], Na@511);
};
Rule in cache: 6
Rule staged: 99
Rule before check and clean: 
@rule{
    @premise know(*sk@1377, #t1@1378);
    @premise new(*[Nb@1375], newB(), tuple4(sk@1377, skB(), #tb@1379, x1@1380));
    @premise know(*x1@1380, #t1@1381);
    @premise know(*skA(), #t2@1382);
    @premise new(*[Nb@1375], newB(), tuple4(skA(), skB(), #tb@1374, Na@1376));
    @conclusion accept(skA(), skB(), #tb@1374, [Nb@1375], Na@1376);
};
Rule cached at priority 1: 
@rule{
    @premise know(*skA(), #t1@1378);
    @premise new(*[Nb@1375], newB(), tuple4(skA(), skB(), #tb@1379, x1@1380));
    @premise know(*x1@1380, #t1@1381);
    @conclusion accept(skA(), skB(), #tb@1379, [Nb@1375], x1@1380);
};

Stage rule: 
@rule{
    @premise know(*sk@1311, #t1@1313);
    @premise new(*[Nb@1314], newB(), tuple4(sk@1311, skB(), #tb@1315, x1@1316));
    @premise know(*x1@1316, #t1@1317);
    @conclusion know(*pk(sk@1311), #t2@1312);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};
Rule in cache: 6
Rule staged: 100
Rule before check and clean: 
@rule{
    @premise know(*sk@1384, #t1@1386);
    @premise new(*[Nb@1387], newB(), tuple4(sk@1384, skB(), #tb@1388, x1@1389));
    @premise know(*x1@1389, #t1@1390);
    @premise know(*m@1383, #t1@1391);
    @conclusion know(*aenc(m@1383, pk(sk@1384)), #t@1385);
    @constraint -#t1@1391 + #t@1385 >= 0;
    @constraint #t@1385 - #t2@1312 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1384, #t1@1386);
    @premise new(*[Nb@1387], newB(), tuple4(sk@1384, skB(), #tb@1388, x1@1389));
    @premise know(*x1@1389, #t1@1390);
    @premise know(*m@1383, #t1@1391);
    @conclusion know(*aenc(m@1383, pk(sk@1384)), #t@1385);
    @constraint -#t1@1391 + #t@1385 >= 0;
};

Stage rule: 
@rule{
    @premise know(*sk@1325, #t1@1327);
    @premise new(*[Nb@1328], newB(), tuple4(sk@1325, skB(), #tb@1329, x1@1330));
    @premise know(*x1@1330, #t1@1331);
    @conclusion know(*X(skB(), pk(sk@1325)), #t4@1326);
};
Rule added.

Stage rule: 
@rule{
    @premise know(*sk@1332, #t1@1334);
    @premise new(*[Nb@1335], newB(), tuple4(sk@1332, skB(), #tb@1336, x1@1337));
    @premise know(*x1@1337, #t1@1338);
    @conclusion know(*aenc(Y(skB(), pk(sk@1332)), pk(sk@1332)), #t5@1333);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 5
Rule staged: 102
Rule before check and clean: 
@rule{
    @premise know(*sk@1392, #t1@1394);
    @premise new(*[Nb@1395], newB(), tuple4(sk@1392, skB(), #tb@1396, x1@1397));
    @premise know(*x1@1397, #t1@1398);
    @premise know(*sk@1392, #t1@1399);
    @conclusion know(*Y(skB(), pk(sk@1392)), #t@1393);
    @constraint -#t1@1399 + #t@1393 >= 0;
    @constraint #t@1393 - #t5@1333 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1392, #t1@1394);
    @premise new(*[Nb@1395], newB(), tuple4(sk@1392, skB(), #tb@1396, x1@1397));
    @premise know(*x1@1397, #t1@1398);
    @conclusion know(*Y(skB(), pk(sk@1392)), #t@1393);
    @constraint #t@1393 - #t1@1394 >= 0;
};

Stage rule: 
@rule{
    @premise init(*skA(), *skR@1351, *#ta@1352, *tuple5(#ta@1353, Na@1348, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1350]);
    @premise know(*tuple5(#ta@1353, Na@1348, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), #t1@1355);
    @premise new(*[Nb@1347], newB(), tuple4(skA(), skB(), #tb@1346, Na@1348));
    @premise new(*[Na@1350], newA(), tuple3(skA(), skR@1351, #ta@1352));
    @premise know(*skR@1351, #t1@1354);
    @conclusion know(*sign(tuple6(#tb@1346, [Nb@1347], pk(skA()), Na@1348, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1349);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule in cache: 5
Rule staged: 103
Rule before check and clean: 
@rule{
    @premise know(*#ta@1404, #t0@1405);
    @premise know(*x1@1402, #t1@1406);
    @premise know(*pk(skB()), #t2@1407);
    @premise know(*X(skA(), pk(skB())), #t3@1408);
    @premise know(*aenc(Y(skA(), pk(skB())), pk(skB())), #t4@1409);
    @premise init(*skA(), *skR@1410, *#ta@1411, *tuple5(#ta@1404, x1@1402, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1412]);
    @premise new(*[Nb@1401], newB(), tuple4(skA(), skB(), #tb@1400, x1@1402));
    @premise new(*[Na@1412], newA(), tuple3(skA(), skR@1410, #ta@1411));
    @premise know(*skR@1410, #t1@1413);
    @conclusion know(*sign(tuple6(#tb@1400, [Nb@1401], pk(skA()), x1@1402, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1403);
    @constraint #t@92 - #t1@1406 >= 0;
    @constraint #t@92 - #t4@1409 >= 0;
    @constraint #t@92 - #t3@1408 >= 0;
    @constraint #t@92 - #t2@1407 >= 0;
    @constraint -#t0@1405 + #t@92 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*skA(), *skR@1410, *#ta@1411, *tuple5(#ta@1404, x1@1402, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1412]);
    @premise know(*aenc(Y(skA(), pk(skB())), pk(skB())), #t4@1409);
    @premise new(*[Nb@1401], newB(), tuple4(skA(), skB(), #tb@1400, x1@1402));
    @premise know(*X(skA(), pk(skB())), #t3@1408);
    @premise new(*[Na@1412], newA(), tuple3(skA(), skR@1410, #ta@1411));
    @premise know(*pk(skB()), #t2@1407);
    @premise know(*#ta@1404, #t0@1405);
    @premise know(*x1@1402, #t1@1406);
    @premise know(*skR@1410, #t1@1413);
    @conclusion know(*sign(tuple6(#tb@1400, [Nb@1401], pk(skA()), x1@1402, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1403);
};

Stage rule: 
@rule{
    @premise init(*skA(), *skR@1359, *#ta@1360, *tuple6(#tb@1361, Nb@1356, pk(skA()), [Na@1362], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1358]);
    @premise know(*tuple6(#tb@1361, Nb@1356, pk(skA()), [Na@1362], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), #t1@1364);
    @premise new(*[Na@1362], newA(), tuple3(skA(), skA(), #ta@1365));
    @premise new(*[Na@1358], newA(), tuple3(skA(), skR@1359, #ta@1360));
    @premise init(*skA(), *skA(), *#ta@1365, *Nb@1356, *[Na@1362]);
    @premise know(*skR@1359, #t1@1363);
    @conclusion know(*sign(Nb@1356, skA()), #t@1357);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule in cache: 5
Rule staged: 104
Rule before check and clean: 
@rule{
    @premise know(*#tb@1416, #t0@1417);
    @premise know(*x1@1414, #t1@1418);
    @premise know(*pk(skA()), #t2@1419);
    @premise know(*[Na@1420], #t3@1421);
    @premise know(*X(skA(), pk(skA())), #t4@1422);
    @premise know(*aenc(Y(skA(), pk(skA())), pk(skA())), #t5@1423);
    @premise init(*skA(), *skR@1424, *#ta@1425, *tuple6(#tb@1416, x1@1414, pk(skA()), [Na@1420], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1426]);
    @premise new(*[Na@1420], newA(), tuple3(skA(), skA(), #ta@1427));
    @premise new(*[Na@1426], newA(), tuple3(skA(), skR@1424, #ta@1425));
    @premise init(*skA(), *skA(), *#ta@1427, *x1@1414, *[Na@1420]);
    @premise know(*skR@1424, #t1@1428);
    @conclusion know(*sign(x1@1414, skA()), #t@1415);
    @constraint #t@141 - #t2@1419 >= 0;
    @constraint #t@141 - #t5@1423 >= 0;
    @constraint #t@141 - #t4@1422 >= 0;
    @constraint #t@141 - #t3@1421 >= 0;
    @constraint #t@141 - #t1@1418 >= 0;
    @constraint -#t0@1417 + #t@141 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*skA(), *skR@1424, *#ta@1425, *tuple6(#tb@1416, x1@1414, pk(skA()), [Na@1420], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1426]);
    @premise know(*aenc(Y(skA(), pk(skA())), pk(skA())), #t5@1423);
    @premise new(*[Na@1420], newA(), tuple3(skA(), skA(), #ta@1427));
    @premise know(*X(skA(), pk(skA())), #t4@1422);
    @premise new(*[Na@1426], newA(), tuple3(skA(), skR@1424, #ta@1425));
    @premise init(*skA(), *skA(), *#ta@1427, *x1@1414, *[Na@1420]);
    @premise know(*pk(skA()), #t2@1419);
    @premise know(*[Na@1420], #t3@1421);
    @premise know(*#tb@1416, #t0@1417);
    @premise know(*x1@1414, #t1@1418);
    @premise know(*skR@1424, #t1@1428);
    @conclusion know(*sign(x1@1414, skA()), #t@1415);
};

Stage rule: 
@rule{
    @premise new(*[Nb@1367], newB(), tuple4(skA(), skB(), #tb@1366, Na@1368));
    @premise new(*[Na@1369], newA(), tuple3(skA(), skR@1370, #ta@1371));
    @premise init(*skA(), *skR@1370, *#ta@1371, *[Nb@1367], *[Na@1369]);
    @premise know(*[Nb@1367], #t1@1373);
    @premise know(*skR@1370, #t1@1372);
    @conclusion accept(skA(), skB(), #tb@1366, [Nb@1367], Na@1368);
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise new(*[Na@532], newA(), tuple3(skA(), skR@534, #ta@535));
    @conclusion know(*[Na@532], #t1@533);
    @constraint #t1@533 - #ta@535 >= 0;
};
Rule in cache: 5
Rule staged: 105
Rule before check and clean: 
@rule{
    @premise new(*[Na@1430], newA(), tuple3(skA(), skR@1432, #ta@1433));
    @premise new(*[Na@1430], newB(), tuple4(skA(), skB(), #tb@1429, Na@1431));
    @premise new(*[Na@1434], newA(), tuple3(skA(), skR@1435, #ta@1436));
    @premise init(*skA(), *skR@1435, *#ta@1436, *[Na@1430], *[Na@1434]);
    @premise know(*skR@1435, #t1@1437);
    @conclusion accept(skA(), skB(), #tb@1429, [Na@1430], Na@1431);
    @constraint #t1@533 - #ta@1433 >= 0;
};
Rule invalid. 

Compose by at 3 : 
@rule{
    @premise new(*[Na@639], newA(), tuple3(skA(), skB(), #ta@640));
    @premise new(*[Nb@637], newB(), tuple4(skA(), skB(), #tb@641, [Na@639]));
    @conclusion know(*[Nb@637], #t1@638);
};
Rule in cache: 5
Rule staged: 105
Rule before check and clean: 
@rule{
    @premise new(*[Na@1441], newA(), tuple3(skA(), skB(), #ta@1442));
    @premise new(*[Nb@1439], newB(), tuple4(skA(), skB(), #tb@1443, [Na@1441]));
    @premise new(*[Nb@1439], newB(), tuple4(skA(), skB(), #tb@1438, Na@1440));
    @premise new(*[Na@1444], newA(), tuple3(skA(), skR@1445, #ta@1446));
    @premise init(*skA(), *skR@1445, *#ta@1446, *[Nb@1439], *[Na@1444]);
    @premise know(*skR@1445, #t1@1447);
    @conclusion accept(skA(), skB(), #tb@1438, [Nb@1439], Na@1440);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1439], newB(), tuple4(skA(), skB(), #tb@1443, [Na@1441]));
    @premise new(*[Na@1441], newA(), tuple3(skA(), skB(), #ta@1442));
    @premise new(*[Na@1444], newA(), tuple3(skA(), skR@1445, #ta@1446));
    @premise init(*skA(), *skR@1445, *#ta@1446, *[Nb@1439], *[Na@1444]);
    @premise know(*skR@1445, #t1@1447);
    @conclusion accept(skA(), skB(), #tb@1443, [Nb@1439], [Na@1441]);
};

Compose by at 3 : 
@rule{
    @premise new(*[Na@647], newA(), tuple3(skA(), skB(), #ta@649));
    @premise new(*[Nb@650], newB(), tuple4(skA(), skB(), #tb@651, [Na@647]));
    @conclusion know(*[Na@647], #t3@648);
};
Rule in cache: 6
Rule staged: 105
Rule before check and clean: 
@rule{
    @premise new(*[Na@1449], newA(), tuple3(skA(), skB(), #ta@1451));
    @premise new(*[Nb@1452], newB(), tuple4(skA(), skB(), #tb@1453, [Na@1449]));
    @premise new(*[Na@1449], newB(), tuple4(skA(), skB(), #tb@1448, Na@1450));
    @premise new(*[Na@1454], newA(), tuple3(skA(), skR@1455, #ta@1456));
    @premise init(*skA(), *skR@1455, *#ta@1456, *[Na@1449], *[Na@1454]);
    @premise know(*skR@1455, #t1@1457);
    @conclusion accept(skA(), skB(), #tb@1448, [Na@1449], Na@1450);
};
Rule invalid. 

Compose by at 3 : 
@rule{
    @premise know(*sk@1306, #t1@1307);
    @premise new(*[Nb@1304], newB(), tuple4(sk@1306, skB(), #tb@1308, x1@1309));
    @premise know(*x1@1309, #t1@1310);
    @conclusion know(*[Nb@1304], #t1@1305);
};
Rule in cache: 6
Rule staged: 105
Rule before check and clean: 
@rule{
    @premise know(*sk@1461, #t1@1462);
    @premise new(*[Nb@1459], newB(), tuple4(sk@1461, skB(), #tb@1463, x1@1464));
    @premise know(*x1@1464, #t1@1465);
    @premise new(*[Nb@1459], newB(), tuple4(skA(), skB(), #tb@1458, Na@1460));
    @premise new(*[Na@1466], newA(), tuple3(skA(), skR@1467, #ta@1468));
    @premise init(*skA(), *skR@1467, *#ta@1468, *[Nb@1459], *[Na@1466]);
    @premise know(*skR@1467, #t1@1469);
    @conclusion accept(skA(), skB(), #tb@1458, [Nb@1459], Na@1460);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1459], newB(), tuple4(skA(), skB(), #tb@1463, x1@1464));
    @premise new(*[Na@1466], newA(), tuple3(skA(), skR@1467, #ta@1468));
    @premise init(*skA(), *skR@1467, *#ta@1468, *[Nb@1459], *[Na@1466]);
    @premise know(*skA(), #t1@1462);
    @premise know(*x1@1464, #t1@1465);
    @premise know(*skR@1467, #t1@1469);
    @conclusion accept(skA(), skB(), #tb@1463, [Nb@1459], x1@1464);
};

Stage rule: 
@rule{
    @premise know(*skA(), #t1@1378);
    @premise new(*[Nb@1375], newB(), tuple4(skA(), skB(), #tb@1379, x1@1380));
    @premise know(*x1@1380, #t1@1381);
    @conclusion accept(skA(), skB(), #tb@1379, [Nb@1375], x1@1380);
};
Rule added at 0.

Stage rule: 
@rule{
    @premise know(*sk@1384, #t1@1386);
    @premise new(*[Nb@1387], newB(), tuple4(sk@1384, skB(), #tb@1388, x1@1389));
    @premise know(*x1@1389, #t1@1390);
    @premise know(*m@1383, #t1@1391);
    @conclusion know(*aenc(m@1383, pk(sk@1384)), #t@1385);
    @constraint -#t1@1391 + #t@1385 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 5
Rule staged: 107
Rule before check and clean: 
@rule{
    @premise know(*sk@1472, #t1@1473);
    @premise new(*[Nb@1474], newB(), tuple4(sk@1472, skB(), #tb@1475, x1@1476));
    @premise know(*x1@1476, #t1@1477);
    @premise know(*m@1470, #t1@1478);
    @premise know(*sk@1472, #t1@1479);
    @conclusion know(*m@1470, #t@1471);
    @constraint -#t1@1479 + #t@1471 >= 0;
    @constraint -#t1@1478 + #t@1385 >= 0;
    @constraint #t@1471 - #t@1385 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*sk@1392, #t1@1394);
    @premise new(*[Nb@1395], newB(), tuple4(sk@1392, skB(), #tb@1396, x1@1397));
    @premise know(*x1@1397, #t1@1398);
    @conclusion know(*Y(skB(), pk(sk@1392)), #t@1393);
    @constraint #t@1393 - #t1@1394 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise init(*skA(), *skR@1410, *#ta@1411, *tuple5(#ta@1404, x1@1402, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1412]);
    @premise know(*aenc(Y(skA(), pk(skB())), pk(skB())), #t4@1409);
    @premise new(*[Nb@1401], newB(), tuple4(skA(), skB(), #tb@1400, x1@1402));
    @premise know(*X(skA(), pk(skB())), #t3@1408);
    @premise new(*[Na@1412], newA(), tuple3(skA(), skR@1410, #ta@1411));
    @premise know(*pk(skB()), #t2@1407);
    @premise know(*#ta@1404, #t0@1405);
    @premise know(*x1@1402, #t1@1406);
    @premise know(*skR@1410, #t1@1413);
    @conclusion know(*sign(tuple6(#tb@1400, [Nb@1401], pk(skA()), x1@1402, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1403);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@474, #t1@476);
    @premise know(*m@473, #t1@477);
    @conclusion know(*aenc(m@473, pk(sk@474)), #t@475);
    @constraint -#t1@477 + #t@475 >= 0;
    @constraint #t@475 - #t1@476 >= 0;
};
Rule in cache: 3
Rule staged: 109
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@1484);
    @premise know(*Y(skA(), pk(skB())), #t1@1485);
    @premise init(*skA(), *skR@1486, *#ta@1487, *tuple5(#ta@1488, x1@1482, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1489]);
    @premise new(*[Nb@1481], newB(), tuple4(skA(), skB(), #tb@1480, x1@1482));
    @premise know(*X(skA(), pk(skB())), #t3@1490);
    @premise new(*[Na@1489], newA(), tuple3(skA(), skR@1486, #ta@1487));
    @premise know(*pk(skB()), #t2@1491);
    @premise know(*#ta@1488, #t0@1492);
    @premise know(*x1@1482, #t1@1493);
    @premise know(*skR@1486, #t1@1494);
    @conclusion know(*sign(tuple6(#tb@1480, [Nb@1481], pk(skA()), x1@1482, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1483);
    @constraint #t@475 - #t1@1484 >= 0;
    @constraint -#t1@1485 + #t@475 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*skA(), *skR@1486, *#ta@1487, *tuple5(#ta@1488, x1@1482, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1489]);
    @premise new(*[Nb@1481], newB(), tuple4(skA(), skB(), #tb@1480, x1@1482));
    @premise know(*Y(skA(), pk(skB())), #t1@1485);
    @premise know(*X(skA(), pk(skB())), #t3@1490);
    @premise new(*[Na@1489], newA(), tuple3(skA(), skR@1486, #ta@1487));
    @premise know(*pk(skB()), #t2@1491);
    @premise know(*skB(), #t1@1484);
    @premise know(*#ta@1488, #t0@1492);
    @premise know(*x1@1482, #t1@1493);
    @premise know(*skR@1486, #t1@1494);
    @conclusion know(*sign(tuple6(#tb@1480, [Nb@1481], pk(skA()), x1@1482, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1483);
};

Compose by at 1 : 
@rule{
    @premise know(*m@481, #t1@483);
    @conclusion know(*aenc(m@481, pk(skB())), #t@482);
    @constraint -#t1@483 + #t@482 >= 0;
};
Rule in cache: 4
Rule staged: 109
Rule before check and clean: 
@rule{
    @premise know(*Y(skA(), pk(skB())), #t1@1499);
    @premise init(*skA(), *skR@1500, *#ta@1501, *tuple5(#ta@1502, x1@1497, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1503]);
    @premise new(*[Nb@1496], newB(), tuple4(skA(), skB(), #tb@1495, x1@1497));
    @premise know(*X(skA(), pk(skB())), #t3@1504);
    @premise new(*[Na@1503], newA(), tuple3(skA(), skR@1500, #ta@1501));
    @premise know(*pk(skB()), #t2@1505);
    @premise know(*#ta@1502, #t0@1506);
    @premise know(*x1@1497, #t1@1507);
    @premise know(*skR@1500, #t1@1508);
    @conclusion know(*sign(tuple6(#tb@1495, [Nb@1496], pk(skA()), x1@1497, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1498);
    @constraint -#t1@1499 + #t@482 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*skA(), *skR@1500, *#ta@1501, *tuple5(#ta@1502, x1@1497, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1503]);
    @premise new(*[Nb@1496], newB(), tuple4(skA(), skB(), #tb@1495, x1@1497));
    @premise know(*Y(skA(), pk(skB())), #t1@1499);
    @premise know(*X(skA(), pk(skB())), #t3@1504);
    @premise new(*[Na@1503], newA(), tuple3(skA(), skR@1500, #ta@1501));
    @premise know(*pk(skB()), #t2@1505);
    @premise know(*#ta@1502, #t0@1506);
    @premise know(*x1@1497, #t1@1507);
    @premise know(*skR@1500, #t1@1508);
    @conclusion know(*sign(tuple6(#tb@1495, [Nb@1496], pk(skA()), x1@1497, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1498);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@546], newA(), tuple3(skA(), skR@544, #ta@547));
    @conclusion know(*aenc(Y(skA(), pk(skR@544)), pk(skR@544)), #t4@545);
    @constraint #t4@545 - #ta@547 >= 0;
};
Rule in cache: 5
Rule staged: 109
Rule before check and clean: 
@rule{
    @premise new(*[Na@1513], newA(), tuple3(skA(), skB(), #ta@1514));
    @premise init(*skA(), *skR@1515, *#ta@1516, *tuple5(#ta@1517, x1@1511, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1518]);
    @premise new(*[Nb@1510], newB(), tuple4(skA(), skB(), #tb@1509, x1@1511));
    @premise know(*X(skA(), pk(skB())), #t3@1519);
    @premise new(*[Na@1518], newA(), tuple3(skA(), skR@1515, #ta@1516));
    @premise know(*pk(skB()), #t2@1520);
    @premise know(*#ta@1517, #t0@1521);
    @premise know(*x1@1511, #t1@1522);
    @premise know(*skR@1515, #t1@1523);
    @conclusion know(*sign(tuple6(#tb@1509, [Nb@1510], pk(skA()), x1@1511, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1512);
    @constraint #t4@545 - #ta@1514 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*skA(), *skR@1515, *#ta@1516, *tuple5(#ta@1517, x1@1511, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1518]);
    @premise new(*[Nb@1510], newB(), tuple4(skA(), skB(), #tb@1509, x1@1511));
    @premise new(*[Na@1513], newA(), tuple3(skA(), skB(), #ta@1514));
    @premise know(*X(skA(), pk(skB())), #t3@1519);
    @premise new(*[Na@1518], newA(), tuple3(skA(), skR@1515, #ta@1516));
    @premise know(*pk(skB()), #t2@1520);
    @premise know(*#ta@1517, #t0@1521);
    @premise know(*x1@1511, #t1@1522);
    @premise know(*skR@1515, #t1@1523);
    @conclusion know(*sign(tuple6(#tb@1509, [Nb@1510], pk(skA()), x1@1511, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1512);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@593], newA(), tuple3(skA(), skR@591, #ta@594));
    @premise know(*m@590, #t1@595);
    @conclusion know(*aenc(m@590, pk(skR@591)), #t@592);
    @constraint #t@592 - #ta@594 >= 0;
    @constraint -#t1@595 + #t@592 >= 0;
};
Rule in cache: 6
Rule staged: 109
Rule before check and clean: 
@rule{
    @premise new(*[Na@1528], newA(), tuple3(skA(), skB(), #ta@1529));
    @premise know(*Y(skA(), pk(skB())), #t1@1530);
    @premise init(*skA(), *skR@1531, *#ta@1532, *tuple5(#ta@1533, x1@1526, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1534]);
    @premise new(*[Nb@1525], newB(), tuple4(skA(), skB(), #tb@1524, x1@1526));
    @premise know(*X(skA(), pk(skB())), #t3@1535);
    @premise new(*[Na@1534], newA(), tuple3(skA(), skR@1531, #ta@1532));
    @premise know(*pk(skB()), #t2@1536);
    @premise know(*#ta@1533, #t0@1537);
    @premise know(*x1@1526, #t1@1538);
    @premise know(*skR@1531, #t1@1539);
    @conclusion know(*sign(tuple6(#tb@1524, [Nb@1525], pk(skA()), x1@1526, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1527);
    @constraint #t@592 - #ta@1529 >= 0;
    @constraint -#t1@1530 + #t@592 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*skA(), *skR@1531, *#ta@1532, *tuple5(#ta@1533, x1@1526, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1534]);
    @premise new(*[Nb@1525], newB(), tuple4(skA(), skB(), #tb@1524, x1@1526));
    @premise new(*[Na@1528], newA(), tuple3(skA(), skB(), #ta@1529));
    @premise know(*Y(skA(), pk(skB())), #t1@1530);
    @premise know(*X(skA(), pk(skB())), #t3@1535);
    @premise new(*[Na@1534], newA(), tuple3(skA(), skR@1531, #ta@1532));
    @premise know(*pk(skB()), #t2@1536);
    @premise know(*#ta@1533, #t0@1537);
    @premise know(*x1@1526, #t1@1538);
    @premise know(*skR@1531, #t1@1539);
    @conclusion know(*sign(tuple6(#tb@1524, [Nb@1525], pk(skA()), x1@1526, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1527);
};

Compose by at 1 : 
@rule{
    @premise know(*sk@1384, #t1@1386);
    @premise new(*[Nb@1387], newB(), tuple4(sk@1384, skB(), #tb@1388, x1@1389));
    @premise know(*x1@1389, #t1@1390);
    @premise know(*m@1383, #t1@1391);
    @conclusion know(*aenc(m@1383, pk(sk@1384)), #t@1385);
    @constraint -#t1@1391 + #t@1385 >= 0;
};
Rule in cache: 7
Rule staged: 109
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@1544);
    @premise new(*[Nb@1545], newB(), tuple4(skB(), skB(), #tb@1546, x1@1547));
    @premise know(*x1@1547, #t1@1548);
    @premise know(*Y(skA(), pk(skB())), #t1@1549);
    @premise init(*skA(), *skR@1550, *#ta@1551, *tuple5(#ta@1552, x1@1542, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1553]);
    @premise new(*[Nb@1541], newB(), tuple4(skA(), skB(), #tb@1540, x1@1542));
    @premise know(*X(skA(), pk(skB())), #t3@1554);
    @premise new(*[Na@1553], newA(), tuple3(skA(), skR@1550, #ta@1551));
    @premise know(*pk(skB()), #t2@1555);
    @premise know(*#ta@1552, #t0@1556);
    @premise know(*x1@1542, #t1@1557);
    @premise know(*skR@1550, #t1@1558);
    @conclusion know(*sign(tuple6(#tb@1540, [Nb@1541], pk(skA()), x1@1542, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1543);
    @constraint -#t1@1549 + #t@1385 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*skA(), *skR@1550, *#ta@1551, *tuple5(#ta@1552, x1@1542, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1553]);
    @premise new(*[Nb@1541], newB(), tuple4(skA(), skB(), #tb@1540, x1@1542));
    @premise new(*[Nb@1545], newB(), tuple4(skB(), skB(), #tb@1546, x1@1547));
    @premise know(*Y(skA(), pk(skB())), #t1@1549);
    @premise know(*X(skA(), pk(skB())), #t3@1554);
    @premise new(*[Na@1553], newA(), tuple3(skA(), skR@1550, #ta@1551));
    @premise know(*pk(skB()), #t2@1555);
    @premise know(*skB(), #t1@1544);
    @premise know(*#ta@1552, #t0@1556);
    @premise know(*x1@1547, #t1@1548);
    @premise know(*x1@1542, #t1@1557);
    @premise know(*skR@1550, #t1@1558);
    @conclusion know(*sign(tuple6(#tb@1540, [Nb@1541], pk(skA()), x1@1542, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1543);
};

Stage rule: 
@rule{
    @premise init(*skA(), *skR@1424, *#ta@1425, *tuple6(#tb@1416, x1@1414, pk(skA()), [Na@1420], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1426]);
    @premise know(*aenc(Y(skA(), pk(skA())), pk(skA())), #t5@1423);
    @premise new(*[Na@1420], newA(), tuple3(skA(), skA(), #ta@1427));
    @premise know(*X(skA(), pk(skA())), #t4@1422);
    @premise new(*[Na@1426], newA(), tuple3(skA(), skR@1424, #ta@1425));
    @premise init(*skA(), *skA(), *#ta@1427, *x1@1414, *[Na@1420]);
    @premise know(*pk(skA()), #t2@1419);
    @premise know(*[Na@1420], #t3@1421);
    @premise know(*#tb@1416, #t0@1417);
    @premise know(*x1@1414, #t1@1418);
    @premise know(*skR@1424, #t1@1428);
    @conclusion know(*sign(x1@1414, skA()), #t@1415);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@474, #t1@476);
    @premise know(*m@473, #t1@477);
    @conclusion know(*aenc(m@473, pk(sk@474)), #t@475);
    @constraint -#t1@477 + #t@475 >= 0;
    @constraint #t@475 - #t1@476 >= 0;
};
Rule in cache: 7
Rule staged: 110
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1561);
    @premise know(*Y(skA(), pk(skA())), #t1@1562);
    @premise init(*skA(), *skR@1563, *#ta@1564, *tuple6(#tb@1565, x1@1559, pk(skA()), [Na@1566], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1567]);
    @premise new(*[Na@1566], newA(), tuple3(skA(), skA(), #ta@1568));
    @premise know(*X(skA(), pk(skA())), #t4@1569);
    @premise new(*[Na@1567], newA(), tuple3(skA(), skR@1563, #ta@1564));
    @premise init(*skA(), *skA(), *#ta@1568, *x1@1559, *[Na@1566]);
    @premise know(*pk(skA()), #t2@1570);
    @premise know(*[Na@1566], #t3@1571);
    @premise know(*#tb@1565, #t0@1572);
    @premise know(*x1@1559, #t1@1573);
    @premise know(*skR@1563, #t1@1574);
    @conclusion know(*sign(x1@1559, skA()), #t@1560);
    @constraint #t@475 - #t1@1561 >= 0;
    @constraint -#t1@1562 + #t@475 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*skA(), *skR@1563, *#ta@1564, *tuple6(#tb@1565, x1@1559, pk(skA()), [Na@1566], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1567]);
    @premise new(*[Na@1566], newA(), tuple3(skA(), skA(), #ta@1568));
    @premise know(*Y(skA(), pk(skA())), #t1@1562);
    @premise know(*X(skA(), pk(skA())), #t4@1569);
    @premise new(*[Na@1567], newA(), tuple3(skA(), skR@1563, #ta@1564));
    @premise init(*skA(), *skA(), *#ta@1568, *x1@1559, *[Na@1566]);
    @premise know(*pk(skA()), #t2@1570);
    @premise know(*skA(), #t1@1561);
    @premise know(*[Na@1566], #t3@1571);
    @premise know(*#tb@1565, #t0@1572);
    @premise know(*x1@1559, #t1@1573);
    @premise know(*skR@1563, #t1@1574);
    @conclusion know(*sign(x1@1559, skA()), #t@1560);
};

Compose by at 1 : 
@rule{
    @premise know(*m@478, #t1@480);
    @conclusion know(*aenc(m@478, pk(skA())), #t@479);
    @constraint -#t1@480 + #t@479 >= 0;
};
Rule in cache: 8
Rule staged: 110
Rule before check and clean: 
@rule{
    @premise know(*Y(skA(), pk(skA())), #t1@1577);
    @premise init(*skA(), *skR@1578, *#ta@1579, *tuple6(#tb@1580, x1@1575, pk(skA()), [Na@1581], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1582]);
    @premise new(*[Na@1581], newA(), tuple3(skA(), skA(), #ta@1583));
    @premise know(*X(skA(), pk(skA())), #t4@1584);
    @premise new(*[Na@1582], newA(), tuple3(skA(), skR@1578, #ta@1579));
    @premise init(*skA(), *skA(), *#ta@1583, *x1@1575, *[Na@1581]);
    @premise know(*pk(skA()), #t2@1585);
    @premise know(*[Na@1581], #t3@1586);
    @premise know(*#tb@1580, #t0@1587);
    @premise know(*x1@1575, #t1@1588);
    @premise know(*skR@1578, #t1@1589);
    @conclusion know(*sign(x1@1575, skA()), #t@1576);
    @constraint -#t1@1577 + #t@479 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*skA(), *skR@1578, *#ta@1579, *tuple6(#tb@1580, x1@1575, pk(skA()), [Na@1581], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1582]);
    @premise new(*[Na@1581], newA(), tuple3(skA(), skA(), #ta@1583));
    @premise know(*Y(skA(), pk(skA())), #t1@1577);
    @premise know(*X(skA(), pk(skA())), #t4@1584);
    @premise new(*[Na@1582], newA(), tuple3(skA(), skR@1578, #ta@1579));
    @premise init(*skA(), *skA(), *#ta@1583, *x1@1575, *[Na@1581]);
    @premise know(*pk(skA()), #t2@1585);
    @premise know(*[Na@1581], #t3@1586);
    @premise know(*#tb@1580, #t0@1587);
    @premise know(*x1@1575, #t1@1588);
    @premise know(*skR@1578, #t1@1589);
    @conclusion know(*sign(x1@1575, skA()), #t@1576);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@546], newA(), tuple3(skA(), skR@544, #ta@547));
    @conclusion know(*aenc(Y(skA(), pk(skR@544)), pk(skR@544)), #t4@545);
    @constraint #t4@545 - #ta@547 >= 0;
};
Rule in cache: 9
Rule staged: 110
Rule before check and clean: 
@rule{
    @premise new(*[Na@1592], newA(), tuple3(skA(), skA(), #ta@1593));
    @premise init(*skA(), *skR@1594, *#ta@1595, *tuple6(#tb@1596, x1@1590, pk(skA()), [Na@1597], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1598]);
    @premise new(*[Na@1597], newA(), tuple3(skA(), skA(), #ta@1599));
    @premise know(*X(skA(), pk(skA())), #t4@1600);
    @premise new(*[Na@1598], newA(), tuple3(skA(), skR@1594, #ta@1595));
    @premise init(*skA(), *skA(), *#ta@1599, *x1@1590, *[Na@1597]);
    @premise know(*pk(skA()), #t2@1601);
    @premise know(*[Na@1597], #t3@1602);
    @premise know(*#tb@1596, #t0@1603);
    @premise know(*x1@1590, #t1@1604);
    @premise know(*skR@1594, #t1@1605);
    @conclusion know(*sign(x1@1590, skA()), #t@1591);
    @constraint #t4@545 - #ta@1593 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*skA(), *skR@1594, *#ta@1595, *tuple6(#tb@1596, x1@1590, pk(skA()), [Na@1597], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1598]);
    @premise new(*[Na@1592], newA(), tuple3(skA(), skA(), #ta@1593));
    @premise new(*[Na@1597], newA(), tuple3(skA(), skA(), #ta@1599));
    @premise know(*X(skA(), pk(skA())), #t4@1600);
    @premise new(*[Na@1598], newA(), tuple3(skA(), skR@1594, #ta@1595));
    @premise init(*skA(), *skA(), *#ta@1599, *x1@1590, *[Na@1597]);
    @premise know(*pk(skA()), #t2@1601);
    @premise know(*[Na@1597], #t3@1602);
    @premise know(*#tb@1596, #t0@1603);
    @premise know(*x1@1590, #t1@1604);
    @premise know(*skR@1594, #t1@1605);
    @conclusion know(*sign(x1@1590, skA()), #t@1591);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@593], newA(), tuple3(skA(), skR@591, #ta@594));
    @premise know(*m@590, #t1@595);
    @conclusion know(*aenc(m@590, pk(skR@591)), #t@592);
    @constraint #t@592 - #ta@594 >= 0;
    @constraint -#t1@595 + #t@592 >= 0;
};
Rule in cache: 10
Rule staged: 110
Rule before check and clean: 
@rule{
    @premise new(*[Na@1608], newA(), tuple3(skA(), skA(), #ta@1609));
    @premise know(*Y(skA(), pk(skA())), #t1@1610);
    @premise init(*skA(), *skR@1611, *#ta@1612, *tuple6(#tb@1613, x1@1606, pk(skA()), [Na@1614], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1615]);
    @premise new(*[Na@1614], newA(), tuple3(skA(), skA(), #ta@1616));
    @premise know(*X(skA(), pk(skA())), #t4@1617);
    @premise new(*[Na@1615], newA(), tuple3(skA(), skR@1611, #ta@1612));
    @premise init(*skA(), *skA(), *#ta@1616, *x1@1606, *[Na@1614]);
    @premise know(*pk(skA()), #t2@1618);
    @premise know(*[Na@1614], #t3@1619);
    @premise know(*#tb@1613, #t0@1620);
    @premise know(*x1@1606, #t1@1621);
    @premise know(*skR@1611, #t1@1622);
    @conclusion know(*sign(x1@1606, skA()), #t@1607);
    @constraint #t@592 - #ta@1609 >= 0;
    @constraint -#t1@1610 + #t@592 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*skA(), *skR@1611, *#ta@1612, *tuple6(#tb@1613, x1@1606, pk(skA()), [Na@1614], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1615]);
    @premise new(*[Na@1608], newA(), tuple3(skA(), skA(), #ta@1609));
    @premise new(*[Na@1614], newA(), tuple3(skA(), skA(), #ta@1616));
    @premise know(*Y(skA(), pk(skA())), #t1@1610);
    @premise know(*X(skA(), pk(skA())), #t4@1617);
    @premise new(*[Na@1615], newA(), tuple3(skA(), skR@1611, #ta@1612));
    @premise init(*skA(), *skA(), *#ta@1616, *x1@1606, *[Na@1614]);
    @premise know(*pk(skA()), #t2@1618);
    @premise know(*[Na@1614], #t3@1619);
    @premise know(*#tb@1613, #t0@1620);
    @premise know(*x1@1606, #t1@1621);
    @premise know(*skR@1611, #t1@1622);
    @conclusion know(*sign(x1@1606, skA()), #t@1607);
};

Compose by at 1 : 
@rule{
    @premise know(*sk@1384, #t1@1386);
    @premise new(*[Nb@1387], newB(), tuple4(sk@1384, skB(), #tb@1388, x1@1389));
    @premise know(*x1@1389, #t1@1390);
    @premise know(*m@1383, #t1@1391);
    @conclusion know(*aenc(m@1383, pk(sk@1384)), #t@1385);
    @constraint -#t1@1391 + #t@1385 >= 0;
};
Rule in cache: 11
Rule staged: 110
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1625);
    @premise new(*[Nb@1626], newB(), tuple4(skA(), skB(), #tb@1627, x1@1628));
    @premise know(*x1@1628, #t1@1629);
    @premise know(*Y(skA(), pk(skA())), #t1@1630);
    @premise init(*skA(), *skR@1631, *#ta@1632, *tuple6(#tb@1633, x1@1623, pk(skA()), [Na@1634], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1635]);
    @premise new(*[Na@1634], newA(), tuple3(skA(), skA(), #ta@1636));
    @premise know(*X(skA(), pk(skA())), #t4@1637);
    @premise new(*[Na@1635], newA(), tuple3(skA(), skR@1631, #ta@1632));
    @premise init(*skA(), *skA(), *#ta@1636, *x1@1623, *[Na@1634]);
    @premise know(*pk(skA()), #t2@1638);
    @premise know(*[Na@1634], #t3@1639);
    @premise know(*#tb@1633, #t0@1640);
    @premise know(*x1@1623, #t1@1641);
    @premise know(*skR@1631, #t1@1642);
    @conclusion know(*sign(x1@1623, skA()), #t@1624);
    @constraint -#t1@1630 + #t@1385 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise init(*skA(), *skR@1631, *#ta@1632, *tuple6(#tb@1633, x1@1623, pk(skA()), [Na@1634], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1635]);
    @premise new(*[Nb@1626], newB(), tuple4(skA(), skB(), #tb@1627, x1@1628));
    @premise new(*[Na@1634], newA(), tuple3(skA(), skA(), #ta@1636));
    @premise know(*X(skA(), pk(skA())), #t4@1637);
    @premise know(*Y(skA(), pk(skA())), #t1@1630);
    @premise new(*[Na@1635], newA(), tuple3(skA(), skR@1631, #ta@1632));
    @premise init(*skA(), *skA(), *#ta@1636, *x1@1623, *[Na@1634]);
    @premise know(*pk(skA()), #t2@1638);
    @premise know(*skA(), #t1@1625);
    @premise know(*[Na@1634], #t3@1639);
    @premise know(*#tb@1633, #t0@1640);
    @premise know(*x1@1628, #t1@1629);
    @premise know(*x1@1623, #t1@1641);
    @premise know(*skR@1631, #t1@1642);
    @conclusion know(*sign(x1@1623, skA()), #t@1624);
};

Stage rule: 
@rule{
    @premise new(*[Nb@1439], newB(), tuple4(skA(), skB(), #tb@1443, [Na@1441]));
    @premise new(*[Na@1441], newA(), tuple3(skA(), skB(), #ta@1442));
    @premise new(*[Na@1444], newA(), tuple3(skA(), skR@1445, #ta@1446));
    @premise init(*skA(), *skR@1445, *#ta@1446, *[Nb@1439], *[Na@1444]);
    @premise know(*skR@1445, #t1@1447);
    @conclusion accept(skA(), skB(), #tb@1443, [Nb@1439], [Na@1441]);
};
Rule added.

Check rule against queries: 
@rule{
    @premise new(*[Nb@1439], newB(), tuple4(skA(), skB(), #tb@1443, [Na@1441]));
    @premise new(*[Na@1441], newA(), tuple3(skA(), skB(), #ta@1442));
    @premise new(*[Na@1444], newA(), tuple3(skA(), skR@1445, #ta@1446));
    @premise init(*skA(), *skR@1445, *#ta@1446, *[Nb@1439], *[Na@1444]);
    @premise know(*skR@1445, #t1@1447);
    @conclusion accept(skA(), skB(), #tb@1443, [Nb@1439], [Na@1441]);
};
Before checking:
0. Requested parameter relation:
[@universe]

After checking:
Cannot find any parameter relation satisfying the requested properties.


Details:
General Rules: 
Rule No. [0.0]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};

Rule No. [0.1]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};

Rule No. [0.2]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};

Rule No. [0.3]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};

Rule No. [0.4]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple3(x0@32, x1@33, x2@34), #t@35);
    @conclusion know(*x0@32, #t0@36);
    @constraint -#t@35 + #t0@36 >= 0;
};

Rule No. [0.5]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple3(x0@37, x1@38, x2@39), #t@40);
    @conclusion know(*x1@38, #t1@41);
    @constraint -#t@40 + #t1@41 >= 0;
};

Rule No. [0.6]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple3(x0@42, x1@43, x2@44), #t@45);
    @conclusion know(*x2@44, #t2@46);
    @constraint -#t@45 + #t2@46 >= 0;
};

Rule No. [0.7]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};

Rule No. [0.8]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};

Rule No. [0.9]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};

Rule No. [0.10]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};

Rule No. [0.11]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};

Rule No. [0.12]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};

Rule No. [0.13]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple5(x0@93, x1@94, x2@95, x3@96, x4@97), #t@98);
    @conclusion know(*x0@93, #t0@99);
    @constraint -#t@98 + #t0@99 >= 0;
};

Rule No. [0.14]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple5(x0@100, x1@101, x2@102, x3@103, x4@104), #t@105);
    @conclusion know(*x1@101, #t1@106);
    @constraint -#t@105 + #t1@106 >= 0;
};

Rule No. [0.15]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple5(x0@107, x1@108, x2@109, x3@110, x4@111), #t@112);
    @conclusion know(*x2@109, #t2@113);
    @constraint -#t@112 + #t2@113 >= 0;
};

Rule No. [0.16]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple5(x0@114, x1@115, x2@116, x3@117, x4@118), #t@119);
    @conclusion know(*x3@117, #t3@120);
    @constraint -#t@119 + #t3@120 >= 0;
};

Rule No. [0.17]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple5(x0@121, x1@122, x2@123, x3@124, x4@125), #t@126);
    @conclusion know(*x4@125, #t4@127);
    @constraint -#t@126 + #t4@127 >= 0;
};

Rule No. [0.18]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};

Rule No. [0.19]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple6(x0@142, x1@143, x2@144, x3@145, x4@146, x5@147), #t@148);
    @conclusion know(*x0@142, #t0@149);
    @constraint -#t@148 + #t0@149 >= 0;
};

Rule No. [0.20]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple6(x0@150, x1@151, x2@152, x3@153, x4@154, x5@155), #t@156);
    @conclusion know(*x1@151, #t1@157);
    @constraint -#t@156 + #t1@157 >= 0;
};

Rule No. [0.21]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple6(x0@158, x1@159, x2@160, x3@161, x4@162, x5@163), #t@164);
    @conclusion know(*x2@160, #t2@165);
    @constraint -#t@164 + #t2@165 >= 0;
};

Rule No. [0.22]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple6(x0@166, x1@167, x2@168, x3@169, x4@170, x5@171), #t@172);
    @conclusion know(*x3@169, #t3@173);
    @constraint -#t@172 + #t3@173 >= 0;
};

Rule No. [0.23]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple6(x0@174, x1@175, x2@176, x3@177, x4@178, x5@179), #t@180);
    @conclusion know(*x4@178, #t4@181);
    @constraint -#t@180 + #t4@181 >= 0;
};

Rule No. [0.24]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple6(x0@182, x1@183, x2@184, x3@185, x4@186, x5@187), #t@188);
    @conclusion know(*x5@187, #t5@189);
    @constraint -#t@188 + #t5@189 >= 0;
};

Rule No. [1.0]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*m@191, #t1@192);
    @conclusion know(*hash(m@191), #t@193);
    @constraint -#t1@192 + #t@193 >= 0;
};

Rule No. [1.1]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};

Rule No. [1.2]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};

Rule No. [1.3]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};

Rule No. [1.4]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};

Rule No. [1.5]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};

Rule No. [1.6]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @conclusion know(*A(), #t@221);
};

Rule No. [1.7]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @conclusion know(*B(), #t@222);
};

Rule No. [1.8]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};

Rule No. [1.9]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};

Rule No. [1.10]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};

Rule No. [1.11]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};

Rule No. [1.12]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise new(*[Na@240], newA(), tuple3(skA(), skR@241, #ta@242));
    @conclusion know(*sign(tuple5(#ta@242, [Na@240], pk(skR@241), X(skA(), pk(skR@241)), aenc(Y(skA(), pk(skR@241)), pk(skR@241))), skA()), #ta@242);
};

Rule No. [1.13]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise new(*[Nb@244], newB(), tuple4(skI@245, skB(), #tb@246, Na@247));
    @premise know(*sign(tuple5(#ta@248, Na@247, pk(skB()), X(skI@245, pk(skB())), aenc(Y(skI@245, pk(skB())), pk(skB()))), skI@245), #t1@249);
    @conclusion know(*sign(tuple6(#tb@246, [Nb@244], pk(skI@245), Na@247, X(skB(), pk(skI@245)), aenc(Y(skB(), pk(skI@245)), pk(skI@245))), skB()), #t@250);
};

Rule No. [1.14]
Valid Rule
Intial Rule
Selectable at 2:
@rule{
    @premise new(*[Na@251], newA(), tuple3(skA(), skR@252, #ta@253));
    @premise init(*skA(), *skR@252, *#ta@253, *Nb@254, *[Na@251]);
    @premise know(*sign(tuple6(#tb@255, Nb@254, pk(skA()), [Na@251], X(skR@252, pk(skA())), aenc(Y(skR@252, pk(skA())), pk(skA()))), skR@252), #t1@256);
    @conclusion know(*sign(Nb@254, skA()), #t@257);
};

Rule No. [1.15]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise new(*[Nb@258], newB(), tuple4(skA(), skB(), #tb@259, Na@260));
    @premise know(*sign([Nb@258], skA()), #t1@261);
    @conclusion accept(skA(), skB(), #tb@259, [Nb@258], Na@260);
};

Rule No. [1.16]
Valid Rule
Composed by Rule [1.1] and [1.4]
Not Selectable : 
@rule{
    @premise know(*sk@474, #t1@476);
    @premise know(*m@473, #t1@477);
    @conclusion know(*aenc(m@473, pk(sk@474)), #t@475);
    @constraint -#t1@477 + #t@475 >= 0;
    @constraint #t@475 - #t1@476 >= 0;
};

Rule No. [1.17]
Valid Rule
Composed by Rule [1.8] and [1.4]
Not Selectable : 
@rule{
    @premise know(*m@478, #t1@480);
    @conclusion know(*aenc(m@478, pk(skA())), #t@479);
    @constraint -#t1@480 + #t@479 >= 0;
};

Rule No. [1.18]
Valid Rule
Composed by Rule [1.9] and [1.4]
Not Selectable : 
@rule{
    @premise know(*m@481, #t1@483);
    @conclusion know(*aenc(m@481, pk(skB())), #t@482);
    @constraint -#t1@483 + #t@482 >= 0;
};

Rule No. [1.19]
Valid Rule
Composed by Rule [1.12] and [1.3]
Not Selectable : 
@rule{
    @premise new(*[Na@485], newA(), tuple3(skA(), skR@486, #ta@484));
    @conclusion know(*tuple5(#ta@484, [Na@485], pk(skR@486), X(skA(), pk(skR@486)), aenc(Y(skA(), pk(skR@486)), pk(skR@486))), #t@487);
    @constraint -#ta@484 + #t@487 >= 0;
};

Rule No. [1.20]
Valid Rule
Composed by Rule [1.2] and [1.13]
Selectable at 0:
@rule{
    @premise know(*tuple5(#ta@493, Na@491, pk(skB()), X(sk@490, pk(skB())), aenc(Y(sk@490, pk(skB())), pk(skB()))), #t1@494);
    @premise know(*sk@490, #t2@495);
    @premise new(*[Nb@489], newB(), tuple4(sk@490, skB(), #tb@488, Na@491));
    @conclusion know(*sign(tuple6(#tb@488, [Nb@489], pk(sk@490), Na@491, X(skB(), pk(sk@490)), aenc(Y(skB(), pk(sk@490)), pk(sk@490))), skB()), #t@492);
};

Rule No. [1.21]
Valid Rule
Composed by Rule [1.12] and [1.13]
Not Selectable : 
@rule{
    @premise new(*[Na@498], newA(), tuple3(skA(), skB(), #ta@500));
    @premise new(*[Nb@497], newB(), tuple4(skA(), skB(), #tb@496, [Na@498]));
    @conclusion know(*sign(tuple6(#tb@496, [Nb@497], pk(skA()), [Na@498], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@499);
};

Rule No. [1.22]
Valid Rule
Composed by Rule [1.2] and [1.14]
Selectable at 0:
@rule{
    @premise know(*tuple6(#tb@503, Nb@501, pk(skA()), [Na@504], X(sk@505, pk(skA())), aenc(Y(sk@505, pk(skA())), pk(skA()))), #t1@506);
    @premise know(*sk@505, #t2@507);
    @premise new(*[Na@504], newA(), tuple3(skA(), sk@505, #ta@508));
    @premise init(*skA(), *sk@505, *#ta@508, *Nb@501, *[Na@504]);
    @conclusion know(*sign(Nb@501, skA()), #t@502);
};

Rule No. [1.23]
Valid Rule
Composed by Rule [1.2] and [1.15]
Selectable at 0:
@rule{
    @premise know(*[Nb@510], #t1@512);
    @premise know(*skA(), #t2@513);
    @premise new(*[Nb@510], newB(), tuple4(skA(), skB(), #tb@509, Na@511));
    @conclusion accept(skA(), skB(), #tb@509, [Nb@510], Na@511);
};

Rule No. [1.25]
Valid Rule
Composed by Rule [1.19] and [0.14]
Not Selectable : 
@rule{
    @premise new(*[Na@532], newA(), tuple3(skA(), skR@534, #ta@535));
    @conclusion know(*[Na@532], #t1@533);
    @constraint #t1@533 - #ta@535 >= 0;
};

Rule No. [1.26]
Valid Rule
Composed by Rule [1.19] and [0.15]
Not Selectable : 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*pk(skR@536), #t2@537);
    @constraint #t2@537 - #ta@539 >= 0;
};

Rule No. [1.27]
Valid Rule
Composed by Rule [1.19] and [0.16]
Not Selectable : 
@rule{
    @premise new(*[Na@542], newA(), tuple3(skA(), skR@540, #ta@543));
    @conclusion know(*X(skA(), pk(skR@540)), #t3@541);
    @constraint #t3@541 - #ta@543 >= 0;
};

Rule No. [1.28]
Valid Rule
Composed by Rule [1.19] and [0.17]
Not Selectable : 
@rule{
    @premise new(*[Na@546], newA(), tuple3(skA(), skR@544, #ta@547));
    @conclusion know(*aenc(Y(skA(), pk(skR@544)), pk(skR@544)), #t4@545);
    @constraint #t4@545 - #ta@547 >= 0;
};

Rule No. [1.29]
Replaced by Rule [1.48]
Composed by Rule [0.12] and [1.20]
Selectable at 0:
@rule{
    @premise know(*aenc(Y(sk@550, pk(skB())), pk(skB())), #t4@558);
    @premise new(*[Nb@549], newB(), tuple4(sk@550, skB(), #tb@548, x1@551));
    @premise know(*X(sk@550, pk(skB())), #t3@557);
    @premise know(*pk(skB()), #t2@556);
    @premise know(*x1@551, #t1@555);
    @premise know(*sk@550, #t2@559);
    @conclusion know(*sign(tuple6(#tb@548, [Nb@549], pk(sk@550), x1@551, X(skB(), pk(sk@550)), aenc(Y(skB(), pk(sk@550)), pk(sk@550))), skB()), #t@552);
};

Rule No. [1.30]
Valid Rule
Composed by Rule [1.21] and [1.3]
Not Selectable : 
@rule{
    @premise new(*[Na@562], newA(), tuple3(skA(), skB(), #ta@564));
    @premise new(*[Nb@561], newB(), tuple4(skA(), skB(), #tb@560, [Na@562]));
    @conclusion know(*tuple6(#tb@560, [Nb@561], pk(skA()), [Na@562], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), #t@563);
};

Rule No. [1.31]
Valid Rule
Composed by Rule [1.21] and [1.14]
Not Selectable : 
@rule{
    @premise new(*[Na@567], newA(), tuple3(skA(), skB(), #ta@568));
    @premise new(*[Nb@565], newB(), tuple4(skA(), skB(), #tb@569, [Na@567]));
    @premise init(*skA(), *skB(), *#ta@568, *[Nb@565], *[Na@567]);
    @conclusion know(*sign([Nb@565], skA()), #t@566);
};

Rule No. [1.32]
Replaced by Rule [1.54]
Composed by Rule [0.18] and [1.22]
Selectable at 0:
@rule{
    @premise know(*aenc(Y(sk@579, pk(skA())), pk(skA())), #t5@581);
    @premise new(*[Na@577], newA(), tuple3(skA(), sk@579, #ta@583));
    @premise know(*X(sk@579, pk(skA())), #t4@580);
    @premise know(*pk(skA()), #t2@576);
    @premise init(*skA(), *sk@579, *#ta@583, *x1@571, *[Na@577]);
    @premise know(*[Na@577], #t3@578);
    @premise know(*sk@579, #t2@582);
    @premise know(*x1@571, #t1@575);
    @conclusion know(*sign(x1@571, skA()), #t@572);
};

Rule No. [1.33]
Valid Rule
Composed by Rule [1.26] and [1.4]
Not Selectable : 
@rule{
    @premise new(*[Na@593], newA(), tuple3(skA(), skR@591, #ta@594));
    @premise know(*m@590, #t1@595);
    @conclusion know(*aenc(m@590, pk(skR@591)), #t@592);
    @constraint #t@592 - #ta@594 >= 0;
    @constraint -#t1@595 + #t@592 >= 0;
};

Rule No. [1.34]
Valid Rule
Composed by Rule [1.28] and [1.5]
Not Selectable : 
@rule{
    @premise new(*[Na@598], newA(), tuple3(skA(), skR@596, #ta@599));
    @premise know(*skR@596, #t1@600);
    @conclusion know(*Y(skA(), pk(skR@596)), #t@597);
    @constraint #t@597 - #ta@599 >= 0;
    @constraint -#t1@600 + #t@597 >= 0;
};

Rule No. [1.35]
Replaced by Rule [1.36]
Composed by Rule [1.16] and [1.29]
Selectable at 1:
@rule{
    @premise new(*[Nb@602], newB(), tuple4(sk@603, skB(), #tb@601, x1@604));
    @premise know(*X(sk@603, pk(skB())), #t3@608);
    @premise know(*Y(sk@603, pk(skB())), #t1@607);
    @premise know(*pk(skB()), #t2@609);
    @premise know(*skB(), #t1@606);
    @premise know(*x1@604, #t1@610);
    @premise know(*sk@603, #t2@611);
    @conclusion know(*sign(tuple6(#tb@601, [Nb@602], pk(sk@603), x1@604, X(skB(), pk(sk@603)), aenc(Y(skB(), pk(sk@603)), pk(sk@603))), skB()), #t@605);
};

Rule No. [1.36]
Replaced by Rule [1.48]
Composed by Rule [1.18] and [1.29]
Selectable at 1:
@rule{
    @premise new(*[Nb@613], newB(), tuple4(sk@614, skB(), #tb@612, x1@615));
    @premise know(*Y(sk@614, pk(skB())), #t1@617);
    @premise know(*X(sk@614, pk(skB())), #t3@618);
    @premise know(*pk(skB()), #t2@619);
    @premise know(*x1@615, #t1@620);
    @premise know(*sk@614, #t2@621);
    @conclusion know(*sign(tuple6(#tb@612, [Nb@613], pk(sk@614), x1@615, X(skB(), pk(sk@614)), aenc(Y(skB(), pk(sk@614)), pk(sk@614))), skB()), #t@616);
};

Rule No. [1.37]
Replaced by Rule [1.48]
Composed by Rule [1.28] and [1.29]
Selectable at 2:
@rule{
    @premise new(*[Nb@623], newB(), tuple4(skA(), skB(), #tb@622, x1@624));
    @premise new(*[Na@626], newA(), tuple3(skA(), skB(), #ta@627));
    @premise know(*X(skA(), pk(skB())), #t3@628);
    @premise know(*pk(skB()), #t2@629);
    @premise know(*skA(), #t2@631);
    @premise know(*x1@624, #t1@630);
    @conclusion know(*sign(tuple6(#tb@622, [Nb@623], pk(skA()), x1@624, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@625);
};

Rule No. [1.39]
Valid Rule
Composed by Rule [1.30] and [0.20]
Not Selectable : 
@rule{
    @premise new(*[Na@639], newA(), tuple3(skA(), skB(), #ta@640));
    @premise new(*[Nb@637], newB(), tuple4(skA(), skB(), #tb@641, [Na@639]));
    @conclusion know(*[Nb@637], #t1@638);
};

Rule No. [1.40]
Valid Rule
Composed by Rule [1.30] and [0.22]
Not Selectable : 
@rule{
    @premise new(*[Na@647], newA(), tuple3(skA(), skB(), #ta@649));
    @premise new(*[Nb@650], newB(), tuple4(skA(), skB(), #tb@651, [Na@647]));
    @conclusion know(*[Na@647], #t3@648);
};

Rule No. [1.41]
Valid Rule
Composed by Rule [1.30] and [0.23]
Not Selectable : 
@rule{
    @premise new(*[Na@653], newA(), tuple3(skA(), skB(), #ta@654));
    @premise new(*[Nb@655], newB(), tuple4(skA(), skB(), #tb@656, [Na@653]));
    @conclusion know(*X(skB(), pk(skA())), #t4@652);
};

Rule No. [1.42]
Valid Rule
Composed by Rule [1.30] and [0.24]
Not Selectable : 
@rule{
    @premise new(*[Na@658], newA(), tuple3(skA(), skB(), #ta@659));
    @premise new(*[Nb@660], newB(), tuple4(skA(), skB(), #tb@661, [Na@658]));
    @conclusion know(*aenc(Y(skB(), pk(skA())), pk(skA())), #t5@657);
};

Rule No. [1.44]
Replaced by Rule [1.45]
Composed by Rule [1.16] and [1.32]
Selectable at 1:
@rule{
    @premise new(*[Na@678], newA(), tuple3(skA(), sk@676, #ta@679));
    @premise know(*Y(sk@676, pk(skA())), #t1@677);
    @premise know(*X(sk@676, pk(skA())), #t4@680);
    @premise know(*pk(skA()), #t2@681);
    @premise init(*skA(), *sk@676, *#ta@679, *x1@673, *[Na@678]);
    @premise know(*skA(), #t1@675);
    @premise know(*[Na@678], #t3@682);
    @premise know(*sk@676, #t2@683);
    @premise know(*x1@673, #t1@684);
    @conclusion know(*sign(x1@673, skA()), #t@674);
};

Rule No. [1.45]
Replaced by Rule [1.54]
Composed by Rule [1.17] and [1.32]
Selectable at 1:
@rule{
    @premise new(*[Na@689], newA(), tuple3(skA(), sk@687, #ta@690));
    @premise know(*Y(sk@687, pk(skA())), #t1@688);
    @premise know(*X(sk@687, pk(skA())), #t4@691);
    @premise know(*pk(skA()), #t2@692);
    @premise init(*skA(), *sk@687, *#ta@690, *x1@685, *[Na@689]);
    @premise know(*[Na@689], #t3@693);
    @premise know(*sk@687, #t2@694);
    @premise know(*x1@685, #t1@695);
    @conclusion know(*sign(x1@685, skA()), #t@686);
};

Rule No. [1.46]
Replaced by Rule [1.53]
Composed by Rule [1.28] and [1.32]
Selectable at 2:
@rule{
    @premise new(*[Na@698], newA(), tuple3(skA(), skA(), #ta@699));
    @premise new(*[Na@700], newA(), tuple3(skA(), skA(), #ta@701));
    @premise know(*X(skA(), pk(skA())), #t4@702);
    @premise init(*skA(), *skA(), *#ta@701, *x1@696, *[Na@700]);
    @premise know(*pk(skA()), #t2@703);
    @premise know(*skA(), #t2@705);
    @premise know(*[Na@700], #t3@704);
    @premise know(*x1@696, #t1@706);
    @conclusion know(*sign(x1@696, skA()), #t@697);
};

Rule No. [1.47]
Replaced by Rule [1.56]
Composed by Rule [1.10] and [1.35]
Selectable at 1:
@rule{
    @premise new(*[Nb@740], newB(), tuple4(sk@741, skB(), #tb@739, x1@742));
    @premise know(*Y(sk@741, pk(skB())), #t1@746);
    @premise know(*pk(skB()), #t2@745);
    @premise know(*skB(), #t1@748);
    @premise know(*sk@741, #t1@744);
    @premise know(*x1@742, #t1@749);
    @conclusion know(*sign(tuple6(#tb@739, [Nb@740], pk(sk@741), x1@742, X(skB(), pk(sk@741)), aenc(Y(skB(), pk(sk@741)), pk(sk@741))), skB()), #t@743);
};

Rule No. [1.48]
Replaced by Rule [1.57]
Composed by Rule [1.11] and [1.36]
Selectable at 1:
@rule{
    @premise new(*[Nb@763], newB(), tuple4(sk@764, skB(), #tb@762, x1@765));
    @premise know(*X(sk@764, pk(skB())), #t3@769);
    @premise know(*pk(skB()), #t2@768);
    @premise know(*sk@764, #t1@767);
    @premise know(*x1@765, #t1@771);
    @conclusion know(*sign(tuple6(#tb@762, [Nb@763], pk(sk@764), x1@765, X(skB(), pk(sk@764)), aenc(Y(skB(), pk(sk@764)), pk(sk@764))), skB()), #t@766);
};

Rule No. [1.49]
Replaced by Rule [1.57]
Composed by Rule [1.10] and [1.37]
Selectable at 2:
@rule{
    @premise new(*[Nb@785], newB(), tuple4(skA(), skB(), #tb@784, x1@786));
    @premise new(*[Na@790], newA(), tuple3(skA(), skB(), #ta@791));
    @premise know(*pk(skB()), #t2@789);
    @premise know(*skA(), #t1@788);
    @premise know(*x1@786, #t1@794);
    @conclusion know(*sign(tuple6(#tb@784, [Nb@785], pk(skA()), x1@786, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@787);
};

Rule No. [1.50]
Valid Rule
Composed by Rule [1.39] and [1.23]
Selectable at 2:
@rule{
    @premise new(*[Na@809], newA(), tuple3(skA(), skB(), #ta@810));
    @premise new(*[Nb@807], newB(), tuple4(skA(), skB(), #tb@811, [Na@809]));
    @premise know(*skA(), #t2@812);
    @conclusion accept(skA(), skB(), #tb@811, [Nb@807], [Na@809]);
};

Rule No. [1.51]
Valid Rule
Composed by Rule [1.42] and [1.5]
Selectable at 2:
@rule{
    @premise new(*[Na@821], newA(), tuple3(skA(), skB(), #ta@822));
    @premise new(*[Nb@823], newB(), tuple4(skA(), skB(), #tb@824, [Na@821]));
    @premise know(*skA(), #t1@825);
    @conclusion know(*Y(skB(), pk(skA())), #t@820);
    @constraint -#t1@825 + #t@820 >= 0;
};

Rule No. [1.52]
Replaced by Rule [1.54]
Composed by Rule [1.42] and [1.32]
Selectable at 3:
@rule{
    @premise new(*[Nb@830], newB(), tuple4(skA(), skB(), #tb@831, [Na@828]));
    @premise new(*[Na@828], newA(), tuple3(skA(), skB(), #ta@829));
    @premise new(*[Na@832], newA(), tuple3(skA(), skB(), #ta@833));
    @premise know(*X(skB(), pk(skA())), #t4@834);
    @premise init(*skA(), *skB(), *#ta@833, *x1@826, *[Na@832]);
    @premise know(*pk(skA()), #t2@835);
    @premise know(*skB(), #t2@837);
    @premise know(*[Na@832], #t3@836);
    @premise know(*x1@826, #t1@838);
    @conclusion know(*sign(x1@826, skA()), #t@827);
};

Rule No. [1.53]
Replaced by Rule [1.54]
Composed by Rule [1.11] and [1.44]
Selectable at 1:
@rule{
    @premise new(*[Na@844], newA(), tuple3(skA(), sk@841, #ta@845));
    @premise know(*X(sk@841, pk(skA())), #t4@846);
    @premise know(*pk(skA()), #t2@843);
    @premise init(*skA(), *sk@841, *#ta@845, *x1@839, *[Na@844]);
    @premise know(*skA(), #t1@848);
    @premise know(*[Na@844], #t3@849);
    @premise know(*sk@841, #t1@842);
    @premise know(*x1@839, #t1@851);
    @conclusion know(*sign(x1@839, skA()), #t@840);
};

Rule No. [1.54]
Replaced by Rule [1.62]
Composed by Rule [1.11] and [1.45]
Selectable at 1:
@rule{
    @premise new(*[Na@870], newA(), tuple3(skA(), sk@867, #ta@871));
    @premise know(*X(sk@867, pk(skA())), #t4@872);
    @premise know(*pk(skA()), #t2@869);
    @premise init(*skA(), *sk@867, *#ta@871, *x1@865, *[Na@870]);
    @premise know(*[Na@870], #t3@874);
    @premise know(*sk@867, #t1@868);
    @premise know(*x1@865, #t1@876);
    @conclusion know(*sign(x1@865, skA()), #t@866);
};

Rule No. [1.55]
Replaced by Rule [1.61]
Composed by Rule [1.10] and [1.46]
Selectable at 3:
@rule{
    @premise new(*[Na@895], newA(), tuple3(skA(), skA(), #ta@896));
    @premise new(*[Na@893], newA(), tuple3(skA(), skA(), #ta@894));
    @premise init(*skA(), *skA(), *#ta@896, *x1@889, *[Na@895]);
    @premise know(*pk(skA()), #t2@892);
    @premise know(*skA(), #t1@891);
    @premise know(*[Na@895], #t3@899);
    @premise know(*x1@889, #t1@900);
    @conclusion know(*sign(x1@889, skA()), #t@890);
};

Rule No. [1.56]
Replaced by Rule [1.57]
Composed by Rule [1.11] and [1.47]
Selectable at 1:
@rule{
    @premise new(*[Nb@914], newB(), tuple4(sk@915, skB(), #tb@913, x1@916));
    @premise know(*pk(skB()), #t2@919);
    @premise know(*skB(), #t1@921);
    @premise know(*sk@915, #t1@918);
    @premise know(*x1@916, #t1@923);
    @conclusion know(*sign(tuple6(#tb@913, [Nb@914], pk(sk@915), x1@916, X(skB(), pk(sk@915)), aenc(Y(skB(), pk(sk@915)), pk(sk@915))), skB()), #t@917);
};

Rule No. [1.57]
Replaced by Rule [1.65]
Composed by Rule [1.10] and [1.48]
Selectable at 1:
@rule{
    @premise know(*sk@937, #t1@940);
    @premise know(*pk(skB()), #t2@941);
    @premise new(*[Nb@936], newB(), tuple4(sk@937, skB(), #tb@935, x1@938));
    @premise know(*x1@938, #t1@944);
    @conclusion know(*sign(tuple6(#tb@935, [Nb@936], pk(sk@937), x1@938, X(skB(), pk(sk@937)), aenc(Y(skB(), pk(sk@937)), pk(sk@937))), skB()), #t@939);
};

Rule No. [1.58]
Replaced by Rule [1.59]
Composed by Rule [1.1] and [1.49]
Selectable at 2:
@rule{
    @premise new(*[Nb@955], newB(), tuple4(skA(), skB(), #tb@954, x1@956));
    @premise new(*[Na@959], newA(), tuple3(skA(), skB(), #ta@960));
    @premise know(*skB(), #t1@958);
    @premise know(*skA(), #t1@961);
    @premise know(*x1@956, #t1@962);
    @conclusion know(*sign(tuple6(#tb@954, [Nb@955], pk(skA()), x1@956, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@957);
};

Rule No. [1.59]
Replaced by Rule [1.65]
Composed by Rule [1.9] and [1.49]
Selectable at 2:
@rule{
    @premise new(*[Nb@964], newB(), tuple4(skA(), skB(), #tb@963, x1@965));
    @premise new(*[Na@967], newA(), tuple3(skA(), skB(), #ta@968));
    @premise know(*skA(), #t1@969);
    @premise know(*x1@965, #t1@970);
    @conclusion know(*sign(tuple6(#tb@963, [Nb@964], pk(skA()), x1@965, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@966);
};

Rule No. [1.60]
Replaced by Rule [1.62]
Composed by Rule [1.10] and [1.52]
Selectable at 4:
@rule{
    @premise new(*[Nb@985], newB(), tuple4(skA(), skB(), #tb@986, [Na@987]));
    @premise new(*[Na@989], newA(), tuple3(skA(), skB(), #ta@990));
    @premise new(*[Na@987], newA(), tuple3(skA(), skB(), #ta@988));
    @premise init(*skA(), *skB(), *#ta@990, *x1@981, *[Na@989]);
    @premise know(*pk(skA()), #t2@984);
    @premise know(*skB(), #t1@983);
    @premise know(*[Na@989], #t3@993);
    @premise know(*x1@981, #t1@994);
    @conclusion know(*sign(x1@981, skA()), #t@982);
};

Rule No. [1.61]
Replaced by Rule [1.62]
Composed by Rule [1.10] and [1.53]
Selectable at 1:
@rule{
    @premise new(*[Na@1016], newA(), tuple3(skA(), sk@1013, #ta@1017));
    @premise know(*pk(skA()), #t2@1015);
    @premise init(*skA(), *sk@1013, *#ta@1017, *x1@1011, *[Na@1016]);
    @premise know(*skA(), #t1@1019);
    @premise know(*[Na@1016], #t3@1020);
    @premise know(*sk@1013, #t1@1014);
    @premise know(*x1@1011, #t1@1022);
    @conclusion know(*sign(x1@1011, skA()), #t@1012);
};

Rule No. [1.62]
Replaced by Rule [1.69]
Composed by Rule [1.10] and [1.54]
Selectable at 1:
@rule{
    @premise new(*[Na@1052], newA(), tuple3(skA(), sk@1049, #ta@1053));
    @premise know(*pk(skA()), #t2@1051);
    @premise init(*skA(), *sk@1049, *#ta@1053, *x1@1047, *[Na@1052]);
    @premise know(*[Na@1052], #t3@1055);
    @premise know(*sk@1049, #t1@1050);
    @premise know(*x1@1047, #t1@1057);
    @conclusion know(*sign(x1@1047, skA()), #t@1048);
};

Rule No. [1.63]
Replaced by Rule [1.68]
Composed by Rule [1.1] and [1.55]
Selectable at 3:
@rule{
    @premise new(*[Na@1083], newA(), tuple3(skA(), skA(), #ta@1084));
    @premise new(*[Na@1085], newA(), tuple3(skA(), skA(), #ta@1086));
    @premise init(*skA(), *skA(), *#ta@1084, *x1@1080, *[Na@1083]);
    @premise know(*skA(), #t1@1082);
    @premise know(*[Na@1083], #t3@1088);
    @premise know(*x1@1080, #t1@1089);
    @conclusion know(*sign(x1@1080, skA()), #t@1081);
};

Rule No. [1.64]
Replaced by Rule [1.65]
Composed by Rule [1.1] and [1.56]
Selectable at 0:
@rule{
    @premise know(*skB(), #t1@1115);
    @premise new(*[Nb@1111], newB(), tuple4(sk@1112, skB(), #tb@1110, x1@1113));
    @premise know(*sk@1112, #t1@1117);
    @premise know(*x1@1113, #t1@1118);
    @conclusion know(*sign(tuple6(#tb@1110, [Nb@1111], pk(sk@1112), x1@1113, X(skB(), pk(sk@1112)), aenc(Y(skB(), pk(sk@1112)), pk(sk@1112))), skB()), #t@1114);
};

Rule No. [1.65]
Valid Rule
Composed by Rule [1.9] and [1.57]
Not Selectable : 
@rule{
    @premise know(*sk@1147, #t1@1150);
    @premise new(*[Nb@1146], newB(), tuple4(sk@1147, skB(), #tb@1145, x1@1148));
    @premise know(*x1@1148, #t1@1151);
    @conclusion know(*sign(tuple6(#tb@1145, [Nb@1146], pk(sk@1147), x1@1148, X(skB(), pk(sk@1147)), aenc(Y(skB(), pk(sk@1147)), pk(sk@1147))), skB()), #t@1149);
};

Rule No. [1.66]
Replaced by Rule [1.67]
Composed by Rule [1.1] and [1.60]
Selectable at 4:
@rule{
    @premise new(*[Nb@1164], newB(), tuple4(skA(), skB(), #tb@1165, [Na@1166]));
    @premise new(*[Na@1167], newA(), tuple3(skA(), skB(), #ta@1168));
    @premise new(*[Na@1166], newA(), tuple3(skA(), skB(), #ta@1169));
    @premise init(*skA(), *skB(), *#ta@1168, *x1@1161, *[Na@1167]);
    @premise know(*skA(), #t1@1163);
    @premise know(*skB(), #t1@1170);
    @premise know(*[Na@1167], #t3@1171);
    @premise know(*x1@1161, #t1@1172);
    @conclusion know(*sign(x1@1161, skA()), #t@1162);
};

Rule No. [1.67]
Replaced by Rule [1.69]
Composed by Rule [1.8] and [1.60]
Selectable at 4:
@rule{
    @premise new(*[Nb@1175], newB(), tuple4(skA(), skB(), #tb@1176, [Na@1177]));
    @premise new(*[Na@1178], newA(), tuple3(skA(), skB(), #ta@1179));
    @premise new(*[Na@1177], newA(), tuple3(skA(), skB(), #ta@1180));
    @premise init(*skA(), *skB(), *#ta@1179, *x1@1173, *[Na@1178]);
    @premise know(*skB(), #t1@1181);
    @premise know(*[Na@1178], #t3@1182);
    @premise know(*x1@1173, #t1@1183);
    @conclusion know(*sign(x1@1173, skA()), #t@1174);
};

Rule No. [1.68]
Replaced by Rule [1.69]
Composed by Rule [1.1] and [1.61]
Selectable at 2:
@rule{
    @premise new(*[Na@1200], newA(), tuple3(skA(), sk@1201, #ta@1202));
    @premise init(*skA(), *sk@1201, *#ta@1202, *x1@1197, *[Na@1200]);
    @premise know(*skA(), #t1@1199);
    @premise know(*[Na@1200], #t3@1204);
    @premise know(*sk@1201, #t1@1205);
    @premise know(*x1@1197, #t1@1206);
    @conclusion know(*sign(x1@1197, skA()), #t@1198);
};

Rule No. [1.69]
Replaced by Rule [1.71]
Composed by Rule [1.8] and [1.62]
Selectable at 2:
@rule{
    @premise new(*[Na@1238], newA(), tuple3(skA(), sk@1239, #ta@1240));
    @premise init(*skA(), *sk@1239, *#ta@1240, *x1@1236, *[Na@1238]);
    @premise know(*[Na@1238], #t3@1241);
    @premise know(*sk@1239, #t1@1242);
    @premise know(*x1@1236, #t1@1243);
    @conclusion know(*sign(x1@1236, skA()), #t@1237);
};

Rule No. [1.70]
Valid Rule
Composed by Rule [1.65] and [1.3]
Not Selectable : 
@rule{
    @premise know(*sk@1256, #t1@1259);
    @premise new(*[Nb@1255], newB(), tuple4(sk@1256, skB(), #tb@1254, x1@1257));
    @premise know(*x1@1257, #t1@1260);
    @conclusion know(*tuple6(#tb@1254, [Nb@1255], pk(sk@1256), x1@1257, X(skB(), pk(sk@1256)), aenc(Y(skB(), pk(sk@1256)), pk(sk@1256))), #t@1258);
};

Rule No. [1.71]
Valid Rule
Composed by Rule [1.25] and [1.69]
Not Selectable : 
@rule{
    @premise new(*[Na@1270], newA(), tuple3(skA(), skR@1271, #ta@1272));
    @premise init(*skA(), *skR@1271, *#ta@1272, *x1@1268, *[Na@1270]);
    @premise know(*skR@1271, #t1@1275);
    @premise know(*x1@1268, #t1@1276);
    @conclusion know(*sign(x1@1268, skA()), #t@1269);
};

Rule No. [1.73]
Valid Rule
Composed by Rule [1.70] and [0.20]
Not Selectable : 
@rule{
    @premise know(*sk@1306, #t1@1307);
    @premise new(*[Nb@1304], newB(), tuple4(sk@1306, skB(), #tb@1308, x1@1309));
    @premise know(*x1@1309, #t1@1310);
    @conclusion know(*[Nb@1304], #t1@1305);
};

Rule No. [1.74]
Valid Rule
Composed by Rule [1.70] and [0.21]
Not Selectable : 
@rule{
    @premise know(*sk@1311, #t1@1313);
    @premise new(*[Nb@1314], newB(), tuple4(sk@1311, skB(), #tb@1315, x1@1316));
    @premise know(*x1@1316, #t1@1317);
    @conclusion know(*pk(sk@1311), #t2@1312);
};

Rule No. [1.75]
Valid Rule
Composed by Rule [1.70] and [0.23]
Not Selectable : 
@rule{
    @premise know(*sk@1325, #t1@1327);
    @premise new(*[Nb@1328], newB(), tuple4(sk@1325, skB(), #tb@1329, x1@1330));
    @premise know(*x1@1330, #t1@1331);
    @conclusion know(*X(skB(), pk(sk@1325)), #t4@1326);
};

Rule No. [1.76]
Valid Rule
Composed by Rule [1.70] and [0.24]
Not Selectable : 
@rule{
    @premise know(*sk@1332, #t1@1334);
    @premise new(*[Nb@1335], newB(), tuple4(sk@1332, skB(), #tb@1336, x1@1337));
    @premise know(*x1@1337, #t1@1338);
    @conclusion know(*aenc(Y(skB(), pk(sk@1332)), pk(sk@1332)), #t5@1333);
};

Rule No. [1.77]
Valid Rule
Composed by Rule [1.71] and [1.13]
Selectable at 1:
@rule{
    @premise init(*skA(), *skR@1351, *#ta@1352, *tuple5(#ta@1353, Na@1348, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1350]);
    @premise know(*tuple5(#ta@1353, Na@1348, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), #t1@1355);
    @premise new(*[Nb@1347], newB(), tuple4(skA(), skB(), #tb@1346, Na@1348));
    @premise new(*[Na@1350], newA(), tuple3(skA(), skR@1351, #ta@1352));
    @premise know(*skR@1351, #t1@1354);
    @conclusion know(*sign(tuple6(#tb@1346, [Nb@1347], pk(skA()), Na@1348, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1349);
};

Rule No. [1.78]
Valid Rule
Composed by Rule [1.71] and [1.14]
Selectable at 1:
@rule{
    @premise init(*skA(), *skR@1359, *#ta@1360, *tuple6(#tb@1361, Nb@1356, pk(skA()), [Na@1362], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1358]);
    @premise know(*tuple6(#tb@1361, Nb@1356, pk(skA()), [Na@1362], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), #t1@1364);
    @premise new(*[Na@1362], newA(), tuple3(skA(), skA(), #ta@1365));
    @premise new(*[Na@1358], newA(), tuple3(skA(), skR@1359, #ta@1360));
    @premise init(*skA(), *skA(), *#ta@1365, *Nb@1356, *[Na@1362]);
    @premise know(*skR@1359, #t1@1363);
    @conclusion know(*sign(Nb@1356, skA()), #t@1357);
};

Rule No. [1.79]
Valid Rule
Composed by Rule [1.71] and [1.15]
Selectable at 3:
@rule{
    @premise new(*[Nb@1367], newB(), tuple4(skA(), skB(), #tb@1366, Na@1368));
    @premise new(*[Na@1369], newA(), tuple3(skA(), skR@1370, #ta@1371));
    @premise init(*skA(), *skR@1370, *#ta@1371, *[Nb@1367], *[Na@1369]);
    @premise know(*[Nb@1367], #t1@1373);
    @premise know(*skR@1370, #t1@1372);
    @conclusion accept(skA(), skB(), #tb@1366, [Nb@1367], Na@1368);
};

Rule No. [1.80]
Valid Rule
Composed by Rule [1.73] and [1.23]
Selectable at 0:
@rule{
    @premise know(*skA(), #t1@1378);
    @premise new(*[Nb@1375], newB(), tuple4(skA(), skB(), #tb@1379, x1@1380));
    @premise know(*x1@1380, #t1@1381);
    @conclusion accept(skA(), skB(), #tb@1379, [Nb@1375], x1@1380);
};

Rule No. [1.81]
Valid Rule
Composed by Rule [1.74] and [1.4]
Not Selectable : 
@rule{
    @premise know(*sk@1384, #t1@1386);
    @premise new(*[Nb@1387], newB(), tuple4(sk@1384, skB(), #tb@1388, x1@1389));
    @premise know(*x1@1389, #t1@1390);
    @premise know(*m@1383, #t1@1391);
    @conclusion know(*aenc(m@1383, pk(sk@1384)), #t@1385);
    @constraint -#t1@1391 + #t@1385 >= 0;
};

Rule No. [1.82]
Valid Rule
Composed by Rule [1.76] and [1.5]
Not Selectable : 
@rule{
    @premise know(*sk@1392, #t1@1394);
    @premise new(*[Nb@1395], newB(), tuple4(sk@1392, skB(), #tb@1396, x1@1397));
    @premise know(*x1@1397, #t1@1398);
    @conclusion know(*Y(skB(), pk(sk@1392)), #t@1393);
    @constraint #t@1393 - #t1@1394 >= 0;
};

Rule No. [1.83]
Valid Rule
Composed by Rule [0.12] and [1.77]
Selectable at 1:
@rule{
    @premise init(*skA(), *skR@1410, *#ta@1411, *tuple5(#ta@1404, x1@1402, pk(skB()), X(skA(), pk(skB())), aenc(Y(skA(), pk(skB())), pk(skB()))), *[Na@1412]);
    @premise know(*aenc(Y(skA(), pk(skB())), pk(skB())), #t4@1409);
    @premise new(*[Nb@1401], newB(), tuple4(skA(), skB(), #tb@1400, x1@1402));
    @premise know(*X(skA(), pk(skB())), #t3@1408);
    @premise new(*[Na@1412], newA(), tuple3(skA(), skR@1410, #ta@1411));
    @premise know(*pk(skB()), #t2@1407);
    @premise know(*#ta@1404, #t0@1405);
    @premise know(*x1@1402, #t1@1406);
    @premise know(*skR@1410, #t1@1413);
    @conclusion know(*sign(tuple6(#tb@1400, [Nb@1401], pk(skA()), x1@1402, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@1403);
};

Rule No. [1.84]
Valid Rule
Composed by Rule [0.18] and [1.78]
Selectable at 1:
@rule{
    @premise init(*skA(), *skR@1424, *#ta@1425, *tuple6(#tb@1416, x1@1414, pk(skA()), [Na@1420], X(skA(), pk(skA())), aenc(Y(skA(), pk(skA())), pk(skA()))), *[Na@1426]);
    @premise know(*aenc(Y(skA(), pk(skA())), pk(skA())), #t5@1423);
    @premise new(*[Na@1420], newA(), tuple3(skA(), skA(), #ta@1427));
    @premise know(*X(skA(), pk(skA())), #t4@1422);
    @premise new(*[Na@1426], newA(), tuple3(skA(), skR@1424, #ta@1425));
    @premise init(*skA(), *skA(), *#ta@1427, *x1@1414, *[Na@1420]);
    @premise know(*pk(skA()), #t2@1419);
    @premise know(*[Na@1420], #t3@1421);
    @premise know(*#tb@1416, #t0@1417);
    @premise know(*x1@1414, #t1@1418);
    @premise know(*skR@1424, #t1@1428);
    @conclusion know(*sign(x1@1414, skA()), #t@1415);
};


Final Rules: 
Rule No. [1.24]
Valid Rule
Composed by Rule [1.19] and [0.13]
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@531, #ta@528));
    @conclusion know(*#ta@528, #t0@529);
    @constraint #t0@529 - #ta@528 >= 0;
};
with parameter relation:
[@universe]

Rule No. [1.38]
Valid Rule
Composed by Rule [1.30] and [0.19]
@rule{
    @premise new(*[Na@634], newA(), tuple3(skA(), skB(), #ta@635));
    @premise new(*[Nb@636], newB(), tuple4(skA(), skB(), #tb@632, [Na@634]));
    @conclusion know(*#tb@632, #t0@633);
};
with parameter relation:
[@universe]

Rule No. [1.43]
Valid Rule
Composed by Rule [1.31] and [1.15]
@rule{
    @premise new(*[Na@670], newA(), tuple3(skA(), skB(), #ta@671));
    @premise new(*[Nb@668], newB(), tuple4(skA(), skB(), #tb@672, [Na@670]));
    @premise init(*skA(), *skB(), *#ta@671, *[Nb@668], *[Na@670]);
    @conclusion accept(skA(), skB(), #tb@672, [Nb@668], [Na@670]);
};
with parameter relation:
[@universe]

Rule No. [1.72]
Valid Rule
Composed by Rule [1.70] and [0.19]
@rule{
    @premise know(*sk@1299, #t1@1300);
    @premise new(*[Nb@1301], newB(), tuple4(sk@1299, skB(), #tb@1297, x1@1302));
    @premise know(*x1@1302, #t1@1303);
    @conclusion know(*#tb@1297, #t0@1298);
};
with parameter relation:
[@universe]

Rule No. [1.85]
Valid Rule
Composed by Rule [1.39] and [1.79]
@rule{
    @premise new(*[Nb@1439], newB(), tuple4(skA(), skB(), #tb@1443, [Na@1441]));
    @premise new(*[Na@1441], newA(), tuple3(skA(), skB(), #ta@1442));
    @premise new(*[Na@1444], newA(), tuple3(skA(), skR@1445, #ta@1446));
    @premise init(*skA(), *skR@1445, *#ta@1446, *[Nb@1439], *[Na@1444]);
    @premise know(*skR@1445, #t1@1447);
    @conclusion accept(skA(), skB(), #tb@1443, [Nb@1439], [Na@1441]);
};
with parameter relation:
[@universe]


Cannot find any parameter relation satisfying the requested properties.


Overall generated rule count : 186
Basis size : 122
Verification time: 187

An attack exists.

