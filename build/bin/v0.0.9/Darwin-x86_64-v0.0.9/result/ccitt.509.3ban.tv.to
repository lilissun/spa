Rule in cache: 0
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};

Rule in cache: 1
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};

Rule in cache: 2
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};

Rule in cache: 3
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};

Rule in cache: 4
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple3(x0@32, x1@33, x2@34), #t@35);
    @conclusion know(*x0@32, #t0@36);
    @constraint -#t@35 + #t0@36 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple3(x0@32, x1@33, x2@34), #t@35);
    @conclusion know(*x0@32, #t0@36);
    @constraint -#t@35 + #t0@36 >= 0;
};

Rule in cache: 5
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple3(x0@37, x1@38, x2@39), #t@40);
    @conclusion know(*x1@38, #t1@41);
    @constraint -#t@40 + #t1@41 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple3(x0@37, x1@38, x2@39), #t@40);
    @conclusion know(*x1@38, #t1@41);
    @constraint -#t@40 + #t1@41 >= 0;
};

Rule in cache: 6
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple3(x0@42, x1@43, x2@44), #t@45);
    @conclusion know(*x2@44, #t2@46);
    @constraint -#t@45 + #t2@46 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple3(x0@42, x1@43, x2@44), #t@45);
    @conclusion know(*x2@44, #t2@46);
    @constraint -#t@45 + #t2@46 >= 0;
};

Rule in cache: 7
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};

Rule in cache: 8
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};

Rule in cache: 9
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};

Rule in cache: 10
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};

Rule in cache: 11
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};

Rule in cache: 12
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};

Rule in cache: 13
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple5(x0@93, x1@94, x2@95, x3@96, x4@97), #t@98);
    @conclusion know(*x0@93, #t0@99);
    @constraint -#t@98 + #t0@99 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple5(x0@93, x1@94, x2@95, x3@96, x4@97), #t@98);
    @conclusion know(*x0@93, #t0@99);
    @constraint -#t@98 + #t0@99 >= 0;
};

Rule in cache: 14
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple5(x0@100, x1@101, x2@102, x3@103, x4@104), #t@105);
    @conclusion know(*x1@101, #t1@106);
    @constraint -#t@105 + #t1@106 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple5(x0@100, x1@101, x2@102, x3@103, x4@104), #t@105);
    @conclusion know(*x1@101, #t1@106);
    @constraint -#t@105 + #t1@106 >= 0;
};

Rule in cache: 15
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple5(x0@107, x1@108, x2@109, x3@110, x4@111), #t@112);
    @conclusion know(*x2@109, #t2@113);
    @constraint -#t@112 + #t2@113 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple5(x0@107, x1@108, x2@109, x3@110, x4@111), #t@112);
    @conclusion know(*x2@109, #t2@113);
    @constraint -#t@112 + #t2@113 >= 0;
};

Rule in cache: 16
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple5(x0@114, x1@115, x2@116, x3@117, x4@118), #t@119);
    @conclusion know(*x3@117, #t3@120);
    @constraint -#t@119 + #t3@120 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple5(x0@114, x1@115, x2@116, x3@117, x4@118), #t@119);
    @conclusion know(*x3@117, #t3@120);
    @constraint -#t@119 + #t3@120 >= 0;
};

Rule in cache: 17
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple5(x0@121, x1@122, x2@123, x3@124, x4@125), #t@126);
    @conclusion know(*x4@125, #t4@127);
    @constraint -#t@126 + #t4@127 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple5(x0@121, x1@122, x2@123, x3@124, x4@125), #t@126);
    @conclusion know(*x4@125, #t4@127);
    @constraint -#t@126 + #t4@127 >= 0;
};

Rule in cache: 18
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};

Rule in cache: 19
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple6(x0@142, x1@143, x2@144, x3@145, x4@146, x5@147), #t@148);
    @conclusion know(*x0@142, #t0@149);
    @constraint -#t@148 + #t0@149 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple6(x0@142, x1@143, x2@144, x3@145, x4@146, x5@147), #t@148);
    @conclusion know(*x0@142, #t0@149);
    @constraint -#t@148 + #t0@149 >= 0;
};

Rule in cache: 20
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple6(x0@150, x1@151, x2@152, x3@153, x4@154, x5@155), #t@156);
    @conclusion know(*x1@151, #t1@157);
    @constraint -#t@156 + #t1@157 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple6(x0@150, x1@151, x2@152, x3@153, x4@154, x5@155), #t@156);
    @conclusion know(*x1@151, #t1@157);
    @constraint -#t@156 + #t1@157 >= 0;
};

Rule in cache: 21
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple6(x0@158, x1@159, x2@160, x3@161, x4@162, x5@163), #t@164);
    @conclusion know(*x2@160, #t2@165);
    @constraint -#t@164 + #t2@165 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple6(x0@158, x1@159, x2@160, x3@161, x4@162, x5@163), #t@164);
    @conclusion know(*x2@160, #t2@165);
    @constraint -#t@164 + #t2@165 >= 0;
};

Rule in cache: 22
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple6(x0@166, x1@167, x2@168, x3@169, x4@170, x5@171), #t@172);
    @conclusion know(*x3@169, #t3@173);
    @constraint -#t@172 + #t3@173 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple6(x0@166, x1@167, x2@168, x3@169, x4@170, x5@171), #t@172);
    @conclusion know(*x3@169, #t3@173);
    @constraint -#t@172 + #t3@173 >= 0;
};

Rule in cache: 23
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple6(x0@174, x1@175, x2@176, x3@177, x4@178, x5@179), #t@180);
    @conclusion know(*x4@178, #t4@181);
    @constraint -#t@180 + #t4@181 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple6(x0@174, x1@175, x2@176, x3@177, x4@178, x5@179), #t@180);
    @conclusion know(*x4@178, #t4@181);
    @constraint -#t@180 + #t4@181 >= 0;
};

Rule in cache: 24
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*tuple6(x0@182, x1@183, x2@184, x3@185, x4@186, x5@187), #t@188);
    @conclusion know(*x5@187, #t5@189);
    @constraint -#t@188 + #t5@189 >= 0;
};
Rule cached at priority 0: 
@rule{
    @premise know(*tuple6(x0@182, x1@183, x2@184, x3@185, x4@186, x5@187), #t@188);
    @conclusion know(*x5@187, #t5@189);
    @constraint -#t@188 + #t5@189 >= 0;
};

Rule in cache: 25
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m@191, #t1@192);
    @conclusion know(*hash(m@191), #t@193);
    @constraint -#t1@192 + #t@193 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@191, #t1@192);
    @conclusion know(*hash(m@191), #t@193);
    @constraint -#t1@192 + #t@193 >= 0;
};

Rule in cache: 26
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};

Rule in cache: 27
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};

Rule in cache: 28
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};

Rule in cache: 29
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};

Rule in cache: 30
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};

Rule in cache: 31
Rule staged: 0
Rule before check and clean: 
@rule{
    @conclusion know(*A(), #t@221);
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*A(), #t@221);
};

Rule in cache: 32
Rule staged: 0
Rule before check and clean: 
@rule{
    @conclusion know(*B(), #t@222);
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*B(), #t@222);
};

Rule in cache: 33
Rule staged: 0
Rule before check and clean: 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};

Rule in cache: 34
Rule staged: 0
Rule before check and clean: 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};
Rule cached at priority 1: 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};

Rule in cache: 35
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};

Rule in cache: 36
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};

Rule in cache: 37
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise new(*[Na@240], newA(), tuple3(skA(), skR@241, #ta@242));
    @conclusion know(*sign(tuple4([Na@240], pk(skR@241), X(skA(), pk(skR@241)), aenc(Y(skA(), pk(skR@241)), pk(skR@241))), skA()), #ta@242);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@240], newA(), tuple3(skA(), skR@241, #ta@242));
    @conclusion know(*sign(tuple4([Na@240], pk(skR@241), X(skA(), pk(skR@241)), aenc(Y(skA(), pk(skR@241)), pk(skR@241))), skA()), #ta@242);
};

Rule in cache: 38
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise new(*[Nb@244], newB(), tuple4(skI@245, skB(), #tb@246, Na@247));
    @premise know(*sign(tuple4(Na@247, pk(skB()), X(skI@245, pk(skB())), aenc(Y(skI@245, pk(skB())), pk(skB()))), skI@245), #t1@248);
    @conclusion know(*sign(tuple5([Nb@244], pk(skI@245), Na@247, X(skB(), pk(skI@245)), aenc(Y(skB(), pk(skI@245)), pk(skI@245))), skB()), #t@249);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@244], newB(), tuple4(skI@245, skB(), #tb@246, Na@247));
    @premise know(*sign(tuple4(Na@247, pk(skB()), X(skI@245, pk(skB())), aenc(Y(skI@245, pk(skB())), pk(skB()))), skI@245), #t1@248);
    @conclusion know(*sign(tuple5([Nb@244], pk(skI@245), Na@247, X(skB(), pk(skI@245)), aenc(Y(skB(), pk(skI@245)), pk(skI@245))), skB()), #t@249);
};

Rule in cache: 39
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise new(*[Na@250], newA(), tuple3(skA(), skR@251, #ta@252));
    @premise init(*skA(), *skR@251, *#ta@252, *Nb@253, *[Na@250]);
    @premise know(*sign(tuple5(Nb@253, pk(skA()), [Na@250], X(skR@251, pk(skA())), aenc(Y(skR@251, pk(skA())), pk(skA()))), skR@251), #t1@254);
    @conclusion know(*sign(tuple2(pk(skR@251), Nb@253), skA()), #t@255);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@250], newA(), tuple3(skA(), skR@251, #ta@252));
    @premise init(*skA(), *skR@251, *#ta@252, *Nb@253, *[Na@250]);
    @premise know(*sign(tuple5(Nb@253, pk(skA()), [Na@250], X(skR@251, pk(skA())), aenc(Y(skR@251, pk(skA())), pk(skA()))), skR@251), #t1@254);
    @conclusion know(*sign(tuple2(pk(skR@251), Nb@253), skA()), #t@255);
};

Rule in cache: 40
Rule staged: 0
Rule before check and clean: 
@rule{
    @premise new(*[Nb@256], newB(), tuple4(skA(), skB(), #tb@257, Na@258));
    @premise know(*sign(tuple2(pk(skB()), [Nb@256]), skA()), #t1@259);
    @conclusion accept(skA(), skB(), #tb@257, [Nb@256], Na@258);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@256], newB(), tuple4(skA(), skB(), #tb@257, Na@258));
    @premise know(*sign(tuple2(pk(skB()), [Nb@256]), skA()), #t1@259);
    @conclusion accept(skA(), skB(), #tb@257, [Nb@256], Na@258);
};

Stage rule: 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule in cache: 39
Rule staged: 2
Rule before check and clean: 
@rule{
    @premise know(*x0@266, #t0@268);
    @premise know(*x1@269, #t1@270);
    @conclusion know(*x0@266, #t0@267);
    @constraint #t0@267 - #t@15 >= 0;
    @constraint #t@15 - #t1@270 >= 0;
    @constraint -#t0@268 + #t@15 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule in cache: 38
Rule staged: 3
Rule before check and clean: 
@rule{
    @premise know(*x0@273, #t0@274);
    @premise know(*x1@271, #t1@275);
    @conclusion know(*x1@271, #t1@272);
    @constraint #t1@272 - #t@15 >= 0;
    @constraint #t@15 - #t1@275 >= 0;
    @constraint -#t0@274 + #t@15 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple3(x0@32, x1@33, x2@34), #t@35);
    @conclusion know(*x0@32, #t0@36);
    @constraint -#t@35 + #t0@36 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule in cache: 36
Rule staged: 5
Rule before check and clean: 
@rule{
    @premise know(*x0@276, #t0@278);
    @premise know(*x1@279, #t1@280);
    @premise know(*x2@281, #t2@282);
    @conclusion know(*x0@276, #t0@277);
    @constraint #t0@277 - #t@31 >= 0;
    @constraint #t@31 - #t2@282 >= 0;
    @constraint #t@31 - #t1@280 >= 0;
    @constraint -#t0@278 + #t@31 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple3(x0@37, x1@38, x2@39), #t@40);
    @conclusion know(*x1@38, #t1@41);
    @constraint -#t@40 + #t1@41 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule in cache: 35
Rule staged: 6
Rule before check and clean: 
@rule{
    @premise know(*x0@285, #t0@286);
    @premise know(*x1@283, #t1@287);
    @premise know(*x2@288, #t2@289);
    @conclusion know(*x1@283, #t1@284);
    @constraint #t1@284 - #t@31 >= 0;
    @constraint #t@31 - #t2@289 >= 0;
    @constraint #t@31 - #t1@287 >= 0;
    @constraint -#t0@286 + #t@31 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple3(x0@42, x1@43, x2@44), #t@45);
    @conclusion know(*x2@44, #t2@46);
    @constraint -#t@45 + #t2@46 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};
Rule in cache: 34
Rule staged: 7
Rule before check and clean: 
@rule{
    @premise know(*x0@292, #t0@293);
    @premise know(*x1@294, #t1@295);
    @premise know(*x2@290, #t2@296);
    @conclusion know(*x2@290, #t2@291);
    @constraint #t2@291 - #t@31 >= 0;
    @constraint #t@31 - #t2@296 >= 0;
    @constraint #t@31 - #t1@295 >= 0;
    @constraint -#t0@293 + #t@31 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 32
Rule staged: 9
Rule before check and clean: 
@rule{
    @premise know(*x0@297, #t0@299);
    @premise know(*x1@300, #t1@301);
    @premise know(*x2@302, #t2@303);
    @premise know(*x3@304, #t3@305);
    @conclusion know(*x0@297, #t0@298);
    @constraint #t@56 - #t1@301 >= 0;
    @constraint #t0@298 - #t@56 >= 0;
    @constraint #t@56 - #t3@305 >= 0;
    @constraint #t@56 - #t2@303 >= 0;
    @constraint -#t0@299 + #t@56 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 31
Rule staged: 10
Rule before check and clean: 
@rule{
    @premise know(*x0@308, #t0@309);
    @premise know(*x1@306, #t1@310);
    @premise know(*x2@311, #t2@312);
    @premise know(*x3@313, #t3@314);
    @conclusion know(*x1@306, #t1@307);
    @constraint #t@56 - #t1@310 >= 0;
    @constraint #t1@307 - #t@56 >= 0;
    @constraint #t@56 - #t3@314 >= 0;
    @constraint #t@56 - #t2@312 >= 0;
    @constraint -#t0@309 + #t@56 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 30
Rule staged: 11
Rule before check and clean: 
@rule{
    @premise know(*x0@317, #t0@318);
    @premise know(*x1@319, #t1@320);
    @premise know(*x2@315, #t2@321);
    @premise know(*x3@322, #t3@323);
    @conclusion know(*x2@315, #t2@316);
    @constraint #t@56 - #t1@320 >= 0;
    @constraint #t2@316 - #t@56 >= 0;
    @constraint #t@56 - #t3@323 >= 0;
    @constraint #t@56 - #t2@321 >= 0;
    @constraint -#t0@318 + #t@56 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 29
Rule staged: 12
Rule before check and clean: 
@rule{
    @premise know(*x0@326, #t0@327);
    @premise know(*x1@328, #t1@329);
    @premise know(*x2@330, #t2@331);
    @premise know(*x3@324, #t3@332);
    @conclusion know(*x3@324, #t3@325);
    @constraint #t@56 - #t1@329 >= 0;
    @constraint #t3@325 - #t@56 >= 0;
    @constraint #t@56 - #t3@332 >= 0;
    @constraint #t@56 - #t2@331 >= 0;
    @constraint -#t0@327 + #t@56 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple5(x0@93, x1@94, x2@95, x3@96, x4@97), #t@98);
    @conclusion know(*x0@93, #t0@99);
    @constraint -#t@98 + #t0@99 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule in cache: 27
Rule staged: 14
Rule before check and clean: 
@rule{
    @premise know(*x0@333, #t0@335);
    @premise know(*x1@336, #t1@337);
    @premise know(*x2@338, #t2@339);
    @premise know(*x3@340, #t3@341);
    @premise know(*x4@342, #t4@343);
    @conclusion know(*x0@333, #t0@334);
    @constraint #t@92 - #t1@337 >= 0;
    @constraint #t0@334 - #t@92 >= 0;
    @constraint #t@92 - #t4@343 >= 0;
    @constraint #t@92 - #t3@341 >= 0;
    @constraint #t@92 - #t2@339 >= 0;
    @constraint -#t0@335 + #t@92 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple5(x0@100, x1@101, x2@102, x3@103, x4@104), #t@105);
    @conclusion know(*x1@101, #t1@106);
    @constraint -#t@105 + #t1@106 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule in cache: 26
Rule staged: 15
Rule before check and clean: 
@rule{
    @premise know(*x0@346, #t0@347);
    @premise know(*x1@344, #t1@348);
    @premise know(*x2@349, #t2@350);
    @premise know(*x3@351, #t3@352);
    @premise know(*x4@353, #t4@354);
    @conclusion know(*x1@344, #t1@345);
    @constraint #t@92 - #t1@348 >= 0;
    @constraint #t1@345 - #t@92 >= 0;
    @constraint #t@92 - #t4@354 >= 0;
    @constraint #t@92 - #t3@352 >= 0;
    @constraint #t@92 - #t2@350 >= 0;
    @constraint -#t0@347 + #t@92 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple5(x0@107, x1@108, x2@109, x3@110, x4@111), #t@112);
    @conclusion know(*x2@109, #t2@113);
    @constraint -#t@112 + #t2@113 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule in cache: 25
Rule staged: 16
Rule before check and clean: 
@rule{
    @premise know(*x0@357, #t0@358);
    @premise know(*x1@359, #t1@360);
    @premise know(*x2@355, #t2@361);
    @premise know(*x3@362, #t3@363);
    @premise know(*x4@364, #t4@365);
    @conclusion know(*x2@355, #t2@356);
    @constraint #t@92 - #t1@360 >= 0;
    @constraint #t2@356 - #t@92 >= 0;
    @constraint #t@92 - #t4@365 >= 0;
    @constraint #t@92 - #t3@363 >= 0;
    @constraint #t@92 - #t2@361 >= 0;
    @constraint -#t0@358 + #t@92 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple5(x0@114, x1@115, x2@116, x3@117, x4@118), #t@119);
    @conclusion know(*x3@117, #t3@120);
    @constraint -#t@119 + #t3@120 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule in cache: 24
Rule staged: 17
Rule before check and clean: 
@rule{
    @premise know(*x0@368, #t0@369);
    @premise know(*x1@370, #t1@371);
    @premise know(*x2@372, #t2@373);
    @premise know(*x3@366, #t3@374);
    @premise know(*x4@375, #t4@376);
    @conclusion know(*x3@366, #t3@367);
    @constraint #t@92 - #t1@371 >= 0;
    @constraint #t3@367 - #t@92 >= 0;
    @constraint #t@92 - #t4@376 >= 0;
    @constraint #t@92 - #t3@374 >= 0;
    @constraint #t@92 - #t2@373 >= 0;
    @constraint -#t0@369 + #t@92 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple5(x0@121, x1@122, x2@123, x3@124, x4@125), #t@126);
    @conclusion know(*x4@125, #t4@127);
    @constraint -#t@126 + #t4@127 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule in cache: 23
Rule staged: 18
Rule before check and clean: 
@rule{
    @premise know(*x0@379, #t0@380);
    @premise know(*x1@381, #t1@382);
    @premise know(*x2@383, #t2@384);
    @premise know(*x3@385, #t3@386);
    @premise know(*x4@377, #t4@387);
    @conclusion know(*x4@377, #t4@378);
    @constraint #t@92 - #t1@382 >= 0;
    @constraint #t4@378 - #t@92 >= 0;
    @constraint #t@92 - #t4@387 >= 0;
    @constraint #t@92 - #t3@386 >= 0;
    @constraint #t@92 - #t2@384 >= 0;
    @constraint -#t0@380 + #t@92 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*tuple6(x0@142, x1@143, x2@144, x3@145, x4@146, x5@147), #t@148);
    @conclusion know(*x0@142, #t0@149);
    @constraint -#t@148 + #t0@149 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule in cache: 21
Rule staged: 20
Rule before check and clean: 
@rule{
    @premise know(*x0@388, #t0@390);
    @premise know(*x1@391, #t1@392);
    @premise know(*x2@393, #t2@394);
    @premise know(*x3@395, #t3@396);
    @premise know(*x4@397, #t4@398);
    @premise know(*x5@399, #t5@400);
    @conclusion know(*x0@388, #t0@389);
    @constraint #t@141 - #t2@394 >= 0;
    @constraint #t0@389 - #t@141 >= 0;
    @constraint #t@141 - #t5@400 >= 0;
    @constraint #t@141 - #t4@398 >= 0;
    @constraint #t@141 - #t3@396 >= 0;
    @constraint #t@141 - #t1@392 >= 0;
    @constraint -#t0@390 + #t@141 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple6(x0@150, x1@151, x2@152, x3@153, x4@154, x5@155), #t@156);
    @conclusion know(*x1@151, #t1@157);
    @constraint -#t@156 + #t1@157 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule in cache: 20
Rule staged: 21
Rule before check and clean: 
@rule{
    @premise know(*x0@403, #t0@404);
    @premise know(*x1@401, #t1@405);
    @premise know(*x2@406, #t2@407);
    @premise know(*x3@408, #t3@409);
    @premise know(*x4@410, #t4@411);
    @premise know(*x5@412, #t5@413);
    @conclusion know(*x1@401, #t1@402);
    @constraint #t@141 - #t2@407 >= 0;
    @constraint #t1@402 - #t@141 >= 0;
    @constraint #t@141 - #t5@413 >= 0;
    @constraint #t@141 - #t4@411 >= 0;
    @constraint #t@141 - #t3@409 >= 0;
    @constraint #t@141 - #t1@405 >= 0;
    @constraint -#t0@404 + #t@141 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple6(x0@158, x1@159, x2@160, x3@161, x4@162, x5@163), #t@164);
    @conclusion know(*x2@160, #t2@165);
    @constraint -#t@164 + #t2@165 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule in cache: 19
Rule staged: 22
Rule before check and clean: 
@rule{
    @premise know(*x0@416, #t0@417);
    @premise know(*x1@418, #t1@419);
    @premise know(*x2@414, #t2@420);
    @premise know(*x3@421, #t3@422);
    @premise know(*x4@423, #t4@424);
    @premise know(*x5@425, #t5@426);
    @conclusion know(*x2@414, #t2@415);
    @constraint #t@141 - #t2@420 >= 0;
    @constraint #t2@415 - #t@141 >= 0;
    @constraint #t@141 - #t5@426 >= 0;
    @constraint #t@141 - #t4@424 >= 0;
    @constraint #t@141 - #t3@422 >= 0;
    @constraint #t@141 - #t1@419 >= 0;
    @constraint -#t0@417 + #t@141 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple6(x0@166, x1@167, x2@168, x3@169, x4@170, x5@171), #t@172);
    @conclusion know(*x3@169, #t3@173);
    @constraint -#t@172 + #t3@173 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule in cache: 18
Rule staged: 23
Rule before check and clean: 
@rule{
    @premise know(*x0@429, #t0@430);
    @premise know(*x1@431, #t1@432);
    @premise know(*x2@433, #t2@434);
    @premise know(*x3@427, #t3@435);
    @premise know(*x4@436, #t4@437);
    @premise know(*x5@438, #t5@439);
    @conclusion know(*x3@427, #t3@428);
    @constraint #t@141 - #t2@434 >= 0;
    @constraint #t3@428 - #t@141 >= 0;
    @constraint #t@141 - #t5@439 >= 0;
    @constraint #t@141 - #t4@437 >= 0;
    @constraint #t@141 - #t3@435 >= 0;
    @constraint #t@141 - #t1@432 >= 0;
    @constraint -#t0@430 + #t@141 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple6(x0@174, x1@175, x2@176, x3@177, x4@178, x5@179), #t@180);
    @conclusion know(*x4@178, #t4@181);
    @constraint -#t@180 + #t4@181 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule in cache: 17
Rule staged: 24
Rule before check and clean: 
@rule{
    @premise know(*x0@442, #t0@443);
    @premise know(*x1@444, #t1@445);
    @premise know(*x2@446, #t2@447);
    @premise know(*x3@448, #t3@449);
    @premise know(*x4@440, #t4@450);
    @premise know(*x5@451, #t5@452);
    @conclusion know(*x4@440, #t4@441);
    @constraint #t@141 - #t2@447 >= 0;
    @constraint #t4@441 - #t@141 >= 0;
    @constraint #t@141 - #t5@452 >= 0;
    @constraint #t@141 - #t4@450 >= 0;
    @constraint #t@141 - #t3@449 >= 0;
    @constraint #t@141 - #t1@445 >= 0;
    @constraint -#t0@443 + #t@141 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*tuple6(x0@182, x1@183, x2@184, x3@185, x4@186, x5@187), #t@188);
    @conclusion know(*x5@187, #t5@189);
    @constraint -#t@188 + #t5@189 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};
Rule in cache: 16
Rule staged: 25
Rule before check and clean: 
@rule{
    @premise know(*x0@455, #t0@456);
    @premise know(*x1@457, #t1@458);
    @premise know(*x2@459, #t2@460);
    @premise know(*x3@461, #t3@462);
    @premise know(*x4@463, #t4@464);
    @premise know(*x5@453, #t5@465);
    @conclusion know(*x5@453, #t5@454);
    @constraint #t@141 - #t2@460 >= 0;
    @constraint #t5@454 - #t@141 >= 0;
    @constraint #t@141 - #t5@465 >= 0;
    @constraint #t@141 - #t4@464 >= 0;
    @constraint #t@141 - #t3@462 >= 0;
    @constraint #t@141 - #t1@458 >= 0;
    @constraint -#t0@456 + #t@141 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*m@191, #t1@192);
    @conclusion know(*hash(m@191), #t@193);
    @constraint -#t1@192 + #t@193 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};
Rule in cache: 12
Rule staged: 29
Rule before check and clean: 
@rule{
    @premise know(*m@466, #t1@468);
    @premise know(*sk@469, #t2@470);
    @conclusion know(*m@466, #t@467);
    @constraint #t@467 - #t@203 >= 0;
    @constraint #t@203 - #t2@470 >= 0;
    @constraint -#t1@468 + #t@203 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 11
Rule staged: 30
Rule before check and clean: 
@rule{
    @premise know(*sk@472, #t1@474);
    @premise know(*m@471, #t1@475);
    @conclusion know(*aenc(m@471, pk(sk@472)), #t@473);
    @constraint -#t1@475 + #t@473 >= 0;
    @constraint -#t1@474 + #t@197 >= 0;
    @constraint #t@473 - #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@472, #t1@474);
    @premise know(*m@471, #t1@475);
    @conclusion know(*aenc(m@471, pk(sk@472)), #t@473);
    @constraint -#t1@475 + #t@473 >= 0;
    @constraint #t@473 - #t1@474 >= 0;
};

Stage rule: 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule added at 1.

Stage rule: 
@rule{
    @conclusion know(*A(), #t@221);
};
Rule added.

Stage rule: 
@rule{
    @conclusion know(*B(), #t@222);
};
Rule added.

Stage rule: 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};
Rule in cache: 8
Rule staged: 34
Rule before check and clean: 
@rule{
    @premise know(*m@476, #t1@478);
    @conclusion know(*aenc(m@476, pk(skA())), #t@477);
    @constraint -#t1@478 + #t@477 >= 0;
    @constraint #t@477 - #t@225 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@476, #t1@478);
    @conclusion know(*aenc(m@476, pk(skA())), #t@477);
    @constraint -#t1@478 + #t@477 >= 0;
};

Stage rule: 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};
Rule in cache: 8
Rule staged: 35
Rule before check and clean: 
@rule{
    @premise know(*m@479, #t1@481);
    @conclusion know(*aenc(m@479, pk(skB())), #t@480);
    @constraint -#t1@481 + #t@480 >= 0;
    @constraint #t@480 - #t@226 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*m@479, #t1@481);
    @conclusion know(*aenc(m@479, pk(skB())), #t@480);
    @constraint -#t1@481 + #t@480 >= 0;
};

Stage rule: 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Na@240], newA(), tuple3(skA(), skR@241, #ta@242));
    @conclusion know(*sign(tuple4([Na@240], pk(skR@241), X(skA(), pk(skR@241)), aenc(Y(skA(), pk(skR@241)), pk(skR@241))), skA()), #ta@242);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};
Rule in cache: 6
Rule staged: 38
Rule before check and clean: 
@rule{
    @premise new(*[Na@482], newA(), tuple3(skA(), skR@483, #ta@485));
    @conclusion know(*tuple4([Na@482], pk(skR@483), X(skA(), pk(skR@483)), aenc(Y(skA(), pk(skR@483)), pk(skR@483))), #t@484);
    @constraint -#ta@485 + #t@484 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@482], newA(), tuple3(skA(), skR@483, #ta@485));
    @conclusion know(*tuple4([Na@482], pk(skR@483), X(skA(), pk(skR@483)), aenc(Y(skA(), pk(skR@483)), pk(skR@483))), #t@484);
    @constraint -#ta@485 + #t@484 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Nb@244], newB(), tuple4(skI@245, skB(), #tb@246, Na@247));
    @premise know(*sign(tuple4(Na@247, pk(skB()), X(skI@245, pk(skB())), aenc(Y(skI@245, pk(skB())), pk(skB()))), skI@245), #t1@248);
    @conclusion know(*sign(tuple5([Nb@244], pk(skI@245), Na@247, X(skB(), pk(skI@245)), aenc(Y(skB(), pk(skI@245)), pk(skI@245))), skB()), #t@249);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};
Rule in cache: 6
Rule staged: 39
Rule before check and clean: 
@rule{
    @premise know(*tuple4(Na@488, pk(skB()), X(sk@487, pk(skB())), aenc(Y(sk@487, pk(skB())), pk(skB()))), #t1@490);
    @premise know(*sk@487, #t2@491);
    @premise new(*[Nb@486], newB(), tuple4(sk@487, skB(), #tb@492, Na@488));
    @conclusion know(*sign(tuple5([Nb@486], pk(sk@487), Na@488, X(skB(), pk(sk@487)), aenc(Y(skB(), pk(sk@487)), pk(sk@487))), skB()), #t@489);
    @constraint -#t1@490 + #t@203 >= 0;
    @constraint #t@203 - #t2@491 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*tuple4(Na@488, pk(skB()), X(sk@487, pk(skB())), aenc(Y(sk@487, pk(skB())), pk(skB()))), #t1@490);
    @premise know(*sk@487, #t2@491);
    @premise new(*[Nb@486], newB(), tuple4(sk@487, skB(), #tb@492, Na@488));
    @conclusion know(*sign(tuple5([Nb@486], pk(sk@487), Na@488, X(skB(), pk(sk@487)), aenc(Y(skB(), pk(sk@487)), pk(sk@487))), skB()), #t@489);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@240], newA(), tuple3(skA(), skR@241, #ta@242));
    @conclusion know(*sign(tuple4([Na@240], pk(skR@241), X(skA(), pk(skR@241)), aenc(Y(skA(), pk(skR@241)), pk(skR@241))), skA()), #ta@242);
};
Rule in cache: 7
Rule staged: 39
Rule before check and clean: 
@rule{
    @premise new(*[Na@494], newA(), tuple3(skA(), skB(), #ta@496));
    @premise new(*[Nb@493], newB(), tuple4(skA(), skB(), #tb@497, [Na@494]));
    @conclusion know(*sign(tuple5([Nb@493], pk(skA()), [Na@494], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@495);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@494], newA(), tuple3(skA(), skB(), #ta@496));
    @premise new(*[Nb@493], newB(), tuple4(skA(), skB(), #tb@497, [Na@494]));
    @conclusion know(*sign(tuple5([Nb@493], pk(skA()), [Na@494], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@495);
};

Stage rule: 
@rule{
    @premise new(*[Na@250], newA(), tuple3(skA(), skR@251, #ta@252));
    @premise init(*skA(), *skR@251, *#ta@252, *Nb@253, *[Na@250]);
    @premise know(*sign(tuple5(Nb@253, pk(skA()), [Na@250], X(skR@251, pk(skA())), aenc(Y(skR@251, pk(skA())), pk(skA()))), skR@251), #t1@254);
    @conclusion know(*sign(tuple2(pk(skR@251), Nb@253), skA()), #t@255);
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};
Rule in cache: 7
Rule staged: 40
Rule before check and clean: 
@rule{
    @premise know(*tuple5(Nb@499, pk(skA()), [Na@501], X(sk@498, pk(skA())), aenc(Y(sk@498, pk(skA())), pk(skA()))), #t1@502);
    @premise know(*sk@498, #t2@503);
    @premise new(*[Na@501], newA(), tuple3(skA(), sk@498, #ta@504));
    @premise init(*skA(), *sk@498, *#ta@504, *Nb@499, *[Na@501]);
    @conclusion know(*sign(tuple2(pk(sk@498), Nb@499), skA()), #t@500);
    @constraint -#t1@502 + #t@203 >= 0;
    @constraint #t@203 - #t2@503 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*tuple5(Nb@499, pk(skA()), [Na@501], X(sk@498, pk(skA())), aenc(Y(sk@498, pk(skA())), pk(skA()))), #t1@502);
    @premise know(*sk@498, #t2@503);
    @premise new(*[Na@501], newA(), tuple3(skA(), sk@498, #ta@504));
    @premise init(*skA(), *sk@498, *#ta@504, *Nb@499, *[Na@501]);
    @conclusion know(*sign(tuple2(pk(sk@498), Nb@499), skA()), #t@500);
};

Stage rule: 
@rule{
    @premise new(*[Nb@256], newB(), tuple4(skA(), skB(), #tb@257, Na@258));
    @premise know(*sign(tuple2(pk(skB()), [Nb@256]), skA()), #t1@259);
    @conclusion accept(skA(), skB(), #tb@257, [Nb@256], Na@258);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};
Rule in cache: 7
Rule staged: 41
Rule before check and clean: 
@rule{
    @premise know(*tuple2(pk(skB()), [Nb@506]), #t1@508);
    @premise know(*skA(), #t2@509);
    @premise new(*[Nb@506], newB(), tuple4(skA(), skB(), #tb@505, Na@507));
    @conclusion accept(skA(), skB(), #tb@505, [Nb@506], Na@507);
    @constraint -#t1@508 + #t@203 >= 0;
    @constraint #t@203 - #t2@509 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*tuple2(pk(skB()), [Nb@506]), #t1@508);
    @premise know(*skA(), #t2@509);
    @premise new(*[Nb@506], newB(), tuple4(skA(), skB(), #tb@505, Na@507));
    @conclusion accept(skA(), skB(), #tb@505, [Nb@506], Na@507);
};

Stage rule: 
@rule{
    @premise know(*sk@472, #t1@474);
    @premise know(*m@471, #t1@475);
    @conclusion know(*aenc(m@471, pk(sk@472)), #t@473);
    @constraint -#t1@475 + #t@473 >= 0;
    @constraint #t@473 - #t1@474 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 7
Rule staged: 42
Rule before check and clean: 
@rule{
    @premise know(*sk@512, #t1@513);
    @premise know(*m@510, #t1@514);
    @premise know(*sk@512, #t1@515);
    @conclusion know(*m@510, #t@511);
    @constraint -#t1@515 + #t@511 >= 0;
    @constraint #t@473 - #t1@513 >= 0;
    @constraint -#t1@514 + #t@473 >= 0;
    @constraint #t@511 - #t@473 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*m@476, #t1@478);
    @conclusion know(*aenc(m@476, pk(skA())), #t@477);
    @constraint -#t1@478 + #t@477 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 6
Rule staged: 43
Rule before check and clean: 
@rule{
    @premise know(*m@516, #t1@518);
    @premise know(*skA(), #t1@519);
    @conclusion know(*m@516, #t@517);
    @constraint -#t1@519 + #t@517 >= 0;
    @constraint -#t1@518 + #t@477 >= 0;
    @constraint #t@517 - #t@477 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*m@479, #t1@481);
    @conclusion know(*aenc(m@479, pk(skB())), #t@480);
    @constraint -#t1@481 + #t@480 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 5
Rule staged: 44
Rule before check and clean: 
@rule{
    @premise know(*m@520, #t1@522);
    @premise know(*skB(), #t1@523);
    @conclusion know(*m@520, #t@521);
    @constraint -#t1@523 + #t@521 >= 0;
    @constraint -#t1@522 + #t@480 >= 0;
    @constraint #t@521 - #t@480 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise new(*[Na@482], newA(), tuple3(skA(), skR@483, #ta@485));
    @conclusion know(*tuple4([Na@482], pk(skR@483), X(skA(), pk(skR@483)), aenc(Y(skA(), pk(skR@483)), pk(skR@483))), #t@484);
    @constraint -#ta@485 + #t@484 >= 0;
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};
Rule in cache: 4
Rule staged: 45
Rule before check and clean: 
@rule{
    @premise new(*[Na@524], newA(), tuple3(skA(), skR@526, #ta@527));
    @conclusion know(*[Na@524], #t0@525);
    @constraint #t0@525 - #t@484 >= 0;
    @constraint -#ta@527 + #t@484 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@524], newA(), tuple3(skA(), skR@526, #ta@527));
    @conclusion know(*[Na@524], #t0@525);
    @constraint #t0@525 - #ta@527 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};
Rule in cache: 5
Rule staged: 45
Rule before check and clean: 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@528, #ta@531));
    @conclusion know(*pk(skR@528), #t1@529);
    @constraint #t1@529 - #t@484 >= 0;
    @constraint -#ta@531 + #t@484 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@528, #ta@531));
    @conclusion know(*pk(skR@528), #t1@529);
    @constraint #t1@529 - #ta@531 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};
Rule in cache: 6
Rule staged: 45
Rule before check and clean: 
@rule{
    @premise new(*[Na@534], newA(), tuple3(skA(), skR@532, #ta@535));
    @conclusion know(*X(skA(), pk(skR@532)), #t2@533);
    @constraint #t2@533 - #t@484 >= 0;
    @constraint -#ta@535 + #t@484 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@534], newA(), tuple3(skA(), skR@532, #ta@535));
    @conclusion know(*X(skA(), pk(skR@532)), #t2@533);
    @constraint #t2@533 - #ta@535 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};
Rule in cache: 7
Rule staged: 45
Rule before check and clean: 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*aenc(Y(skA(), pk(skR@536)), pk(skR@536)), #t3@537);
    @constraint #t3@537 - #t@484 >= 0;
    @constraint -#ta@539 + #t@484 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*aenc(Y(skA(), pk(skR@536)), pk(skR@536)), #t3@537);
    @constraint #t3@537 - #ta@539 >= 0;
};

Stage rule: 
@rule{
    @premise know(*tuple4(Na@488, pk(skB()), X(sk@487, pk(skB())), aenc(Y(sk@487, pk(skB())), pk(skB()))), #t1@490);
    @premise know(*sk@487, #t2@491);
    @premise new(*[Nb@486], newB(), tuple4(sk@487, skB(), #tb@492, Na@488));
    @conclusion know(*sign(tuple5([Nb@486], pk(sk@487), Na@488, X(skB(), pk(sk@487)), aenc(Y(skB(), pk(sk@487)), pk(sk@487))), skB()), #t@489);
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};
Rule in cache: 7
Rule staged: 46
Rule before check and clean: 
@rule{
    @premise know(*x0@542, #t0@544);
    @premise know(*pk(skB()), #t1@545);
    @premise know(*X(sk@541, pk(skB())), #t2@546);
    @premise know(*aenc(Y(sk@541, pk(skB())), pk(skB())), #t3@547);
    @premise know(*sk@541, #t2@548);
    @premise new(*[Nb@540], newB(), tuple4(sk@541, skB(), #tb@549, x0@542));
    @conclusion know(*sign(tuple5([Nb@540], pk(sk@541), x0@542, X(skB(), pk(sk@541)), aenc(Y(skB(), pk(sk@541)), pk(sk@541))), skB()), #t@543);
    @constraint #t@56 - #t1@545 >= 0;
    @constraint #t@56 - #t3@547 >= 0;
    @constraint #t@56 - #t2@546 >= 0;
    @constraint -#t0@544 + #t@56 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*aenc(Y(sk@541, pk(skB())), pk(skB())), #t3@547);
    @premise new(*[Nb@540], newB(), tuple4(sk@541, skB(), #tb@549, x0@542));
    @premise know(*X(sk@541, pk(skB())), #t2@546);
    @premise know(*pk(skB()), #t1@545);
    @premise know(*x0@542, #t0@544);
    @premise know(*sk@541, #t2@548);
    @conclusion know(*sign(tuple5([Nb@540], pk(sk@541), x0@542, X(skB(), pk(sk@541)), aenc(Y(skB(), pk(sk@541)), pk(sk@541))), skB()), #t@543);
};

Stage rule: 
@rule{
    @premise new(*[Na@494], newA(), tuple3(skA(), skB(), #ta@496));
    @premise new(*[Nb@493], newB(), tuple4(skA(), skB(), #tb@497, [Na@494]));
    @conclusion know(*sign(tuple5([Nb@493], pk(skA()), [Na@494], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@495);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};
Rule in cache: 7
Rule staged: 47
Rule before check and clean: 
@rule{
    @premise new(*[Na@551], newA(), tuple3(skA(), skB(), #ta@553));
    @premise new(*[Nb@550], newB(), tuple4(skA(), skB(), #tb@554, [Na@551]));
    @conclusion know(*tuple5([Nb@550], pk(skA()), [Na@551], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), #t@552);
    @constraint -#t@495 + #t@552 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@551], newA(), tuple3(skA(), skB(), #ta@553));
    @premise new(*[Nb@550], newB(), tuple4(skA(), skB(), #tb@554, [Na@551]));
    @conclusion know(*tuple5([Nb@550], pk(skA()), [Na@551], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), #t@552);
};

Compose to at 2 : 
@rule{
    @premise new(*[Na@250], newA(), tuple3(skA(), skR@251, #ta@252));
    @premise init(*skA(), *skR@251, *#ta@252, *Nb@253, *[Na@250]);
    @premise know(*sign(tuple5(Nb@253, pk(skA()), [Na@250], X(skR@251, pk(skA())), aenc(Y(skR@251, pk(skA())), pk(skA()))), skR@251), #t1@254);
    @conclusion know(*sign(tuple2(pk(skR@251), Nb@253), skA()), #t@255);
};
Rule in cache: 8
Rule staged: 47
Rule before check and clean: 
@rule{
    @premise new(*[Na@557], newA(), tuple3(skA(), skB(), #ta@558));
    @premise new(*[Nb@555], newB(), tuple4(skA(), skB(), #tb@559, [Na@557]));
    @premise new(*[Na@557], newA(), tuple3(skA(), skB(), #ta@560));
    @premise init(*skA(), *skB(), *#ta@560, *[Nb@555], *[Na@557]);
    @conclusion know(*sign(tuple2(pk(skB()), [Nb@555]), skA()), #t@556);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@557], newA(), tuple3(skA(), skB(), #ta@558));
    @premise new(*[Nb@555], newB(), tuple4(skA(), skB(), #tb@559, [Na@557]));
    @premise init(*skA(), *skB(), *#ta@558, *[Nb@555], *[Na@557]);
    @conclusion know(*sign(tuple2(pk(skB()), [Nb@555]), skA()), #t@556);
};

Stage rule: 
@rule{
    @premise know(*tuple5(Nb@499, pk(skA()), [Na@501], X(sk@498, pk(skA())), aenc(Y(sk@498, pk(skA())), pk(skA()))), #t1@502);
    @premise know(*sk@498, #t2@503);
    @premise new(*[Na@501], newA(), tuple3(skA(), sk@498, #ta@504));
    @premise init(*skA(), *sk@498, *#ta@504, *Nb@499, *[Na@501]);
    @conclusion know(*sign(tuple2(pk(sk@498), Nb@499), skA()), #t@500);
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};
Rule in cache: 8
Rule staged: 48
Rule before check and clean: 
@rule{
    @premise know(*x0@562, #t0@564);
    @premise know(*pk(skA()), #t1@565);
    @premise know(*[Na@566], #t2@567);
    @premise know(*X(sk@561, pk(skA())), #t3@568);
    @premise know(*aenc(Y(sk@561, pk(skA())), pk(skA())), #t4@569);
    @premise know(*sk@561, #t2@570);
    @premise new(*[Na@566], newA(), tuple3(skA(), sk@561, #ta@571));
    @premise init(*skA(), *sk@561, *#ta@571, *x0@562, *[Na@566]);
    @conclusion know(*sign(tuple2(pk(sk@561), x0@562), skA()), #t@563);
    @constraint #t@92 - #t1@565 >= 0;
    @constraint #t@92 - #t4@569 >= 0;
    @constraint #t@92 - #t3@568 >= 0;
    @constraint #t@92 - #t2@567 >= 0;
    @constraint -#t0@564 + #t@92 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*aenc(Y(sk@561, pk(skA())), pk(skA())), #t4@569);
    @premise new(*[Na@566], newA(), tuple3(skA(), sk@561, #ta@571));
    @premise know(*X(sk@561, pk(skA())), #t3@568);
    @premise know(*pk(skA()), #t1@565);
    @premise init(*skA(), *sk@561, *#ta@571, *x0@562, *[Na@566]);
    @premise know(*[Na@566], #t2@567);
    @premise know(*sk@561, #t2@570);
    @premise know(*x0@562, #t0@564);
    @conclusion know(*sign(tuple2(pk(sk@561), x0@562), skA()), #t@563);
};

Stage rule: 
@rule{
    @premise know(*tuple2(pk(skB()), [Nb@506]), #t1@508);
    @premise know(*skA(), #t2@509);
    @premise new(*[Nb@506], newB(), tuple4(skA(), skB(), #tb@505, Na@507));
    @conclusion accept(skA(), skB(), #tb@505, [Nb@506], Na@507);
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};
Rule in cache: 8
Rule staged: 49
Rule before check and clean: 
@rule{
    @premise know(*pk(skB()), #t0@575);
    @premise know(*[Nb@573], #t1@576);
    @premise know(*skA(), #t2@577);
    @premise new(*[Nb@573], newB(), tuple4(skA(), skB(), #tb@572, Na@574));
    @conclusion accept(skA(), skB(), #tb@572, [Nb@573], Na@574);
    @constraint #t@15 - #t1@576 >= 0;
    @constraint -#t0@575 + #t@15 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*pk(skB()), #t0@575);
    @premise know(*[Nb@573], #t1@576);
    @premise know(*skA(), #t2@577);
    @premise new(*[Nb@573], newB(), tuple4(skA(), skB(), #tb@572, Na@574));
    @conclusion accept(skA(), skB(), #tb@572, [Nb@573], Na@574);
};

Stage rule: 
@rule{
    @premise new(*[Na@524], newA(), tuple3(skA(), skR@526, #ta@527));
    @conclusion know(*[Na@524], #t0@525);
    @constraint #t0@525 - #ta@527 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@528, #ta@531));
    @conclusion know(*pk(skR@528), #t1@529);
    @constraint #t1@529 - #ta@531 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};
Rule in cache: 7
Rule staged: 51
Rule before check and clean: 
@rule{
    @premise new(*[Na@581], newA(), tuple3(skA(), skR@579, #ta@582));
    @premise know(*m@578, #t1@583);
    @conclusion know(*aenc(m@578, pk(skR@579)), #t@580);
    @constraint -#t1@583 + #t@580 >= 0;
    @constraint #t1@529 - #ta@582 >= 0;
    @constraint #t@580 - #t1@529 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@581], newA(), tuple3(skA(), skR@579, #ta@582));
    @premise know(*m@578, #t1@583);
    @conclusion know(*aenc(m@578, pk(skR@579)), #t@580);
    @constraint #t@580 - #ta@582 >= 0;
    @constraint -#t1@583 + #t@580 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Na@534], newA(), tuple3(skA(), skR@532, #ta@535));
    @conclusion know(*X(skA(), pk(skR@532)), #t2@533);
    @constraint #t2@533 - #ta@535 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*aenc(Y(skA(), pk(skR@536)), pk(skR@536)), #t3@537);
    @constraint #t3@537 - #ta@539 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 6
Rule staged: 53
Rule before check and clean: 
@rule{
    @premise new(*[Na@586], newA(), tuple3(skA(), skR@584, #ta@587));
    @premise know(*skR@584, #t1@588);
    @conclusion know(*Y(skA(), pk(skR@584)), #t@585);
    @constraint -#t1@588 + #t@585 >= 0;
    @constraint #t3@537 - #ta@587 >= 0;
    @constraint #t@585 - #t3@537 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@586], newA(), tuple3(skA(), skR@584, #ta@587));
    @premise know(*skR@584, #t1@588);
    @conclusion know(*Y(skA(), pk(skR@584)), #t@585);
    @constraint #t@585 - #ta@587 >= 0;
    @constraint -#t1@588 + #t@585 >= 0;
};

Stage rule: 
@rule{
    @premise know(*aenc(Y(sk@541, pk(skB())), pk(skB())), #t3@547);
    @premise new(*[Nb@540], newB(), tuple4(sk@541, skB(), #tb@549, x0@542));
    @premise know(*X(sk@541, pk(skB())), #t2@546);
    @premise know(*pk(skB()), #t1@545);
    @premise know(*x0@542, #t0@544);
    @premise know(*sk@541, #t2@548);
    @conclusion know(*sign(tuple5([Nb@540], pk(sk@541), x0@542, X(skB(), pk(sk@541)), aenc(Y(skB(), pk(sk@541)), pk(sk@541))), skB()), #t@543);
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*sk@472, #t1@474);
    @premise know(*m@471, #t1@475);
    @conclusion know(*aenc(m@471, pk(sk@472)), #t@473);
    @constraint -#t1@475 + #t@473 >= 0;
    @constraint #t@473 - #t1@474 >= 0;
};
Rule in cache: 6
Rule staged: 54
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@593);
    @premise know(*Y(sk@590, pk(skB())), #t1@594);
    @premise new(*[Nb@589], newB(), tuple4(sk@590, skB(), #tb@595, x0@591));
    @premise know(*X(sk@590, pk(skB())), #t2@596);
    @premise know(*pk(skB()), #t1@597);
    @premise know(*x0@591, #t0@598);
    @premise know(*sk@590, #t2@599);
    @conclusion know(*sign(tuple5([Nb@589], pk(sk@590), x0@591, X(skB(), pk(sk@590)), aenc(Y(skB(), pk(sk@590)), pk(sk@590))), skB()), #t@592);
    @constraint #t@473 - #t1@593 >= 0;
    @constraint -#t1@594 + #t@473 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@589], newB(), tuple4(sk@590, skB(), #tb@595, x0@591));
    @premise know(*X(sk@590, pk(skB())), #t2@596);
    @premise know(*Y(sk@590, pk(skB())), #t1@594);
    @premise know(*pk(skB()), #t1@597);
    @premise know(*skB(), #t1@593);
    @premise know(*x0@591, #t0@598);
    @premise know(*sk@590, #t2@599);
    @conclusion know(*sign(tuple5([Nb@589], pk(sk@590), x0@591, X(skB(), pk(sk@590)), aenc(Y(skB(), pk(sk@590)), pk(sk@590))), skB()), #t@592);
};

Compose by at 0 : 
@rule{
    @premise know(*m@479, #t1@481);
    @conclusion know(*aenc(m@479, pk(skB())), #t@480);
    @constraint -#t1@481 + #t@480 >= 0;
};
Rule in cache: 7
Rule staged: 54
Rule before check and clean: 
@rule{
    @premise know(*Y(sk@601, pk(skB())), #t1@604);
    @premise new(*[Nb@600], newB(), tuple4(sk@601, skB(), #tb@605, x0@602));
    @premise know(*X(sk@601, pk(skB())), #t2@606);
    @premise know(*pk(skB()), #t1@607);
    @premise know(*x0@602, #t0@608);
    @premise know(*sk@601, #t2@609);
    @conclusion know(*sign(tuple5([Nb@600], pk(sk@601), x0@602, X(skB(), pk(sk@601)), aenc(Y(skB(), pk(sk@601)), pk(sk@601))), skB()), #t@603);
    @constraint -#t1@604 + #t@480 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@600], newB(), tuple4(sk@601, skB(), #tb@605, x0@602));
    @premise know(*Y(sk@601, pk(skB())), #t1@604);
    @premise know(*X(sk@601, pk(skB())), #t2@606);
    @premise know(*pk(skB()), #t1@607);
    @premise know(*x0@602, #t0@608);
    @premise know(*sk@601, #t2@609);
    @conclusion know(*sign(tuple5([Nb@600], pk(sk@601), x0@602, X(skB(), pk(sk@601)), aenc(Y(skB(), pk(sk@601)), pk(sk@601))), skB()), #t@603);
};

Compose by at 0 : 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*aenc(Y(skA(), pk(skR@536)), pk(skR@536)), #t3@537);
    @constraint #t3@537 - #ta@539 >= 0;
};
Rule in cache: 8
Rule staged: 54
Rule before check and clean: 
@rule{
    @premise new(*[Na@613], newA(), tuple3(skA(), skB(), #ta@614));
    @premise new(*[Nb@610], newB(), tuple4(skA(), skB(), #tb@615, x0@611));
    @premise know(*X(skA(), pk(skB())), #t2@616);
    @premise know(*pk(skB()), #t1@617);
    @premise know(*x0@611, #t0@618);
    @premise know(*skA(), #t2@619);
    @conclusion know(*sign(tuple5([Nb@610], pk(skA()), x0@611, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@612);
    @constraint #t3@537 - #ta@614 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@610], newB(), tuple4(skA(), skB(), #tb@615, x0@611));
    @premise new(*[Na@613], newA(), tuple3(skA(), skB(), #ta@614));
    @premise know(*X(skA(), pk(skB())), #t2@616);
    @premise know(*pk(skB()), #t1@617);
    @premise know(*skA(), #t2@619);
    @premise know(*x0@611, #t0@618);
    @conclusion know(*sign(tuple5([Nb@610], pk(skA()), x0@611, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@612);
};

Stage rule: 
@rule{
    @premise new(*[Na@551], newA(), tuple3(skA(), skB(), #ta@553));
    @premise new(*[Nb@550], newB(), tuple4(skA(), skB(), #tb@554, [Na@551]));
    @conclusion know(*tuple5([Nb@550], pk(skA()), [Na@551], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), #t@552);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@93, x1@94, x2@95, x3@96, x4@97), #t@98);
    @conclusion know(*x0@93, #t0@99);
    @constraint -#t@98 + #t0@99 >= 0;
};
Rule in cache: 8
Rule staged: 55
Rule before check and clean: 
@rule{
    @premise new(*[Na@622], newA(), tuple3(skA(), skB(), #ta@623));
    @premise new(*[Nb@620], newB(), tuple4(skA(), skB(), #tb@624, [Na@622]));
    @conclusion know(*[Nb@620], #t0@621);
    @constraint #t0@621 - #t@552 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@622], newA(), tuple3(skA(), skB(), #ta@623));
    @premise new(*[Nb@620], newB(), tuple4(skA(), skB(), #tb@624, [Na@622]));
    @conclusion know(*[Nb@620], #t0@621);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@100, x1@101, x2@102, x3@103, x4@104), #t@105);
    @conclusion know(*x1@101, #t1@106);
    @constraint -#t@105 + #t1@106 >= 0;
};
Rule in cache: 9
Rule staged: 55
Rule before check and clean: 
@rule{
    @premise new(*[Na@626], newA(), tuple3(skA(), skB(), #ta@627));
    @premise new(*[Nb@628], newB(), tuple4(skA(), skB(), #tb@629, [Na@626]));
    @conclusion know(*pk(skA()), #t1@625);
    @constraint #t1@625 - #t@552 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@626], newA(), tuple3(skA(), skB(), #ta@627));
    @premise new(*[Nb@628], newB(), tuple4(skA(), skB(), #tb@629, [Na@626]));
    @conclusion know(*pk(skA()), #t1@625);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@107, x1@108, x2@109, x3@110, x4@111), #t@112);
    @conclusion know(*x2@109, #t2@113);
    @constraint -#t@112 + #t2@113 >= 0;
};
Rule in cache: 10
Rule staged: 55
Rule before check and clean: 
@rule{
    @premise new(*[Na@630], newA(), tuple3(skA(), skB(), #ta@632));
    @premise new(*[Nb@633], newB(), tuple4(skA(), skB(), #tb@634, [Na@630]));
    @conclusion know(*[Na@630], #t2@631);
    @constraint #t2@631 - #t@552 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@630], newA(), tuple3(skA(), skB(), #ta@632));
    @premise new(*[Nb@633], newB(), tuple4(skA(), skB(), #tb@634, [Na@630]));
    @conclusion know(*[Na@630], #t2@631);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@114, x1@115, x2@116, x3@117, x4@118), #t@119);
    @conclusion know(*x3@117, #t3@120);
    @constraint -#t@119 + #t3@120 >= 0;
};
Rule in cache: 11
Rule staged: 55
Rule before check and clean: 
@rule{
    @premise new(*[Na@636], newA(), tuple3(skA(), skB(), #ta@637));
    @premise new(*[Nb@638], newB(), tuple4(skA(), skB(), #tb@639, [Na@636]));
    @conclusion know(*X(skB(), pk(skA())), #t3@635);
    @constraint #t3@635 - #t@552 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@636], newA(), tuple3(skA(), skB(), #ta@637));
    @premise new(*[Nb@638], newB(), tuple4(skA(), skB(), #tb@639, [Na@636]));
    @conclusion know(*X(skB(), pk(skA())), #t3@635);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@121, x1@122, x2@123, x3@124, x4@125), #t@126);
    @conclusion know(*x4@125, #t4@127);
    @constraint -#t@126 + #t4@127 >= 0;
};
Rule in cache: 12
Rule staged: 55
Rule before check and clean: 
@rule{
    @premise new(*[Na@641], newA(), tuple3(skA(), skB(), #ta@642));
    @premise new(*[Nb@643], newB(), tuple4(skA(), skB(), #tb@644, [Na@641]));
    @conclusion know(*aenc(Y(skB(), pk(skA())), pk(skA())), #t4@640);
    @constraint #t4@640 - #t@552 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@641], newA(), tuple3(skA(), skB(), #ta@642));
    @premise new(*[Nb@643], newB(), tuple4(skA(), skB(), #tb@644, [Na@641]));
    @conclusion know(*aenc(Y(skB(), pk(skA())), pk(skA())), #t4@640);
};

Stage rule: 
@rule{
    @premise new(*[Na@557], newA(), tuple3(skA(), skB(), #ta@558));
    @premise new(*[Nb@555], newB(), tuple4(skA(), skB(), #tb@559, [Na@557]));
    @premise init(*skA(), *skB(), *#ta@558, *[Nb@555], *[Na@557]);
    @conclusion know(*sign(tuple2(pk(skB()), [Nb@555]), skA()), #t@556);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};
Rule in cache: 12
Rule staged: 56
Rule before check and clean: 
@rule{
    @premise new(*[Na@647], newA(), tuple3(skA(), skB(), #ta@648));
    @premise new(*[Nb@645], newB(), tuple4(skA(), skB(), #tb@649, [Na@647]));
    @premise init(*skA(), *skB(), *#ta@648, *[Nb@645], *[Na@647]);
    @conclusion know(*tuple2(pk(skB()), [Nb@645]), #t@646);
    @constraint -#t@556 + #t@646 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@647], newA(), tuple3(skA(), skB(), #ta@648));
    @premise new(*[Nb@645], newB(), tuple4(skA(), skB(), #tb@649, [Na@647]));
    @premise init(*skA(), *skB(), *#ta@648, *[Nb@645], *[Na@647]);
    @conclusion know(*tuple2(pk(skB()), [Nb@645]), #t@646);
};

Compose to at 1 : 
@rule{
    @premise new(*[Nb@256], newB(), tuple4(skA(), skB(), #tb@257, Na@258));
    @premise know(*sign(tuple2(pk(skB()), [Nb@256]), skA()), #t1@259);
    @conclusion accept(skA(), skB(), #tb@257, [Nb@256], Na@258);
};
Rule in cache: 13
Rule staged: 56
Rule before check and clean: 
@rule{
    @premise new(*[Na@653], newA(), tuple3(skA(), skB(), #ta@654));
    @premise new(*[Nb@651], newB(), tuple4(skA(), skB(), #tb@655, [Na@653]));
    @premise init(*skA(), *skB(), *#ta@654, *[Nb@651], *[Na@653]);
    @premise new(*[Nb@651], newB(), tuple4(skA(), skB(), #tb@650, Na@652));
    @conclusion accept(skA(), skB(), #tb@650, [Nb@651], Na@652);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@653], newA(), tuple3(skA(), skB(), #ta@654));
    @premise new(*[Nb@651], newB(), tuple4(skA(), skB(), #tb@655, [Na@653]));
    @premise init(*skA(), *skB(), *#ta@654, *[Nb@651], *[Na@653]);
    @conclusion accept(skA(), skB(), #tb@655, [Nb@651], [Na@653]);
};

Stage rule: 
@rule{
    @premise know(*aenc(Y(sk@561, pk(skA())), pk(skA())), #t4@569);
    @premise new(*[Na@566], newA(), tuple3(skA(), sk@561, #ta@571));
    @premise know(*X(sk@561, pk(skA())), #t3@568);
    @premise know(*pk(skA()), #t1@565);
    @premise init(*skA(), *sk@561, *#ta@571, *x0@562, *[Na@566]);
    @premise know(*[Na@566], #t2@567);
    @premise know(*sk@561, #t2@570);
    @premise know(*x0@562, #t0@564);
    @conclusion know(*sign(tuple2(pk(sk@561), x0@562), skA()), #t@563);
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*sk@472, #t1@474);
    @premise know(*m@471, #t1@475);
    @conclusion know(*aenc(m@471, pk(sk@472)), #t@473);
    @constraint -#t1@475 + #t@473 >= 0;
    @constraint #t@473 - #t1@474 >= 0;
};
Rule in cache: 13
Rule staged: 57
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@659);
    @premise know(*Y(sk@656, pk(skA())), #t1@660);
    @premise new(*[Na@661], newA(), tuple3(skA(), sk@656, #ta@662));
    @premise know(*X(sk@656, pk(skA())), #t3@663);
    @premise know(*pk(skA()), #t1@664);
    @premise init(*skA(), *sk@656, *#ta@662, *x0@657, *[Na@661]);
    @premise know(*[Na@661], #t2@665);
    @premise know(*sk@656, #t2@666);
    @premise know(*x0@657, #t0@667);
    @conclusion know(*sign(tuple2(pk(sk@656), x0@657), skA()), #t@658);
    @constraint #t@473 - #t1@659 >= 0;
    @constraint -#t1@660 + #t@473 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@661], newA(), tuple3(skA(), sk@656, #ta@662));
    @premise know(*Y(sk@656, pk(skA())), #t1@660);
    @premise know(*X(sk@656, pk(skA())), #t3@663);
    @premise know(*pk(skA()), #t1@664);
    @premise init(*skA(), *sk@656, *#ta@662, *x0@657, *[Na@661]);
    @premise know(*skA(), #t1@659);
    @premise know(*[Na@661], #t2@665);
    @premise know(*sk@656, #t2@666);
    @premise know(*x0@657, #t0@667);
    @conclusion know(*sign(tuple2(pk(sk@656), x0@657), skA()), #t@658);
};

Compose by at 0 : 
@rule{
    @premise know(*m@476, #t1@478);
    @conclusion know(*aenc(m@476, pk(skA())), #t@477);
    @constraint -#t1@478 + #t@477 >= 0;
};
Rule in cache: 14
Rule staged: 57
Rule before check and clean: 
@rule{
    @premise know(*Y(sk@668, pk(skA())), #t1@671);
    @premise new(*[Na@672], newA(), tuple3(skA(), sk@668, #ta@673));
    @premise know(*X(sk@668, pk(skA())), #t3@674);
    @premise know(*pk(skA()), #t1@675);
    @premise init(*skA(), *sk@668, *#ta@673, *x0@669, *[Na@672]);
    @premise know(*[Na@672], #t2@676);
    @premise know(*sk@668, #t2@677);
    @premise know(*x0@669, #t0@678);
    @conclusion know(*sign(tuple2(pk(sk@668), x0@669), skA()), #t@670);
    @constraint -#t1@671 + #t@477 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@672], newA(), tuple3(skA(), sk@668, #ta@673));
    @premise know(*Y(sk@668, pk(skA())), #t1@671);
    @premise know(*X(sk@668, pk(skA())), #t3@674);
    @premise know(*pk(skA()), #t1@675);
    @premise init(*skA(), *sk@668, *#ta@673, *x0@669, *[Na@672]);
    @premise know(*[Na@672], #t2@676);
    @premise know(*sk@668, #t2@677);
    @premise know(*x0@669, #t0@678);
    @conclusion know(*sign(tuple2(pk(sk@668), x0@669), skA()), #t@670);
};

Compose by at 0 : 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*aenc(Y(skA(), pk(skR@536)), pk(skR@536)), #t3@537);
    @constraint #t3@537 - #ta@539 >= 0;
};
Rule in cache: 15
Rule staged: 57
Rule before check and clean: 
@rule{
    @premise new(*[Na@681], newA(), tuple3(skA(), skA(), #ta@682));
    @premise new(*[Na@683], newA(), tuple3(skA(), skA(), #ta@684));
    @premise know(*X(skA(), pk(skA())), #t3@685);
    @premise know(*pk(skA()), #t1@686);
    @premise init(*skA(), *skA(), *#ta@684, *x0@679, *[Na@683]);
    @premise know(*[Na@683], #t2@687);
    @premise know(*skA(), #t2@688);
    @premise know(*x0@679, #t0@689);
    @conclusion know(*sign(tuple2(pk(skA()), x0@679), skA()), #t@680);
    @constraint #t3@537 - #ta@682 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@681], newA(), tuple3(skA(), skA(), #ta@682));
    @premise new(*[Na@683], newA(), tuple3(skA(), skA(), #ta@684));
    @premise know(*X(skA(), pk(skA())), #t3@685);
    @premise init(*skA(), *skA(), *#ta@684, *x0@679, *[Na@683]);
    @premise know(*pk(skA()), #t1@686);
    @premise know(*skA(), #t2@688);
    @premise know(*[Na@683], #t2@687);
    @premise know(*x0@679, #t0@689);
    @conclusion know(*sign(tuple2(pk(skA()), x0@679), skA()), #t@680);
};

Stage rule: 
@rule{
    @premise know(*pk(skB()), #t0@575);
    @premise know(*[Nb@573], #t1@576);
    @premise know(*skA(), #t2@577);
    @premise new(*[Nb@573], newB(), tuple4(skA(), skB(), #tb@572, Na@574));
    @conclusion accept(skA(), skB(), #tb@572, [Nb@573], Na@574);
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 15
Rule staged: 58
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@693);
    @premise know(*[Nb@691], #t1@694);
    @premise know(*skA(), #t2@695);
    @premise new(*[Nb@691], newB(), tuple4(skA(), skB(), #tb@690, Na@692));
    @conclusion accept(skA(), skB(), #tb@690, [Nb@691], Na@692);
    @constraint -#t1@693 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*skB(), #t1@693);
    @premise know(*[Nb@691], #t1@694);
    @premise know(*skA(), #t2@695);
    @premise new(*[Nb@691], newB(), tuple4(skA(), skB(), #tb@690, Na@692));
    @conclusion accept(skA(), skB(), #tb@690, [Nb@691], Na@692);
};

Compose by at 0 : 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};
Rule in cache: 16
Rule staged: 58
Rule before check and clean: 
@rule{
    @premise know(*[Nb@697], #t1@699);
    @premise know(*skA(), #t2@700);
    @premise new(*[Nb@697], newB(), tuple4(skA(), skB(), #tb@696, Na@698));
    @conclusion accept(skA(), skB(), #tb@696, [Nb@697], Na@698);
};
Rule cached at priority 1: 
@rule{
    @premise know(*[Nb@697], #t1@699);
    @premise know(*skA(), #t2@700);
    @premise new(*[Nb@697], newB(), tuple4(skA(), skB(), #tb@696, Na@698));
    @conclusion accept(skA(), skB(), #tb@696, [Nb@697], Na@698);
};

Compose by at 0 : 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@528, #ta@531));
    @conclusion know(*pk(skR@528), #t1@529);
    @constraint #t1@529 - #ta@531 >= 0;
};
Rule in cache: 17
Rule staged: 58
Rule before check and clean: 
@rule{
    @premise new(*[Na@704], newA(), tuple3(skA(), skB(), #ta@705));
    @premise know(*[Nb@702], #t1@706);
    @premise know(*skA(), #t2@707);
    @premise new(*[Nb@702], newB(), tuple4(skA(), skB(), #tb@701, Na@703));
    @conclusion accept(skA(), skB(), #tb@701, [Nb@702], Na@703);
    @constraint #t1@529 - #ta@705 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@704], newA(), tuple3(skA(), skB(), #ta@705));
    @premise know(*[Nb@702], #t1@706);
    @premise know(*skA(), #t2@707);
    @premise new(*[Nb@702], newB(), tuple4(skA(), skB(), #tb@701, Na@703));
    @conclusion accept(skA(), skB(), #tb@701, [Nb@702], Na@703);
};

Stage rule: 
@rule{
    @premise new(*[Na@581], newA(), tuple3(skA(), skR@579, #ta@582));
    @premise know(*m@578, #t1@583);
    @conclusion know(*aenc(m@578, pk(skR@579)), #t@580);
    @constraint #t@580 - #ta@582 >= 0;
    @constraint -#t1@583 + #t@580 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 17
Rule staged: 59
Rule before check and clean: 
@rule{
    @premise new(*[Na@710], newA(), tuple3(skA(), skR@711, #ta@712));
    @premise know(*m@708, #t1@713);
    @premise know(*skR@711, #t1@714);
    @conclusion know(*m@708, #t@709);
    @constraint -#t1@714 + #t@709 >= 0;
    @constraint #t@580 - #ta@712 >= 0;
    @constraint -#t1@713 + #t@580 >= 0;
    @constraint #t@709 - #t@580 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*aenc(Y(sk@541, pk(skB())), pk(skB())), #t3@547);
    @premise new(*[Nb@540], newB(), tuple4(sk@541, skB(), #tb@549, x0@542));
    @premise know(*X(sk@541, pk(skB())), #t2@546);
    @premise know(*pk(skB()), #t1@545);
    @premise know(*x0@542, #t0@544);
    @premise know(*sk@541, #t2@548);
    @conclusion know(*sign(tuple5([Nb@540], pk(sk@541), x0@542, X(skB(), pk(sk@541)), aenc(Y(skB(), pk(sk@541)), pk(sk@541))), skB()), #t@543);
};
Rule in cache: 17
Rule staged: 59
Rule before check and clean: 
@rule{
    @premise new(*[Na@719], newA(), tuple3(skA(), skB(), #ta@720));
    @premise know(*Y(sk@716, pk(skB())), #t1@721);
    @premise new(*[Nb@715], newB(), tuple4(sk@716, skB(), #tb@722, x0@717));
    @premise know(*X(sk@716, pk(skB())), #t2@723);
    @premise know(*pk(skB()), #t1@724);
    @premise know(*x0@717, #t0@725);
    @premise know(*sk@716, #t2@726);
    @conclusion know(*sign(tuple5([Nb@715], pk(sk@716), x0@717, X(skB(), pk(sk@716)), aenc(Y(skB(), pk(sk@716)), pk(sk@716))), skB()), #t@718);
    @constraint #t@580 - #ta@720 >= 0;
    @constraint -#t1@721 + #t@580 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@719], newA(), tuple3(skA(), skB(), #ta@720));
    @premise new(*[Nb@715], newB(), tuple4(sk@716, skB(), #tb@722, x0@717));
    @premise know(*Y(sk@716, pk(skB())), #t1@721);
    @premise know(*X(sk@716, pk(skB())), #t2@723);
    @premise know(*pk(skB()), #t1@724);
    @premise know(*x0@717, #t0@725);
    @premise know(*sk@716, #t2@726);
    @conclusion know(*sign(tuple5([Nb@715], pk(sk@716), x0@717, X(skB(), pk(sk@716)), aenc(Y(skB(), pk(sk@716)), pk(sk@716))), skB()), #t@718);
};

Compose to at 0 : 
@rule{
    @premise know(*aenc(Y(sk@561, pk(skA())), pk(skA())), #t4@569);
    @premise new(*[Na@566], newA(), tuple3(skA(), sk@561, #ta@571));
    @premise know(*X(sk@561, pk(skA())), #t3@568);
    @premise know(*pk(skA()), #t1@565);
    @premise init(*skA(), *sk@561, *#ta@571, *x0@562, *[Na@566]);
    @premise know(*[Na@566], #t2@567);
    @premise know(*sk@561, #t2@570);
    @premise know(*x0@562, #t0@564);
    @conclusion know(*sign(tuple2(pk(sk@561), x0@562), skA()), #t@563);
};
Rule in cache: 18
Rule staged: 59
Rule before check and clean: 
@rule{
    @premise new(*[Na@730], newA(), tuple3(skA(), skA(), #ta@731));
    @premise know(*Y(sk@727, pk(skA())), #t1@732);
    @premise new(*[Na@733], newA(), tuple3(skA(), sk@727, #ta@734));
    @premise know(*X(sk@727, pk(skA())), #t3@735);
    @premise know(*pk(skA()), #t1@736);
    @premise init(*skA(), *sk@727, *#ta@734, *x0@728, *[Na@733]);
    @premise know(*[Na@733], #t2@737);
    @premise know(*sk@727, #t2@738);
    @premise know(*x0@728, #t0@739);
    @conclusion know(*sign(tuple2(pk(sk@727), x0@728), skA()), #t@729);
    @constraint #t@580 - #ta@731 >= 0;
    @constraint -#t1@732 + #t@580 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@730], newA(), tuple3(skA(), skA(), #ta@731));
    @premise new(*[Na@733], newA(), tuple3(skA(), sk@727, #ta@734));
    @premise know(*Y(sk@727, pk(skA())), #t1@732);
    @premise know(*X(sk@727, pk(skA())), #t3@735);
    @premise know(*pk(skA()), #t1@736);
    @premise init(*skA(), *sk@727, *#ta@734, *x0@728, *[Na@733]);
    @premise know(*[Na@733], #t2@737);
    @premise know(*sk@727, #t2@738);
    @premise know(*x0@728, #t0@739);
    @conclusion know(*sign(tuple2(pk(sk@727), x0@728), skA()), #t@729);
};

Stage rule: 
@rule{
    @premise new(*[Na@586], newA(), tuple3(skA(), skR@584, #ta@587));
    @premise know(*skR@584, #t1@588);
    @conclusion know(*Y(skA(), pk(skR@584)), #t@585);
    @constraint #t@585 - #ta@587 >= 0;
    @constraint -#t1@588 + #t@585 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Nb@589], newB(), tuple4(sk@590, skB(), #tb@595, x0@591));
    @premise know(*X(sk@590, pk(skB())), #t2@596);
    @premise know(*Y(sk@590, pk(skB())), #t1@594);
    @premise know(*pk(skB()), #t1@597);
    @premise know(*skB(), #t1@593);
    @premise know(*x0@591, #t0@598);
    @premise know(*sk@590, #t2@599);
    @conclusion know(*sign(tuple5([Nb@589], pk(sk@590), x0@591, X(skB(), pk(sk@590)), aenc(Y(skB(), pk(sk@590)), pk(sk@590))), skB()), #t@592);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule in cache: 17
Rule staged: 61
Rule before check and clean: 
@rule{
    @premise know(*sk@741, #t1@744);
    @premise know(*pk(skB()), #t2@745);
    @premise new(*[Nb@740], newB(), tuple4(sk@741, skB(), #tb@746, x0@742));
    @premise know(*Y(sk@741, pk(skB())), #t1@747);
    @premise know(*pk(skB()), #t1@748);
    @premise know(*skB(), #t1@749);
    @premise know(*x0@742, #t0@750);
    @premise know(*sk@741, #t2@751);
    @conclusion know(*sign(tuple5([Nb@740], pk(sk@741), x0@742, X(skB(), pk(sk@741)), aenc(Y(skB(), pk(sk@741)), pk(sk@741))), skB()), #t@743);
    @constraint #t@232 - #t2@745 >= 0;
    @constraint -#t1@744 + #t@232 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@740], newB(), tuple4(sk@741, skB(), #tb@746, x0@742));
    @premise know(*Y(sk@741, pk(skB())), #t1@747);
    @premise know(*pk(skB()), #t2@745);
    @premise know(*skB(), #t1@749);
    @premise know(*sk@741, #t1@744);
    @premise know(*x0@742, #t0@750);
    @conclusion know(*sign(tuple5([Nb@740], pk(sk@741), x0@742, X(skB(), pk(sk@741)), aenc(Y(skB(), pk(sk@741)), pk(sk@741))), skB()), #t@743);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@534], newA(), tuple3(skA(), skR@532, #ta@535));
    @conclusion know(*X(skA(), pk(skR@532)), #t2@533);
    @constraint #t2@533 - #ta@535 >= 0;
};
Rule in cache: 18
Rule staged: 61
Rule before check and clean: 
@rule{
    @premise new(*[Na@755], newA(), tuple3(skA(), skB(), #ta@756));
    @premise new(*[Nb@752], newB(), tuple4(skA(), skB(), #tb@757, x0@753));
    @premise know(*Y(skA(), pk(skB())), #t1@758);
    @premise know(*pk(skB()), #t1@759);
    @premise know(*skB(), #t1@760);
    @premise know(*x0@753, #t0@761);
    @premise know(*skA(), #t2@762);
    @conclusion know(*sign(tuple5([Nb@752], pk(skA()), x0@753, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@754);
    @constraint #t2@533 - #ta@756 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@752], newB(), tuple4(skA(), skB(), #tb@757, x0@753));
    @premise new(*[Na@755], newA(), tuple3(skA(), skB(), #ta@756));
    @premise know(*Y(skA(), pk(skB())), #t1@758);
    @premise know(*pk(skB()), #t1@759);
    @premise know(*skB(), #t1@760);
    @premise know(*skA(), #t2@762);
    @premise know(*x0@753, #t0@761);
    @conclusion know(*sign(tuple5([Nb@752], pk(skA()), x0@753, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@754);
};

Stage rule: 
@rule{
    @premise new(*[Nb@600], newB(), tuple4(sk@601, skB(), #tb@605, x0@602));
    @premise know(*Y(sk@601, pk(skB())), #t1@604);
    @premise know(*X(sk@601, pk(skB())), #t2@606);
    @premise know(*pk(skB()), #t1@607);
    @premise know(*x0@602, #t0@608);
    @premise know(*sk@601, #t2@609);
    @conclusion know(*sign(tuple5([Nb@600], pk(sk@601), x0@602, X(skB(), pk(sk@601)), aenc(Y(skB(), pk(sk@601)), pk(sk@601))), skB()), #t@603);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@589], newB(), tuple4(sk@590, skB(), #tb@595, x0@591));
    @premise know(*X(sk@590, pk(skB())), #t2@596);
    @premise know(*Y(sk@590, pk(skB())), #t1@594);
    @premise know(*pk(skB()), #t1@597);
    @premise know(*skB(), #t1@593);
    @premise know(*x0@591, #t0@598);
    @premise know(*sk@590, #t2@599);
    @conclusion know(*sign(tuple5([Nb@589], pk(sk@590), x0@591, X(skB(), pk(sk@590)), aenc(Y(skB(), pk(sk@590)), pk(sk@590))), skB()), #t@592);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};
Rule in cache: 18
Rule staged: 62
Rule before check and clean: 
@rule{
    @premise know(*sk@764, #t1@767);
    @premise know(*pk(skB()), #t2@768);
    @premise new(*[Nb@763], newB(), tuple4(sk@764, skB(), #tb@769, x0@765));
    @premise know(*X(sk@764, pk(skB())), #t2@770);
    @premise know(*pk(skB()), #t1@771);
    @premise know(*x0@765, #t0@772);
    @premise know(*sk@764, #t2@773);
    @conclusion know(*sign(tuple5([Nb@763], pk(sk@764), x0@765, X(skB(), pk(sk@764)), aenc(Y(skB(), pk(sk@764)), pk(sk@764))), skB()), #t@766);
    @constraint #t@238 - #t2@768 >= 0;
    @constraint -#t1@767 + #t@238 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@763], newB(), tuple4(sk@764, skB(), #tb@769, x0@765));
    @premise know(*X(sk@764, pk(skB())), #t2@770);
    @premise know(*pk(skB()), #t2@768);
    @premise know(*sk@764, #t1@767);
    @premise know(*x0@765, #t0@772);
    @conclusion know(*sign(tuple5([Nb@763], pk(sk@764), x0@765, X(skB(), pk(sk@764)), aenc(Y(skB(), pk(sk@764)), pk(sk@764))), skB()), #t@766);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@586], newA(), tuple3(skA(), skR@584, #ta@587));
    @premise know(*skR@584, #t1@588);
    @conclusion know(*Y(skA(), pk(skR@584)), #t@585);
    @constraint #t@585 - #ta@587 >= 0;
    @constraint -#t1@588 + #t@585 >= 0;
};
Rule in cache: 19
Rule staged: 62
Rule before check and clean: 
@rule{
    @premise new(*[Na@777], newA(), tuple3(skA(), skB(), #ta@778));
    @premise know(*skB(), #t1@779);
    @premise new(*[Nb@774], newB(), tuple4(skA(), skB(), #tb@780, x0@775));
    @premise know(*X(skA(), pk(skB())), #t2@781);
    @premise know(*pk(skB()), #t1@782);
    @premise know(*x0@775, #t0@783);
    @premise know(*skA(), #t2@784);
    @conclusion know(*sign(tuple5([Nb@774], pk(skA()), x0@775, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@776);
    @constraint #t@585 - #ta@778 >= 0;
    @constraint -#t1@779 + #t@585 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@774], newB(), tuple4(skA(), skB(), #tb@780, x0@775));
    @premise new(*[Na@777], newA(), tuple3(skA(), skB(), #ta@778));
    @premise know(*X(skA(), pk(skB())), #t2@781);
    @premise know(*pk(skB()), #t1@782);
    @premise know(*skB(), #t1@779);
    @premise know(*skA(), #t2@784);
    @premise know(*x0@775, #t0@783);
    @conclusion know(*sign(tuple5([Nb@774], pk(skA()), x0@775, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@776);
};

Stage rule: 
@rule{
    @premise new(*[Nb@610], newB(), tuple4(skA(), skB(), #tb@615, x0@611));
    @premise new(*[Na@613], newA(), tuple3(skA(), skB(), #ta@614));
    @premise know(*X(skA(), pk(skB())), #t2@616);
    @premise know(*pk(skB()), #t1@617);
    @premise know(*skA(), #t2@619);
    @premise know(*x0@611, #t0@618);
    @conclusion know(*sign(tuple5([Nb@610], pk(skA()), x0@611, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@612);
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule in cache: 19
Rule staged: 63
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@788);
    @premise know(*pk(skB()), #t2@789);
    @premise new(*[Nb@785], newB(), tuple4(skA(), skB(), #tb@790, x0@786));
    @premise new(*[Na@791], newA(), tuple3(skA(), skB(), #ta@792));
    @premise know(*pk(skB()), #t1@793);
    @premise know(*skA(), #t2@794);
    @premise know(*x0@786, #t0@795);
    @conclusion know(*sign(tuple5([Nb@785], pk(skA()), x0@786, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@787);
    @constraint #t@232 - #t2@789 >= 0;
    @constraint -#t1@788 + #t@232 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@785], newB(), tuple4(skA(), skB(), #tb@790, x0@786));
    @premise new(*[Na@791], newA(), tuple3(skA(), skB(), #ta@792));
    @premise know(*pk(skB()), #t2@789);
    @premise know(*skA(), #t1@788);
    @premise know(*x0@786, #t0@795);
    @conclusion know(*sign(tuple5([Nb@785], pk(skA()), x0@786, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@787);
};

Compose by at 2 : 
@rule{
    @premise new(*[Na@534], newA(), tuple3(skA(), skR@532, #ta@535));
    @conclusion know(*X(skA(), pk(skR@532)), #t2@533);
    @constraint #t2@533 - #ta@535 >= 0;
};
Rule in cache: 20
Rule staged: 63
Rule before check and clean: 
@rule{
    @premise new(*[Na@799], newA(), tuple3(skA(), skB(), #ta@800));
    @premise new(*[Nb@796], newB(), tuple4(skA(), skB(), #tb@801, x0@797));
    @premise new(*[Na@802], newA(), tuple3(skA(), skB(), #ta@803));
    @premise know(*pk(skB()), #t1@804);
    @premise know(*skA(), #t2@805);
    @premise know(*x0@797, #t0@806);
    @conclusion know(*sign(tuple5([Nb@796], pk(skA()), x0@797, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@798);
    @constraint #t2@533 - #ta@800 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@796], newB(), tuple4(skA(), skB(), #tb@801, x0@797));
    @premise new(*[Na@799], newA(), tuple3(skA(), skB(), #ta@800));
    @premise new(*[Na@802], newA(), tuple3(skA(), skB(), #ta@803));
    @premise know(*pk(skB()), #t1@804);
    @premise know(*skA(), #t2@805);
    @premise know(*x0@797, #t0@806);
    @conclusion know(*sign(tuple5([Nb@796], pk(skA()), x0@797, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@798);
};

Stage rule: 
@rule{
    @premise new(*[Na@622], newA(), tuple3(skA(), skB(), #ta@623));
    @premise new(*[Nb@620], newB(), tuple4(skA(), skB(), #tb@624, [Na@622]));
    @conclusion know(*[Nb@620], #t0@621);
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Na@626], newA(), tuple3(skA(), skB(), #ta@627));
    @premise new(*[Nb@628], newB(), tuple4(skA(), skB(), #tb@629, [Na@626]));
    @conclusion know(*pk(skA()), #t1@625);
};
Rule implied by: 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@630], newA(), tuple3(skA(), skB(), #ta@632));
    @premise new(*[Nb@633], newB(), tuple4(skA(), skB(), #tb@634, [Na@630]));
    @conclusion know(*[Na@630], #t2@631);
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Na@636], newA(), tuple3(skA(), skB(), #ta@637));
    @premise new(*[Nb@638], newB(), tuple4(skA(), skB(), #tb@639, [Na@636]));
    @conclusion know(*X(skB(), pk(skA())), #t3@635);
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Na@641], newA(), tuple3(skA(), skB(), #ta@642));
    @premise new(*[Nb@643], newB(), tuple4(skA(), skB(), #tb@644, [Na@641]));
    @conclusion know(*aenc(Y(skB(), pk(skA())), pk(skA())), #t4@640);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 16
Rule staged: 67
Rule before check and clean: 
@rule{
    @premise new(*[Na@808], newA(), tuple3(skA(), skB(), #ta@809));
    @premise new(*[Nb@810], newB(), tuple4(skA(), skB(), #tb@811, [Na@808]));
    @premise know(*skA(), #t1@812);
    @conclusion know(*Y(skB(), pk(skA())), #t@807);
    @constraint -#t1@812 + #t@807 >= 0;
    @constraint #t@807 - #t4@640 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@808], newA(), tuple3(skA(), skB(), #ta@809));
    @premise new(*[Nb@810], newB(), tuple4(skA(), skB(), #tb@811, [Na@808]));
    @premise know(*skA(), #t1@812);
    @conclusion know(*Y(skB(), pk(skA())), #t@807);
    @constraint -#t1@812 + #t@807 >= 0;
};

Compose to at 0 : 
@rule{
    @premise know(*aenc(Y(sk@561, pk(skA())), pk(skA())), #t4@569);
    @premise new(*[Na@566], newA(), tuple3(skA(), sk@561, #ta@571));
    @premise know(*X(sk@561, pk(skA())), #t3@568);
    @premise know(*pk(skA()), #t1@565);
    @premise init(*skA(), *sk@561, *#ta@571, *x0@562, *[Na@566]);
    @premise know(*[Na@566], #t2@567);
    @premise know(*sk@561, #t2@570);
    @premise know(*x0@562, #t0@564);
    @conclusion know(*sign(tuple2(pk(sk@561), x0@562), skA()), #t@563);
};
Rule in cache: 17
Rule staged: 67
Rule before check and clean: 
@rule{
    @premise new(*[Na@815], newA(), tuple3(skA(), skB(), #ta@816));
    @premise new(*[Nb@817], newB(), tuple4(skA(), skB(), #tb@818, [Na@815]));
    @premise new(*[Na@819], newA(), tuple3(skA(), skB(), #ta@820));
    @premise know(*X(skB(), pk(skA())), #t3@821);
    @premise know(*pk(skA()), #t1@822);
    @premise init(*skA(), *skB(), *#ta@820, *x0@813, *[Na@819]);
    @premise know(*[Na@819], #t2@823);
    @premise know(*skB(), #t2@824);
    @premise know(*x0@813, #t0@825);
    @conclusion know(*sign(tuple2(pk(skB()), x0@813), skA()), #t@814);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@817], newB(), tuple4(skA(), skB(), #tb@818, [Na@815]));
    @premise new(*[Na@815], newA(), tuple3(skA(), skB(), #ta@816));
    @premise new(*[Na@819], newA(), tuple3(skA(), skB(), #ta@820));
    @premise know(*X(skB(), pk(skA())), #t3@821);
    @premise init(*skA(), *skB(), *#ta@820, *x0@813, *[Na@819]);
    @premise know(*pk(skA()), #t1@822);
    @premise know(*skB(), #t2@824);
    @premise know(*[Na@819], #t2@823);
    @premise know(*x0@813, #t0@825);
    @conclusion know(*sign(tuple2(pk(skB()), x0@813), skA()), #t@814);
};

Stage rule: 
@rule{
    @premise new(*[Na@647], newA(), tuple3(skA(), skB(), #ta@648));
    @premise new(*[Nb@645], newB(), tuple4(skA(), skB(), #tb@649, [Na@647]));
    @premise init(*skA(), *skB(), *#ta@648, *[Nb@645], *[Na@647]);
    @conclusion know(*tuple2(pk(skB()), [Nb@645]), #t@646);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};
Rule in cache: 17
Rule staged: 68
Rule before check and clean: 
@rule{
    @premise new(*[Na@827], newA(), tuple3(skA(), skB(), #ta@828));
    @premise new(*[Nb@829], newB(), tuple4(skA(), skB(), #tb@830, [Na@827]));
    @premise init(*skA(), *skB(), *#ta@828, *[Nb@829], *[Na@827]);
    @conclusion know(*pk(skB()), #t0@826);
    @constraint #t0@826 - #t@646 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@827], newA(), tuple3(skA(), skB(), #ta@828));
    @premise new(*[Nb@829], newB(), tuple4(skA(), skB(), #tb@830, [Na@827]));
    @premise init(*skA(), *skB(), *#ta@828, *[Nb@829], *[Na@827]);
    @conclusion know(*pk(skB()), #t0@826);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};
Rule in cache: 18
Rule staged: 68
Rule before check and clean: 
@rule{
    @premise new(*[Na@833], newA(), tuple3(skA(), skB(), #ta@834));
    @premise new(*[Nb@831], newB(), tuple4(skA(), skB(), #tb@835, [Na@833]));
    @premise init(*skA(), *skB(), *#ta@834, *[Nb@831], *[Na@833]);
    @conclusion know(*[Nb@831], #t1@832);
    @constraint #t1@832 - #t@646 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@833], newA(), tuple3(skA(), skB(), #ta@834));
    @premise new(*[Nb@831], newB(), tuple4(skA(), skB(), #tb@835, [Na@833]));
    @premise init(*skA(), *skB(), *#ta@834, *[Nb@831], *[Na@833]);
    @conclusion know(*[Nb@831], #t1@832);
};

Stage rule: 
@rule{
    @premise new(*[Na@653], newA(), tuple3(skA(), skB(), #ta@654));
    @premise new(*[Nb@651], newB(), tuple4(skA(), skB(), #tb@655, [Na@653]));
    @premise init(*skA(), *skB(), *#ta@654, *[Nb@651], *[Na@653]);
    @conclusion accept(skA(), skB(), #tb@655, [Nb@651], [Na@653]);
};
Rule added.

Check rule against queries: 
@rule{
    @premise new(*[Na@653], newA(), tuple3(skA(), skB(), #ta@654));
    @premise new(*[Nb@651], newB(), tuple4(skA(), skB(), #tb@655, [Na@653]));
    @premise init(*skA(), *skB(), *#ta@654, *[Nb@651], *[Na@653]);
    @conclusion accept(skA(), skB(), #tb@655, [Nb@651], [Na@653]);
};
Before checking:
0. Requested parameter relation:
[@universe]

After checking:
0. Requested parameter relation:
[@universe]


Stage rule: 
@rule{
    @premise new(*[Na@661], newA(), tuple3(skA(), sk@656, #ta@662));
    @premise know(*Y(sk@656, pk(skA())), #t1@660);
    @premise know(*X(sk@656, pk(skA())), #t3@663);
    @premise know(*pk(skA()), #t1@664);
    @premise init(*skA(), *sk@656, *#ta@662, *x0@657, *[Na@661]);
    @premise know(*skA(), #t1@659);
    @premise know(*[Na@661], #t2@665);
    @premise know(*sk@656, #t2@666);
    @premise know(*x0@657, #t0@667);
    @conclusion know(*sign(tuple2(pk(sk@656), x0@657), skA()), #t@658);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};
Rule in cache: 17
Rule staged: 70
Rule before check and clean: 
@rule{
    @premise know(*sk@836, #t1@839);
    @premise know(*pk(skA()), #t2@840);
    @premise new(*[Na@841], newA(), tuple3(skA(), sk@836, #ta@842));
    @premise know(*X(sk@836, pk(skA())), #t3@843);
    @premise know(*pk(skA()), #t1@844);
    @premise init(*skA(), *sk@836, *#ta@842, *x0@837, *[Na@841]);
    @premise know(*skA(), #t1@845);
    @premise know(*[Na@841], #t2@846);
    @premise know(*sk@836, #t2@847);
    @premise know(*x0@837, #t0@848);
    @conclusion know(*sign(tuple2(pk(sk@836), x0@837), skA()), #t@838);
    @constraint #t@238 - #t2@840 >= 0;
    @constraint -#t1@839 + #t@238 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@841], newA(), tuple3(skA(), sk@836, #ta@842));
    @premise know(*X(sk@836, pk(skA())), #t3@843);
    @premise know(*pk(skA()), #t2@840);
    @premise init(*skA(), *sk@836, *#ta@842, *x0@837, *[Na@841]);
    @premise know(*skA(), #t1@845);
    @premise know(*[Na@841], #t2@846);
    @premise know(*sk@836, #t1@839);
    @premise know(*x0@837, #t0@848);
    @conclusion know(*sign(tuple2(pk(sk@836), x0@837), skA()), #t@838);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@586], newA(), tuple3(skA(), skR@584, #ta@587));
    @premise know(*skR@584, #t1@588);
    @conclusion know(*Y(skA(), pk(skR@584)), #t@585);
    @constraint #t@585 - #ta@587 >= 0;
    @constraint -#t1@588 + #t@585 >= 0;
};
Rule in cache: 18
Rule staged: 70
Rule before check and clean: 
@rule{
    @premise new(*[Na@851], newA(), tuple3(skA(), skA(), #ta@852));
    @premise know(*skA(), #t1@853);
    @premise new(*[Na@854], newA(), tuple3(skA(), skA(), #ta@855));
    @premise know(*X(skA(), pk(skA())), #t3@856);
    @premise know(*pk(skA()), #t1@857);
    @premise init(*skA(), *skA(), *#ta@855, *x0@849, *[Na@854]);
    @premise know(*skA(), #t1@858);
    @premise know(*[Na@854], #t2@859);
    @premise know(*skA(), #t2@860);
    @premise know(*x0@849, #t0@861);
    @conclusion know(*sign(tuple2(pk(skA()), x0@849), skA()), #t@850);
    @constraint #t@585 - #ta@852 >= 0;
    @constraint -#t1@853 + #t@585 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@851], newA(), tuple3(skA(), skA(), #ta@852));
    @premise new(*[Na@854], newA(), tuple3(skA(), skA(), #ta@855));
    @premise know(*X(skA(), pk(skA())), #t3@856);
    @premise init(*skA(), *skA(), *#ta@855, *x0@849, *[Na@854]);
    @premise know(*pk(skA()), #t1@857);
    @premise know(*skA(), #t1@853);
    @premise know(*[Na@854], #t2@859);
    @premise know(*x0@849, #t0@861);
    @conclusion know(*sign(tuple2(pk(skA()), x0@849), skA()), #t@850);
};

Stage rule: 
@rule{
    @premise new(*[Na@672], newA(), tuple3(skA(), sk@668, #ta@673));
    @premise know(*Y(sk@668, pk(skA())), #t1@671);
    @premise know(*X(sk@668, pk(skA())), #t3@674);
    @premise know(*pk(skA()), #t1@675);
    @premise init(*skA(), *sk@668, *#ta@673, *x0@669, *[Na@672]);
    @premise know(*[Na@672], #t2@676);
    @premise know(*sk@668, #t2@677);
    @premise know(*x0@669, #t0@678);
    @conclusion know(*sign(tuple2(pk(sk@668), x0@669), skA()), #t@670);
};
Rule deleted: 
@rule{
    @premise new(*[Na@661], newA(), tuple3(skA(), sk@656, #ta@662));
    @premise know(*Y(sk@656, pk(skA())), #t1@660);
    @premise know(*X(sk@656, pk(skA())), #t3@663);
    @premise know(*pk(skA()), #t1@664);
    @premise init(*skA(), *sk@656, *#ta@662, *x0@657, *[Na@661]);
    @premise know(*skA(), #t1@659);
    @premise know(*[Na@661], #t2@665);
    @premise know(*sk@656, #t2@666);
    @premise know(*x0@657, #t0@667);
    @conclusion know(*sign(tuple2(pk(sk@656), x0@657), skA()), #t@658);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};
Rule in cache: 18
Rule staged: 71
Rule before check and clean: 
@rule{
    @premise know(*sk@862, #t1@865);
    @premise know(*pk(skA()), #t2@866);
    @premise new(*[Na@867], newA(), tuple3(skA(), sk@862, #ta@868));
    @premise know(*X(sk@862, pk(skA())), #t3@869);
    @premise know(*pk(skA()), #t1@870);
    @premise init(*skA(), *sk@862, *#ta@868, *x0@863, *[Na@867]);
    @premise know(*[Na@867], #t2@871);
    @premise know(*sk@862, #t2@872);
    @premise know(*x0@863, #t0@873);
    @conclusion know(*sign(tuple2(pk(sk@862), x0@863), skA()), #t@864);
    @constraint #t@238 - #t2@866 >= 0;
    @constraint -#t1@865 + #t@238 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@867], newA(), tuple3(skA(), sk@862, #ta@868));
    @premise know(*X(sk@862, pk(skA())), #t3@869);
    @premise know(*pk(skA()), #t2@866);
    @premise init(*skA(), *sk@862, *#ta@868, *x0@863, *[Na@867]);
    @premise know(*[Na@867], #t2@871);
    @premise know(*sk@862, #t1@865);
    @premise know(*x0@863, #t0@873);
    @conclusion know(*sign(tuple2(pk(sk@862), x0@863), skA()), #t@864);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@586], newA(), tuple3(skA(), skR@584, #ta@587));
    @premise know(*skR@584, #t1@588);
    @conclusion know(*Y(skA(), pk(skR@584)), #t@585);
    @constraint #t@585 - #ta@587 >= 0;
    @constraint -#t1@588 + #t@585 >= 0;
};
Rule in cache: 19
Rule staged: 71
Rule before check and clean: 
@rule{
    @premise new(*[Na@876], newA(), tuple3(skA(), skA(), #ta@877));
    @premise know(*skA(), #t1@878);
    @premise new(*[Na@879], newA(), tuple3(skA(), skA(), #ta@880));
    @premise know(*X(skA(), pk(skA())), #t3@881);
    @premise know(*pk(skA()), #t1@882);
    @premise init(*skA(), *skA(), *#ta@880, *x0@874, *[Na@879]);
    @premise know(*[Na@879], #t2@883);
    @premise know(*skA(), #t2@884);
    @premise know(*x0@874, #t0@885);
    @conclusion know(*sign(tuple2(pk(skA()), x0@874), skA()), #t@875);
    @constraint #t@585 - #ta@877 >= 0;
    @constraint -#t1@878 + #t@585 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@876], newA(), tuple3(skA(), skA(), #ta@877));
    @premise new(*[Na@879], newA(), tuple3(skA(), skA(), #ta@880));
    @premise know(*X(skA(), pk(skA())), #t3@881);
    @premise init(*skA(), *skA(), *#ta@880, *x0@874, *[Na@879]);
    @premise know(*pk(skA()), #t1@882);
    @premise know(*skA(), #t1@878);
    @premise know(*[Na@879], #t2@883);
    @premise know(*x0@874, #t0@885);
    @conclusion know(*sign(tuple2(pk(skA()), x0@874), skA()), #t@875);
};

Stage rule: 
@rule{
    @premise new(*[Na@681], newA(), tuple3(skA(), skA(), #ta@682));
    @premise new(*[Na@683], newA(), tuple3(skA(), skA(), #ta@684));
    @premise know(*X(skA(), pk(skA())), #t3@685);
    @premise init(*skA(), *skA(), *#ta@684, *x0@679, *[Na@683]);
    @premise know(*pk(skA()), #t1@686);
    @premise know(*skA(), #t2@688);
    @premise know(*[Na@683], #t2@687);
    @premise know(*x0@679, #t0@689);
    @conclusion know(*sign(tuple2(pk(skA()), x0@679), skA()), #t@680);
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule in cache: 19
Rule staged: 72
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@888);
    @premise know(*pk(skA()), #t2@889);
    @premise new(*[Na@890], newA(), tuple3(skA(), skA(), #ta@891));
    @premise new(*[Na@892], newA(), tuple3(skA(), skA(), #ta@893));
    @premise init(*skA(), *skA(), *#ta@893, *x0@886, *[Na@892]);
    @premise know(*pk(skA()), #t1@894);
    @premise know(*skA(), #t2@895);
    @premise know(*[Na@892], #t2@896);
    @premise know(*x0@886, #t0@897);
    @conclusion know(*sign(tuple2(pk(skA()), x0@886), skA()), #t@887);
    @constraint #t@232 - #t2@889 >= 0;
    @constraint -#t1@888 + #t@232 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@892], newA(), tuple3(skA(), skA(), #ta@893));
    @premise new(*[Na@890], newA(), tuple3(skA(), skA(), #ta@891));
    @premise init(*skA(), *skA(), *#ta@893, *x0@886, *[Na@892]);
    @premise know(*pk(skA()), #t2@889);
    @premise know(*skA(), #t1@888);
    @premise know(*[Na@892], #t2@896);
    @premise know(*x0@886, #t0@897);
    @conclusion know(*sign(tuple2(pk(skA()), x0@886), skA()), #t@887);
};

Compose by at 2 : 
@rule{
    @premise new(*[Na@534], newA(), tuple3(skA(), skR@532, #ta@535));
    @conclusion know(*X(skA(), pk(skR@532)), #t2@533);
    @constraint #t2@533 - #ta@535 >= 0;
};
Rule in cache: 20
Rule staged: 72
Rule before check and clean: 
@rule{
    @premise new(*[Na@900], newA(), tuple3(skA(), skA(), #ta@901));
    @premise new(*[Na@902], newA(), tuple3(skA(), skA(), #ta@903));
    @premise new(*[Na@904], newA(), tuple3(skA(), skA(), #ta@905));
    @premise init(*skA(), *skA(), *#ta@905, *x0@898, *[Na@904]);
    @premise know(*pk(skA()), #t1@906);
    @premise know(*skA(), #t2@907);
    @premise know(*[Na@904], #t2@908);
    @premise know(*x0@898, #t0@909);
    @conclusion know(*sign(tuple2(pk(skA()), x0@898), skA()), #t@899);
    @constraint #t2@533 - #ta@901 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@900], newA(), tuple3(skA(), skA(), #ta@901));
    @premise new(*[Na@902], newA(), tuple3(skA(), skA(), #ta@903));
    @premise new(*[Na@904], newA(), tuple3(skA(), skA(), #ta@905));
    @premise init(*skA(), *skA(), *#ta@905, *x0@898, *[Na@904]);
    @premise know(*pk(skA()), #t1@906);
    @premise know(*skA(), #t2@907);
    @premise know(*[Na@904], #t2@908);
    @premise know(*x0@898, #t0@909);
    @conclusion know(*sign(tuple2(pk(skA()), x0@898), skA()), #t@899);
};

Stage rule: 
@rule{
    @premise know(*skB(), #t1@693);
    @premise know(*[Nb@691], #t1@694);
    @premise know(*skA(), #t2@695);
    @premise new(*[Nb@691], newB(), tuple4(skA(), skB(), #tb@690, Na@692));
    @conclusion accept(skA(), skB(), #tb@690, [Nb@691], Na@692);
};
Rule added at 0.

Stage rule: 
@rule{
    @premise know(*[Nb@697], #t1@699);
    @premise know(*skA(), #t2@700);
    @premise new(*[Nb@697], newB(), tuple4(skA(), skB(), #tb@696, Na@698));
    @conclusion accept(skA(), skB(), #tb@696, [Nb@697], Na@698);
};
Rule deleted: 
@rule{
    @premise know(*pk(skB()), #t0@575);
    @premise know(*[Nb@573], #t1@576);
    @premise know(*skA(), #t2@577);
    @premise new(*[Nb@573], newB(), tuple4(skA(), skB(), #tb@572, Na@574));
    @conclusion accept(skA(), skB(), #tb@572, [Nb@573], Na@574);
};
Rule deleted: 
@rule{
    @premise know(*skB(), #t1@693);
    @premise know(*[Nb@691], #t1@694);
    @premise know(*skA(), #t2@695);
    @premise new(*[Nb@691], newB(), tuple4(skA(), skB(), #tb@690, Na@692));
    @conclusion accept(skA(), skB(), #tb@690, [Nb@691], Na@692);
};
Rule added at 0.

Compose by at 0 : 
@rule{
    @premise new(*[Na@524], newA(), tuple3(skA(), skR@526, #ta@527));
    @conclusion know(*[Na@524], #t0@525);
    @constraint #t0@525 - #ta@527 >= 0;
};
Rule in cache: 19
Rule staged: 74
Rule before check and clean: 
@rule{
    @premise new(*[Na@911], newA(), tuple3(skA(), skR@913, #ta@914));
    @premise know(*skA(), #t2@915);
    @premise new(*[Na@911], newB(), tuple4(skA(), skB(), #tb@910, Na@912));
    @conclusion accept(skA(), skB(), #tb@910, [Na@911], Na@912);
    @constraint #t0@525 - #ta@914 >= 0;
};
Rule invalid. 

Compose by at 0 : 
@rule{
    @premise new(*[Na@622], newA(), tuple3(skA(), skB(), #ta@623));
    @premise new(*[Nb@620], newB(), tuple4(skA(), skB(), #tb@624, [Na@622]));
    @conclusion know(*[Nb@620], #t0@621);
};
Rule in cache: 19
Rule staged: 74
Rule before check and clean: 
@rule{
    @premise new(*[Na@919], newA(), tuple3(skA(), skB(), #ta@920));
    @premise new(*[Nb@917], newB(), tuple4(skA(), skB(), #tb@921, [Na@919]));
    @premise know(*skA(), #t2@922);
    @premise new(*[Nb@917], newB(), tuple4(skA(), skB(), #tb@916, Na@918));
    @conclusion accept(skA(), skB(), #tb@916, [Nb@917], Na@918);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@919], newA(), tuple3(skA(), skB(), #ta@920));
    @premise new(*[Nb@917], newB(), tuple4(skA(), skB(), #tb@921, [Na@919]));
    @premise know(*skA(), #t2@922);
    @conclusion accept(skA(), skB(), #tb@921, [Nb@917], [Na@919]);
};

Compose by at 0 : 
@rule{
    @premise new(*[Na@630], newA(), tuple3(skA(), skB(), #ta@632));
    @premise new(*[Nb@633], newB(), tuple4(skA(), skB(), #tb@634, [Na@630]));
    @conclusion know(*[Na@630], #t2@631);
};
Rule in cache: 20
Rule staged: 74
Rule before check and clean: 
@rule{
    @premise new(*[Na@924], newA(), tuple3(skA(), skB(), #ta@926));
    @premise new(*[Nb@927], newB(), tuple4(skA(), skB(), #tb@928, [Na@924]));
    @premise know(*skA(), #t2@929);
    @premise new(*[Na@924], newB(), tuple4(skA(), skB(), #tb@923, Na@925));
    @conclusion accept(skA(), skB(), #tb@923, [Na@924], Na@925);
};
Rule invalid. 

Stage rule: 
@rule{
    @premise new(*[Na@704], newA(), tuple3(skA(), skB(), #ta@705));
    @premise know(*[Nb@702], #t1@706);
    @premise know(*skA(), #t2@707);
    @premise new(*[Nb@702], newB(), tuple4(skA(), skB(), #tb@701, Na@703));
    @conclusion accept(skA(), skB(), #tb@701, [Nb@702], Na@703);
};
Rule implied by: 
@rule{
    @premise know(*[Nb@697], #t1@699);
    @premise know(*skA(), #t2@700);
    @premise new(*[Nb@697], newB(), tuple4(skA(), skB(), #tb@696, Na@698));
    @conclusion accept(skA(), skB(), #tb@696, [Nb@697], Na@698);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@719], newA(), tuple3(skA(), skB(), #ta@720));
    @premise new(*[Nb@715], newB(), tuple4(sk@716, skB(), #tb@722, x0@717));
    @premise know(*Y(sk@716, pk(skB())), #t1@721);
    @premise know(*X(sk@716, pk(skB())), #t2@723);
    @premise know(*pk(skB()), #t1@724);
    @premise know(*x0@717, #t0@725);
    @premise know(*sk@716, #t2@726);
    @conclusion know(*sign(tuple5([Nb@715], pk(sk@716), x0@717, X(skB(), pk(sk@716)), aenc(Y(skB(), pk(sk@716)), pk(sk@716))), skB()), #t@718);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@600], newB(), tuple4(sk@601, skB(), #tb@605, x0@602));
    @premise know(*Y(sk@601, pk(skB())), #t1@604);
    @premise know(*X(sk@601, pk(skB())), #t2@606);
    @premise know(*pk(skB()), #t1@607);
    @premise know(*x0@602, #t0@608);
    @premise know(*sk@601, #t2@609);
    @conclusion know(*sign(tuple5([Nb@600], pk(sk@601), x0@602, X(skB(), pk(sk@601)), aenc(Y(skB(), pk(sk@601)), pk(sk@601))), skB()), #t@603);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@730], newA(), tuple3(skA(), skA(), #ta@731));
    @premise new(*[Na@733], newA(), tuple3(skA(), sk@727, #ta@734));
    @premise know(*Y(sk@727, pk(skA())), #t1@732);
    @premise know(*X(sk@727, pk(skA())), #t3@735);
    @premise know(*pk(skA()), #t1@736);
    @premise init(*skA(), *sk@727, *#ta@734, *x0@728, *[Na@733]);
    @premise know(*[Na@733], #t2@737);
    @premise know(*sk@727, #t2@738);
    @premise know(*x0@728, #t0@739);
    @conclusion know(*sign(tuple2(pk(sk@727), x0@728), skA()), #t@729);
};
Rule implied by: 
@rule{
    @premise new(*[Na@672], newA(), tuple3(skA(), sk@668, #ta@673));
    @premise know(*Y(sk@668, pk(skA())), #t1@671);
    @premise know(*X(sk@668, pk(skA())), #t3@674);
    @premise know(*pk(skA()), #t1@675);
    @premise init(*skA(), *sk@668, *#ta@673, *x0@669, *[Na@672]);
    @premise know(*[Na@672], #t2@676);
    @premise know(*sk@668, #t2@677);
    @premise know(*x0@669, #t0@678);
    @conclusion know(*sign(tuple2(pk(sk@668), x0@669), skA()), #t@670);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@740], newB(), tuple4(sk@741, skB(), #tb@746, x0@742));
    @premise know(*Y(sk@741, pk(skB())), #t1@747);
    @premise know(*pk(skB()), #t2@745);
    @premise know(*skB(), #t1@749);
    @premise know(*sk@741, #t1@744);
    @premise know(*x0@742, #t0@750);
    @conclusion know(*sign(tuple5([Nb@740], pk(sk@741), x0@742, X(skB(), pk(sk@741)), aenc(Y(skB(), pk(sk@741)), pk(sk@741))), skB()), #t@743);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};
Rule in cache: 16
Rule staged: 75
Rule before check and clean: 
@rule{
    @premise know(*sk@931, #t1@934);
    @premise know(*pk(skB()), #t2@935);
    @premise new(*[Nb@930], newB(), tuple4(sk@931, skB(), #tb@936, x0@932));
    @premise know(*pk(skB()), #t2@937);
    @premise know(*skB(), #t1@938);
    @premise know(*sk@931, #t1@939);
    @premise know(*x0@932, #t0@940);
    @conclusion know(*sign(tuple5([Nb@930], pk(sk@931), x0@932, X(skB(), pk(sk@931)), aenc(Y(skB(), pk(sk@931)), pk(sk@931))), skB()), #t@933);
    @constraint #t@238 - #t2@935 >= 0;
    @constraint -#t1@934 + #t@238 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@930], newB(), tuple4(sk@931, skB(), #tb@936, x0@932));
    @premise know(*pk(skB()), #t2@935);
    @premise know(*skB(), #t1@938);
    @premise know(*sk@931, #t1@934);
    @premise know(*x0@932, #t0@940);
    @conclusion know(*sign(tuple5([Nb@930], pk(sk@931), x0@932, X(skB(), pk(sk@931)), aenc(Y(skB(), pk(sk@931)), pk(sk@931))), skB()), #t@933);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@586], newA(), tuple3(skA(), skR@584, #ta@587));
    @premise know(*skR@584, #t1@588);
    @conclusion know(*Y(skA(), pk(skR@584)), #t@585);
    @constraint #t@585 - #ta@587 >= 0;
    @constraint -#t1@588 + #t@585 >= 0;
};
Rule in cache: 17
Rule staged: 75
Rule before check and clean: 
@rule{
    @premise new(*[Na@944], newA(), tuple3(skA(), skB(), #ta@945));
    @premise know(*skB(), #t1@946);
    @premise new(*[Nb@941], newB(), tuple4(skA(), skB(), #tb@947, x0@942));
    @premise know(*pk(skB()), #t2@948);
    @premise know(*skB(), #t1@949);
    @premise know(*skA(), #t1@950);
    @premise know(*x0@942, #t0@951);
    @conclusion know(*sign(tuple5([Nb@941], pk(skA()), x0@942, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@943);
    @constraint #t@585 - #ta@945 >= 0;
    @constraint -#t1@946 + #t@585 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@941], newB(), tuple4(skA(), skB(), #tb@947, x0@942));
    @premise new(*[Na@944], newA(), tuple3(skA(), skB(), #ta@945));
    @premise know(*pk(skB()), #t2@948);
    @premise know(*skB(), #t1@946);
    @premise know(*skA(), #t1@950);
    @premise know(*x0@942, #t0@951);
    @conclusion know(*sign(tuple5([Nb@941], pk(skA()), x0@942, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@943);
};

Stage rule: 
@rule{
    @premise new(*[Nb@752], newB(), tuple4(skA(), skB(), #tb@757, x0@753));
    @premise new(*[Na@755], newA(), tuple3(skA(), skB(), #ta@756));
    @premise know(*Y(skA(), pk(skB())), #t1@758);
    @premise know(*pk(skB()), #t1@759);
    @premise know(*skB(), #t1@760);
    @premise know(*skA(), #t2@762);
    @premise know(*x0@753, #t0@761);
    @conclusion know(*sign(tuple5([Nb@752], pk(skA()), x0@753, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@754);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@740], newB(), tuple4(sk@741, skB(), #tb@746, x0@742));
    @premise know(*Y(sk@741, pk(skB())), #t1@747);
    @premise know(*pk(skB()), #t2@745);
    @premise know(*skB(), #t1@749);
    @premise know(*sk@741, #t1@744);
    @premise know(*x0@742, #t0@750);
    @conclusion know(*sign(tuple5([Nb@740], pk(sk@741), x0@742, X(skB(), pk(sk@741)), aenc(Y(skB(), pk(sk@741)), pk(sk@741))), skB()), #t@743);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@763], newB(), tuple4(sk@764, skB(), #tb@769, x0@765));
    @premise know(*X(sk@764, pk(skB())), #t2@770);
    @premise know(*pk(skB()), #t2@768);
    @premise know(*sk@764, #t1@767);
    @premise know(*x0@765, #t0@772);
    @conclusion know(*sign(tuple5([Nb@763], pk(sk@764), x0@765, X(skB(), pk(sk@764)), aenc(Y(skB(), pk(sk@764)), pk(sk@764))), skB()), #t@766);
};
Rule deleted: 
@rule{
    @premise know(*aenc(Y(sk@541, pk(skB())), pk(skB())), #t3@547);
    @premise new(*[Nb@540], newB(), tuple4(sk@541, skB(), #tb@549, x0@542));
    @premise know(*X(sk@541, pk(skB())), #t2@546);
    @premise know(*pk(skB()), #t1@545);
    @premise know(*x0@542, #t0@544);
    @premise know(*sk@541, #t2@548);
    @conclusion know(*sign(tuple5([Nb@540], pk(sk@541), x0@542, X(skB(), pk(sk@541)), aenc(Y(skB(), pk(sk@541)), pk(sk@541))), skB()), #t@543);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@600], newB(), tuple4(sk@601, skB(), #tb@605, x0@602));
    @premise know(*Y(sk@601, pk(skB())), #t1@604);
    @premise know(*X(sk@601, pk(skB())), #t2@606);
    @premise know(*pk(skB()), #t1@607);
    @premise know(*x0@602, #t0@608);
    @premise know(*sk@601, #t2@609);
    @conclusion know(*sign(tuple5([Nb@600], pk(sk@601), x0@602, X(skB(), pk(sk@601)), aenc(Y(skB(), pk(sk@601)), pk(sk@601))), skB()), #t@603);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@610], newB(), tuple4(skA(), skB(), #tb@615, x0@611));
    @premise new(*[Na@613], newA(), tuple3(skA(), skB(), #ta@614));
    @premise know(*X(skA(), pk(skB())), #t2@616);
    @premise know(*pk(skB()), #t1@617);
    @premise know(*skA(), #t2@619);
    @premise know(*x0@611, #t0@618);
    @conclusion know(*sign(tuple5([Nb@610], pk(skA()), x0@611, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@612);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule in cache: 16
Rule staged: 76
Rule before check and clean: 
@rule{
    @premise know(*sk@953, #t1@956);
    @premise know(*pk(skB()), #t2@957);
    @premise new(*[Nb@952], newB(), tuple4(sk@953, skB(), #tb@958, x0@954));
    @premise know(*pk(skB()), #t2@959);
    @premise know(*sk@953, #t1@960);
    @premise know(*x0@954, #t0@961);
    @conclusion know(*sign(tuple5([Nb@952], pk(sk@953), x0@954, X(skB(), pk(sk@953)), aenc(Y(skB(), pk(sk@953)), pk(sk@953))), skB()), #t@955);
    @constraint #t@232 - #t2@957 >= 0;
    @constraint -#t1@956 + #t@232 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@953, #t1@956);
    @premise know(*pk(skB()), #t2@957);
    @premise new(*[Nb@952], newB(), tuple4(sk@953, skB(), #tb@958, x0@954));
    @premise know(*x0@954, #t0@961);
    @conclusion know(*sign(tuple5([Nb@952], pk(sk@953), x0@954, X(skB(), pk(sk@953)), aenc(Y(skB(), pk(sk@953)), pk(sk@953))), skB()), #t@955);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@534], newA(), tuple3(skA(), skR@532, #ta@535));
    @conclusion know(*X(skA(), pk(skR@532)), #t2@533);
    @constraint #t2@533 - #ta@535 >= 0;
};
Rule in cache: 17
Rule staged: 76
Rule before check and clean: 
@rule{
    @premise new(*[Na@965], newA(), tuple3(skA(), skB(), #ta@966));
    @premise new(*[Nb@962], newB(), tuple4(skA(), skB(), #tb@967, x0@963));
    @premise know(*pk(skB()), #t2@968);
    @premise know(*skA(), #t1@969);
    @premise know(*x0@963, #t0@970);
    @conclusion know(*sign(tuple5([Nb@962], pk(skA()), x0@963, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@964);
    @constraint #t2@533 - #ta@966 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@962], newB(), tuple4(skA(), skB(), #tb@967, x0@963));
    @premise new(*[Na@965], newA(), tuple3(skA(), skB(), #ta@966));
    @premise know(*pk(skB()), #t2@968);
    @premise know(*skA(), #t1@969);
    @premise know(*x0@963, #t0@970);
    @conclusion know(*sign(tuple5([Nb@962], pk(skA()), x0@963, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@964);
};

Stage rule: 
@rule{
    @premise new(*[Nb@774], newB(), tuple4(skA(), skB(), #tb@780, x0@775));
    @premise new(*[Na@777], newA(), tuple3(skA(), skB(), #ta@778));
    @premise know(*X(skA(), pk(skB())), #t2@781);
    @premise know(*pk(skB()), #t1@782);
    @premise know(*skB(), #t1@779);
    @premise know(*skA(), #t2@784);
    @premise know(*x0@775, #t0@783);
    @conclusion know(*sign(tuple5([Nb@774], pk(skA()), x0@775, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@776);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@763], newB(), tuple4(sk@764, skB(), #tb@769, x0@765));
    @premise know(*X(sk@764, pk(skB())), #t2@770);
    @premise know(*pk(skB()), #t2@768);
    @premise know(*sk@764, #t1@767);
    @premise know(*x0@765, #t0@772);
    @conclusion know(*sign(tuple5([Nb@763], pk(sk@764), x0@765, X(skB(), pk(sk@764)), aenc(Y(skB(), pk(sk@764)), pk(sk@764))), skB()), #t@766);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@785], newB(), tuple4(skA(), skB(), #tb@790, x0@786));
    @premise new(*[Na@791], newA(), tuple3(skA(), skB(), #ta@792));
    @premise know(*pk(skB()), #t2@789);
    @premise know(*skA(), #t1@788);
    @premise know(*x0@786, #t0@795);
    @conclusion know(*sign(tuple5([Nb@785], pk(skA()), x0@786, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@787);
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 16
Rule staged: 77
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@974);
    @premise new(*[Nb@971], newB(), tuple4(skA(), skB(), #tb@975, x0@972));
    @premise new(*[Na@976], newA(), tuple3(skA(), skB(), #ta@977));
    @premise know(*skA(), #t1@978);
    @premise know(*x0@972, #t0@979);
    @conclusion know(*sign(tuple5([Nb@971], pk(skA()), x0@972, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@973);
    @constraint -#t1@974 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@971], newB(), tuple4(skA(), skB(), #tb@975, x0@972));
    @premise new(*[Na@976], newA(), tuple3(skA(), skB(), #ta@977));
    @premise know(*skB(), #t1@974);
    @premise know(*skA(), #t1@978);
    @premise know(*x0@972, #t0@979);
    @conclusion know(*sign(tuple5([Nb@971], pk(skA()), x0@972, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@973);
};

Compose by at 2 : 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};
Rule in cache: 17
Rule staged: 77
Rule before check and clean: 
@rule{
    @premise new(*[Nb@980], newB(), tuple4(skA(), skB(), #tb@983, x0@981));
    @premise new(*[Na@984], newA(), tuple3(skA(), skB(), #ta@985));
    @premise know(*skA(), #t1@986);
    @premise know(*x0@981, #t0@987);
    @conclusion know(*sign(tuple5([Nb@980], pk(skA()), x0@981, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@982);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@980], newB(), tuple4(skA(), skB(), #tb@983, x0@981));
    @premise new(*[Na@984], newA(), tuple3(skA(), skB(), #ta@985));
    @premise know(*skA(), #t1@986);
    @premise know(*x0@981, #t0@987);
    @conclusion know(*sign(tuple5([Nb@980], pk(skA()), x0@981, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@982);
};

Compose by at 2 : 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@528, #ta@531));
    @conclusion know(*pk(skR@528), #t1@529);
    @constraint #t1@529 - #ta@531 >= 0;
};
Rule in cache: 18
Rule staged: 77
Rule before check and clean: 
@rule{
    @premise new(*[Na@991], newA(), tuple3(skA(), skB(), #ta@992));
    @premise new(*[Nb@988], newB(), tuple4(skA(), skB(), #tb@993, x0@989));
    @premise new(*[Na@994], newA(), tuple3(skA(), skB(), #ta@995));
    @premise know(*skA(), #t1@996);
    @premise know(*x0@989, #t0@997);
    @conclusion know(*sign(tuple5([Nb@988], pk(skA()), x0@989, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@990);
    @constraint #t1@529 - #ta@992 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@988], newB(), tuple4(skA(), skB(), #tb@993, x0@989));
    @premise new(*[Na@991], newA(), tuple3(skA(), skB(), #ta@992));
    @premise new(*[Na@994], newA(), tuple3(skA(), skB(), #ta@995));
    @premise know(*skA(), #t1@996);
    @premise know(*x0@989, #t0@997);
    @conclusion know(*sign(tuple5([Nb@988], pk(skA()), x0@989, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@990);
};

Stage rule: 
@rule{
    @premise new(*[Nb@796], newB(), tuple4(skA(), skB(), #tb@801, x0@797));
    @premise new(*[Na@799], newA(), tuple3(skA(), skB(), #ta@800));
    @premise new(*[Na@802], newA(), tuple3(skA(), skB(), #ta@803));
    @premise know(*pk(skB()), #t1@804);
    @premise know(*skA(), #t2@805);
    @premise know(*x0@797, #t0@806);
    @conclusion know(*sign(tuple5([Nb@796], pk(skA()), x0@797, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@798);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@785], newB(), tuple4(skA(), skB(), #tb@790, x0@786));
    @premise new(*[Na@791], newA(), tuple3(skA(), skB(), #ta@792));
    @premise know(*pk(skB()), #t2@789);
    @premise know(*skA(), #t1@788);
    @premise know(*x0@786, #t0@795);
    @conclusion know(*sign(tuple5([Nb@785], pk(skA()), x0@786, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@787);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@808], newA(), tuple3(skA(), skB(), #ta@809));
    @premise new(*[Nb@810], newB(), tuple4(skA(), skB(), #tb@811, [Na@808]));
    @premise know(*skA(), #t1@812);
    @conclusion know(*Y(skB(), pk(skA())), #t@807);
    @constraint -#t1@812 + #t@807 >= 0;
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Nb@817], newB(), tuple4(skA(), skB(), #tb@818, [Na@815]));
    @premise new(*[Na@815], newA(), tuple3(skA(), skB(), #ta@816));
    @premise new(*[Na@819], newA(), tuple3(skA(), skB(), #ta@820));
    @premise know(*X(skB(), pk(skA())), #t3@821);
    @premise init(*skA(), *skB(), *#ta@820, *x0@813, *[Na@819]);
    @premise know(*pk(skA()), #t1@822);
    @premise know(*skB(), #t2@824);
    @premise know(*[Na@819], #t2@823);
    @premise know(*x0@813, #t0@825);
    @conclusion know(*sign(tuple2(pk(skB()), x0@813), skA()), #t@814);
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule in cache: 16
Rule staged: 79
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@1000);
    @premise know(*pk(skA()), #t2@1001);
    @premise new(*[Nb@1002], newB(), tuple4(skA(), skB(), #tb@1003, [Na@1004]));
    @premise new(*[Na@1004], newA(), tuple3(skA(), skB(), #ta@1005));
    @premise new(*[Na@1006], newA(), tuple3(skA(), skB(), #ta@1007));
    @premise init(*skA(), *skB(), *#ta@1007, *x0@998, *[Na@1006]);
    @premise know(*pk(skA()), #t1@1008);
    @premise know(*skB(), #t2@1009);
    @premise know(*[Na@1006], #t2@1010);
    @premise know(*x0@998, #t0@1011);
    @conclusion know(*sign(tuple2(pk(skB()), x0@998), skA()), #t@999);
    @constraint #t@232 - #t2@1001 >= 0;
    @constraint -#t1@1000 + #t@232 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1002], newB(), tuple4(skA(), skB(), #tb@1003, [Na@1004]));
    @premise new(*[Na@1006], newA(), tuple3(skA(), skB(), #ta@1007));
    @premise new(*[Na@1004], newA(), tuple3(skA(), skB(), #ta@1005));
    @premise init(*skA(), *skB(), *#ta@1007, *x0@998, *[Na@1006]);
    @premise know(*pk(skA()), #t2@1001);
    @premise know(*skB(), #t1@1000);
    @premise know(*[Na@1006], #t2@1010);
    @premise know(*x0@998, #t0@1011);
    @conclusion know(*sign(tuple2(pk(skB()), x0@998), skA()), #t@999);
};

Compose by at 3 : 
@rule{
    @premise new(*[Na@636], newA(), tuple3(skA(), skB(), #ta@637));
    @premise new(*[Nb@638], newB(), tuple4(skA(), skB(), #tb@639, [Na@636]));
    @conclusion know(*X(skB(), pk(skA())), #t3@635);
};
Rule in cache: 17
Rule staged: 79
Rule before check and clean: 
@rule{
    @premise new(*[Na@1014], newA(), tuple3(skA(), skB(), #ta@1015));
    @premise new(*[Nb@1016], newB(), tuple4(skA(), skB(), #tb@1017, [Na@1014]));
    @premise new(*[Nb@1018], newB(), tuple4(skA(), skB(), #tb@1019, [Na@1020]));
    @premise new(*[Na@1020], newA(), tuple3(skA(), skB(), #ta@1021));
    @premise new(*[Na@1022], newA(), tuple3(skA(), skB(), #ta@1023));
    @premise init(*skA(), *skB(), *#ta@1023, *x0@1012, *[Na@1022]);
    @premise know(*pk(skA()), #t1@1024);
    @premise know(*skB(), #t2@1025);
    @premise know(*[Na@1022], #t2@1026);
    @premise know(*x0@1012, #t0@1027);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1012), skA()), #t@1013);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1016], newB(), tuple4(skA(), skB(), #tb@1017, [Na@1014]));
    @premise new(*[Nb@1018], newB(), tuple4(skA(), skB(), #tb@1019, [Na@1020]));
    @premise new(*[Na@1014], newA(), tuple3(skA(), skB(), #ta@1015));
    @premise new(*[Na@1020], newA(), tuple3(skA(), skB(), #ta@1021));
    @premise new(*[Na@1022], newA(), tuple3(skA(), skB(), #ta@1023));
    @premise init(*skA(), *skB(), *#ta@1023, *x0@1012, *[Na@1022]);
    @premise know(*pk(skA()), #t1@1024);
    @premise know(*skB(), #t2@1025);
    @premise know(*[Na@1022], #t2@1026);
    @premise know(*x0@1012, #t0@1027);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1012), skA()), #t@1013);
};

Stage rule: 
@rule{
    @premise new(*[Na@827], newA(), tuple3(skA(), skB(), #ta@828));
    @premise new(*[Nb@829], newB(), tuple4(skA(), skB(), #tb@830, [Na@827]));
    @premise init(*skA(), *skB(), *#ta@828, *[Nb@829], *[Na@827]);
    @conclusion know(*pk(skB()), #t0@826);
};
Rule implied by: 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@833], newA(), tuple3(skA(), skB(), #ta@834));
    @premise new(*[Nb@831], newB(), tuple4(skA(), skB(), #tb@835, [Na@833]));
    @premise init(*skA(), *skB(), *#ta@834, *[Nb@831], *[Na@833]);
    @conclusion know(*[Nb@831], #t1@832);
};
Rule implied by: 
@rule{
    @premise new(*[Na@622], newA(), tuple3(skA(), skB(), #ta@623));
    @premise new(*[Nb@620], newB(), tuple4(skA(), skB(), #tb@624, [Na@622]));
    @conclusion know(*[Nb@620], #t0@621);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@841], newA(), tuple3(skA(), sk@836, #ta@842));
    @premise know(*X(sk@836, pk(skA())), #t3@843);
    @premise know(*pk(skA()), #t2@840);
    @premise init(*skA(), *sk@836, *#ta@842, *x0@837, *[Na@841]);
    @premise know(*skA(), #t1@845);
    @premise know(*[Na@841], #t2@846);
    @premise know(*sk@836, #t1@839);
    @premise know(*x0@837, #t0@848);
    @conclusion know(*sign(tuple2(pk(sk@836), x0@837), skA()), #t@838);
};
Rule deleted: 
@rule{
    @premise new(*[Na@681], newA(), tuple3(skA(), skA(), #ta@682));
    @premise new(*[Na@683], newA(), tuple3(skA(), skA(), #ta@684));
    @premise know(*X(skA(), pk(skA())), #t3@685);
    @premise init(*skA(), *skA(), *#ta@684, *x0@679, *[Na@683]);
    @premise know(*pk(skA()), #t1@686);
    @premise know(*skA(), #t2@688);
    @premise know(*[Na@683], #t2@687);
    @premise know(*x0@679, #t0@689);
    @conclusion know(*sign(tuple2(pk(skA()), x0@679), skA()), #t@680);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule in cache: 15
Rule staged: 80
Rule before check and clean: 
@rule{
    @premise know(*sk@1028, #t1@1031);
    @premise know(*pk(skA()), #t2@1032);
    @premise new(*[Na@1033], newA(), tuple3(skA(), sk@1028, #ta@1034));
    @premise know(*pk(skA()), #t2@1035);
    @premise init(*skA(), *sk@1028, *#ta@1034, *x0@1029, *[Na@1033]);
    @premise know(*skA(), #t1@1036);
    @premise know(*[Na@1033], #t2@1037);
    @premise know(*sk@1028, #t1@1038);
    @premise know(*x0@1029, #t0@1039);
    @conclusion know(*sign(tuple2(pk(sk@1028), x0@1029), skA()), #t@1030);
    @constraint #t@232 - #t2@1032 >= 0;
    @constraint -#t1@1031 + #t@232 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1033], newA(), tuple3(skA(), sk@1028, #ta@1034));
    @premise know(*pk(skA()), #t2@1032);
    @premise init(*skA(), *sk@1028, *#ta@1034, *x0@1029, *[Na@1033]);
    @premise know(*skA(), #t1@1036);
    @premise know(*[Na@1033], #t2@1037);
    @premise know(*sk@1028, #t1@1031);
    @premise know(*x0@1029, #t0@1039);
    @conclusion know(*sign(tuple2(pk(sk@1028), x0@1029), skA()), #t@1030);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@534], newA(), tuple3(skA(), skR@532, #ta@535));
    @conclusion know(*X(skA(), pk(skR@532)), #t2@533);
    @constraint #t2@533 - #ta@535 >= 0;
};
Rule in cache: 16
Rule staged: 80
Rule before check and clean: 
@rule{
    @premise new(*[Na@1042], newA(), tuple3(skA(), skA(), #ta@1043));
    @premise new(*[Na@1044], newA(), tuple3(skA(), skA(), #ta@1045));
    @premise know(*pk(skA()), #t2@1046);
    @premise init(*skA(), *skA(), *#ta@1045, *x0@1040, *[Na@1044]);
    @premise know(*skA(), #t1@1047);
    @premise know(*[Na@1044], #t2@1048);
    @premise know(*skA(), #t1@1049);
    @premise know(*x0@1040, #t0@1050);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1040), skA()), #t@1041);
    @constraint #t2@533 - #ta@1043 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1042], newA(), tuple3(skA(), skA(), #ta@1043));
    @premise new(*[Na@1044], newA(), tuple3(skA(), skA(), #ta@1045));
    @premise init(*skA(), *skA(), *#ta@1045, *x0@1040, *[Na@1044]);
    @premise know(*pk(skA()), #t2@1046);
    @premise know(*skA(), #t1@1047);
    @premise know(*[Na@1044], #t2@1048);
    @premise know(*x0@1040, #t0@1050);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1040), skA()), #t@1041);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@636], newA(), tuple3(skA(), skB(), #ta@637));
    @premise new(*[Nb@638], newB(), tuple4(skA(), skB(), #tb@639, [Na@636]));
    @conclusion know(*X(skB(), pk(skA())), #t3@635);
};
Rule in cache: 17
Rule staged: 80
Rule before check and clean: 
@rule{
    @premise new(*[Na@1053], newA(), tuple3(skA(), skB(), #ta@1054));
    @premise new(*[Nb@1055], newB(), tuple4(skA(), skB(), #tb@1056, [Na@1053]));
    @premise new(*[Na@1057], newA(), tuple3(skA(), skB(), #ta@1058));
    @premise know(*pk(skA()), #t2@1059);
    @premise init(*skA(), *skB(), *#ta@1058, *x0@1051, *[Na@1057]);
    @premise know(*skA(), #t1@1060);
    @premise know(*[Na@1057], #t2@1061);
    @premise know(*skB(), #t1@1062);
    @premise know(*x0@1051, #t0@1063);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1051), skA()), #t@1052);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1055], newB(), tuple4(skA(), skB(), #tb@1056, [Na@1053]));
    @premise new(*[Na@1053], newA(), tuple3(skA(), skB(), #ta@1054));
    @premise new(*[Na@1057], newA(), tuple3(skA(), skB(), #ta@1058));
    @premise init(*skA(), *skB(), *#ta@1058, *x0@1051, *[Na@1057]);
    @premise know(*pk(skA()), #t2@1059);
    @premise know(*skA(), #t1@1060);
    @premise know(*skB(), #t1@1062);
    @premise know(*[Na@1057], #t2@1061);
    @premise know(*x0@1051, #t0@1063);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1051), skA()), #t@1052);
};

Stage rule: 
@rule{
    @premise new(*[Na@851], newA(), tuple3(skA(), skA(), #ta@852));
    @premise new(*[Na@854], newA(), tuple3(skA(), skA(), #ta@855));
    @premise know(*X(skA(), pk(skA())), #t3@856);
    @premise init(*skA(), *skA(), *#ta@855, *x0@849, *[Na@854]);
    @premise know(*pk(skA()), #t1@857);
    @premise know(*skA(), #t1@853);
    @premise know(*[Na@854], #t2@859);
    @premise know(*x0@849, #t0@861);
    @conclusion know(*sign(tuple2(pk(skA()), x0@849), skA()), #t@850);
};
Rule implied by: 
@rule{
    @premise new(*[Na@841], newA(), tuple3(skA(), sk@836, #ta@842));
    @premise know(*X(sk@836, pk(skA())), #t3@843);
    @premise know(*pk(skA()), #t2@840);
    @premise init(*skA(), *sk@836, *#ta@842, *x0@837, *[Na@841]);
    @premise know(*skA(), #t1@845);
    @premise know(*[Na@841], #t2@846);
    @premise know(*sk@836, #t1@839);
    @premise know(*x0@837, #t0@848);
    @conclusion know(*sign(tuple2(pk(sk@836), x0@837), skA()), #t@838);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@867], newA(), tuple3(skA(), sk@862, #ta@868));
    @premise know(*X(sk@862, pk(skA())), #t3@869);
    @premise know(*pk(skA()), #t2@866);
    @premise init(*skA(), *sk@862, *#ta@868, *x0@863, *[Na@867]);
    @premise know(*[Na@867], #t2@871);
    @premise know(*sk@862, #t1@865);
    @premise know(*x0@863, #t0@873);
    @conclusion know(*sign(tuple2(pk(sk@862), x0@863), skA()), #t@864);
};
Rule deleted: 
@rule{
    @premise know(*aenc(Y(sk@561, pk(skA())), pk(skA())), #t4@569);
    @premise new(*[Na@566], newA(), tuple3(skA(), sk@561, #ta@571));
    @premise know(*X(sk@561, pk(skA())), #t3@568);
    @premise know(*pk(skA()), #t1@565);
    @premise init(*skA(), *sk@561, *#ta@571, *x0@562, *[Na@566]);
    @premise know(*[Na@566], #t2@567);
    @premise know(*sk@561, #t2@570);
    @premise know(*x0@562, #t0@564);
    @conclusion know(*sign(tuple2(pk(sk@561), x0@562), skA()), #t@563);
};
Rule deleted: 
@rule{
    @premise new(*[Na@672], newA(), tuple3(skA(), sk@668, #ta@673));
    @premise know(*Y(sk@668, pk(skA())), #t1@671);
    @premise know(*X(sk@668, pk(skA())), #t3@674);
    @premise know(*pk(skA()), #t1@675);
    @premise init(*skA(), *sk@668, *#ta@673, *x0@669, *[Na@672]);
    @premise know(*[Na@672], #t2@676);
    @premise know(*sk@668, #t2@677);
    @premise know(*x0@669, #t0@678);
    @conclusion know(*sign(tuple2(pk(sk@668), x0@669), skA()), #t@670);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@817], newB(), tuple4(skA(), skB(), #tb@818, [Na@815]));
    @premise new(*[Na@815], newA(), tuple3(skA(), skB(), #ta@816));
    @premise new(*[Na@819], newA(), tuple3(skA(), skB(), #ta@820));
    @premise know(*X(skB(), pk(skA())), #t3@821);
    @premise init(*skA(), *skB(), *#ta@820, *x0@813, *[Na@819]);
    @premise know(*pk(skA()), #t1@822);
    @premise know(*skB(), #t2@824);
    @premise know(*[Na@819], #t2@823);
    @premise know(*x0@813, #t0@825);
    @conclusion know(*sign(tuple2(pk(skB()), x0@813), skA()), #t@814);
};
Rule deleted: 
@rule{
    @premise new(*[Na@841], newA(), tuple3(skA(), sk@836, #ta@842));
    @premise know(*X(sk@836, pk(skA())), #t3@843);
    @premise know(*pk(skA()), #t2@840);
    @premise init(*skA(), *sk@836, *#ta@842, *x0@837, *[Na@841]);
    @premise know(*skA(), #t1@845);
    @premise know(*[Na@841], #t2@846);
    @premise know(*sk@836, #t1@839);
    @premise know(*x0@837, #t0@848);
    @conclusion know(*sign(tuple2(pk(sk@836), x0@837), skA()), #t@838);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};
Rule in cache: 16
Rule staged: 81
Rule before check and clean: 
@rule{
    @premise know(*sk@1064, #t1@1067);
    @premise know(*pk(skA()), #t2@1068);
    @premise new(*[Na@1069], newA(), tuple3(skA(), sk@1064, #ta@1070));
    @premise know(*pk(skA()), #t2@1071);
    @premise init(*skA(), *sk@1064, *#ta@1070, *x0@1065, *[Na@1069]);
    @premise know(*[Na@1069], #t2@1072);
    @premise know(*sk@1064, #t1@1073);
    @premise know(*x0@1065, #t0@1074);
    @conclusion know(*sign(tuple2(pk(sk@1064), x0@1065), skA()), #t@1066);
    @constraint #t@232 - #t2@1068 >= 0;
    @constraint -#t1@1067 + #t@232 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1069], newA(), tuple3(skA(), sk@1064, #ta@1070));
    @premise know(*pk(skA()), #t2@1068);
    @premise init(*skA(), *sk@1064, *#ta@1070, *x0@1065, *[Na@1069]);
    @premise know(*[Na@1069], #t2@1072);
    @premise know(*sk@1064, #t1@1067);
    @premise know(*x0@1065, #t0@1074);
    @conclusion know(*sign(tuple2(pk(sk@1064), x0@1065), skA()), #t@1066);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@534], newA(), tuple3(skA(), skR@532, #ta@535));
    @conclusion know(*X(skA(), pk(skR@532)), #t2@533);
    @constraint #t2@533 - #ta@535 >= 0;
};
Rule in cache: 17
Rule staged: 81
Rule before check and clean: 
@rule{
    @premise new(*[Na@1077], newA(), tuple3(skA(), skA(), #ta@1078));
    @premise new(*[Na@1079], newA(), tuple3(skA(), skA(), #ta@1080));
    @premise know(*pk(skA()), #t2@1081);
    @premise init(*skA(), *skA(), *#ta@1080, *x0@1075, *[Na@1079]);
    @premise know(*[Na@1079], #t2@1082);
    @premise know(*skA(), #t1@1083);
    @premise know(*x0@1075, #t0@1084);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1075), skA()), #t@1076);
    @constraint #t2@533 - #ta@1078 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1077], newA(), tuple3(skA(), skA(), #ta@1078));
    @premise new(*[Na@1079], newA(), tuple3(skA(), skA(), #ta@1080));
    @premise init(*skA(), *skA(), *#ta@1080, *x0@1075, *[Na@1079]);
    @premise know(*pk(skA()), #t2@1081);
    @premise know(*skA(), #t1@1083);
    @premise know(*[Na@1079], #t2@1082);
    @premise know(*x0@1075, #t0@1084);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1075), skA()), #t@1076);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@636], newA(), tuple3(skA(), skB(), #ta@637));
    @premise new(*[Nb@638], newB(), tuple4(skA(), skB(), #tb@639, [Na@636]));
    @conclusion know(*X(skB(), pk(skA())), #t3@635);
};
Rule in cache: 18
Rule staged: 81
Rule before check and clean: 
@rule{
    @premise new(*[Na@1087], newA(), tuple3(skA(), skB(), #ta@1088));
    @premise new(*[Nb@1089], newB(), tuple4(skA(), skB(), #tb@1090, [Na@1087]));
    @premise new(*[Na@1091], newA(), tuple3(skA(), skB(), #ta@1092));
    @premise know(*pk(skA()), #t2@1093);
    @premise init(*skA(), *skB(), *#ta@1092, *x0@1085, *[Na@1091]);
    @premise know(*[Na@1091], #t2@1094);
    @premise know(*skB(), #t1@1095);
    @premise know(*x0@1085, #t0@1096);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1085), skA()), #t@1086);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1089], newB(), tuple4(skA(), skB(), #tb@1090, [Na@1087]));
    @premise new(*[Na@1087], newA(), tuple3(skA(), skB(), #ta@1088));
    @premise new(*[Na@1091], newA(), tuple3(skA(), skB(), #ta@1092));
    @premise init(*skA(), *skB(), *#ta@1092, *x0@1085, *[Na@1091]);
    @premise know(*pk(skA()), #t2@1093);
    @premise know(*skB(), #t1@1095);
    @premise know(*[Na@1091], #t2@1094);
    @premise know(*x0@1085, #t0@1096);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1085), skA()), #t@1086);
};

Stage rule: 
@rule{
    @premise new(*[Na@876], newA(), tuple3(skA(), skA(), #ta@877));
    @premise new(*[Na@879], newA(), tuple3(skA(), skA(), #ta@880));
    @premise know(*X(skA(), pk(skA())), #t3@881);
    @premise init(*skA(), *skA(), *#ta@880, *x0@874, *[Na@879]);
    @premise know(*pk(skA()), #t1@882);
    @premise know(*skA(), #t1@878);
    @premise know(*[Na@879], #t2@883);
    @premise know(*x0@874, #t0@885);
    @conclusion know(*sign(tuple2(pk(skA()), x0@874), skA()), #t@875);
};
Rule implied by: 
@rule{
    @premise new(*[Na@867], newA(), tuple3(skA(), sk@862, #ta@868));
    @premise know(*X(sk@862, pk(skA())), #t3@869);
    @premise know(*pk(skA()), #t2@866);
    @premise init(*skA(), *sk@862, *#ta@868, *x0@863, *[Na@867]);
    @premise know(*[Na@867], #t2@871);
    @premise know(*sk@862, #t1@865);
    @premise know(*x0@863, #t0@873);
    @conclusion know(*sign(tuple2(pk(sk@862), x0@863), skA()), #t@864);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@892], newA(), tuple3(skA(), skA(), #ta@893));
    @premise new(*[Na@890], newA(), tuple3(skA(), skA(), #ta@891));
    @premise init(*skA(), *skA(), *#ta@893, *x0@886, *[Na@892]);
    @premise know(*pk(skA()), #t2@889);
    @premise know(*skA(), #t1@888);
    @premise know(*[Na@892], #t2@896);
    @premise know(*x0@886, #t0@897);
    @conclusion know(*sign(tuple2(pk(skA()), x0@886), skA()), #t@887);
};
Rule added at 3.

Compose by at 3 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 17
Rule staged: 82
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1099);
    @premise new(*[Na@1100], newA(), tuple3(skA(), skA(), #ta@1101));
    @premise new(*[Na@1102], newA(), tuple3(skA(), skA(), #ta@1103));
    @premise init(*skA(), *skA(), *#ta@1101, *x0@1097, *[Na@1100]);
    @premise know(*skA(), #t1@1104);
    @premise know(*[Na@1100], #t2@1105);
    @premise know(*x0@1097, #t0@1106);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1097), skA()), #t@1098);
    @constraint -#t1@1099 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1100], newA(), tuple3(skA(), skA(), #ta@1101));
    @premise new(*[Na@1102], newA(), tuple3(skA(), skA(), #ta@1103));
    @premise init(*skA(), *skA(), *#ta@1101, *x0@1097, *[Na@1100]);
    @premise know(*skA(), #t1@1099);
    @premise know(*[Na@1100], #t2@1105);
    @premise know(*x0@1097, #t0@1106);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1097), skA()), #t@1098);
};

Compose by at 3 : 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};
Rule in cache: 18
Rule staged: 82
Rule before check and clean: 
@rule{
    @premise new(*[Na@1109], newA(), tuple3(skA(), skA(), #ta@1110));
    @premise new(*[Na@1111], newA(), tuple3(skA(), skA(), #ta@1112));
    @premise init(*skA(), *skA(), *#ta@1110, *x0@1107, *[Na@1109]);
    @premise know(*skA(), #t1@1113);
    @premise know(*[Na@1109], #t2@1114);
    @premise know(*x0@1107, #t0@1115);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1107), skA()), #t@1108);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1109], newA(), tuple3(skA(), skA(), #ta@1110));
    @premise new(*[Na@1111], newA(), tuple3(skA(), skA(), #ta@1112));
    @premise init(*skA(), *skA(), *#ta@1110, *x0@1107, *[Na@1109]);
    @premise know(*skA(), #t1@1113);
    @premise know(*[Na@1109], #t2@1114);
    @premise know(*x0@1107, #t0@1115);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1107), skA()), #t@1108);
};

Compose by at 3 : 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@528, #ta@531));
    @conclusion know(*pk(skR@528), #t1@529);
    @constraint #t1@529 - #ta@531 >= 0;
};
Rule in cache: 19
Rule staged: 82
Rule before check and clean: 
@rule{
    @premise new(*[Na@1118], newA(), tuple3(skA(), skA(), #ta@1119));
    @premise new(*[Na@1120], newA(), tuple3(skA(), skA(), #ta@1121));
    @premise new(*[Na@1122], newA(), tuple3(skA(), skA(), #ta@1123));
    @premise init(*skA(), *skA(), *#ta@1121, *x0@1116, *[Na@1120]);
    @premise know(*skA(), #t1@1124);
    @premise know(*[Na@1120], #t2@1125);
    @premise know(*x0@1116, #t0@1126);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1116), skA()), #t@1117);
    @constraint #t1@529 - #ta@1119 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1118], newA(), tuple3(skA(), skA(), #ta@1119));
    @premise new(*[Na@1120], newA(), tuple3(skA(), skA(), #ta@1121));
    @premise new(*[Na@1122], newA(), tuple3(skA(), skA(), #ta@1123));
    @premise init(*skA(), *skA(), *#ta@1121, *x0@1116, *[Na@1120]);
    @premise know(*skA(), #t1@1124);
    @premise know(*[Na@1120], #t2@1125);
    @premise know(*x0@1116, #t0@1126);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1116), skA()), #t@1117);
};

Stage rule: 
@rule{
    @premise new(*[Na@900], newA(), tuple3(skA(), skA(), #ta@901));
    @premise new(*[Na@902], newA(), tuple3(skA(), skA(), #ta@903));
    @premise new(*[Na@904], newA(), tuple3(skA(), skA(), #ta@905));
    @premise init(*skA(), *skA(), *#ta@905, *x0@898, *[Na@904]);
    @premise know(*pk(skA()), #t1@906);
    @premise know(*skA(), #t2@907);
    @premise know(*[Na@904], #t2@908);
    @premise know(*x0@898, #t0@909);
    @conclusion know(*sign(tuple2(pk(skA()), x0@898), skA()), #t@899);
};
Rule implied by: 
@rule{
    @premise new(*[Na@892], newA(), tuple3(skA(), skA(), #ta@893));
    @premise new(*[Na@890], newA(), tuple3(skA(), skA(), #ta@891));
    @premise init(*skA(), *skA(), *#ta@893, *x0@886, *[Na@892]);
    @premise know(*pk(skA()), #t2@889);
    @premise know(*skA(), #t1@888);
    @premise know(*[Na@892], #t2@896);
    @premise know(*x0@886, #t0@897);
    @conclusion know(*sign(tuple2(pk(skA()), x0@886), skA()), #t@887);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@919], newA(), tuple3(skA(), skB(), #ta@920));
    @premise new(*[Nb@917], newB(), tuple4(skA(), skB(), #tb@921, [Na@919]));
    @premise know(*skA(), #t2@922);
    @conclusion accept(skA(), skB(), #tb@921, [Nb@917], [Na@919]);
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Nb@930], newB(), tuple4(sk@931, skB(), #tb@936, x0@932));
    @premise know(*pk(skB()), #t2@935);
    @premise know(*skB(), #t1@938);
    @premise know(*sk@931, #t1@934);
    @premise know(*x0@932, #t0@940);
    @conclusion know(*sign(tuple5([Nb@930], pk(sk@931), x0@932, X(skB(), pk(sk@931)), aenc(Y(skB(), pk(sk@931)), pk(sk@931))), skB()), #t@933);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@740], newB(), tuple4(sk@741, skB(), #tb@746, x0@742));
    @premise know(*Y(sk@741, pk(skB())), #t1@747);
    @premise know(*pk(skB()), #t2@745);
    @premise know(*skB(), #t1@749);
    @premise know(*sk@741, #t1@744);
    @premise know(*x0@742, #t0@750);
    @conclusion know(*sign(tuple5([Nb@740], pk(sk@741), x0@742, X(skB(), pk(sk@741)), aenc(Y(skB(), pk(sk@741)), pk(sk@741))), skB()), #t@743);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 17
Rule staged: 84
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@1131);
    @premise new(*[Nb@1127], newB(), tuple4(sk@1128, skB(), #tb@1132, x0@1129));
    @premise know(*skB(), #t1@1133);
    @premise know(*sk@1128, #t1@1134);
    @premise know(*x0@1129, #t0@1135);
    @conclusion know(*sign(tuple5([Nb@1127], pk(sk@1128), x0@1129, X(skB(), pk(sk@1128)), aenc(Y(skB(), pk(sk@1128)), pk(sk@1128))), skB()), #t@1130);
    @constraint -#t1@1131 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*skB(), #t1@1131);
    @premise new(*[Nb@1127], newB(), tuple4(sk@1128, skB(), #tb@1132, x0@1129));
    @premise know(*sk@1128, #t1@1134);
    @premise know(*x0@1129, #t0@1135);
    @conclusion know(*sign(tuple5([Nb@1127], pk(sk@1128), x0@1129, X(skB(), pk(sk@1128)), aenc(Y(skB(), pk(sk@1128)), pk(sk@1128))), skB()), #t@1130);
};

Compose by at 1 : 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};
Rule in cache: 18
Rule staged: 84
Rule before check and clean: 
@rule{
    @premise new(*[Nb@1136], newB(), tuple4(sk@1137, skB(), #tb@1140, x0@1138));
    @premise know(*skB(), #t1@1141);
    @premise know(*sk@1137, #t1@1142);
    @premise know(*x0@1138, #t0@1143);
    @conclusion know(*sign(tuple5([Nb@1136], pk(sk@1137), x0@1138, X(skB(), pk(sk@1137)), aenc(Y(skB(), pk(sk@1137)), pk(sk@1137))), skB()), #t@1139);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1136], newB(), tuple4(sk@1137, skB(), #tb@1140, x0@1138));
    @premise know(*skB(), #t1@1141);
    @premise know(*sk@1137, #t1@1142);
    @premise know(*x0@1138, #t0@1143);
    @conclusion know(*sign(tuple5([Nb@1136], pk(sk@1137), x0@1138, X(skB(), pk(sk@1137)), aenc(Y(skB(), pk(sk@1137)), pk(sk@1137))), skB()), #t@1139);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@528, #ta@531));
    @conclusion know(*pk(skR@528), #t1@529);
    @constraint #t1@529 - #ta@531 >= 0;
};
Rule in cache: 19
Rule staged: 84
Rule before check and clean: 
@rule{
    @premise new(*[Na@1148], newA(), tuple3(skA(), skB(), #ta@1149));
    @premise new(*[Nb@1144], newB(), tuple4(sk@1145, skB(), #tb@1150, x0@1146));
    @premise know(*skB(), #t1@1151);
    @premise know(*sk@1145, #t1@1152);
    @premise know(*x0@1146, #t0@1153);
    @conclusion know(*sign(tuple5([Nb@1144], pk(sk@1145), x0@1146, X(skB(), pk(sk@1145)), aenc(Y(skB(), pk(sk@1145)), pk(sk@1145))), skB()), #t@1147);
    @constraint #t1@529 - #ta@1149 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1148], newA(), tuple3(skA(), skB(), #ta@1149));
    @premise new(*[Nb@1144], newB(), tuple4(sk@1145, skB(), #tb@1150, x0@1146));
    @premise know(*skB(), #t1@1151);
    @premise know(*sk@1145, #t1@1152);
    @premise know(*x0@1146, #t0@1153);
    @conclusion know(*sign(tuple5([Nb@1144], pk(sk@1145), x0@1146, X(skB(), pk(sk@1145)), aenc(Y(skB(), pk(sk@1145)), pk(sk@1145))), skB()), #t@1147);
};

Stage rule: 
@rule{
    @premise new(*[Nb@941], newB(), tuple4(skA(), skB(), #tb@947, x0@942));
    @premise new(*[Na@944], newA(), tuple3(skA(), skB(), #ta@945));
    @premise know(*pk(skB()), #t2@948);
    @premise know(*skB(), #t1@946);
    @premise know(*skA(), #t1@950);
    @premise know(*x0@942, #t0@951);
    @conclusion know(*sign(tuple5([Nb@941], pk(skA()), x0@942, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@943);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@785], newB(), tuple4(skA(), skB(), #tb@790, x0@786));
    @premise new(*[Na@791], newA(), tuple3(skA(), skB(), #ta@792));
    @premise know(*pk(skB()), #t2@789);
    @premise know(*skA(), #t1@788);
    @premise know(*x0@786, #t0@795);
    @conclusion know(*sign(tuple5([Nb@785], pk(skA()), x0@786, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@787);
};
Rule not added.

Stage rule: 
@rule{
    @premise know(*sk@953, #t1@956);
    @premise know(*pk(skB()), #t2@957);
    @premise new(*[Nb@952], newB(), tuple4(sk@953, skB(), #tb@958, x0@954));
    @premise know(*x0@954, #t0@961);
    @conclusion know(*sign(tuple5([Nb@952], pk(sk@953), x0@954, X(skB(), pk(sk@953)), aenc(Y(skB(), pk(sk@953)), pk(sk@953))), skB()), #t@955);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@763], newB(), tuple4(sk@764, skB(), #tb@769, x0@765));
    @premise know(*X(sk@764, pk(skB())), #t2@770);
    @premise know(*pk(skB()), #t2@768);
    @premise know(*sk@764, #t1@767);
    @premise know(*x0@765, #t0@772);
    @conclusion know(*sign(tuple5([Nb@763], pk(sk@764), x0@765, X(skB(), pk(sk@764)), aenc(Y(skB(), pk(sk@764)), pk(sk@764))), skB()), #t@766);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@785], newB(), tuple4(skA(), skB(), #tb@790, x0@786));
    @premise new(*[Na@791], newA(), tuple3(skA(), skB(), #ta@792));
    @premise know(*pk(skB()), #t2@789);
    @premise know(*skA(), #t1@788);
    @premise know(*x0@786, #t0@795);
    @conclusion know(*sign(tuple5([Nb@785], pk(skA()), x0@786, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@787);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@930], newB(), tuple4(sk@931, skB(), #tb@936, x0@932));
    @premise know(*pk(skB()), #t2@935);
    @premise know(*skB(), #t1@938);
    @premise know(*sk@931, #t1@934);
    @premise know(*x0@932, #t0@940);
    @conclusion know(*sign(tuple5([Nb@930], pk(sk@931), x0@932, X(skB(), pk(sk@931)), aenc(Y(skB(), pk(sk@931)), pk(sk@931))), skB()), #t@933);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 18
Rule staged: 85
Rule before check and clean: 
@rule{
    @premise know(*skB(), #t1@1158);
    @premise know(*sk@1155, #t1@1159);
    @premise new(*[Nb@1154], newB(), tuple4(sk@1155, skB(), #tb@1160, x0@1156));
    @premise know(*x0@1156, #t0@1161);
    @conclusion know(*sign(tuple5([Nb@1154], pk(sk@1155), x0@1156, X(skB(), pk(sk@1155)), aenc(Y(skB(), pk(sk@1155)), pk(sk@1155))), skB()), #t@1157);
    @constraint -#t1@1158 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*skB(), #t1@1158);
    @premise know(*sk@1155, #t1@1159);
    @premise new(*[Nb@1154], newB(), tuple4(sk@1155, skB(), #tb@1160, x0@1156));
    @premise know(*x0@1156, #t0@1161);
    @conclusion know(*sign(tuple5([Nb@1154], pk(sk@1155), x0@1156, X(skB(), pk(sk@1155)), aenc(Y(skB(), pk(sk@1155)), pk(sk@1155))), skB()), #t@1157);
};

Compose by at 1 : 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};
Rule in cache: 19
Rule staged: 85
Rule before check and clean: 
@rule{
    @premise know(*sk@1163, #t1@1166);
    @premise new(*[Nb@1162], newB(), tuple4(sk@1163, skB(), #tb@1167, x0@1164));
    @premise know(*x0@1164, #t0@1168);
    @conclusion know(*sign(tuple5([Nb@1162], pk(sk@1163), x0@1164, X(skB(), pk(sk@1163)), aenc(Y(skB(), pk(sk@1163)), pk(sk@1163))), skB()), #t@1165);
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1163, #t1@1166);
    @premise new(*[Nb@1162], newB(), tuple4(sk@1163, skB(), #tb@1167, x0@1164));
    @premise know(*x0@1164, #t0@1168);
    @conclusion know(*sign(tuple5([Nb@1162], pk(sk@1163), x0@1164, X(skB(), pk(sk@1163)), aenc(Y(skB(), pk(sk@1163)), pk(sk@1163))), skB()), #t@1165);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@528, #ta@531));
    @conclusion know(*pk(skR@528), #t1@529);
    @constraint #t1@529 - #ta@531 >= 0;
};
Rule in cache: 20
Rule staged: 85
Rule before check and clean: 
@rule{
    @premise new(*[Na@1173], newA(), tuple3(skA(), skB(), #ta@1174));
    @premise know(*sk@1170, #t1@1175);
    @premise new(*[Nb@1169], newB(), tuple4(sk@1170, skB(), #tb@1176, x0@1171));
    @premise know(*x0@1171, #t0@1177);
    @conclusion know(*sign(tuple5([Nb@1169], pk(sk@1170), x0@1171, X(skB(), pk(sk@1170)), aenc(Y(skB(), pk(sk@1170)), pk(sk@1170))), skB()), #t@1172);
    @constraint #t1@529 - #ta@1174 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1173], newA(), tuple3(skA(), skB(), #ta@1174));
    @premise know(*sk@1170, #t1@1175);
    @premise new(*[Nb@1169], newB(), tuple4(sk@1170, skB(), #tb@1176, x0@1171));
    @premise know(*x0@1171, #t0@1177);
    @conclusion know(*sign(tuple5([Nb@1169], pk(sk@1170), x0@1171, X(skB(), pk(sk@1170)), aenc(Y(skB(), pk(sk@1170)), pk(sk@1170))), skB()), #t@1172);
};

Stage rule: 
@rule{
    @premise new(*[Nb@962], newB(), tuple4(skA(), skB(), #tb@967, x0@963));
    @premise new(*[Na@965], newA(), tuple3(skA(), skB(), #ta@966));
    @premise know(*pk(skB()), #t2@968);
    @premise know(*skA(), #t1@969);
    @premise know(*x0@963, #t0@970);
    @conclusion know(*sign(tuple5([Nb@962], pk(skA()), x0@963, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@964);
};
Rule implied by: 
@rule{
    @premise know(*sk@953, #t1@956);
    @premise know(*pk(skB()), #t2@957);
    @premise new(*[Nb@952], newB(), tuple4(sk@953, skB(), #tb@958, x0@954));
    @premise know(*x0@954, #t0@961);
    @conclusion know(*sign(tuple5([Nb@952], pk(sk@953), x0@954, X(skB(), pk(sk@953)), aenc(Y(skB(), pk(sk@953)), pk(sk@953))), skB()), #t@955);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@971], newB(), tuple4(skA(), skB(), #tb@975, x0@972));
    @premise new(*[Na@976], newA(), tuple3(skA(), skB(), #ta@977));
    @premise know(*skB(), #t1@974);
    @premise know(*skA(), #t1@978);
    @premise know(*x0@972, #t0@979);
    @conclusion know(*sign(tuple5([Nb@971], pk(skA()), x0@972, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@973);
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Nb@980], newB(), tuple4(skA(), skB(), #tb@983, x0@981));
    @premise new(*[Na@984], newA(), tuple3(skA(), skB(), #ta@985));
    @premise know(*skA(), #t1@986);
    @premise know(*x0@981, #t0@987);
    @conclusion know(*sign(tuple5([Nb@980], pk(skA()), x0@981, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@982);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@971], newB(), tuple4(skA(), skB(), #tb@975, x0@972));
    @premise new(*[Na@976], newA(), tuple3(skA(), skB(), #ta@977));
    @premise know(*skB(), #t1@974);
    @premise know(*skA(), #t1@978);
    @premise know(*x0@972, #t0@979);
    @conclusion know(*sign(tuple5([Nb@971], pk(skA()), x0@972, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@973);
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Nb@988], newB(), tuple4(skA(), skB(), #tb@993, x0@989));
    @premise new(*[Na@991], newA(), tuple3(skA(), skB(), #ta@992));
    @premise new(*[Na@994], newA(), tuple3(skA(), skB(), #ta@995));
    @premise know(*skA(), #t1@996);
    @premise know(*x0@989, #t0@997);
    @conclusion know(*sign(tuple5([Nb@988], pk(skA()), x0@989, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@990);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@980], newB(), tuple4(skA(), skB(), #tb@983, x0@981));
    @premise new(*[Na@984], newA(), tuple3(skA(), skB(), #ta@985));
    @premise know(*skA(), #t1@986);
    @premise know(*x0@981, #t0@987);
    @conclusion know(*sign(tuple5([Nb@980], pk(skA()), x0@981, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@982);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@1002], newB(), tuple4(skA(), skB(), #tb@1003, [Na@1004]));
    @premise new(*[Na@1006], newA(), tuple3(skA(), skB(), #ta@1007));
    @premise new(*[Na@1004], newA(), tuple3(skA(), skB(), #ta@1005));
    @premise init(*skA(), *skB(), *#ta@1007, *x0@998, *[Na@1006]);
    @premise know(*pk(skA()), #t2@1001);
    @premise know(*skB(), #t1@1000);
    @premise know(*[Na@1006], #t2@1010);
    @premise know(*x0@998, #t0@1011);
    @conclusion know(*sign(tuple2(pk(skB()), x0@998), skA()), #t@999);
};
Rule added at 4.

Compose by at 4 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 16
Rule staged: 88
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1180);
    @premise new(*[Nb@1181], newB(), tuple4(skA(), skB(), #tb@1182, [Na@1183]));
    @premise new(*[Na@1184], newA(), tuple3(skA(), skB(), #ta@1185));
    @premise new(*[Na@1183], newA(), tuple3(skA(), skB(), #ta@1186));
    @premise init(*skA(), *skB(), *#ta@1185, *x0@1178, *[Na@1184]);
    @premise know(*skB(), #t1@1187);
    @premise know(*[Na@1184], #t2@1188);
    @premise know(*x0@1178, #t0@1189);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1178), skA()), #t@1179);
    @constraint -#t1@1180 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1181], newB(), tuple4(skA(), skB(), #tb@1182, [Na@1183]));
    @premise new(*[Na@1184], newA(), tuple3(skA(), skB(), #ta@1185));
    @premise new(*[Na@1183], newA(), tuple3(skA(), skB(), #ta@1186));
    @premise init(*skA(), *skB(), *#ta@1185, *x0@1178, *[Na@1184]);
    @premise know(*skA(), #t1@1180);
    @premise know(*skB(), #t1@1187);
    @premise know(*[Na@1184], #t2@1188);
    @premise know(*x0@1178, #t0@1189);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1178), skA()), #t@1179);
};

Compose by at 4 : 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};
Rule in cache: 17
Rule staged: 88
Rule before check and clean: 
@rule{
    @premise new(*[Nb@1192], newB(), tuple4(skA(), skB(), #tb@1193, [Na@1194]));
    @premise new(*[Na@1195], newA(), tuple3(skA(), skB(), #ta@1196));
    @premise new(*[Na@1194], newA(), tuple3(skA(), skB(), #ta@1197));
    @premise init(*skA(), *skB(), *#ta@1196, *x0@1190, *[Na@1195]);
    @premise know(*skB(), #t1@1198);
    @premise know(*[Na@1195], #t2@1199);
    @premise know(*x0@1190, #t0@1200);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1190), skA()), #t@1191);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1192], newB(), tuple4(skA(), skB(), #tb@1193, [Na@1194]));
    @premise new(*[Na@1195], newA(), tuple3(skA(), skB(), #ta@1196));
    @premise new(*[Na@1194], newA(), tuple3(skA(), skB(), #ta@1197));
    @premise init(*skA(), *skB(), *#ta@1196, *x0@1190, *[Na@1195]);
    @premise know(*skB(), #t1@1198);
    @premise know(*[Na@1195], #t2@1199);
    @premise know(*x0@1190, #t0@1200);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1190), skA()), #t@1191);
};

Compose by at 4 : 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@528, #ta@531));
    @conclusion know(*pk(skR@528), #t1@529);
    @constraint #t1@529 - #ta@531 >= 0;
};
Rule in cache: 18
Rule staged: 88
Rule before check and clean: 
@rule{
    @premise new(*[Na@1203], newA(), tuple3(skA(), skA(), #ta@1204));
    @premise new(*[Nb@1205], newB(), tuple4(skA(), skB(), #tb@1206, [Na@1207]));
    @premise new(*[Na@1208], newA(), tuple3(skA(), skB(), #ta@1209));
    @premise new(*[Na@1207], newA(), tuple3(skA(), skB(), #ta@1210));
    @premise init(*skA(), *skB(), *#ta@1209, *x0@1201, *[Na@1208]);
    @premise know(*skB(), #t1@1211);
    @premise know(*[Na@1208], #t2@1212);
    @premise know(*x0@1201, #t0@1213);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1201), skA()), #t@1202);
    @constraint #t1@529 - #ta@1204 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1205], newB(), tuple4(skA(), skB(), #tb@1206, [Na@1207]));
    @premise new(*[Na@1203], newA(), tuple3(skA(), skA(), #ta@1204));
    @premise new(*[Na@1208], newA(), tuple3(skA(), skB(), #ta@1209));
    @premise new(*[Na@1207], newA(), tuple3(skA(), skB(), #ta@1210));
    @premise init(*skA(), *skB(), *#ta@1209, *x0@1201, *[Na@1208]);
    @premise know(*skB(), #t1@1211);
    @premise know(*[Na@1208], #t2@1212);
    @premise know(*x0@1201, #t0@1213);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1201), skA()), #t@1202);
};

Stage rule: 
@rule{
    @premise new(*[Nb@1016], newB(), tuple4(skA(), skB(), #tb@1017, [Na@1014]));
    @premise new(*[Nb@1018], newB(), tuple4(skA(), skB(), #tb@1019, [Na@1020]));
    @premise new(*[Na@1014], newA(), tuple3(skA(), skB(), #ta@1015));
    @premise new(*[Na@1020], newA(), tuple3(skA(), skB(), #ta@1021));
    @premise new(*[Na@1022], newA(), tuple3(skA(), skB(), #ta@1023));
    @premise init(*skA(), *skB(), *#ta@1023, *x0@1012, *[Na@1022]);
    @premise know(*pk(skA()), #t1@1024);
    @premise know(*skB(), #t2@1025);
    @premise know(*[Na@1022], #t2@1026);
    @premise know(*x0@1012, #t0@1027);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1012), skA()), #t@1013);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@1002], newB(), tuple4(skA(), skB(), #tb@1003, [Na@1004]));
    @premise new(*[Na@1006], newA(), tuple3(skA(), skB(), #ta@1007));
    @premise new(*[Na@1004], newA(), tuple3(skA(), skB(), #ta@1005));
    @premise init(*skA(), *skB(), *#ta@1007, *x0@998, *[Na@1006]);
    @premise know(*pk(skA()), #t2@1001);
    @premise know(*skB(), #t1@1000);
    @premise know(*[Na@1006], #t2@1010);
    @premise know(*x0@998, #t0@1011);
    @conclusion know(*sign(tuple2(pk(skB()), x0@998), skA()), #t@999);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1033], newA(), tuple3(skA(), sk@1028, #ta@1034));
    @premise know(*pk(skA()), #t2@1032);
    @premise init(*skA(), *sk@1028, *#ta@1034, *x0@1029, *[Na@1033]);
    @premise know(*skA(), #t1@1036);
    @premise know(*[Na@1033], #t2@1037);
    @premise know(*sk@1028, #t1@1031);
    @premise know(*x0@1029, #t0@1039);
    @conclusion know(*sign(tuple2(pk(sk@1028), x0@1029), skA()), #t@1030);
};
Rule deleted: 
@rule{
    @premise new(*[Na@892], newA(), tuple3(skA(), skA(), #ta@893));
    @premise new(*[Na@890], newA(), tuple3(skA(), skA(), #ta@891));
    @premise init(*skA(), *skA(), *#ta@893, *x0@886, *[Na@892]);
    @premise know(*pk(skA()), #t2@889);
    @premise know(*skA(), #t1@888);
    @premise know(*[Na@892], #t2@896);
    @premise know(*x0@886, #t0@897);
    @conclusion know(*sign(tuple2(pk(skA()), x0@886), skA()), #t@887);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 17
Rule staged: 89
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1217);
    @premise new(*[Na@1218], newA(), tuple3(skA(), sk@1214, #ta@1219));
    @premise init(*skA(), *sk@1214, *#ta@1219, *x0@1215, *[Na@1218]);
    @premise know(*skA(), #t1@1220);
    @premise know(*[Na@1218], #t2@1221);
    @premise know(*sk@1214, #t1@1222);
    @premise know(*x0@1215, #t0@1223);
    @conclusion know(*sign(tuple2(pk(sk@1214), x0@1215), skA()), #t@1216);
    @constraint -#t1@1217 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1218], newA(), tuple3(skA(), sk@1214, #ta@1219));
    @premise init(*skA(), *sk@1214, *#ta@1219, *x0@1215, *[Na@1218]);
    @premise know(*skA(), #t1@1217);
    @premise know(*[Na@1218], #t2@1221);
    @premise know(*sk@1214, #t1@1222);
    @premise know(*x0@1215, #t0@1223);
    @conclusion know(*sign(tuple2(pk(sk@1214), x0@1215), skA()), #t@1216);
};

Compose by at 1 : 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};
Rule in cache: 18
Rule staged: 89
Rule before check and clean: 
@rule{
    @premise new(*[Na@1227], newA(), tuple3(skA(), sk@1224, #ta@1228));
    @premise init(*skA(), *sk@1224, *#ta@1228, *x0@1225, *[Na@1227]);
    @premise know(*skA(), #t1@1229);
    @premise know(*[Na@1227], #t2@1230);
    @premise know(*sk@1224, #t1@1231);
    @premise know(*x0@1225, #t0@1232);
    @conclusion know(*sign(tuple2(pk(sk@1224), x0@1225), skA()), #t@1226);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1227], newA(), tuple3(skA(), sk@1224, #ta@1228));
    @premise init(*skA(), *sk@1224, *#ta@1228, *x0@1225, *[Na@1227]);
    @premise know(*skA(), #t1@1229);
    @premise know(*[Na@1227], #t2@1230);
    @premise know(*sk@1224, #t1@1231);
    @premise know(*x0@1225, #t0@1232);
    @conclusion know(*sign(tuple2(pk(sk@1224), x0@1225), skA()), #t@1226);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@528, #ta@531));
    @conclusion know(*pk(skR@528), #t1@529);
    @constraint #t1@529 - #ta@531 >= 0;
};
Rule in cache: 19
Rule staged: 89
Rule before check and clean: 
@rule{
    @premise new(*[Na@1236], newA(), tuple3(skA(), skA(), #ta@1237));
    @premise new(*[Na@1238], newA(), tuple3(skA(), sk@1233, #ta@1239));
    @premise init(*skA(), *sk@1233, *#ta@1239, *x0@1234, *[Na@1238]);
    @premise know(*skA(), #t1@1240);
    @premise know(*[Na@1238], #t2@1241);
    @premise know(*sk@1233, #t1@1242);
    @premise know(*x0@1234, #t0@1243);
    @conclusion know(*sign(tuple2(pk(sk@1233), x0@1234), skA()), #t@1235);
    @constraint #t1@529 - #ta@1237 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1236], newA(), tuple3(skA(), skA(), #ta@1237));
    @premise new(*[Na@1238], newA(), tuple3(skA(), sk@1233, #ta@1239));
    @premise init(*skA(), *sk@1233, *#ta@1239, *x0@1234, *[Na@1238]);
    @premise know(*skA(), #t1@1240);
    @premise know(*[Na@1238], #t2@1241);
    @premise know(*sk@1233, #t1@1242);
    @premise know(*x0@1234, #t0@1243);
    @conclusion know(*sign(tuple2(pk(sk@1233), x0@1234), skA()), #t@1235);
};

Stage rule: 
@rule{
    @premise new(*[Na@1042], newA(), tuple3(skA(), skA(), #ta@1043));
    @premise new(*[Na@1044], newA(), tuple3(skA(), skA(), #ta@1045));
    @premise init(*skA(), *skA(), *#ta@1045, *x0@1040, *[Na@1044]);
    @premise know(*pk(skA()), #t2@1046);
    @premise know(*skA(), #t1@1047);
    @premise know(*[Na@1044], #t2@1048);
    @premise know(*x0@1040, #t0@1050);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1040), skA()), #t@1041);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1033], newA(), tuple3(skA(), sk@1028, #ta@1034));
    @premise know(*pk(skA()), #t2@1032);
    @premise init(*skA(), *sk@1028, *#ta@1034, *x0@1029, *[Na@1033]);
    @premise know(*skA(), #t1@1036);
    @premise know(*[Na@1033], #t2@1037);
    @premise know(*sk@1028, #t1@1031);
    @premise know(*x0@1029, #t0@1039);
    @conclusion know(*sign(tuple2(pk(sk@1028), x0@1029), skA()), #t@1030);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@1055], newB(), tuple4(skA(), skB(), #tb@1056, [Na@1053]));
    @premise new(*[Na@1053], newA(), tuple3(skA(), skB(), #ta@1054));
    @premise new(*[Na@1057], newA(), tuple3(skA(), skB(), #ta@1058));
    @premise init(*skA(), *skB(), *#ta@1058, *x0@1051, *[Na@1057]);
    @premise know(*pk(skA()), #t2@1059);
    @premise know(*skA(), #t1@1060);
    @premise know(*skB(), #t1@1062);
    @premise know(*[Na@1057], #t2@1061);
    @premise know(*x0@1051, #t0@1063);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1051), skA()), #t@1052);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@1002], newB(), tuple4(skA(), skB(), #tb@1003, [Na@1004]));
    @premise new(*[Na@1006], newA(), tuple3(skA(), skB(), #ta@1007));
    @premise new(*[Na@1004], newA(), tuple3(skA(), skB(), #ta@1005));
    @premise init(*skA(), *skB(), *#ta@1007, *x0@998, *[Na@1006]);
    @premise know(*pk(skA()), #t2@1001);
    @premise know(*skB(), #t1@1000);
    @premise know(*[Na@1006], #t2@1010);
    @premise know(*x0@998, #t0@1011);
    @conclusion know(*sign(tuple2(pk(skB()), x0@998), skA()), #t@999);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1069], newA(), tuple3(skA(), sk@1064, #ta@1070));
    @premise know(*pk(skA()), #t2@1068);
    @premise init(*skA(), *sk@1064, *#ta@1070, *x0@1065, *[Na@1069]);
    @premise know(*[Na@1069], #t2@1072);
    @premise know(*sk@1064, #t1@1067);
    @premise know(*x0@1065, #t0@1074);
    @conclusion know(*sign(tuple2(pk(sk@1064), x0@1065), skA()), #t@1066);
};
Rule deleted: 
@rule{
    @premise new(*[Na@867], newA(), tuple3(skA(), sk@862, #ta@868));
    @premise know(*X(sk@862, pk(skA())), #t3@869);
    @premise know(*pk(skA()), #t2@866);
    @premise init(*skA(), *sk@862, *#ta@868, *x0@863, *[Na@867]);
    @premise know(*[Na@867], #t2@871);
    @premise know(*sk@862, #t1@865);
    @premise know(*x0@863, #t0@873);
    @conclusion know(*sign(tuple2(pk(sk@862), x0@863), skA()), #t@864);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@1002], newB(), tuple4(skA(), skB(), #tb@1003, [Na@1004]));
    @premise new(*[Na@1006], newA(), tuple3(skA(), skB(), #ta@1007));
    @premise new(*[Na@1004], newA(), tuple3(skA(), skB(), #ta@1005));
    @premise init(*skA(), *skB(), *#ta@1007, *x0@998, *[Na@1006]);
    @premise know(*pk(skA()), #t2@1001);
    @premise know(*skB(), #t1@1000);
    @premise know(*[Na@1006], #t2@1010);
    @premise know(*x0@998, #t0@1011);
    @conclusion know(*sign(tuple2(pk(skB()), x0@998), skA()), #t@999);
};
Rule deleted: 
@rule{
    @premise new(*[Na@1033], newA(), tuple3(skA(), sk@1028, #ta@1034));
    @premise know(*pk(skA()), #t2@1032);
    @premise init(*skA(), *sk@1028, *#ta@1034, *x0@1029, *[Na@1033]);
    @premise know(*skA(), #t1@1036);
    @premise know(*[Na@1033], #t2@1037);
    @premise know(*sk@1028, #t1@1031);
    @premise know(*x0@1029, #t0@1039);
    @conclusion know(*sign(tuple2(pk(sk@1028), x0@1029), skA()), #t@1030);
};
Rule added at 1.

Compose by at 1 : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};
Rule in cache: 17
Rule staged: 90
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1247);
    @premise new(*[Na@1248], newA(), tuple3(skA(), sk@1244, #ta@1249));
    @premise init(*skA(), *sk@1244, *#ta@1249, *x0@1245, *[Na@1248]);
    @premise know(*[Na@1248], #t2@1250);
    @premise know(*sk@1244, #t1@1251);
    @premise know(*x0@1245, #t0@1252);
    @conclusion know(*sign(tuple2(pk(sk@1244), x0@1245), skA()), #t@1246);
    @constraint -#t1@1247 + #t@197 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1248], newA(), tuple3(skA(), sk@1244, #ta@1249));
    @premise init(*skA(), *sk@1244, *#ta@1249, *x0@1245, *[Na@1248]);
    @premise know(*skA(), #t1@1247);
    @premise know(*[Na@1248], #t2@1250);
    @premise know(*sk@1244, #t1@1251);
    @premise know(*x0@1245, #t0@1252);
    @conclusion know(*sign(tuple2(pk(sk@1244), x0@1245), skA()), #t@1246);
};

Compose by at 1 : 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};
Rule in cache: 18
Rule staged: 90
Rule before check and clean: 
@rule{
    @premise new(*[Na@1256], newA(), tuple3(skA(), sk@1253, #ta@1257));
    @premise init(*skA(), *sk@1253, *#ta@1257, *x0@1254, *[Na@1256]);
    @premise know(*[Na@1256], #t2@1258);
    @premise know(*sk@1253, #t1@1259);
    @premise know(*x0@1254, #t0@1260);
    @conclusion know(*sign(tuple2(pk(sk@1253), x0@1254), skA()), #t@1255);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1256], newA(), tuple3(skA(), sk@1253, #ta@1257));
    @premise init(*skA(), *sk@1253, *#ta@1257, *x0@1254, *[Na@1256]);
    @premise know(*[Na@1256], #t2@1258);
    @premise know(*sk@1253, #t1@1259);
    @premise know(*x0@1254, #t0@1260);
    @conclusion know(*sign(tuple2(pk(sk@1253), x0@1254), skA()), #t@1255);
};

Compose by at 1 : 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@528, #ta@531));
    @conclusion know(*pk(skR@528), #t1@529);
    @constraint #t1@529 - #ta@531 >= 0;
};
Rule in cache: 19
Rule staged: 90
Rule before check and clean: 
@rule{
    @premise new(*[Na@1264], newA(), tuple3(skA(), skA(), #ta@1265));
    @premise new(*[Na@1266], newA(), tuple3(skA(), sk@1261, #ta@1267));
    @premise init(*skA(), *sk@1261, *#ta@1267, *x0@1262, *[Na@1266]);
    @premise know(*[Na@1266], #t2@1268);
    @premise know(*sk@1261, #t1@1269);
    @premise know(*x0@1262, #t0@1270);
    @conclusion know(*sign(tuple2(pk(sk@1261), x0@1262), skA()), #t@1263);
    @constraint #t1@529 - #ta@1265 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1264], newA(), tuple3(skA(), skA(), #ta@1265));
    @premise new(*[Na@1266], newA(), tuple3(skA(), sk@1261, #ta@1267));
    @premise init(*skA(), *sk@1261, *#ta@1267, *x0@1262, *[Na@1266]);
    @premise know(*[Na@1266], #t2@1268);
    @premise know(*sk@1261, #t1@1269);
    @premise know(*x0@1262, #t0@1270);
    @conclusion know(*sign(tuple2(pk(sk@1261), x0@1262), skA()), #t@1263);
};

Stage rule: 
@rule{
    @premise new(*[Na@1077], newA(), tuple3(skA(), skA(), #ta@1078));
    @premise new(*[Na@1079], newA(), tuple3(skA(), skA(), #ta@1080));
    @premise init(*skA(), *skA(), *#ta@1080, *x0@1075, *[Na@1079]);
    @premise know(*pk(skA()), #t2@1081);
    @premise know(*skA(), #t1@1083);
    @premise know(*[Na@1079], #t2@1082);
    @premise know(*x0@1075, #t0@1084);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1075), skA()), #t@1076);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1069], newA(), tuple3(skA(), sk@1064, #ta@1070));
    @premise know(*pk(skA()), #t2@1068);
    @premise init(*skA(), *sk@1064, *#ta@1070, *x0@1065, *[Na@1069]);
    @premise know(*[Na@1069], #t2@1072);
    @premise know(*sk@1064, #t1@1067);
    @premise know(*x0@1065, #t0@1074);
    @conclusion know(*sign(tuple2(pk(sk@1064), x0@1065), skA()), #t@1066);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@1089], newB(), tuple4(skA(), skB(), #tb@1090, [Na@1087]));
    @premise new(*[Na@1087], newA(), tuple3(skA(), skB(), #ta@1088));
    @premise new(*[Na@1091], newA(), tuple3(skA(), skB(), #ta@1092));
    @premise init(*skA(), *skB(), *#ta@1092, *x0@1085, *[Na@1091]);
    @premise know(*pk(skA()), #t2@1093);
    @premise know(*skB(), #t1@1095);
    @premise know(*[Na@1091], #t2@1094);
    @premise know(*x0@1085, #t0@1096);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1085), skA()), #t@1086);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1069], newA(), tuple3(skA(), sk@1064, #ta@1070));
    @premise know(*pk(skA()), #t2@1068);
    @premise init(*skA(), *sk@1064, *#ta@1070, *x0@1065, *[Na@1069]);
    @premise know(*[Na@1069], #t2@1072);
    @premise know(*sk@1064, #t1@1067);
    @premise know(*x0@1065, #t0@1074);
    @conclusion know(*sign(tuple2(pk(sk@1064), x0@1065), skA()), #t@1066);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1100], newA(), tuple3(skA(), skA(), #ta@1101));
    @premise new(*[Na@1102], newA(), tuple3(skA(), skA(), #ta@1103));
    @premise init(*skA(), *skA(), *#ta@1101, *x0@1097, *[Na@1100]);
    @premise know(*skA(), #t1@1099);
    @premise know(*[Na@1100], #t2@1105);
    @premise know(*x0@1097, #t0@1106);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1097), skA()), #t@1098);
};
Rule added at 3.

Stage rule: 
@rule{
    @premise new(*[Na@1109], newA(), tuple3(skA(), skA(), #ta@1110));
    @premise new(*[Na@1111], newA(), tuple3(skA(), skA(), #ta@1112));
    @premise init(*skA(), *skA(), *#ta@1110, *x0@1107, *[Na@1109]);
    @premise know(*skA(), #t1@1113);
    @premise know(*[Na@1109], #t2@1114);
    @premise know(*x0@1107, #t0@1115);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1107), skA()), #t@1108);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1100], newA(), tuple3(skA(), skA(), #ta@1101));
    @premise new(*[Na@1102], newA(), tuple3(skA(), skA(), #ta@1103));
    @premise init(*skA(), *skA(), *#ta@1101, *x0@1097, *[Na@1100]);
    @premise know(*skA(), #t1@1099);
    @premise know(*[Na@1100], #t2@1105);
    @premise know(*x0@1097, #t0@1106);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1097), skA()), #t@1098);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1118], newA(), tuple3(skA(), skA(), #ta@1119));
    @premise new(*[Na@1120], newA(), tuple3(skA(), skA(), #ta@1121));
    @premise new(*[Na@1122], newA(), tuple3(skA(), skA(), #ta@1123));
    @premise init(*skA(), *skA(), *#ta@1121, *x0@1116, *[Na@1120]);
    @premise know(*skA(), #t1@1124);
    @premise know(*[Na@1120], #t2@1125);
    @premise know(*x0@1116, #t0@1126);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1116), skA()), #t@1117);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1100], newA(), tuple3(skA(), skA(), #ta@1101));
    @premise new(*[Na@1102], newA(), tuple3(skA(), skA(), #ta@1103));
    @premise init(*skA(), *skA(), *#ta@1101, *x0@1097, *[Na@1100]);
    @premise know(*skA(), #t1@1099);
    @premise know(*[Na@1100], #t2@1105);
    @premise know(*x0@1097, #t0@1106);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1097), skA()), #t@1098);
};
Rule not added.

Stage rule: 
@rule{
    @premise know(*skB(), #t1@1131);
    @premise new(*[Nb@1127], newB(), tuple4(sk@1128, skB(), #tb@1132, x0@1129));
    @premise know(*sk@1128, #t1@1134);
    @premise know(*x0@1129, #t0@1135);
    @conclusion know(*sign(tuple5([Nb@1127], pk(sk@1128), x0@1129, X(skB(), pk(sk@1128)), aenc(Y(skB(), pk(sk@1128)), pk(sk@1128))), skB()), #t@1130);
};
Rule added at 0.

Stage rule: 
@rule{
    @premise new(*[Nb@1136], newB(), tuple4(sk@1137, skB(), #tb@1140, x0@1138));
    @premise know(*skB(), #t1@1141);
    @premise know(*sk@1137, #t1@1142);
    @premise know(*x0@1138, #t0@1143);
    @conclusion know(*sign(tuple5([Nb@1136], pk(sk@1137), x0@1138, X(skB(), pk(sk@1137)), aenc(Y(skB(), pk(sk@1137)), pk(sk@1137))), skB()), #t@1139);
};
Rule implied by: 
@rule{
    @premise know(*skB(), #t1@1131);
    @premise new(*[Nb@1127], newB(), tuple4(sk@1128, skB(), #tb@1132, x0@1129));
    @premise know(*sk@1128, #t1@1134);
    @premise know(*x0@1129, #t0@1135);
    @conclusion know(*sign(tuple5([Nb@1127], pk(sk@1128), x0@1129, X(skB(), pk(sk@1128)), aenc(Y(skB(), pk(sk@1128)), pk(sk@1128))), skB()), #t@1130);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1148], newA(), tuple3(skA(), skB(), #ta@1149));
    @premise new(*[Nb@1144], newB(), tuple4(sk@1145, skB(), #tb@1150, x0@1146));
    @premise know(*skB(), #t1@1151);
    @premise know(*sk@1145, #t1@1152);
    @premise know(*x0@1146, #t0@1153);
    @conclusion know(*sign(tuple5([Nb@1144], pk(sk@1145), x0@1146, X(skB(), pk(sk@1145)), aenc(Y(skB(), pk(sk@1145)), pk(sk@1145))), skB()), #t@1147);
};
Rule implied by: 
@rule{
    @premise know(*skB(), #t1@1131);
    @premise new(*[Nb@1127], newB(), tuple4(sk@1128, skB(), #tb@1132, x0@1129));
    @premise know(*sk@1128, #t1@1134);
    @premise know(*x0@1129, #t0@1135);
    @conclusion know(*sign(tuple5([Nb@1127], pk(sk@1128), x0@1129, X(skB(), pk(sk@1128)), aenc(Y(skB(), pk(sk@1128)), pk(sk@1128))), skB()), #t@1130);
};
Rule not added.

Stage rule: 
@rule{
    @premise know(*skB(), #t1@1158);
    @premise know(*sk@1155, #t1@1159);
    @premise new(*[Nb@1154], newB(), tuple4(sk@1155, skB(), #tb@1160, x0@1156));
    @premise know(*x0@1156, #t0@1161);
    @conclusion know(*sign(tuple5([Nb@1154], pk(sk@1155), x0@1156, X(skB(), pk(sk@1155)), aenc(Y(skB(), pk(sk@1155)), pk(sk@1155))), skB()), #t@1157);
};
Rule implied by: 
@rule{
    @premise know(*skB(), #t1@1131);
    @premise new(*[Nb@1127], newB(), tuple4(sk@1128, skB(), #tb@1132, x0@1129));
    @premise know(*sk@1128, #t1@1134);
    @premise know(*x0@1129, #t0@1135);
    @conclusion know(*sign(tuple5([Nb@1127], pk(sk@1128), x0@1129, X(skB(), pk(sk@1128)), aenc(Y(skB(), pk(sk@1128)), pk(sk@1128))), skB()), #t@1130);
};
Rule not added.

Stage rule: 
@rule{
    @premise know(*sk@1163, #t1@1166);
    @premise new(*[Nb@1162], newB(), tuple4(sk@1163, skB(), #tb@1167, x0@1164));
    @premise know(*x0@1164, #t0@1168);
    @conclusion know(*sign(tuple5([Nb@1162], pk(sk@1163), x0@1164, X(skB(), pk(sk@1163)), aenc(Y(skB(), pk(sk@1163)), pk(sk@1163))), skB()), #t@1165);
};
Rule deleted: 
@rule{
    @premise know(*sk@953, #t1@956);
    @premise know(*pk(skB()), #t2@957);
    @premise new(*[Nb@952], newB(), tuple4(sk@953, skB(), #tb@958, x0@954));
    @premise know(*x0@954, #t0@961);
    @conclusion know(*sign(tuple5([Nb@952], pk(sk@953), x0@954, X(skB(), pk(sk@953)), aenc(Y(skB(), pk(sk@953)), pk(sk@953))), skB()), #t@955);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@980], newB(), tuple4(skA(), skB(), #tb@983, x0@981));
    @premise new(*[Na@984], newA(), tuple3(skA(), skB(), #ta@985));
    @premise know(*skA(), #t1@986);
    @premise know(*x0@981, #t0@987);
    @conclusion know(*sign(tuple5([Nb@980], pk(skA()), x0@981, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@982);
};
Rule deleted: 
@rule{
    @premise know(*skB(), #t1@1131);
    @premise new(*[Nb@1127], newB(), tuple4(sk@1128, skB(), #tb@1132, x0@1129));
    @premise know(*sk@1128, #t1@1134);
    @premise know(*x0@1129, #t0@1135);
    @conclusion know(*sign(tuple5([Nb@1127], pk(sk@1128), x0@1129, X(skB(), pk(sk@1128)), aenc(Y(skB(), pk(sk@1128)), pk(sk@1128))), skB()), #t@1130);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};
Rule in cache: 10
Rule staged: 93
Rule before check and clean: 
@rule{
    @premise know(*sk@1272, #t1@1275);
    @premise new(*[Nb@1271], newB(), tuple4(sk@1272, skB(), #tb@1276, x0@1273));
    @premise know(*x0@1273, #t0@1277);
    @conclusion know(*tuple5([Nb@1271], pk(sk@1272), x0@1273, X(skB(), pk(sk@1272)), aenc(Y(skB(), pk(sk@1272)), pk(sk@1272))), #t@1274);
    @constraint -#t@1165 + #t@1274 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1272, #t1@1275);
    @premise new(*[Nb@1271], newB(), tuple4(sk@1272, skB(), #tb@1276, x0@1273));
    @premise know(*x0@1273, #t0@1277);
    @conclusion know(*tuple5([Nb@1271], pk(sk@1272), x0@1273, X(skB(), pk(sk@1272)), aenc(Y(skB(), pk(sk@1272)), pk(sk@1272))), #t@1274);
};

Compose to at 2 : 
@rule{
    @premise new(*[Na@250], newA(), tuple3(skA(), skR@251, #ta@252));
    @premise init(*skA(), *skR@251, *#ta@252, *Nb@253, *[Na@250]);
    @premise know(*sign(tuple5(Nb@253, pk(skA()), [Na@250], X(skR@251, pk(skA())), aenc(Y(skR@251, pk(skA())), pk(skA()))), skR@251), #t1@254);
    @conclusion know(*sign(tuple2(pk(skR@251), Nb@253), skA()), #t@255);
};
Rule in cache: 11
Rule staged: 93
Rule before check and clean: 
@rule{
    @premise know(*skA(), #t1@1280);
    @premise new(*[Nb@1278], newB(), tuple4(skA(), skB(), #tb@1281, [Na@1282]));
    @premise know(*[Na@1282], #t0@1283);
    @premise new(*[Na@1282], newA(), tuple3(skA(), skB(), #ta@1284));
    @premise init(*skA(), *skB(), *#ta@1284, *[Nb@1278], *[Na@1282]);
    @conclusion know(*sign(tuple2(pk(skB()), [Nb@1278]), skA()), #t@1279);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1278], newB(), tuple4(skA(), skB(), #tb@1281, [Na@1282]));
    @premise new(*[Na@1282], newA(), tuple3(skA(), skB(), #ta@1284));
    @premise init(*skA(), *skB(), *#ta@1284, *[Nb@1278], *[Na@1282]);
    @premise know(*skA(), #t1@1280);
    @premise know(*[Na@1282], #t0@1283);
    @conclusion know(*sign(tuple2(pk(skB()), [Nb@1278]), skA()), #t@1279);
};

Stage rule: 
@rule{
    @premise new(*[Na@1173], newA(), tuple3(skA(), skB(), #ta@1174));
    @premise know(*sk@1170, #t1@1175);
    @premise new(*[Nb@1169], newB(), tuple4(sk@1170, skB(), #tb@1176, x0@1171));
    @premise know(*x0@1171, #t0@1177);
    @conclusion know(*sign(tuple5([Nb@1169], pk(sk@1170), x0@1171, X(skB(), pk(sk@1170)), aenc(Y(skB(), pk(sk@1170)), pk(sk@1170))), skB()), #t@1172);
};
Rule implied by: 
@rule{
    @premise know(*sk@1163, #t1@1166);
    @premise new(*[Nb@1162], newB(), tuple4(sk@1163, skB(), #tb@1167, x0@1164));
    @premise know(*x0@1164, #t0@1168);
    @conclusion know(*sign(tuple5([Nb@1162], pk(sk@1163), x0@1164, X(skB(), pk(sk@1163)), aenc(Y(skB(), pk(sk@1163)), pk(sk@1163))), skB()), #t@1165);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Nb@1181], newB(), tuple4(skA(), skB(), #tb@1182, [Na@1183]));
    @premise new(*[Na@1184], newA(), tuple3(skA(), skB(), #ta@1185));
    @premise new(*[Na@1183], newA(), tuple3(skA(), skB(), #ta@1186));
    @premise init(*skA(), *skB(), *#ta@1185, *x0@1178, *[Na@1184]);
    @premise know(*skA(), #t1@1180);
    @premise know(*skB(), #t1@1187);
    @premise know(*[Na@1184], #t2@1188);
    @premise know(*x0@1178, #t0@1189);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1178), skA()), #t@1179);
};
Rule added at 4.

Stage rule: 
@rule{
    @premise new(*[Nb@1192], newB(), tuple4(skA(), skB(), #tb@1193, [Na@1194]));
    @premise new(*[Na@1195], newA(), tuple3(skA(), skB(), #ta@1196));
    @premise new(*[Na@1194], newA(), tuple3(skA(), skB(), #ta@1197));
    @premise init(*skA(), *skB(), *#ta@1196, *x0@1190, *[Na@1195]);
    @premise know(*skB(), #t1@1198);
    @premise know(*[Na@1195], #t2@1199);
    @premise know(*x0@1190, #t0@1200);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1190), skA()), #t@1191);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@1181], newB(), tuple4(skA(), skB(), #tb@1182, [Na@1183]));
    @premise new(*[Na@1184], newA(), tuple3(skA(), skB(), #ta@1185));
    @premise new(*[Na@1183], newA(), tuple3(skA(), skB(), #ta@1186));
    @premise init(*skA(), *skB(), *#ta@1185, *x0@1178, *[Na@1184]);
    @premise know(*skA(), #t1@1180);
    @premise know(*skB(), #t1@1187);
    @premise know(*[Na@1184], #t2@1188);
    @premise know(*x0@1178, #t0@1189);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1178), skA()), #t@1179);
};
Rule added at 4.

Stage rule: 
@rule{
    @premise new(*[Nb@1205], newB(), tuple4(skA(), skB(), #tb@1206, [Na@1207]));
    @premise new(*[Na@1203], newA(), tuple3(skA(), skA(), #ta@1204));
    @premise new(*[Na@1208], newA(), tuple3(skA(), skB(), #ta@1209));
    @premise new(*[Na@1207], newA(), tuple3(skA(), skB(), #ta@1210));
    @premise init(*skA(), *skB(), *#ta@1209, *x0@1201, *[Na@1208]);
    @premise know(*skB(), #t1@1211);
    @premise know(*[Na@1208], #t2@1212);
    @premise know(*x0@1201, #t0@1213);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1201), skA()), #t@1202);
};
Rule implied by: 
@rule{
    @premise new(*[Nb@1192], newB(), tuple4(skA(), skB(), #tb@1193, [Na@1194]));
    @premise new(*[Na@1195], newA(), tuple3(skA(), skB(), #ta@1196));
    @premise new(*[Na@1194], newA(), tuple3(skA(), skB(), #ta@1197));
    @premise init(*skA(), *skB(), *#ta@1196, *x0@1190, *[Na@1195]);
    @premise know(*skB(), #t1@1198);
    @premise know(*[Na@1195], #t2@1199);
    @premise know(*x0@1190, #t0@1200);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1190), skA()), #t@1191);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1218], newA(), tuple3(skA(), sk@1214, #ta@1219));
    @premise init(*skA(), *sk@1214, *#ta@1219, *x0@1215, *[Na@1218]);
    @premise know(*skA(), #t1@1217);
    @premise know(*[Na@1218], #t2@1221);
    @premise know(*sk@1214, #t1@1222);
    @premise know(*x0@1215, #t0@1223);
    @conclusion know(*sign(tuple2(pk(sk@1214), x0@1215), skA()), #t@1216);
};
Rule deleted: 
@rule{
    @premise new(*[Na@1100], newA(), tuple3(skA(), skA(), #ta@1101));
    @premise new(*[Na@1102], newA(), tuple3(skA(), skA(), #ta@1103));
    @premise init(*skA(), *skA(), *#ta@1101, *x0@1097, *[Na@1100]);
    @premise know(*skA(), #t1@1099);
    @premise know(*[Na@1100], #t2@1105);
    @premise know(*x0@1097, #t0@1106);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1097), skA()), #t@1098);
};
Rule added at 2.

Stage rule: 
@rule{
    @premise new(*[Na@1227], newA(), tuple3(skA(), sk@1224, #ta@1228));
    @premise init(*skA(), *sk@1224, *#ta@1228, *x0@1225, *[Na@1227]);
    @premise know(*skA(), #t1@1229);
    @premise know(*[Na@1227], #t2@1230);
    @premise know(*sk@1224, #t1@1231);
    @premise know(*x0@1225, #t0@1232);
    @conclusion know(*sign(tuple2(pk(sk@1224), x0@1225), skA()), #t@1226);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1218], newA(), tuple3(skA(), sk@1214, #ta@1219));
    @premise init(*skA(), *sk@1214, *#ta@1219, *x0@1215, *[Na@1218]);
    @premise know(*skA(), #t1@1217);
    @premise know(*[Na@1218], #t2@1221);
    @premise know(*sk@1214, #t1@1222);
    @premise know(*x0@1215, #t0@1223);
    @conclusion know(*sign(tuple2(pk(sk@1214), x0@1215), skA()), #t@1216);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1236], newA(), tuple3(skA(), skA(), #ta@1237));
    @premise new(*[Na@1238], newA(), tuple3(skA(), sk@1233, #ta@1239));
    @premise init(*skA(), *sk@1233, *#ta@1239, *x0@1234, *[Na@1238]);
    @premise know(*skA(), #t1@1240);
    @premise know(*[Na@1238], #t2@1241);
    @premise know(*sk@1233, #t1@1242);
    @premise know(*x0@1234, #t0@1243);
    @conclusion know(*sign(tuple2(pk(sk@1233), x0@1234), skA()), #t@1235);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1218], newA(), tuple3(skA(), sk@1214, #ta@1219));
    @premise init(*skA(), *sk@1214, *#ta@1219, *x0@1215, *[Na@1218]);
    @premise know(*skA(), #t1@1217);
    @premise know(*[Na@1218], #t2@1221);
    @premise know(*sk@1214, #t1@1222);
    @premise know(*x0@1215, #t0@1223);
    @conclusion know(*sign(tuple2(pk(sk@1214), x0@1215), skA()), #t@1216);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1248], newA(), tuple3(skA(), sk@1244, #ta@1249));
    @premise init(*skA(), *sk@1244, *#ta@1249, *x0@1245, *[Na@1248]);
    @premise know(*skA(), #t1@1247);
    @premise know(*[Na@1248], #t2@1250);
    @premise know(*sk@1244, #t1@1251);
    @premise know(*x0@1245, #t0@1252);
    @conclusion know(*sign(tuple2(pk(sk@1244), x0@1245), skA()), #t@1246);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1218], newA(), tuple3(skA(), sk@1214, #ta@1219));
    @premise init(*skA(), *sk@1214, *#ta@1219, *x0@1215, *[Na@1218]);
    @premise know(*skA(), #t1@1217);
    @premise know(*[Na@1218], #t2@1221);
    @premise know(*sk@1214, #t1@1222);
    @premise know(*x0@1215, #t0@1223);
    @conclusion know(*sign(tuple2(pk(sk@1214), x0@1215), skA()), #t@1216);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1256], newA(), tuple3(skA(), sk@1253, #ta@1257));
    @premise init(*skA(), *sk@1253, *#ta@1257, *x0@1254, *[Na@1256]);
    @premise know(*[Na@1256], #t2@1258);
    @premise know(*sk@1253, #t1@1259);
    @premise know(*x0@1254, #t0@1260);
    @conclusion know(*sign(tuple2(pk(sk@1253), x0@1254), skA()), #t@1255);
};
Rule deleted: 
@rule{
    @premise new(*[Na@1069], newA(), tuple3(skA(), sk@1064, #ta@1070));
    @premise know(*pk(skA()), #t2@1068);
    @premise init(*skA(), *sk@1064, *#ta@1070, *x0@1065, *[Na@1069]);
    @premise know(*[Na@1069], #t2@1072);
    @premise know(*sk@1064, #t1@1067);
    @premise know(*x0@1065, #t0@1074);
    @conclusion know(*sign(tuple2(pk(sk@1064), x0@1065), skA()), #t@1066);
};
Rule deleted: 
@rule{
    @premise new(*[Nb@1192], newB(), tuple4(skA(), skB(), #tb@1193, [Na@1194]));
    @premise new(*[Na@1195], newA(), tuple3(skA(), skB(), #ta@1196));
    @premise new(*[Na@1194], newA(), tuple3(skA(), skB(), #ta@1197));
    @premise init(*skA(), *skB(), *#ta@1196, *x0@1190, *[Na@1195]);
    @premise know(*skB(), #t1@1198);
    @premise know(*[Na@1195], #t2@1199);
    @premise know(*x0@1190, #t0@1200);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1190), skA()), #t@1191);
};
Rule deleted: 
@rule{
    @premise new(*[Na@1218], newA(), tuple3(skA(), sk@1214, #ta@1219));
    @premise init(*skA(), *sk@1214, *#ta@1219, *x0@1215, *[Na@1218]);
    @premise know(*skA(), #t1@1217);
    @premise know(*[Na@1218], #t2@1221);
    @premise know(*sk@1214, #t1@1222);
    @premise know(*x0@1215, #t0@1223);
    @conclusion know(*sign(tuple2(pk(sk@1214), x0@1215), skA()), #t@1216);
};
Rule added at 2.

Compose by at 2 : 
@rule{
    @premise new(*[Na@524], newA(), tuple3(skA(), skR@526, #ta@527));
    @conclusion know(*[Na@524], #t0@525);
    @constraint #t0@525 - #ta@527 >= 0;
};
Rule in cache: 3
Rule staged: 97
Rule before check and clean: 
@rule{
    @premise new(*[Na@1288], newA(), tuple3(skA(), skR@1289, #ta@1290));
    @premise new(*[Na@1288], newA(), tuple3(skA(), sk@1285, #ta@1291));
    @premise init(*skA(), *sk@1285, *#ta@1291, *x0@1286, *[Na@1288]);
    @premise know(*sk@1285, #t1@1292);
    @premise know(*x0@1286, #t0@1293);
    @conclusion know(*sign(tuple2(pk(sk@1285), x0@1286), skA()), #t@1287);
    @constraint #t0@525 - #ta@1290 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1288], newA(), tuple3(skA(), skR@1289, #ta@1290));
    @premise init(*skA(), *skR@1289, *#ta@1290, *x0@1286, *[Na@1288]);
    @premise know(*skR@1289, #t1@1292);
    @premise know(*x0@1286, #t0@1293);
    @conclusion know(*sign(tuple2(pk(skR@1289), x0@1286), skA()), #t@1287);
};

Compose by at 2 : 
@rule{
    @premise new(*[Na@622], newA(), tuple3(skA(), skB(), #ta@623));
    @premise new(*[Nb@620], newB(), tuple4(skA(), skB(), #tb@624, [Na@622]));
    @conclusion know(*[Nb@620], #t0@621);
};
Rule in cache: 4
Rule staged: 97
Rule before check and clean: 
@rule{
    @premise new(*[Na@1297], newA(), tuple3(skA(), skB(), #ta@1298));
    @premise new(*[Nb@1299], newB(), tuple4(skA(), skB(), #tb@1300, [Na@1297]));
    @premise new(*[Nb@1299], newA(), tuple3(skA(), sk@1294, #ta@1301));
    @premise init(*skA(), *sk@1294, *#ta@1301, *x0@1295, *[Nb@1299]);
    @premise know(*sk@1294, #t1@1302);
    @premise know(*x0@1295, #t0@1303);
    @conclusion know(*sign(tuple2(pk(sk@1294), x0@1295), skA()), #t@1296);
};
Rule invalid. 

Compose by at 2 : 
@rule{
    @premise new(*[Na@630], newA(), tuple3(skA(), skB(), #ta@632));
    @premise new(*[Nb@633], newB(), tuple4(skA(), skB(), #tb@634, [Na@630]));
    @conclusion know(*[Na@630], #t2@631);
};
Rule in cache: 4
Rule staged: 97
Rule before check and clean: 
@rule{
    @premise new(*[Na@1307], newA(), tuple3(skA(), skB(), #ta@1308));
    @premise new(*[Nb@1309], newB(), tuple4(skA(), skB(), #tb@1310, [Na@1307]));
    @premise new(*[Na@1307], newA(), tuple3(skA(), sk@1304, #ta@1311));
    @premise init(*skA(), *sk@1304, *#ta@1311, *x0@1305, *[Na@1307]);
    @premise know(*sk@1304, #t1@1312);
    @premise know(*x0@1305, #t0@1313);
    @conclusion know(*sign(tuple2(pk(sk@1304), x0@1305), skA()), #t@1306);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1309], newB(), tuple4(skA(), skB(), #tb@1310, [Na@1307]));
    @premise new(*[Na@1307], newA(), tuple3(skA(), skB(), #ta@1308));
    @premise init(*skA(), *skB(), *#ta@1308, *x0@1305, *[Na@1307]);
    @premise know(*skB(), #t1@1312);
    @premise know(*x0@1305, #t0@1313);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1305), skA()), #t@1306);
};

Stage rule: 
@rule{
    @premise new(*[Na@1264], newA(), tuple3(skA(), skA(), #ta@1265));
    @premise new(*[Na@1266], newA(), tuple3(skA(), sk@1261, #ta@1267));
    @premise init(*skA(), *sk@1261, *#ta@1267, *x0@1262, *[Na@1266]);
    @premise know(*[Na@1266], #t2@1268);
    @premise know(*sk@1261, #t1@1269);
    @premise know(*x0@1262, #t0@1270);
    @conclusion know(*sign(tuple2(pk(sk@1261), x0@1262), skA()), #t@1263);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1256], newA(), tuple3(skA(), sk@1253, #ta@1257));
    @premise init(*skA(), *sk@1253, *#ta@1257, *x0@1254, *[Na@1256]);
    @premise know(*[Na@1256], #t2@1258);
    @premise know(*sk@1253, #t1@1259);
    @premise know(*x0@1254, #t0@1260);
    @conclusion know(*sign(tuple2(pk(sk@1253), x0@1254), skA()), #t@1255);
};
Rule not added.

Stage rule: 
@rule{
    @premise know(*sk@1272, #t1@1275);
    @premise new(*[Nb@1271], newB(), tuple4(sk@1272, skB(), #tb@1276, x0@1273));
    @premise know(*x0@1273, #t0@1277);
    @conclusion know(*tuple5([Nb@1271], pk(sk@1272), x0@1273, X(skB(), pk(sk@1272)), aenc(Y(skB(), pk(sk@1272)), pk(sk@1272))), #t@1274);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@93, x1@94, x2@95, x3@96, x4@97), #t@98);
    @conclusion know(*x0@93, #t0@99);
    @constraint -#t@98 + #t0@99 >= 0;
};
Rule in cache: 3
Rule staged: 98
Rule before check and clean: 
@rule{
    @premise know(*sk@1316, #t1@1317);
    @premise new(*[Nb@1314], newB(), tuple4(sk@1316, skB(), #tb@1318, x0@1319));
    @premise know(*x0@1319, #t0@1320);
    @conclusion know(*[Nb@1314], #t0@1315);
    @constraint #t0@1315 - #t@1274 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1316, #t1@1317);
    @premise new(*[Nb@1314], newB(), tuple4(sk@1316, skB(), #tb@1318, x0@1319));
    @premise know(*x0@1319, #t0@1320);
    @conclusion know(*[Nb@1314], #t0@1315);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@100, x1@101, x2@102, x3@103, x4@104), #t@105);
    @conclusion know(*x1@101, #t1@106);
    @constraint -#t@105 + #t1@106 >= 0;
};
Rule in cache: 4
Rule staged: 98
Rule before check and clean: 
@rule{
    @premise know(*sk@1321, #t1@1323);
    @premise new(*[Nb@1324], newB(), tuple4(sk@1321, skB(), #tb@1325, x0@1326));
    @premise know(*x0@1326, #t0@1327);
    @conclusion know(*pk(sk@1321), #t1@1322);
    @constraint #t1@1322 - #t@1274 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1321, #t1@1323);
    @premise new(*[Nb@1324], newB(), tuple4(sk@1321, skB(), #tb@1325, x0@1326));
    @premise know(*x0@1326, #t0@1327);
    @conclusion know(*pk(sk@1321), #t1@1322);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@107, x1@108, x2@109, x3@110, x4@111), #t@112);
    @conclusion know(*x2@109, #t2@113);
    @constraint -#t@112 + #t2@113 >= 0;
};
Rule in cache: 5
Rule staged: 98
Rule before check and clean: 
@rule{
    @premise know(*sk@1330, #t1@1331);
    @premise new(*[Nb@1332], newB(), tuple4(sk@1330, skB(), #tb@1333, x0@1328));
    @premise know(*x0@1328, #t0@1334);
    @conclusion know(*x0@1328, #t2@1329);
    @constraint #t2@1329 - #t@1274 >= 0;
};
Rule invalid. 

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@114, x1@115, x2@116, x3@117, x4@118), #t@119);
    @conclusion know(*x3@117, #t3@120);
    @constraint -#t@119 + #t3@120 >= 0;
};
Rule in cache: 5
Rule staged: 98
Rule before check and clean: 
@rule{
    @premise know(*sk@1335, #t1@1337);
    @premise new(*[Nb@1338], newB(), tuple4(sk@1335, skB(), #tb@1339, x0@1340));
    @premise know(*x0@1340, #t0@1341);
    @conclusion know(*X(skB(), pk(sk@1335)), #t3@1336);
    @constraint #t3@1336 - #t@1274 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1335, #t1@1337);
    @premise new(*[Nb@1338], newB(), tuple4(sk@1335, skB(), #tb@1339, x0@1340));
    @premise know(*x0@1340, #t0@1341);
    @conclusion know(*X(skB(), pk(sk@1335)), #t3@1336);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple5(x0@121, x1@122, x2@123, x3@124, x4@125), #t@126);
    @conclusion know(*x4@125, #t4@127);
    @constraint -#t@126 + #t4@127 >= 0;
};
Rule in cache: 6
Rule staged: 98
Rule before check and clean: 
@rule{
    @premise know(*sk@1342, #t1@1344);
    @premise new(*[Nb@1345], newB(), tuple4(sk@1342, skB(), #tb@1346, x0@1347));
    @premise know(*x0@1347, #t0@1348);
    @conclusion know(*aenc(Y(skB(), pk(sk@1342)), pk(sk@1342)), #t4@1343);
    @constraint #t4@1343 - #t@1274 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1342, #t1@1344);
    @premise new(*[Nb@1345], newB(), tuple4(sk@1342, skB(), #tb@1346, x0@1347));
    @premise know(*x0@1347, #t0@1348);
    @conclusion know(*aenc(Y(skB(), pk(sk@1342)), pk(sk@1342)), #t4@1343);
};

Stage rule: 
@rule{
    @premise new(*[Nb@1278], newB(), tuple4(skA(), skB(), #tb@1281, [Na@1282]));
    @premise new(*[Na@1282], newA(), tuple3(skA(), skB(), #ta@1284));
    @premise init(*skA(), *skB(), *#ta@1284, *[Nb@1278], *[Na@1282]);
    @premise know(*skA(), #t1@1280);
    @premise know(*[Na@1282], #t0@1283);
    @conclusion know(*sign(tuple2(pk(skB()), [Nb@1278]), skA()), #t@1279);
};
Rule implied by: 
@rule{
    @premise new(*[Na@557], newA(), tuple3(skA(), skB(), #ta@558));
    @premise new(*[Nb@555], newB(), tuple4(skA(), skB(), #tb@559, [Na@557]));
    @premise init(*skA(), *skB(), *#ta@558, *[Nb@555], *[Na@557]);
    @conclusion know(*sign(tuple2(pk(skB()), [Nb@555]), skA()), #t@556);
};
Rule not added.

Stage rule: 
@rule{
    @premise new(*[Na@1288], newA(), tuple3(skA(), skR@1289, #ta@1290));
    @premise init(*skA(), *skR@1289, *#ta@1290, *x0@1286, *[Na@1288]);
    @premise know(*skR@1289, #t1@1292);
    @premise know(*x0@1286, #t0@1293);
    @conclusion know(*sign(tuple2(pk(skR@1289), x0@1286), skA()), #t@1287);
};
Rule deleted: 
@rule{
    @premise new(*[Na@1256], newA(), tuple3(skA(), sk@1253, #ta@1257));
    @premise init(*skA(), *sk@1253, *#ta@1257, *x0@1254, *[Na@1256]);
    @premise know(*[Na@1256], #t2@1258);
    @premise know(*sk@1253, #t1@1259);
    @premise know(*x0@1254, #t0@1260);
    @conclusion know(*sign(tuple2(pk(sk@1253), x0@1254), skA()), #t@1255);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};
Rule in cache: 5
Rule staged: 99
Rule before check and clean: 
@rule{
    @premise new(*[Na@1352], newA(), tuple3(skA(), skR@1349, #ta@1353));
    @premise init(*skA(), *skR@1349, *#ta@1353, *x0@1350, *[Na@1352]);
    @premise know(*skR@1349, #t1@1354);
    @premise know(*x0@1350, #t0@1355);
    @conclusion know(*tuple2(pk(skR@1349), x0@1350), #t@1351);
    @constraint -#t@1287 + #t@1351 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1352], newA(), tuple3(skA(), skR@1349, #ta@1353));
    @premise init(*skA(), *skR@1349, *#ta@1353, *x0@1350, *[Na@1352]);
    @premise know(*skR@1349, #t1@1354);
    @premise know(*x0@1350, #t0@1355);
    @conclusion know(*tuple2(pk(skR@1349), x0@1350), #t@1351);
};

Compose to at 1 : 
@rule{
    @premise new(*[Nb@256], newB(), tuple4(skA(), skB(), #tb@257, Na@258));
    @premise know(*sign(tuple2(pk(skB()), [Nb@256]), skA()), #t1@259);
    @conclusion accept(skA(), skB(), #tb@257, [Nb@256], Na@258);
};
Rule in cache: 6
Rule staged: 99
Rule before check and clean: 
@rule{
    @premise new(*[Na@1359], newA(), tuple3(skA(), skB(), #ta@1360));
    @premise init(*skA(), *skB(), *#ta@1360, *[Nb@1357], *[Na@1359]);
    @premise know(*skB(), #t1@1361);
    @premise know(*[Nb@1357], #t0@1362);
    @premise new(*[Nb@1357], newB(), tuple4(skA(), skB(), #tb@1356, Na@1358));
    @conclusion accept(skA(), skB(), #tb@1356, [Nb@1357], Na@1358);
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Nb@1357], newB(), tuple4(skA(), skB(), #tb@1356, Na@1358));
    @premise new(*[Na@1359], newA(), tuple3(skA(), skB(), #ta@1360));
    @premise init(*skA(), *skB(), *#ta@1360, *[Nb@1357], *[Na@1359]);
    @premise know(*skB(), #t1@1361);
    @premise know(*[Nb@1357], #t0@1362);
    @conclusion accept(skA(), skB(), #tb@1356, [Nb@1357], Na@1358);
};

Stage rule: 
@rule{
    @premise new(*[Nb@1309], newB(), tuple4(skA(), skB(), #tb@1310, [Na@1307]));
    @premise new(*[Na@1307], newA(), tuple3(skA(), skB(), #ta@1308));
    @premise init(*skA(), *skB(), *#ta@1308, *x0@1305, *[Na@1307]);
    @premise know(*skB(), #t1@1312);
    @premise know(*x0@1305, #t0@1313);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1305), skA()), #t@1306);
};
Rule implied by: 
@rule{
    @premise new(*[Na@1288], newA(), tuple3(skA(), skR@1289, #ta@1290));
    @premise init(*skA(), *skR@1289, *#ta@1290, *x0@1286, *[Na@1288]);
    @premise know(*skR@1289, #t1@1292);
    @premise know(*x0@1286, #t0@1293);
    @conclusion know(*sign(tuple2(pk(skR@1289), x0@1286), skA()), #t@1287);
};
Rule not added.

Stage rule: 
@rule{
    @premise know(*sk@1316, #t1@1317);
    @premise new(*[Nb@1314], newB(), tuple4(sk@1316, skB(), #tb@1318, x0@1319));
    @premise know(*x0@1319, #t0@1320);
    @conclusion know(*[Nb@1314], #t0@1315);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*[Nb@697], #t1@699);
    @premise know(*skA(), #t2@700);
    @premise new(*[Nb@697], newB(), tuple4(skA(), skB(), #tb@696, Na@698));
    @conclusion accept(skA(), skB(), #tb@696, [Nb@697], Na@698);
};
Rule in cache: 5
Rule staged: 100
Rule before check and clean: 
@rule{
    @premise know(*sk@1366, #t1@1367);
    @premise new(*[Nb@1364], newB(), tuple4(sk@1366, skB(), #tb@1368, x0@1369));
    @premise know(*x0@1369, #t0@1370);
    @premise know(*skA(), #t2@1371);
    @premise new(*[Nb@1364], newB(), tuple4(skA(), skB(), #tb@1363, Na@1365));
    @conclusion accept(skA(), skB(), #tb@1363, [Nb@1364], Na@1365);
};
Rule cached at priority 1: 
@rule{
    @premise know(*skA(), #t1@1367);
    @premise new(*[Nb@1364], newB(), tuple4(skA(), skB(), #tb@1368, x0@1369));
    @premise know(*x0@1369, #t0@1370);
    @conclusion accept(skA(), skB(), #tb@1368, [Nb@1364], x0@1369);
};

Stage rule: 
@rule{
    @premise know(*sk@1321, #t1@1323);
    @premise new(*[Nb@1324], newB(), tuple4(sk@1321, skB(), #tb@1325, x0@1326));
    @premise know(*x0@1326, #t0@1327);
    @conclusion know(*pk(sk@1321), #t1@1322);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};
Rule in cache: 5
Rule staged: 101
Rule before check and clean: 
@rule{
    @premise know(*sk@1373, #t1@1375);
    @premise new(*[Nb@1376], newB(), tuple4(sk@1373, skB(), #tb@1377, x0@1378));
    @premise know(*x0@1378, #t0@1379);
    @premise know(*m@1372, #t1@1380);
    @conclusion know(*aenc(m@1372, pk(sk@1373)), #t@1374);
    @constraint -#t1@1380 + #t@1374 >= 0;
    @constraint #t@1374 - #t1@1322 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1373, #t1@1375);
    @premise new(*[Nb@1376], newB(), tuple4(sk@1373, skB(), #tb@1377, x0@1378));
    @premise know(*x0@1378, #t0@1379);
    @premise know(*m@1372, #t1@1380);
    @conclusion know(*aenc(m@1372, pk(sk@1373)), #t@1374);
    @constraint -#t1@1380 + #t@1374 >= 0;
};

Stage rule: 
@rule{
    @premise know(*sk@1335, #t1@1337);
    @premise new(*[Nb@1338], newB(), tuple4(sk@1335, skB(), #tb@1339, x0@1340));
    @premise know(*x0@1340, #t0@1341);
    @conclusion know(*X(skB(), pk(sk@1335)), #t3@1336);
};
Rule added.

Stage rule: 
@rule{
    @premise know(*sk@1342, #t1@1344);
    @premise new(*[Nb@1345], newB(), tuple4(sk@1342, skB(), #tb@1346, x0@1347));
    @premise know(*x0@1347, #t0@1348);
    @conclusion know(*aenc(Y(skB(), pk(sk@1342)), pk(sk@1342)), #t4@1343);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 4
Rule staged: 103
Rule before check and clean: 
@rule{
    @premise know(*sk@1381, #t1@1383);
    @premise new(*[Nb@1384], newB(), tuple4(sk@1381, skB(), #tb@1385, x0@1386));
    @premise know(*x0@1386, #t0@1387);
    @premise know(*sk@1381, #t1@1388);
    @conclusion know(*Y(skB(), pk(sk@1381)), #t@1382);
    @constraint -#t1@1388 + #t@1382 >= 0;
    @constraint #t@1382 - #t4@1343 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise know(*sk@1381, #t1@1383);
    @premise new(*[Nb@1384], newB(), tuple4(sk@1381, skB(), #tb@1385, x0@1386));
    @premise know(*x0@1386, #t0@1387);
    @conclusion know(*Y(skB(), pk(sk@1381)), #t@1382);
    @constraint #t@1382 - #t1@1383 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Na@1352], newA(), tuple3(skA(), skR@1349, #ta@1353));
    @premise init(*skA(), *skR@1349, *#ta@1353, *x0@1350, *[Na@1352]);
    @premise know(*skR@1349, #t1@1354);
    @premise know(*x0@1350, #t0@1355);
    @conclusion know(*tuple2(pk(skR@1349), x0@1350), #t@1351);
};
Rule added.

Compose to at 0 : 
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};
Rule in cache: 4
Rule staged: 104
Rule before check and clean: 
@rule{
    @premise new(*[Na@1391], newA(), tuple3(skA(), skR@1389, #ta@1392));
    @premise init(*skA(), *skR@1389, *#ta@1392, *x0@1393, *[Na@1391]);
    @premise know(*skR@1389, #t1@1394);
    @premise know(*x0@1393, #t0@1395);
    @conclusion know(*pk(skR@1389), #t0@1390);
    @constraint #t0@1390 - #t@1351 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1391], newA(), tuple3(skA(), skR@1389, #ta@1392));
    @premise init(*skA(), *skR@1389, *#ta@1392, *x0@1393, *[Na@1391]);
    @premise know(*skR@1389, #t1@1394);
    @premise know(*x0@1393, #t0@1395);
    @conclusion know(*pk(skR@1389), #t0@1390);
};

Compose to at 0 : 
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};
Rule in cache: 5
Rule staged: 104
Rule before check and clean: 
@rule{
    @premise new(*[Na@1398], newA(), tuple3(skA(), skR@1399, #ta@1400));
    @premise init(*skA(), *skR@1399, *#ta@1400, *x0@1396, *[Na@1398]);
    @premise know(*skR@1399, #t1@1401);
    @premise know(*x0@1396, #t0@1402);
    @conclusion know(*x0@1396, #t1@1397);
    @constraint #t1@1397 - #t@1351 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise new(*[Nb@1357], newB(), tuple4(skA(), skB(), #tb@1356, Na@1358));
    @premise new(*[Na@1359], newA(), tuple3(skA(), skB(), #ta@1360));
    @premise init(*skA(), *skB(), *#ta@1360, *[Nb@1357], *[Na@1359]);
    @premise know(*skB(), #t1@1361);
    @premise know(*[Nb@1357], #t0@1362);
    @conclusion accept(skA(), skB(), #tb@1356, [Nb@1357], Na@1358);
};
Rule added at 3.

Stage rule: 
@rule{
    @premise know(*skA(), #t1@1367);
    @premise new(*[Nb@1364], newB(), tuple4(skA(), skB(), #tb@1368, x0@1369));
    @premise know(*x0@1369, #t0@1370);
    @conclusion accept(skA(), skB(), #tb@1368, [Nb@1364], x0@1369);
};
Rule added at 0.

Stage rule: 
@rule{
    @premise know(*sk@1373, #t1@1375);
    @premise new(*[Nb@1376], newB(), tuple4(sk@1373, skB(), #tb@1377, x0@1378));
    @premise know(*x0@1378, #t0@1379);
    @premise know(*m@1372, #t1@1380);
    @conclusion know(*aenc(m@1372, pk(sk@1373)), #t@1374);
    @constraint -#t1@1380 + #t@1374 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 2
Rule staged: 107
Rule before check and clean: 
@rule{
    @premise know(*sk@1405, #t1@1406);
    @premise new(*[Nb@1407], newB(), tuple4(sk@1405, skB(), #tb@1408, x0@1409));
    @premise know(*x0@1409, #t0@1410);
    @premise know(*m@1403, #t1@1411);
    @premise know(*sk@1405, #t1@1412);
    @conclusion know(*m@1403, #t@1404);
    @constraint -#t1@1412 + #t@1404 >= 0;
    @constraint -#t1@1411 + #t@1374 >= 0;
    @constraint #t@1404 - #t@1374 >= 0;
};
Rule invalid. 

Stage rule: 
@rule{
    @premise know(*sk@1381, #t1@1383);
    @premise new(*[Nb@1384], newB(), tuple4(sk@1381, skB(), #tb@1385, x0@1386));
    @premise know(*x0@1386, #t0@1387);
    @conclusion know(*Y(skB(), pk(sk@1381)), #t@1382);
    @constraint #t@1382 - #t1@1383 >= 0;
};
Rule added.

Stage rule: 
@rule{
    @premise new(*[Na@1391], newA(), tuple3(skA(), skR@1389, #ta@1392));
    @premise init(*skA(), *skR@1389, *#ta@1392, *x0@1393, *[Na@1391]);
    @premise know(*skR@1389, #t1@1394);
    @premise know(*x0@1393, #t0@1395);
    @conclusion know(*pk(skR@1389), #t0@1390);
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};
Rule in cache: 0
Rule staged: 109
Rule before check and clean: 
@rule{
    @premise new(*[Na@1416], newA(), tuple3(skA(), skR@1414, #ta@1417));
    @premise init(*skA(), *skR@1414, *#ta@1417, *x0@1418, *[Na@1416]);
    @premise know(*skR@1414, #t1@1419);
    @premise know(*x0@1418, #t0@1420);
    @premise know(*m@1413, #t1@1421);
    @conclusion know(*aenc(m@1413, pk(skR@1414)), #t@1415);
    @constraint -#t1@1421 + #t@1415 >= 0;
    @constraint #t@1415 - #t0@1390 >= 0;
};
Rule cached at priority 1: 
@rule{
    @premise new(*[Na@1416], newA(), tuple3(skA(), skR@1414, #ta@1417));
    @premise init(*skA(), *skR@1414, *#ta@1417, *x0@1418, *[Na@1416]);
    @premise know(*skR@1414, #t1@1419);
    @premise know(*x0@1418, #t0@1420);
    @premise know(*m@1413, #t1@1421);
    @conclusion know(*aenc(m@1413, pk(skR@1414)), #t@1415);
    @constraint -#t1@1421 + #t@1415 >= 0;
};

Stage rule: 
@rule{
    @premise new(*[Na@1416], newA(), tuple3(skA(), skR@1414, #ta@1417));
    @premise init(*skA(), *skR@1414, *#ta@1417, *x0@1418, *[Na@1416]);
    @premise know(*skR@1414, #t1@1419);
    @premise know(*x0@1418, #t0@1420);
    @premise know(*m@1413, #t1@1421);
    @conclusion know(*aenc(m@1413, pk(skR@1414)), #t@1415);
    @constraint -#t1@1421 + #t@1415 >= 0;
};
Rule added.

Compose to at 1 : 
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};
Rule in cache: 0
Rule staged: 110
Rule before check and clean: 
@rule{
    @premise new(*[Na@1424], newA(), tuple3(skA(), skR@1425, #ta@1426));
    @premise init(*skA(), *skR@1425, *#ta@1426, *x0@1427, *[Na@1424]);
    @premise know(*skR@1425, #t1@1428);
    @premise know(*x0@1427, #t0@1429);
    @premise know(*m@1422, #t1@1430);
    @premise know(*skR@1425, #t1@1431);
    @conclusion know(*m@1422, #t@1423);
    @constraint -#t1@1431 + #t@1423 >= 0;
    @constraint -#t1@1430 + #t@1415 >= 0;
    @constraint #t@1423 - #t@1415 >= 0;
};
Rule invalid. 

Details:
General Rules: 
Rule No. [0.0]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@11, #t0@12);
    @premise know(*x1@13, #t1@14);
    @conclusion know(*tuple2(x0@11, x1@13), #t@15);
    @constraint -#t0@12 + #t@15 >= 0;
    @constraint #t@15 - #t1@14 >= 0;
};

Rule No. [0.1]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple2(x0@16, x1@17), #t@18);
    @conclusion know(*x0@16, #t0@19);
    @constraint -#t@18 + #t0@19 >= 0;
};

Rule No. [0.2]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple2(x0@20, x1@21), #t@22);
    @conclusion know(*x1@21, #t1@23);
    @constraint -#t@22 + #t1@23 >= 0;
};

Rule No. [0.3]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@25, #t0@26);
    @premise know(*x1@27, #t1@28);
    @premise know(*x2@29, #t2@30);
    @conclusion know(*tuple3(x0@25, x1@27, x2@29), #t@31);
    @constraint -#t0@26 + #t@31 >= 0;
    @constraint #t@31 - #t1@28 >= 0;
    @constraint #t@31 - #t2@30 >= 0;
};

Rule No. [0.4]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple3(x0@32, x1@33, x2@34), #t@35);
    @conclusion know(*x0@32, #t0@36);
    @constraint -#t@35 + #t0@36 >= 0;
};

Rule No. [0.5]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple3(x0@37, x1@38, x2@39), #t@40);
    @conclusion know(*x1@38, #t1@41);
    @constraint -#t@40 + #t1@41 >= 0;
};

Rule No. [0.6]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple3(x0@42, x1@43, x2@44), #t@45);
    @conclusion know(*x2@44, #t2@46);
    @constraint -#t@45 + #t2@46 >= 0;
};

Rule No. [0.7]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@48, #t0@49);
    @premise know(*x1@50, #t1@51);
    @premise know(*x2@52, #t2@53);
    @premise know(*x3@54, #t3@55);
    @conclusion know(*tuple4(x0@48, x1@50, x2@52, x3@54), #t@56);
    @constraint -#t0@49 + #t@56 >= 0;
    @constraint #t@56 - #t1@51 >= 0;
    @constraint #t@56 - #t2@53 >= 0;
    @constraint #t@56 - #t3@55 >= 0;
};

Rule No. [0.8]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple4(x0@57, x1@58, x2@59, x3@60), #t@61);
    @conclusion know(*x0@57, #t0@62);
    @constraint -#t@61 + #t0@62 >= 0;
};

Rule No. [0.9]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple4(x0@63, x1@64, x2@65, x3@66), #t@67);
    @conclusion know(*x1@64, #t1@68);
    @constraint -#t@67 + #t1@68 >= 0;
};

Rule No. [0.10]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple4(x0@69, x1@70, x2@71, x3@72), #t@73);
    @conclusion know(*x2@71, #t2@74);
    @constraint -#t@73 + #t2@74 >= 0;
};

Rule No. [0.11]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple4(x0@75, x1@76, x2@77, x3@78), #t@79);
    @conclusion know(*x3@78, #t3@80);
    @constraint -#t@79 + #t3@80 >= 0;
};

Rule No. [0.12]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@82, #t0@83);
    @premise know(*x1@84, #t1@85);
    @premise know(*x2@86, #t2@87);
    @premise know(*x3@88, #t3@89);
    @premise know(*x4@90, #t4@91);
    @conclusion know(*tuple5(x0@82, x1@84, x2@86, x3@88, x4@90), #t@92);
    @constraint -#t0@83 + #t@92 >= 0;
    @constraint #t@92 - #t1@85 >= 0;
    @constraint #t@92 - #t2@87 >= 0;
    @constraint #t@92 - #t3@89 >= 0;
    @constraint #t@92 - #t4@91 >= 0;
};

Rule No. [0.13]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple5(x0@93, x1@94, x2@95, x3@96, x4@97), #t@98);
    @conclusion know(*x0@93, #t0@99);
    @constraint -#t@98 + #t0@99 >= 0;
};

Rule No. [0.14]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple5(x0@100, x1@101, x2@102, x3@103, x4@104), #t@105);
    @conclusion know(*x1@101, #t1@106);
    @constraint -#t@105 + #t1@106 >= 0;
};

Rule No. [0.15]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple5(x0@107, x1@108, x2@109, x3@110, x4@111), #t@112);
    @conclusion know(*x2@109, #t2@113);
    @constraint -#t@112 + #t2@113 >= 0;
};

Rule No. [0.16]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple5(x0@114, x1@115, x2@116, x3@117, x4@118), #t@119);
    @conclusion know(*x3@117, #t3@120);
    @constraint -#t@119 + #t3@120 >= 0;
};

Rule No. [0.17]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple5(x0@121, x1@122, x2@123, x3@124, x4@125), #t@126);
    @conclusion know(*x4@125, #t4@127);
    @constraint -#t@126 + #t4@127 >= 0;
};

Rule No. [0.18]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*x0@129, #t0@130);
    @premise know(*x1@131, #t1@132);
    @premise know(*x2@133, #t2@134);
    @premise know(*x3@135, #t3@136);
    @premise know(*x4@137, #t4@138);
    @premise know(*x5@139, #t5@140);
    @conclusion know(*tuple6(x0@129, x1@131, x2@133, x3@135, x4@137, x5@139), #t@141);
    @constraint -#t0@130 + #t@141 >= 0;
    @constraint #t@141 - #t1@132 >= 0;
    @constraint #t@141 - #t2@134 >= 0;
    @constraint #t@141 - #t3@136 >= 0;
    @constraint #t@141 - #t4@138 >= 0;
    @constraint #t@141 - #t5@140 >= 0;
};

Rule No. [0.19]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple6(x0@142, x1@143, x2@144, x3@145, x4@146, x5@147), #t@148);
    @conclusion know(*x0@142, #t0@149);
    @constraint -#t@148 + #t0@149 >= 0;
};

Rule No. [0.20]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple6(x0@150, x1@151, x2@152, x3@153, x4@154, x5@155), #t@156);
    @conclusion know(*x1@151, #t1@157);
    @constraint -#t@156 + #t1@157 >= 0;
};

Rule No. [0.21]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple6(x0@158, x1@159, x2@160, x3@161, x4@162, x5@163), #t@164);
    @conclusion know(*x2@160, #t2@165);
    @constraint -#t@164 + #t2@165 >= 0;
};

Rule No. [0.22]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple6(x0@166, x1@167, x2@168, x3@169, x4@170, x5@171), #t@172);
    @conclusion know(*x3@169, #t3@173);
    @constraint -#t@172 + #t3@173 >= 0;
};

Rule No. [0.23]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple6(x0@174, x1@175, x2@176, x3@177, x4@178, x5@179), #t@180);
    @conclusion know(*x4@178, #t4@181);
    @constraint -#t@180 + #t4@181 >= 0;
};

Rule No. [0.24]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*tuple6(x0@182, x1@183, x2@184, x3@185, x4@186, x5@187), #t@188);
    @conclusion know(*x5@187, #t5@189);
    @constraint -#t@188 + #t5@189 >= 0;
};

Rule No. [1.0]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*m@191, #t1@192);
    @conclusion know(*hash(m@191), #t@193);
    @constraint -#t1@192 + #t@193 >= 0;
};

Rule No. [1.1]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*sk@195, #t1@196);
    @conclusion know(*pk(sk@195), #t@197);
    @constraint -#t1@196 + #t@197 >= 0;
};

Rule No. [1.2]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*m@199, #t1@200);
    @premise know(*sk@201, #t2@202);
    @conclusion know(*sign(m@199, sk@201), #t@203);
    @constraint -#t1@200 + #t@203 >= 0;
    @constraint #t@203 - #t2@202 >= 0;
};

Rule No. [1.3]
Valid Rule
Intial Rule
Selectable at 0:
@rule{
    @premise know(*sign(m@204, sk@205), #t1@206);
    @conclusion know(*m@204, #t@207);
    @constraint -#t1@206 + #t@207 >= 0;
};

Rule No. [1.4]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise know(*m@209, #t1@210);
    @premise know(*pk(sk@211), #t2@212);
    @conclusion know(*aenc(m@209, pk(sk@211)), #t@213);
    @constraint -#t1@210 + #t@213 >= 0;
    @constraint #t@213 - #t2@212 >= 0;
};

Rule No. [1.5]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise know(*sk@214, #t1@215);
    @premise know(*aenc(m@216, pk(sk@214)), #t2@217);
    @conclusion know(*m@216, #t@218);
    @constraint -#t1@215 + #t@218 >= 0;
    @constraint #t@218 - #t2@217 >= 0;
};

Rule No. [1.6]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @conclusion know(*A(), #t@221);
};

Rule No. [1.7]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @conclusion know(*B(), #t@222);
};

Rule No. [1.8]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @conclusion know(*pk(skA()), #t@225);
};

Rule No. [1.9]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @conclusion know(*pk(skB()), #t@226);
};

Rule No. [1.10]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*sk@228, #t1@229);
    @premise know(*pk@230, #t2@231);
    @conclusion know(*X(sk@228, pk@230), #t@232);
    @constraint -#t1@229 + #t@232 >= 0;
    @constraint #t@232 - #t2@231 >= 0;
};

Rule No. [1.11]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise know(*sk@234, #t1@235);
    @premise know(*pk@236, #t2@237);
    @conclusion know(*Y(sk@234, pk@236), #t@238);
    @constraint -#t1@235 + #t@238 >= 0;
    @constraint #t@238 - #t2@237 >= 0;
};

Rule No. [1.12]
Valid Rule
Intial Rule
Not Selectable : 
@rule{
    @premise new(*[Na@240], newA(), tuple3(skA(), skR@241, #ta@242));
    @conclusion know(*sign(tuple4([Na@240], pk(skR@241), X(skA(), pk(skR@241)), aenc(Y(skA(), pk(skR@241)), pk(skR@241))), skA()), #ta@242);
};

Rule No. [1.13]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise new(*[Nb@244], newB(), tuple4(skI@245, skB(), #tb@246, Na@247));
    @premise know(*sign(tuple4(Na@247, pk(skB()), X(skI@245, pk(skB())), aenc(Y(skI@245, pk(skB())), pk(skB()))), skI@245), #t1@248);
    @conclusion know(*sign(tuple5([Nb@244], pk(skI@245), Na@247, X(skB(), pk(skI@245)), aenc(Y(skB(), pk(skI@245)), pk(skI@245))), skB()), #t@249);
};

Rule No. [1.14]
Valid Rule
Intial Rule
Selectable at 2:
@rule{
    @premise new(*[Na@250], newA(), tuple3(skA(), skR@251, #ta@252));
    @premise init(*skA(), *skR@251, *#ta@252, *Nb@253, *[Na@250]);
    @premise know(*sign(tuple5(Nb@253, pk(skA()), [Na@250], X(skR@251, pk(skA())), aenc(Y(skR@251, pk(skA())), pk(skA()))), skR@251), #t1@254);
    @conclusion know(*sign(tuple2(pk(skR@251), Nb@253), skA()), #t@255);
};

Rule No. [1.15]
Valid Rule
Intial Rule
Selectable at 1:
@rule{
    @premise new(*[Nb@256], newB(), tuple4(skA(), skB(), #tb@257, Na@258));
    @premise know(*sign(tuple2(pk(skB()), [Nb@256]), skA()), #t1@259);
    @conclusion accept(skA(), skB(), #tb@257, [Nb@256], Na@258);
};

Rule No. [1.16]
Valid Rule
Composed by Rule [1.1] and [1.4]
Not Selectable : 
@rule{
    @premise know(*sk@472, #t1@474);
    @premise know(*m@471, #t1@475);
    @conclusion know(*aenc(m@471, pk(sk@472)), #t@473);
    @constraint -#t1@475 + #t@473 >= 0;
    @constraint #t@473 - #t1@474 >= 0;
};

Rule No. [1.17]
Valid Rule
Composed by Rule [1.8] and [1.4]
Not Selectable : 
@rule{
    @premise know(*m@476, #t1@478);
    @conclusion know(*aenc(m@476, pk(skA())), #t@477);
    @constraint -#t1@478 + #t@477 >= 0;
};

Rule No. [1.18]
Valid Rule
Composed by Rule [1.9] and [1.4]
Not Selectable : 
@rule{
    @premise know(*m@479, #t1@481);
    @conclusion know(*aenc(m@479, pk(skB())), #t@480);
    @constraint -#t1@481 + #t@480 >= 0;
};

Rule No. [1.19]
Valid Rule
Composed by Rule [1.12] and [1.3]
Not Selectable : 
@rule{
    @premise new(*[Na@482], newA(), tuple3(skA(), skR@483, #ta@485));
    @conclusion know(*tuple4([Na@482], pk(skR@483), X(skA(), pk(skR@483)), aenc(Y(skA(), pk(skR@483)), pk(skR@483))), #t@484);
    @constraint -#ta@485 + #t@484 >= 0;
};

Rule No. [1.20]
Valid Rule
Composed by Rule [1.2] and [1.13]
Selectable at 0:
@rule{
    @premise know(*tuple4(Na@488, pk(skB()), X(sk@487, pk(skB())), aenc(Y(sk@487, pk(skB())), pk(skB()))), #t1@490);
    @premise know(*sk@487, #t2@491);
    @premise new(*[Nb@486], newB(), tuple4(sk@487, skB(), #tb@492, Na@488));
    @conclusion know(*sign(tuple5([Nb@486], pk(sk@487), Na@488, X(skB(), pk(sk@487)), aenc(Y(skB(), pk(sk@487)), pk(sk@487))), skB()), #t@489);
};

Rule No. [1.21]
Valid Rule
Composed by Rule [1.12] and [1.13]
Not Selectable : 
@rule{
    @premise new(*[Na@494], newA(), tuple3(skA(), skB(), #ta@496));
    @premise new(*[Nb@493], newB(), tuple4(skA(), skB(), #tb@497, [Na@494]));
    @conclusion know(*sign(tuple5([Nb@493], pk(skA()), [Na@494], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@495);
};

Rule No. [1.22]
Valid Rule
Composed by Rule [1.2] and [1.14]
Selectable at 0:
@rule{
    @premise know(*tuple5(Nb@499, pk(skA()), [Na@501], X(sk@498, pk(skA())), aenc(Y(sk@498, pk(skA())), pk(skA()))), #t1@502);
    @premise know(*sk@498, #t2@503);
    @premise new(*[Na@501], newA(), tuple3(skA(), sk@498, #ta@504));
    @premise init(*skA(), *sk@498, *#ta@504, *Nb@499, *[Na@501]);
    @conclusion know(*sign(tuple2(pk(sk@498), Nb@499), skA()), #t@500);
};

Rule No. [1.23]
Valid Rule
Composed by Rule [1.2] and [1.15]
Selectable at 0:
@rule{
    @premise know(*tuple2(pk(skB()), [Nb@506]), #t1@508);
    @premise know(*skA(), #t2@509);
    @premise new(*[Nb@506], newB(), tuple4(skA(), skB(), #tb@505, Na@507));
    @conclusion accept(skA(), skB(), #tb@505, [Nb@506], Na@507);
};

Rule No. [1.24]
Valid Rule
Composed by Rule [1.19] and [0.8]
Not Selectable : 
@rule{
    @premise new(*[Na@524], newA(), tuple3(skA(), skR@526, #ta@527));
    @conclusion know(*[Na@524], #t0@525);
    @constraint #t0@525 - #ta@527 >= 0;
};

Rule No. [1.25]
Valid Rule
Composed by Rule [1.19] and [0.9]
Not Selectable : 
@rule{
    @premise new(*[Na@530], newA(), tuple3(skA(), skR@528, #ta@531));
    @conclusion know(*pk(skR@528), #t1@529);
    @constraint #t1@529 - #ta@531 >= 0;
};

Rule No. [1.26]
Valid Rule
Composed by Rule [1.19] and [0.10]
Not Selectable : 
@rule{
    @premise new(*[Na@534], newA(), tuple3(skA(), skR@532, #ta@535));
    @conclusion know(*X(skA(), pk(skR@532)), #t2@533);
    @constraint #t2@533 - #ta@535 >= 0;
};

Rule No. [1.27]
Valid Rule
Composed by Rule [1.19] and [0.11]
Not Selectable : 
@rule{
    @premise new(*[Na@538], newA(), tuple3(skA(), skR@536, #ta@539));
    @conclusion know(*aenc(Y(skA(), pk(skR@536)), pk(skR@536)), #t3@537);
    @constraint #t3@537 - #ta@539 >= 0;
};

Rule No. [1.28]
Replaced by Rule [1.50]
Composed by Rule [0.7] and [1.20]
Selectable at 0:
@rule{
    @premise know(*aenc(Y(sk@541, pk(skB())), pk(skB())), #t3@547);
    @premise new(*[Nb@540], newB(), tuple4(sk@541, skB(), #tb@549, x0@542));
    @premise know(*X(sk@541, pk(skB())), #t2@546);
    @premise know(*pk(skB()), #t1@545);
    @premise know(*x0@542, #t0@544);
    @premise know(*sk@541, #t2@548);
    @conclusion know(*sign(tuple5([Nb@540], pk(sk@541), x0@542, X(skB(), pk(sk@541)), aenc(Y(skB(), pk(sk@541)), pk(sk@541))), skB()), #t@543);
};

Rule No. [1.29]
Valid Rule
Composed by Rule [1.21] and [1.3]
Not Selectable : 
@rule{
    @premise new(*[Na@551], newA(), tuple3(skA(), skB(), #ta@553));
    @premise new(*[Nb@550], newB(), tuple4(skA(), skB(), #tb@554, [Na@551]));
    @conclusion know(*tuple5([Nb@550], pk(skA()), [Na@551], X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), #t@552);
};

Rule No. [1.30]
Valid Rule
Composed by Rule [1.21] and [1.14]
Not Selectable : 
@rule{
    @premise new(*[Na@557], newA(), tuple3(skA(), skB(), #ta@558));
    @premise new(*[Nb@555], newB(), tuple4(skA(), skB(), #tb@559, [Na@557]));
    @premise init(*skA(), *skB(), *#ta@558, *[Nb@555], *[Na@557]);
    @conclusion know(*sign(tuple2(pk(skB()), [Nb@555]), skA()), #t@556);
};

Rule No. [1.31]
Replaced by Rule [1.55]
Composed by Rule [0.12] and [1.22]
Selectable at 0:
@rule{
    @premise know(*aenc(Y(sk@561, pk(skA())), pk(skA())), #t4@569);
    @premise new(*[Na@566], newA(), tuple3(skA(), sk@561, #ta@571));
    @premise know(*X(sk@561, pk(skA())), #t3@568);
    @premise know(*pk(skA()), #t1@565);
    @premise init(*skA(), *sk@561, *#ta@571, *x0@562, *[Na@566]);
    @premise know(*[Na@566], #t2@567);
    @premise know(*sk@561, #t2@570);
    @premise know(*x0@562, #t0@564);
    @conclusion know(*sign(tuple2(pk(sk@561), x0@562), skA()), #t@563);
};

Rule No. [1.32]
Replaced by Rule [1.48]
Composed by Rule [0.0] and [1.23]
Selectable at 0:
@rule{
    @premise know(*pk(skB()), #t0@575);
    @premise know(*[Nb@573], #t1@576);
    @premise know(*skA(), #t2@577);
    @premise new(*[Nb@573], newB(), tuple4(skA(), skB(), #tb@572, Na@574));
    @conclusion accept(skA(), skB(), #tb@572, [Nb@573], Na@574);
};

Rule No. [1.33]
Valid Rule
Composed by Rule [1.25] and [1.4]
Not Selectable : 
@rule{
    @premise new(*[Na@581], newA(), tuple3(skA(), skR@579, #ta@582));
    @premise know(*m@578, #t1@583);
    @conclusion know(*aenc(m@578, pk(skR@579)), #t@580);
    @constraint #t@580 - #ta@582 >= 0;
    @constraint -#t1@583 + #t@580 >= 0;
};

Rule No. [1.34]
Valid Rule
Composed by Rule [1.27] and [1.5]
Not Selectable : 
@rule{
    @premise new(*[Na@586], newA(), tuple3(skA(), skR@584, #ta@587));
    @premise know(*skR@584, #t1@588);
    @conclusion know(*Y(skA(), pk(skR@584)), #t@585);
    @constraint #t@585 - #ta@587 >= 0;
    @constraint -#t1@588 + #t@585 >= 0;
};

Rule No. [1.35]
Replaced by Rule [1.36]
Composed by Rule [1.16] and [1.28]
Selectable at 1:
@rule{
    @premise new(*[Nb@589], newB(), tuple4(sk@590, skB(), #tb@595, x0@591));
    @premise know(*X(sk@590, pk(skB())), #t2@596);
    @premise know(*Y(sk@590, pk(skB())), #t1@594);
    @premise know(*pk(skB()), #t1@597);
    @premise know(*skB(), #t1@593);
    @premise know(*x0@591, #t0@598);
    @premise know(*sk@590, #t2@599);
    @conclusion know(*sign(tuple5([Nb@589], pk(sk@590), x0@591, X(skB(), pk(sk@590)), aenc(Y(skB(), pk(sk@590)), pk(sk@590))), skB()), #t@592);
};

Rule No. [1.36]
Replaced by Rule [1.50]
Composed by Rule [1.18] and [1.28]
Selectable at 1:
@rule{
    @premise new(*[Nb@600], newB(), tuple4(sk@601, skB(), #tb@605, x0@602));
    @premise know(*Y(sk@601, pk(skB())), #t1@604);
    @premise know(*X(sk@601, pk(skB())), #t2@606);
    @premise know(*pk(skB()), #t1@607);
    @premise know(*x0@602, #t0@608);
    @premise know(*sk@601, #t2@609);
    @conclusion know(*sign(tuple5([Nb@600], pk(sk@601), x0@602, X(skB(), pk(sk@601)), aenc(Y(skB(), pk(sk@601)), pk(sk@601))), skB()), #t@603);
};

Rule No. [1.37]
Replaced by Rule [1.50]
Composed by Rule [1.27] and [1.28]
Selectable at 2:
@rule{
    @premise new(*[Nb@610], newB(), tuple4(skA(), skB(), #tb@615, x0@611));
    @premise new(*[Na@613], newA(), tuple3(skA(), skB(), #ta@614));
    @premise know(*X(skA(), pk(skB())), #t2@616);
    @premise know(*pk(skB()), #t1@617);
    @premise know(*skA(), #t2@619);
    @premise know(*x0@611, #t0@618);
    @conclusion know(*sign(tuple5([Nb@610], pk(skA()), x0@611, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@612);
};

Rule No. [1.38]
Valid Rule
Composed by Rule [1.29] and [0.13]
Not Selectable : 
@rule{
    @premise new(*[Na@622], newA(), tuple3(skA(), skB(), #ta@623));
    @premise new(*[Nb@620], newB(), tuple4(skA(), skB(), #tb@624, [Na@622]));
    @conclusion know(*[Nb@620], #t0@621);
};

Rule No. [1.39]
Valid Rule
Composed by Rule [1.29] and [0.15]
Not Selectable : 
@rule{
    @premise new(*[Na@630], newA(), tuple3(skA(), skB(), #ta@632));
    @premise new(*[Nb@633], newB(), tuple4(skA(), skB(), #tb@634, [Na@630]));
    @conclusion know(*[Na@630], #t2@631);
};

Rule No. [1.40]
Valid Rule
Composed by Rule [1.29] and [0.16]
Not Selectable : 
@rule{
    @premise new(*[Na@636], newA(), tuple3(skA(), skB(), #ta@637));
    @premise new(*[Nb@638], newB(), tuple4(skA(), skB(), #tb@639, [Na@636]));
    @conclusion know(*X(skB(), pk(skA())), #t3@635);
};

Rule No. [1.41]
Valid Rule
Composed by Rule [1.29] and [0.17]
Not Selectable : 
@rule{
    @premise new(*[Na@641], newA(), tuple3(skA(), skB(), #ta@642));
    @premise new(*[Nb@643], newB(), tuple4(skA(), skB(), #tb@644, [Na@641]));
    @conclusion know(*aenc(Y(skB(), pk(skA())), pk(skA())), #t4@640);
};

Rule No. [1.42]
Valid Rule
Composed by Rule [1.30] and [1.3]
Not Selectable : 
@rule{
    @premise new(*[Na@647], newA(), tuple3(skA(), skB(), #ta@648));
    @premise new(*[Nb@645], newB(), tuple4(skA(), skB(), #tb@649, [Na@647]));
    @premise init(*skA(), *skB(), *#ta@648, *[Nb@645], *[Na@647]);
    @conclusion know(*tuple2(pk(skB()), [Nb@645]), #t@646);
};

Rule No. [1.44]
Replaced by Rule [1.45]
Composed by Rule [1.16] and [1.31]
Selectable at 1:
@rule{
    @premise new(*[Na@661], newA(), tuple3(skA(), sk@656, #ta@662));
    @premise know(*Y(sk@656, pk(skA())), #t1@660);
    @premise know(*X(sk@656, pk(skA())), #t3@663);
    @premise know(*pk(skA()), #t1@664);
    @premise init(*skA(), *sk@656, *#ta@662, *x0@657, *[Na@661]);
    @premise know(*skA(), #t1@659);
    @premise know(*[Na@661], #t2@665);
    @premise know(*sk@656, #t2@666);
    @premise know(*x0@657, #t0@667);
    @conclusion know(*sign(tuple2(pk(sk@656), x0@657), skA()), #t@658);
};

Rule No. [1.45]
Replaced by Rule [1.55]
Composed by Rule [1.17] and [1.31]
Selectable at 1:
@rule{
    @premise new(*[Na@672], newA(), tuple3(skA(), sk@668, #ta@673));
    @premise know(*Y(sk@668, pk(skA())), #t1@671);
    @premise know(*X(sk@668, pk(skA())), #t3@674);
    @premise know(*pk(skA()), #t1@675);
    @premise init(*skA(), *sk@668, *#ta@673, *x0@669, *[Na@672]);
    @premise know(*[Na@672], #t2@676);
    @premise know(*sk@668, #t2@677);
    @premise know(*x0@669, #t0@678);
    @conclusion know(*sign(tuple2(pk(sk@668), x0@669), skA()), #t@670);
};

Rule No. [1.46]
Replaced by Rule [1.54]
Composed by Rule [1.27] and [1.31]
Selectable at 2:
@rule{
    @premise new(*[Na@681], newA(), tuple3(skA(), skA(), #ta@682));
    @premise new(*[Na@683], newA(), tuple3(skA(), skA(), #ta@684));
    @premise know(*X(skA(), pk(skA())), #t3@685);
    @premise init(*skA(), *skA(), *#ta@684, *x0@679, *[Na@683]);
    @premise know(*pk(skA()), #t1@686);
    @premise know(*skA(), #t2@688);
    @premise know(*[Na@683], #t2@687);
    @premise know(*x0@679, #t0@689);
    @conclusion know(*sign(tuple2(pk(skA()), x0@679), skA()), #t@680);
};

Rule No. [1.47]
Replaced by Rule [1.48]
Composed by Rule [1.1] and [1.32]
Selectable at 0:
@rule{
    @premise know(*skB(), #t1@693);
    @premise know(*[Nb@691], #t1@694);
    @premise know(*skA(), #t2@695);
    @premise new(*[Nb@691], newB(), tuple4(skA(), skB(), #tb@690, Na@692));
    @conclusion accept(skA(), skB(), #tb@690, [Nb@691], Na@692);
};

Rule No. [1.48]
Valid Rule
Composed by Rule [1.9] and [1.32]
Selectable at 0:
@rule{
    @premise know(*[Nb@697], #t1@699);
    @premise know(*skA(), #t2@700);
    @premise new(*[Nb@697], newB(), tuple4(skA(), skB(), #tb@696, Na@698));
    @conclusion accept(skA(), skB(), #tb@696, [Nb@697], Na@698);
};

Rule No. [1.49]
Replaced by Rule [1.58]
Composed by Rule [1.10] and [1.35]
Selectable at 1:
@rule{
    @premise new(*[Nb@740], newB(), tuple4(sk@741, skB(), #tb@746, x0@742));
    @premise know(*Y(sk@741, pk(skB())), #t1@747);
    @premise know(*pk(skB()), #t2@745);
    @premise know(*skB(), #t1@749);
    @premise know(*sk@741, #t1@744);
    @premise know(*x0@742, #t0@750);
    @conclusion know(*sign(tuple5([Nb@740], pk(sk@741), x0@742, X(skB(), pk(sk@741)), aenc(Y(skB(), pk(sk@741)), pk(sk@741))), skB()), #t@743);
};

Rule No. [1.50]
Replaced by Rule [1.59]
Composed by Rule [1.11] and [1.36]
Selectable at 1:
@rule{
    @premise new(*[Nb@763], newB(), tuple4(sk@764, skB(), #tb@769, x0@765));
    @premise know(*X(sk@764, pk(skB())), #t2@770);
    @premise know(*pk(skB()), #t2@768);
    @premise know(*sk@764, #t1@767);
    @premise know(*x0@765, #t0@772);
    @conclusion know(*sign(tuple5([Nb@763], pk(sk@764), x0@765, X(skB(), pk(sk@764)), aenc(Y(skB(), pk(sk@764)), pk(sk@764))), skB()), #t@766);
};

Rule No. [1.51]
Replaced by Rule [1.59]
Composed by Rule [1.10] and [1.37]
Selectable at 2:
@rule{
    @premise new(*[Nb@785], newB(), tuple4(skA(), skB(), #tb@790, x0@786));
    @premise new(*[Na@791], newA(), tuple3(skA(), skB(), #ta@792));
    @premise know(*pk(skB()), #t2@789);
    @premise know(*skA(), #t1@788);
    @premise know(*x0@786, #t0@795);
    @conclusion know(*sign(tuple5([Nb@785], pk(skA()), x0@786, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@787);
};

Rule No. [1.52]
Valid Rule
Composed by Rule [1.41] and [1.5]
Selectable at 2:
@rule{
    @premise new(*[Na@808], newA(), tuple3(skA(), skB(), #ta@809));
    @premise new(*[Nb@810], newB(), tuple4(skA(), skB(), #tb@811, [Na@808]));
    @premise know(*skA(), #t1@812);
    @conclusion know(*Y(skB(), pk(skA())), #t@807);
    @constraint -#t1@812 + #t@807 >= 0;
};

Rule No. [1.53]
Replaced by Rule [1.55]
Composed by Rule [1.41] and [1.31]
Selectable at 3:
@rule{
    @premise new(*[Nb@817], newB(), tuple4(skA(), skB(), #tb@818, [Na@815]));
    @premise new(*[Na@815], newA(), tuple3(skA(), skB(), #ta@816));
    @premise new(*[Na@819], newA(), tuple3(skA(), skB(), #ta@820));
    @premise know(*X(skB(), pk(skA())), #t3@821);
    @premise init(*skA(), *skB(), *#ta@820, *x0@813, *[Na@819]);
    @premise know(*pk(skA()), #t1@822);
    @premise know(*skB(), #t2@824);
    @premise know(*[Na@819], #t2@823);
    @premise know(*x0@813, #t0@825);
    @conclusion know(*sign(tuple2(pk(skB()), x0@813), skA()), #t@814);
};

Rule No. [1.54]
Replaced by Rule [1.55]
Composed by Rule [1.11] and [1.44]
Selectable at 1:
@rule{
    @premise new(*[Na@841], newA(), tuple3(skA(), sk@836, #ta@842));
    @premise know(*X(sk@836, pk(skA())), #t3@843);
    @premise know(*pk(skA()), #t2@840);
    @premise init(*skA(), *sk@836, *#ta@842, *x0@837, *[Na@841]);
    @premise know(*skA(), #t1@845);
    @premise know(*[Na@841], #t2@846);
    @premise know(*sk@836, #t1@839);
    @premise know(*x0@837, #t0@848);
    @conclusion know(*sign(tuple2(pk(sk@836), x0@837), skA()), #t@838);
};

Rule No. [1.55]
Replaced by Rule [1.64]
Composed by Rule [1.11] and [1.45]
Selectable at 1:
@rule{
    @premise new(*[Na@867], newA(), tuple3(skA(), sk@862, #ta@868));
    @premise know(*X(sk@862, pk(skA())), #t3@869);
    @premise know(*pk(skA()), #t2@866);
    @premise init(*skA(), *sk@862, *#ta@868, *x0@863, *[Na@867]);
    @premise know(*[Na@867], #t2@871);
    @premise know(*sk@862, #t1@865);
    @premise know(*x0@863, #t0@873);
    @conclusion know(*sign(tuple2(pk(sk@862), x0@863), skA()), #t@864);
};

Rule No. [1.56]
Replaced by Rule [1.63]
Composed by Rule [1.10] and [1.46]
Selectable at 3:
@rule{
    @premise new(*[Na@892], newA(), tuple3(skA(), skA(), #ta@893));
    @premise new(*[Na@890], newA(), tuple3(skA(), skA(), #ta@891));
    @premise init(*skA(), *skA(), *#ta@893, *x0@886, *[Na@892]);
    @premise know(*pk(skA()), #t2@889);
    @premise know(*skA(), #t1@888);
    @premise know(*[Na@892], #t2@896);
    @premise know(*x0@886, #t0@897);
    @conclusion know(*sign(tuple2(pk(skA()), x0@886), skA()), #t@887);
};

Rule No. [1.57]
Valid Rule
Composed by Rule [1.38] and [1.48]
Selectable at 2:
@rule{
    @premise new(*[Na@919], newA(), tuple3(skA(), skB(), #ta@920));
    @premise new(*[Nb@917], newB(), tuple4(skA(), skB(), #tb@921, [Na@919]));
    @premise know(*skA(), #t2@922);
    @conclusion accept(skA(), skB(), #tb@921, [Nb@917], [Na@919]);
};

Rule No. [1.58]
Replaced by Rule [1.59]
Composed by Rule [1.11] and [1.49]
Selectable at 1:
@rule{
    @premise new(*[Nb@930], newB(), tuple4(sk@931, skB(), #tb@936, x0@932));
    @premise know(*pk(skB()), #t2@935);
    @premise know(*skB(), #t1@938);
    @premise know(*sk@931, #t1@934);
    @premise know(*x0@932, #t0@940);
    @conclusion know(*sign(tuple5([Nb@930], pk(sk@931), x0@932, X(skB(), pk(sk@931)), aenc(Y(skB(), pk(sk@931)), pk(sk@931))), skB()), #t@933);
};

Rule No. [1.59]
Replaced by Rule [1.67]
Composed by Rule [1.10] and [1.50]
Selectable at 1:
@rule{
    @premise know(*sk@953, #t1@956);
    @premise know(*pk(skB()), #t2@957);
    @premise new(*[Nb@952], newB(), tuple4(sk@953, skB(), #tb@958, x0@954));
    @premise know(*x0@954, #t0@961);
    @conclusion know(*sign(tuple5([Nb@952], pk(sk@953), x0@954, X(skB(), pk(sk@953)), aenc(Y(skB(), pk(sk@953)), pk(sk@953))), skB()), #t@955);
};

Rule No. [1.60]
Replaced by Rule [1.61]
Composed by Rule [1.1] and [1.51]
Selectable at 2:
@rule{
    @premise new(*[Nb@971], newB(), tuple4(skA(), skB(), #tb@975, x0@972));
    @premise new(*[Na@976], newA(), tuple3(skA(), skB(), #ta@977));
    @premise know(*skB(), #t1@974);
    @premise know(*skA(), #t1@978);
    @premise know(*x0@972, #t0@979);
    @conclusion know(*sign(tuple5([Nb@971], pk(skA()), x0@972, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@973);
};

Rule No. [1.61]
Replaced by Rule [1.67]
Composed by Rule [1.9] and [1.51]
Selectable at 2:
@rule{
    @premise new(*[Nb@980], newB(), tuple4(skA(), skB(), #tb@983, x0@981));
    @premise new(*[Na@984], newA(), tuple3(skA(), skB(), #ta@985));
    @premise know(*skA(), #t1@986);
    @premise know(*x0@981, #t0@987);
    @conclusion know(*sign(tuple5([Nb@980], pk(skA()), x0@981, X(skB(), pk(skA())), aenc(Y(skB(), pk(skA())), pk(skA()))), skB()), #t@982);
};

Rule No. [1.62]
Replaced by Rule [1.64]
Composed by Rule [1.10] and [1.53]
Selectable at 4:
@rule{
    @premise new(*[Nb@1002], newB(), tuple4(skA(), skB(), #tb@1003, [Na@1004]));
    @premise new(*[Na@1006], newA(), tuple3(skA(), skB(), #ta@1007));
    @premise new(*[Na@1004], newA(), tuple3(skA(), skB(), #ta@1005));
    @premise init(*skA(), *skB(), *#ta@1007, *x0@998, *[Na@1006]);
    @premise know(*pk(skA()), #t2@1001);
    @premise know(*skB(), #t1@1000);
    @premise know(*[Na@1006], #t2@1010);
    @premise know(*x0@998, #t0@1011);
    @conclusion know(*sign(tuple2(pk(skB()), x0@998), skA()), #t@999);
};

Rule No. [1.63]
Replaced by Rule [1.64]
Composed by Rule [1.10] and [1.54]
Selectable at 1:
@rule{
    @premise new(*[Na@1033], newA(), tuple3(skA(), sk@1028, #ta@1034));
    @premise know(*pk(skA()), #t2@1032);
    @premise init(*skA(), *sk@1028, *#ta@1034, *x0@1029, *[Na@1033]);
    @premise know(*skA(), #t1@1036);
    @premise know(*[Na@1033], #t2@1037);
    @premise know(*sk@1028, #t1@1031);
    @premise know(*x0@1029, #t0@1039);
    @conclusion know(*sign(tuple2(pk(sk@1028), x0@1029), skA()), #t@1030);
};

Rule No. [1.64]
Replaced by Rule [1.71]
Composed by Rule [1.10] and [1.55]
Selectable at 1:
@rule{
    @premise new(*[Na@1069], newA(), tuple3(skA(), sk@1064, #ta@1070));
    @premise know(*pk(skA()), #t2@1068);
    @premise init(*skA(), *sk@1064, *#ta@1070, *x0@1065, *[Na@1069]);
    @premise know(*[Na@1069], #t2@1072);
    @premise know(*sk@1064, #t1@1067);
    @premise know(*x0@1065, #t0@1074);
    @conclusion know(*sign(tuple2(pk(sk@1064), x0@1065), skA()), #t@1066);
};

Rule No. [1.65]
Replaced by Rule [1.70]
Composed by Rule [1.1] and [1.56]
Selectable at 3:
@rule{
    @premise new(*[Na@1100], newA(), tuple3(skA(), skA(), #ta@1101));
    @premise new(*[Na@1102], newA(), tuple3(skA(), skA(), #ta@1103));
    @premise init(*skA(), *skA(), *#ta@1101, *x0@1097, *[Na@1100]);
    @premise know(*skA(), #t1@1099);
    @premise know(*[Na@1100], #t2@1105);
    @premise know(*x0@1097, #t0@1106);
    @conclusion know(*sign(tuple2(pk(skA()), x0@1097), skA()), #t@1098);
};

Rule No. [1.66]
Replaced by Rule [1.67]
Composed by Rule [1.1] and [1.58]
Selectable at 0:
@rule{
    @premise know(*skB(), #t1@1131);
    @premise new(*[Nb@1127], newB(), tuple4(sk@1128, skB(), #tb@1132, x0@1129));
    @premise know(*sk@1128, #t1@1134);
    @premise know(*x0@1129, #t0@1135);
    @conclusion know(*sign(tuple5([Nb@1127], pk(sk@1128), x0@1129, X(skB(), pk(sk@1128)), aenc(Y(skB(), pk(sk@1128)), pk(sk@1128))), skB()), #t@1130);
};

Rule No. [1.67]
Valid Rule
Composed by Rule [1.9] and [1.59]
Not Selectable : 
@rule{
    @premise know(*sk@1163, #t1@1166);
    @premise new(*[Nb@1162], newB(), tuple4(sk@1163, skB(), #tb@1167, x0@1164));
    @premise know(*x0@1164, #t0@1168);
    @conclusion know(*sign(tuple5([Nb@1162], pk(sk@1163), x0@1164, X(skB(), pk(sk@1163)), aenc(Y(skB(), pk(sk@1163)), pk(sk@1163))), skB()), #t@1165);
};

Rule No. [1.68]
Replaced by Rule [1.69]
Composed by Rule [1.1] and [1.62]
Selectable at 4:
@rule{
    @premise new(*[Nb@1181], newB(), tuple4(skA(), skB(), #tb@1182, [Na@1183]));
    @premise new(*[Na@1184], newA(), tuple3(skA(), skB(), #ta@1185));
    @premise new(*[Na@1183], newA(), tuple3(skA(), skB(), #ta@1186));
    @premise init(*skA(), *skB(), *#ta@1185, *x0@1178, *[Na@1184]);
    @premise know(*skA(), #t1@1180);
    @premise know(*skB(), #t1@1187);
    @premise know(*[Na@1184], #t2@1188);
    @premise know(*x0@1178, #t0@1189);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1178), skA()), #t@1179);
};

Rule No. [1.69]
Replaced by Rule [1.71]
Composed by Rule [1.8] and [1.62]
Selectable at 4:
@rule{
    @premise new(*[Nb@1192], newB(), tuple4(skA(), skB(), #tb@1193, [Na@1194]));
    @premise new(*[Na@1195], newA(), tuple3(skA(), skB(), #ta@1196));
    @premise new(*[Na@1194], newA(), tuple3(skA(), skB(), #ta@1197));
    @premise init(*skA(), *skB(), *#ta@1196, *x0@1190, *[Na@1195]);
    @premise know(*skB(), #t1@1198);
    @premise know(*[Na@1195], #t2@1199);
    @premise know(*x0@1190, #t0@1200);
    @conclusion know(*sign(tuple2(pk(skB()), x0@1190), skA()), #t@1191);
};

Rule No. [1.70]
Replaced by Rule [1.71]
Composed by Rule [1.1] and [1.63]
Selectable at 2:
@rule{
    @premise new(*[Na@1218], newA(), tuple3(skA(), sk@1214, #ta@1219));
    @premise init(*skA(), *sk@1214, *#ta@1219, *x0@1215, *[Na@1218]);
    @premise know(*skA(), #t1@1217);
    @premise know(*[Na@1218], #t2@1221);
    @premise know(*sk@1214, #t1@1222);
    @premise know(*x0@1215, #t0@1223);
    @conclusion know(*sign(tuple2(pk(sk@1214), x0@1215), skA()), #t@1216);
};

Rule No. [1.71]
Replaced by Rule [1.73]
Composed by Rule [1.8] and [1.64]
Selectable at 2:
@rule{
    @premise new(*[Na@1256], newA(), tuple3(skA(), sk@1253, #ta@1257));
    @premise init(*skA(), *sk@1253, *#ta@1257, *x0@1254, *[Na@1256]);
    @premise know(*[Na@1256], #t2@1258);
    @premise know(*sk@1253, #t1@1259);
    @premise know(*x0@1254, #t0@1260);
    @conclusion know(*sign(tuple2(pk(sk@1253), x0@1254), skA()), #t@1255);
};

Rule No. [1.72]
Valid Rule
Composed by Rule [1.67] and [1.3]
Not Selectable : 
@rule{
    @premise know(*sk@1272, #t1@1275);
    @premise new(*[Nb@1271], newB(), tuple4(sk@1272, skB(), #tb@1276, x0@1273));
    @premise know(*x0@1273, #t0@1277);
    @conclusion know(*tuple5([Nb@1271], pk(sk@1272), x0@1273, X(skB(), pk(sk@1272)), aenc(Y(skB(), pk(sk@1272)), pk(sk@1272))), #t@1274);
};

Rule No. [1.73]
Valid Rule
Composed by Rule [1.24] and [1.71]
Not Selectable : 
@rule{
    @premise new(*[Na@1288], newA(), tuple3(skA(), skR@1289, #ta@1290));
    @premise init(*skA(), *skR@1289, *#ta@1290, *x0@1286, *[Na@1288]);
    @premise know(*skR@1289, #t1@1292);
    @premise know(*x0@1286, #t0@1293);
    @conclusion know(*sign(tuple2(pk(skR@1289), x0@1286), skA()), #t@1287);
};

Rule No. [1.74]
Valid Rule
Composed by Rule [1.72] and [0.13]
Not Selectable : 
@rule{
    @premise know(*sk@1316, #t1@1317);
    @premise new(*[Nb@1314], newB(), tuple4(sk@1316, skB(), #tb@1318, x0@1319));
    @premise know(*x0@1319, #t0@1320);
    @conclusion know(*[Nb@1314], #t0@1315);
};

Rule No. [1.75]
Valid Rule
Composed by Rule [1.72] and [0.14]
Not Selectable : 
@rule{
    @premise know(*sk@1321, #t1@1323);
    @premise new(*[Nb@1324], newB(), tuple4(sk@1321, skB(), #tb@1325, x0@1326));
    @premise know(*x0@1326, #t0@1327);
    @conclusion know(*pk(sk@1321), #t1@1322);
};

Rule No. [1.76]
Valid Rule
Composed by Rule [1.72] and [0.16]
Not Selectable : 
@rule{
    @premise know(*sk@1335, #t1@1337);
    @premise new(*[Nb@1338], newB(), tuple4(sk@1335, skB(), #tb@1339, x0@1340));
    @premise know(*x0@1340, #t0@1341);
    @conclusion know(*X(skB(), pk(sk@1335)), #t3@1336);
};

Rule No. [1.77]
Valid Rule
Composed by Rule [1.72] and [0.17]
Not Selectable : 
@rule{
    @premise know(*sk@1342, #t1@1344);
    @premise new(*[Nb@1345], newB(), tuple4(sk@1342, skB(), #tb@1346, x0@1347));
    @premise know(*x0@1347, #t0@1348);
    @conclusion know(*aenc(Y(skB(), pk(sk@1342)), pk(sk@1342)), #t4@1343);
};

Rule No. [1.78]
Valid Rule
Composed by Rule [1.73] and [1.3]
Not Selectable : 
@rule{
    @premise new(*[Na@1352], newA(), tuple3(skA(), skR@1349, #ta@1353));
    @premise init(*skA(), *skR@1349, *#ta@1353, *x0@1350, *[Na@1352]);
    @premise know(*skR@1349, #t1@1354);
    @premise know(*x0@1350, #t0@1355);
    @conclusion know(*tuple2(pk(skR@1349), x0@1350), #t@1351);
};

Rule No. [1.79]
Valid Rule
Composed by Rule [1.73] and [1.15]
Selectable at 3:
@rule{
    @premise new(*[Nb@1357], newB(), tuple4(skA(), skB(), #tb@1356, Na@1358));
    @premise new(*[Na@1359], newA(), tuple3(skA(), skB(), #ta@1360));
    @premise init(*skA(), *skB(), *#ta@1360, *[Nb@1357], *[Na@1359]);
    @premise know(*skB(), #t1@1361);
    @premise know(*[Nb@1357], #t0@1362);
    @conclusion accept(skA(), skB(), #tb@1356, [Nb@1357], Na@1358);
};

Rule No. [1.80]
Valid Rule
Composed by Rule [1.74] and [1.48]
Selectable at 0:
@rule{
    @premise know(*skA(), #t1@1367);
    @premise new(*[Nb@1364], newB(), tuple4(skA(), skB(), #tb@1368, x0@1369));
    @premise know(*x0@1369, #t0@1370);
    @conclusion accept(skA(), skB(), #tb@1368, [Nb@1364], x0@1369);
};

Rule No. [1.81]
Valid Rule
Composed by Rule [1.75] and [1.4]
Not Selectable : 
@rule{
    @premise know(*sk@1373, #t1@1375);
    @premise new(*[Nb@1376], newB(), tuple4(sk@1373, skB(), #tb@1377, x0@1378));
    @premise know(*x0@1378, #t0@1379);
    @premise know(*m@1372, #t1@1380);
    @conclusion know(*aenc(m@1372, pk(sk@1373)), #t@1374);
    @constraint -#t1@1380 + #t@1374 >= 0;
};

Rule No. [1.82]
Valid Rule
Composed by Rule [1.77] and [1.5]
Not Selectable : 
@rule{
    @premise know(*sk@1381, #t1@1383);
    @premise new(*[Nb@1384], newB(), tuple4(sk@1381, skB(), #tb@1385, x0@1386));
    @premise know(*x0@1386, #t0@1387);
    @conclusion know(*Y(skB(), pk(sk@1381)), #t@1382);
    @constraint #t@1382 - #t1@1383 >= 0;
};

Rule No. [1.83]
Valid Rule
Composed by Rule [1.78] and [0.1]
Not Selectable : 
@rule{
    @premise new(*[Na@1391], newA(), tuple3(skA(), skR@1389, #ta@1392));
    @premise init(*skA(), *skR@1389, *#ta@1392, *x0@1393, *[Na@1391]);
    @premise know(*skR@1389, #t1@1394);
    @premise know(*x0@1393, #t0@1395);
    @conclusion know(*pk(skR@1389), #t0@1390);
};

Rule No. [1.84]
Valid Rule
Composed by Rule [1.83] and [1.4]
Not Selectable : 
@rule{
    @premise new(*[Na@1416], newA(), tuple3(skA(), skR@1414, #ta@1417));
    @premise init(*skA(), *skR@1414, *#ta@1417, *x0@1418, *[Na@1416]);
    @premise know(*skR@1414, #t1@1419);
    @premise know(*x0@1418, #t0@1420);
    @premise know(*m@1413, #t1@1421);
    @conclusion know(*aenc(m@1413, pk(skR@1414)), #t@1415);
    @constraint -#t1@1421 + #t@1415 >= 0;
};


Final Rules: 
Rule No. [1.43]
Valid Rule
Composed by Rule [1.30] and [1.15]
@rule{
    @premise new(*[Na@653], newA(), tuple3(skA(), skB(), #ta@654));
    @premise new(*[Nb@651], newB(), tuple4(skA(), skB(), #tb@655, [Na@653]));
    @premise init(*skA(), *skB(), *#ta@654, *[Nb@651], *[Na@653]);
    @conclusion accept(skA(), skB(), #tb@655, [Nb@651], [Na@653]);
};
with parameter relation:
[@universe]


0. Requested parameter relation:
[@universe]


Overall generated rule count : 175
Basis size : 110
Verification time: 172

Proved as secure.

