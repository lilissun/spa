@declare @event new(*, -, -);
@provide @event new @removable @false;

@declare @event initA(*, *, *, *);
@provide @event initA @removable @false;

@declare @event initS(*, *, *, *);
@provide @event initS @removable @false;

@declare @event accept(*, *, *, *);
@provide @event accept @removable @false;

@declare @event leak(*);
@provide @event leak @removable @false;

@declare @event know(*, -);
@provide @event know(mx, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @function tuple2/2;
@rule {
    @premise know(x0, #t0);
    @premise know(x1, #t1);
    @conclusion know(tuple2(x0, x1), #t);
    @constraint #t0 - #t <= 0;
    @constraint #t1 - #t <= 0;
};
@rule {
    @premise know(tuple2(x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t - #t0 <= 0;
};
@rule {
    @premise know(tuple2(x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t - #t1 <= 0;
};

@declare @function tuple3/3;
@rule {
    @premise know(x0, #t0);
    @premise know(x1, #t1);
    @premise know(x2, #t2);
    @conclusion know(tuple3(x0, x1, x2), #t);
    @constraint #t0 - #t <= 0;
    @constraint #t1 - #t <= 0;
    @constraint #t2 - #t <= 0;
};
@rule {
    @premise know(tuple3(x0, x1, x2), #t);
    @conclusion know(x0, #t0);
    @constraint #t - #t0 <= 0;
};
@rule {
    @premise know(tuple3(x0, x1, x2), #t);
    @conclusion know(x1, #t1);
    @constraint #t - #t1 <= 0;
};
@rule {
    @premise know(tuple3(x0, x1, x2), #t);
    @conclusion know(x2, #t2);
    @constraint #t - #t2 <= 0;
};

@declare @function tuple4/4;
@rule {
    @premise know(x0, #t0);
    @premise know(x1, #t1);
    @premise know(x2, #t2);
    @premise know(x3, #t3);
    @conclusion know(tuple4(x0, x1, x2, x3), #t);
    @constraint #t0 - #t <= 0;
    @constraint #t1 - #t <= 0;
    @constraint #t2 - #t <= 0;
    @constraint #t3 - #t <= 0;
};
@rule {
    @premise know(tuple4(x0, x1, x2, x3), #t);
    @conclusion know(x0, #t0);
    @constraint #t - #t0 <= 0;
};
@rule {
    @premise know(tuple4(x0, x1, x2, x3), #t);
    @conclusion know(x1, #t1);
    @constraint #t - #t1 <= 0;
};
@rule {
    @premise know(tuple4(x0, x1, x2, x3), #t);
    @conclusion know(x2, #t2);
    @constraint #t - #t2 <= 0;
};
@rule {
    @premise know(tuple4(x0, x1, x2, x3), #t);
    @conclusion know(x3, #t3);
    @constraint #t - #t3 <= 0;
};

@set @priority_barrier;

@declare @string A[];
@declare @string B[];

@rule {
    @conclusion know(A[], #t);
};
@rule {
    @conclusion know(B[], #t);
};

@declare @function sk/1;
@rule {
    @guard c != A[];
    @guard c != B[];
    @premise know(c, #t1);
    @conclusion know(sk(c), #t);
    @constraint #t1 - #t <= 0;
};

@declare @function senc/2;
@rule {
    @premise know(m, #t1);
    @premise know(k, #t2);
    @conclusion know(senc(m, k), #t);
    @constraint #t1 - #t <= 0;
    @constraint #t2 - #t <= 0;
};
@rule {
    @premise know(senc(m, k), #t1);
    @premise know(k, #t2);
    @conclusion know(m, #t);
    @constraint #t1 - #t <= 0;
    @constraint #t2 - #t <= 0;
};

@declare @parameter $pd;
@declare @parameter $pa;

@set @constraint $pd > 0;

@declare @string gen[];
@declare @string m1[];
@declare @string m2[];

@rule {
    @conclusion know(A[], #t);
};
@rule {
    @conclusion know(B[], #t);
};

@rule {
    @premise know(tuple2(R, #tA), #t);
    @premise new([k], gen[],tuple3(A[], R, #tA));
    @premise initA(A[], R, [k], #tA);
    @conclusion know(tuple2(A[], senc(tuple4(#tA, R, [k], m1[]), sk(A[]))), #tA);
    @constraint #t - #tA <= 0;
};

@rule {
    @premise know(#tS, #t1);
    @premise know(tuple2(I, senc(tuple4(#tI, R, k, m1[]), sk(I))), #t2);
    @premise initS(I, R, k, #tS);
    @conclusion know(senc(tuple4(#tS, I, k, m2[]), sk(R)), #tS);
    @constraint #tS - #t1 >= $pd;
    @constraint #tS - #t2 >= $pd;
    @constraint #tS - #tI <= $pa;
};

@rule {
    @premise know(senc(tuple4(#tS, A[], k, m2[]), sk(B[])), #t);
    @conclusion accept(A[], B[], k, #tB);
    @constraint #tB - #t >= $pd;
    @constraint #tB - #tS <= $pa;
};

@rule {
    @premise new([k], gen[], tuple3(A[], B[], #tA));
    @premise know([k], #t);
    @conclusion leak([k]);
};

@authentication {
    @conclusion accept(I, R, k, #tB);
    @premise initA(I, R, k, #tA);
    @constraint #tB - #tA <= 2 * $pa;
};

@secrecy {
    @conclusion leak(m);
};

