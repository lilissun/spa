@set @index 160;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event accept(1, 3);
@provide @event accept @removable @false;

@declare @event init(1, 3);
@provide @event init @removable @false;

@declare @event join(2, 2);
@provide @event join @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @conclusion know((x0, x1, x2), #t);
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @conclusion know((x0, x1, x2, x3), #t);
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @premise know(x4, #t4);
    @constraint #t4 - #t <= 0;
    @premise know(x5, #t5);
    @constraint #t5 - #t <= 0;
    @conclusion know((x0, x1, x2, x3, x4, x5), #t);
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x4, #t4);
    @constraint #t4 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x5, #t5);
    @constraint #t5 - #t >= 0;
};

@set @barrier;

@declare @string l0[];
@declare @string l1[];

@declare @string A[];
@declare @string B[];
@declare @string m1[];
@declare @string m2[];

@declare @parameter $pn;
@declare @parameter $pm;
@set @constraint $pn > 0;

@declare @function key/1;
@declare @function senc/2;

@rule {
    @premise know((senc(m@157, k@158), k@158), #t);
    @conclusion know(m@157, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((m@159, k@160), #t);
    @conclusion know(senc(m@159, k@160), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @guard u@123 != A[];
    @guard u@123 != B[];
    @premise know(u@123, #t@124);
    @conclusion know(key(u@123), #t@125);
    @constraint -$pn - #t@17 + #t@125 >= 0;
    @constraint -#t@7 + #t@17 > 0;
    @constraint #t@17 - #t@124 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(B[], #t@126);
    @premise new([k@127], l0[]);
    @premise unique([k@127], l0[], {B[], [k@127], #ta@128});
    @premise know(#ta@128, #ta@128);
    @premise init([k@127], (A[], B[], [k@127]), #ta@128);
    @conclusion know((A[], senc((#ta@128, B[], [k@127], m1[]), key(A[]))), #t@130);
    @constraint -$pn - #ta@128 + #t@130 >= 0;
    @constraint -#t@7 + #t@32 > 0;
    @constraint -#t@32 + #ta@128 > 0;
    @constraint #t@32 - #t@126 > 0;
    @constraint $pn > 0;
};

@rule{
    @guard r@131 != B[];
    @premise know(r@131, #t@132);
    @premise new([k@133], l0[]);
    @premise unique([k@133], l0[], {r@131, [k@133], #ta@134});
    @premise know(#ta@134, #ta@134);
    @premise init([k@133], (A[], r@131, [k@133]), #ta@134);
    @premise open([k@133]);
    @conclusion know((A[], senc((#ta@134, r@131, [k@133], m1[]), key(A[]))), #t@136);
    @constraint -$pn - #ta@134 + #t@136 >= 0;
    @constraint -#t@7 + #t@32 > 0;
    @constraint -#t@32 + #ta@134 > 0;
    @constraint #t@32 - #t@132 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(r@137, #t@138);
    @premise new([k@139], l0[]);
    @premise unique([k@139], l0[], {r@137, [k@139], [k@139]});
    @premise know([k@139], #t@141);
    @conclusion leak([k@139]);
    @constraint -#t@7 + #t@32 > 0;
    @constraint -#t@32 + #t@53 > 0;
    @constraint #t@53 - #t@141 > 0;
    @constraint #t@32 - #t@138 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know((u@142, senc((#ti@143, u@144, k@145, m1[]), key(u@142))), #t@146);
    @premise know(#ts@147, #ts@147);
    @premise join((u@142, u@144, k@145), #ts@147);
    @conclusion know(senc((#ts@147, u@142, k@145, m2[]), key(u@144)), #t@148);
    @constraint -$pn - #ts@147 + #t@148 >= 0;
    @constraint -#t@7 + #t@66 > 0;
    @constraint -#t@66 + #ts@147 > 0;
    @constraint -#ts@147 + $pm + #ti@143 >= 0;
    @constraint #t@66 - #t@146 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(senc((#ts@149, A[], k@150, m2[]), key(B[])), #t@151);
    @premise know(#tb@152, #tb@152);
    @premise new([n@153], l1[]);
    @premise unique([n@153], l1[], {senc((#ts@149, A[], k@150, m2[]), key(B[])), #tb@152, [n@153]});
    @conclusion accept([n@153], (A[], B[], k@150), #tb@152);
    @constraint -#t@7 + #t@91 > 0;
    @constraint -#t@91 + #tb@152 > 0;
    @constraint -#tb@152 + $pm + #ts@149 >= 0;
    @constraint #t@91 - #t@151 > 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(A[], #t@155);
    @constraint -$pn - #t@7 + #t@155 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(B[], #t@156);
    @constraint -$pn - #t@7 + #t@156 >= 0;
    @constraint -$pn - #t@7 + #t@113 >= 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @injective init(v@121, (i@115, r@116, k@117), #ti@118);
    @premise join((i@115, r@116, k@117), #ts@119);
    @conclusion accept(v@122, (i@115, r@116, k@117), #tr@120);
    @constraint $pm + #ts@119 - #tr@120 >= 0;
    @constraint $pm + #ti@118 - #ts@119 >= 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
