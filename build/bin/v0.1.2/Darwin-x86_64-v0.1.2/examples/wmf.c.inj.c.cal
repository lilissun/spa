@function (@variable m, @variable k) senc(m, k);
@function (@variable m, @variable k) sdec(senc(m, k), k) -> m;
@private @function (@variable u) key(u);

@string A;
@string B;
@string m1;
@string m2;

@parameter pm;

@init init;
@join join;
@accept accept;

@process Pr() {
    @receive @variable u;
    @if (u != A) @then 
    @if (u != B) @then 
    @send key(u);
}

@process Pa() {
    @receive @variable r;
    @new @nonce k;
    @secrecy k;
    @read @timestamp ta;
    @engage init(A, r, k)@ta;
    @if (r == B) {
        @send (A, senc((ta, r, k, m1), key(A)));
    } @else {
        @open k;
        @send (A, senc((ta, r, k, m1), key(A)));
    }
}

@process Ps() {
    @receive (@variable i, @variable x);
    @read @timestamp ts;
    @let (@timestamp ti, @variable r, @variable k, == m1) = sdec(x, key(i)) @then
    @if (ts - ti <= pm) @then
    @engage join(i, r, k)@ts;
    @send senc((ts, i, k, m2), key(r));
}

@string database;

@process Pb() {
    @receive @variable x;
    @read @timestamp tb;
    @let (@timestamp ts, @variable i, @variable k, == m2) = sdec(x, key(B)) @then
    @unique k @in database;
    @if (i == A) @then
    @if (tb - ts <= pm) @then
    @engage accept(i, B, k)@tb;
}

@process Pp() {
    @send A;
    @send B;
}

@system {
    @parallel { 
        !{ @invoke Pr(); } | 
        !{ @invoke Pa(); } | 
        !{ @invoke Ps(); } | 
        !{ @invoke Pb(); } | 
        !{ @invoke Pp(); } 
    }
}

@correspondence (@variable i, @variable r, @variable k, @timestamp ti, @timestamp ts, @timestamp tr) {
    @enforced;
    @event init(i, r, k)@ti;
    @event join(i, r, k)@ts;
    @event accept(i, r, k)@tr;
    @constraint ts - ti <= pm;
    @constraint tr - ts <= pm;
}