@set @index 96;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event accept(1, 3);
@provide @event accept @removable @false;

@declare @event init(1, 3);
@provide @event init @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @conclusion know((x0, x1, x2, x3), #t);
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@set @barrier;

@declare @string l0[];

@declare @string SK[];
@declare @string agree[];

@declare @parameter $pn;
@declare @parameter $threshold;
@set @constraint $pn > 0;

@declare @function aenc/2;
@declare @function pk/1;
@declare @function sign/2;

@rule {
    @premise know((aenc(mess@83, pk(skey@84)), skey@84), #t);
    @conclusion know(mess@83, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@87, pkey@88), #t);
    @conclusion know(aenc(mess@87, pkey@88), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@89, skey@90), pk(skey@90)), #t);
    @conclusion know(mess@89, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@91, skey@92)), #t);
    @conclusion know(mess@91, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((skey@94), #t);
    @conclusion know(pk(skey@94), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@95, skey@96), #t);
    @conclusion know(sign(mess@95, skey@96), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @premise know(pkI@66, #t@67);
    @premise know(#t1@68, #t1@68);
    @premise new([n@69], l0[]);
    @premise unique([n@69], l0[], {pkI@66, #t1@68, [n@69]});
    @premise init([n@69], (pkI@66, [n@69]), #t1@68);
    @conclusion know([n@69], #t@71);
    @constraint -$pn - #t1@68 + #t@71 >= 0;
    @constraint -#t@5 + #t@67 > 0;
    @constraint -#t@67 + #t1@68 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(pk(SK[]), #t@72);
    @premise know(#t1@73, #t1@73);
    @premise new([n@74], l0[]);
    @premise unique([n@74], l0[], {pk(SK[]), #t1@73, [n@74], sign(([n@74], agree[]), SK[]), #t2@75});
    @premise init([n@74], (pk(SK[]), [n@74]), #t1@73);
    @premise know(sign(([n@74], agree[]), SK[]), #t@77);
    @premise know(#t2@75, #t2@75);
    @conclusion accept([n@74], (pk(SK[]), [n@74]), #t2@75);
    @constraint -$pn - #t1@73 + #t@27 >= 0;
    @constraint -#t@5 + #t@72 > 0;
    @constraint -#t@72 + #t1@73 > 0;
    @constraint -#t1@73 + #t@77 > 0;
    @constraint -#t@77 + #t2@75 > 0;
    @constraint #t1@73 - #t2@75 + $threshold > 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SK[]), #t@78);
    @constraint -$pn - #t@5 + #t@78 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(n@79, #t@80);
    @conclusion know(sign((n@79, agree[]), SK[]), #t@81);
    @constraint -$pn - #t@5 + #t@45 >= 0;
    @constraint -$pn - #t@80 + #t@81 >= 0;
    @constraint -#t@5 + #t@80 > 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SK[]), #t@82);
    @constraint -$pn - #t@5 + #t@82 >= 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @injective init(v@64, (pkI@60, n@61), #t1@62);
    @conclusion accept(v@65, (pkI@60, n@61), #t2@63);
    @constraint $threshold + #t1@62 - #t2@63 > 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
