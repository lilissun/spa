@decl @event init(-, -, *, -) @group e;
@decl @event accept(-, -, -, -) @group e;
@decl @event k(*, -) @group k;

@decl @func senc/2;
@decl @func tuple4/4;
@decl @func key/1;

@nosel init;
@nosel accept;

@provide k(mx, #t);
@provide k(#c, #t);
@provide k(#t, #t);

@rule k(m, #t1), k(k, #t2) -> k(senc(m, k), #t) : #t1 - #t <= 0, #t2 - #t <= 0;
@rule k(k, #t1), k(senc(m, k), #t2) -> k(m, #t) : #t1 - #t <= 0, #t2 - #t <= 0;

@rule k(x, #t1), k(y, #t2), k(z, #t3), k(k, #t4) -> k(tuple4(x, y, z, k), #t) : #t1 - #t <= 0, #t2 - #t <= 0, #t3 - #t <= 0, #t4 - #t <= 0;
@rule k(tuple4(x, y, z, k), #t1) -> k(x, #t) : #t1 - #t <= 0;
@rule k(tuple4(x, y, z, k), #t1) -> k(y, #t) : #t1 - #t <= 0;
@rule k(tuple4(x, y, z, k), #t1) -> k(z, #t) : #t1 - #t <= 0;
@rule k(tuple4(x, y, z, k), #t1) -> k(k, #t) : #t1 - #t <= 0;

@rule k(senc(tuple4(#tI, R, k, m1[]), key(I)), #t1), k(R, #t2) -> k(senc(tuple4(#tS, I, k, m2[]), key(R)), #tS)
: #tS - #tI <= 2, #tS - #tI >= 0, #t1 - #tS <= 0, #t2 - #tS <= 0;

@rule k(A[], #t);
@rule k(B[], #t);

@rule init(A[], R, [k], #tA) -> k(senc(tuple4(#tA, R, [k], m1[]), key(A[])), #tA);
@rule k(senc(tuple4(#tS, I, k, m4[]), key(B[])), #t) -> accept(I, B[], k, #tB) : #tB - #tS <= 2, #t - #tB <= 0;

@query accept(I, R, k, #tB) <- init(I, R, k, #tA) : #tB - #tA <= 4;
