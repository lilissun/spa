@set @index 177;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event alice(1, 3);
@provide @event alice @removable @false;

@declare @event bob(1, 3);
@provide @event bob @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @conclusion know((x0, x1, x2, x3), #t);
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @premise know(x4, #t4);
    @constraint #t4 - #t <= 0;
    @conclusion know((x0, x1, x2, x3, x4), #t);
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x4, #t4);
    @constraint #t4 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @premise know(x4, #t4);
    @constraint #t4 - #t <= 0;
    @premise know(x5, #t5);
    @constraint #t5 - #t <= 0;
    @conclusion know((x0, x1, x2, x3, x4, x5), #t);
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x4, #t4);
    @constraint #t4 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x5, #t5);
    @constraint #t5 - #t >= 0;
};

@set @barrier;

@declare @string l0[];
@declare @string l1[];

@declare @string SKA[];
@declare @string SKB[];

@declare @parameter $pn;
@set @constraint $pn > 0;

@declare @function X/2;
@declare @function Y/2;
@declare @function aenc/2;
@declare @function pk/1;
@declare @function sign/2;

@rule {
    @premise know((aenc(mess@166, pk(skey@167)), skey@167), #t);
    @conclusion know(mess@166, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@168, pkey@169), #t);
    @conclusion know(aenc(mess@168, pkey@169), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@170, skey@171), pk(skey@171)), #t);
    @conclusion know(mess@170, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@172, skey@173)), #t);
    @conclusion know(mess@172, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((skey@175), #t);
    @conclusion know(pk(skey@175), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@176, skey@177), #t);
    @conclusion know(sign(mess@176, skey@177), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @premise know(pkto@129, #t@130);
    @premise new([na@131], l0[]);
    @premise unique([na@131], l0[], {pkto@129, [na@131]});
    @conclusion know((pk(SKA[]), sign(([na@131], pkto@129, X(SKA[], pkto@129), aenc(Y(SKA[], pkto@129), pkto@129)), SKA[])), #t@133);
    @constraint -$pn - #t@12 + #t@133 >= 0;
    @constraint -#t@5 + #t@12 > 0;
    @constraint #t@12 - #t@130 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(pk(skey@134), #t@135);
    @premise new([na@136], l0[]);
    @premise unique([na@136], l0[], {pk(skey@134), [na@136], (pk(skey@134), sign((nb@137, pk(SKA[]), [na@136], xb@138, aenc(mess@139, pk(SKA[]))), skey@134)), #ta@140});
    @premise know((pk(skey@134), sign((nb@137, pk(SKA[]), [na@136], xb@138, aenc(mess@139, pk(SKA[]))), skey@134)), #t@142);
    @premise know(#ta@140, #t@143);
    @premise alice([na@136], (pk(SKA[]), pk(skey@134), [na@136], nb@137), #ta@140);
    @conclusion know(sign((pk(skey@134), nb@137), SKA[]), #t@144);
    @constraint -$pn - #t@12 + #t@22 >= 0;
    @constraint -$pn - #ta@140 + #t@144 >= 0;
    @constraint -#t@5 + #t@12 > 0;
    @constraint -#t@12 + #t@37 > 0;
    @constraint -#t@37 + #ta@140 > 0;
    @constraint #ta@140 - #t@143 > 0;
    @constraint #t@37 - #t@142 > 0;
    @constraint #t@12 - #t@135 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know((pk(skey@145), sign((na@146, pk(SKB[]), xa@147, aenc(mess@148, pk(SKB[]))), skey@145)), #t@149);
    @premise new([nb@150], l1[]);
    @premise unique([nb@150], l1[], {(pk(skey@145), sign((na@146, pk(SKB[]), xa@147, aenc(mess@148, pk(SKB[]))), skey@145)), [nb@150]});
    @conclusion know(sign(([nb@150], pk(skey@145), na@146, X(SKB[], pk(skey@145)), aenc(Y(SKB[], pk(skey@145)), pk(skey@145))), SKB[]), #t@152);
    @constraint -$pn - #t@62 + #t@152 >= 0;
    @constraint -#t@5 + #t@62 > 0;
    @constraint #t@62 - #t@149 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know((pk(SKA[]), sign((na@153, pk(SKB[]), xa@154, aenc(mess@155, pk(SKB[]))), SKA[])), #t@156);
    @premise new([nb@157], l1[]);
    @premise unique([nb@157], l1[], {(pk(SKA[]), sign((na@153, pk(SKB[]), xa@154, aenc(mess@155, pk(SKB[]))), SKA[])), [nb@157], sign((pk(SKB[]), [nb@157]), SKA[]), #tb@158});
    @premise know(sign((pk(SKB[]), [nb@157]), SKA[]), #t@160);
    @premise know(#tb@158, #t@161);
    @conclusion bob([nb@157], (pk(SKA[]), pk(SKB[]), na@153, [nb@157]), #tb@158);
    @constraint -$pn - #t@62 + #t@79 >= 0;
    @constraint -#t@5 + #t@62 > 0;
    @constraint -#t@62 + #t@88 > 0;
    @constraint -#t@88 + #tb@158 > 0;
    @constraint #tb@158 - #t@161 > 0;
    @constraint #t@88 - #t@160 > 0;
    @constraint #t@62 - #t@156 > 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SKB[]), #t@162);
    @constraint -$pn - #t@5 + #t@162 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SKA[]), #t@163);
    @constraint -$pn - #t@5 + #t@163 >= 0;
    @constraint -$pn - #t@5 + #t@106 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(Y(SKB[], pk(SKA[])), #t@164);
    @conclusion leak(Y(SKB[], pk(SKA[])));
    @constraint #t@108 - #t@164 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(Y(SKA[], pk(SKB[])), #t@165);
    @conclusion leak(Y(SKA[], pk(SKB[])));
    @constraint #t@115 - #t@165 > 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @premise alice(v@127, (pkI@121, pkR@122, na@123, nb@124), #ta@125);
    @conclusion bob(v@128, (pkI@121, pkR@122, na@123, nb@124), #tb@126);
    @constraint -#ta@125 + #tb@126 >= 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
