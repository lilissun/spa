@set @index 288;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event accept(1, 3);
@provide @event accept @removable @false;

@declare @event init(1, 3);
@provide @event init @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @conclusion know((x0, x1, x2), #t);
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @conclusion know((x0, x1, x2, x3), #t);
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @premise know(x4, #t4);
    @constraint #t4 - #t <= 0;
    @premise know(x5, #t5);
    @constraint #t5 - #t <= 0;
    @conclusion know((x0, x1, x2, x3, x4, x5), #t);
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x4, #t4);
    @constraint #t4 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x5, #t5);
    @constraint #t5 - #t >= 0;
};

@set @barrier;

@declare @string l0[];
@declare @string l1[];
@declare @string l2[];
@declare @string l3[];
@declare @string l4[];
@declare @string l5[];

@declare @string true[];
@declare @string SKA[];
@declare @string SKB[];

@declare @parameter $pn;
@declare @parameter $delay;
@declare @parameter $thres;
@set @constraint $pn > 0;

@declare @function aenc/2;
@declare @function pk/1;
@declare @function sign/2;

@rule {
    @premise know((aenc(mess@275, pk(skey@276)), skey@276), #t);
    @conclusion know(mess@275, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@277, pkey@278), #t);
    @conclusion know(aenc(mess@277, pkey@278), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@279, skey@280), pk(skey@280)), #t);
    @conclusion know(true[], #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@283, skey@284)), #t);
    @conclusion know(mess@283, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((skey@286), #t);
    @conclusion know(pk(skey@286), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@287, skey@288), #t);
    @conclusion know(sign(mess@287, skey@288), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @guard pkey@163 != pk(SKB[]);
    @premise know(pkey@163, #t@164);
    @premise new([na@165], l0[]);
    @premise unique([na@165], l0[], {pkey@163, [na@165], #t1@166, (v@167, v@168)});
    @premise know(#t1@166, #t@170);
    @premise open([na@165]);
    @conclusion know(aenc(([na@165], pk(SKA[])), pkey@163), #t@171);
    @constraint -$pn - #t1@166 + #t@171 >= 0;
    @constraint -#t@8 + #t@18 > 0;
    @constraint -#t@18 + #t1@166 > 0;
    @constraint #t1@166 - #t@170 > 0;
    @constraint #t@18 - #t@164 > 0;
    @constraint $pn > 0;
};

@rule{
    @guard pkey@172 != pk(SKB[]);
    @premise know(pkey@172, #t@173);
    @premise new([na@174], l0[]);
    @premise unique([na@174], l0[], {pkey@172, [na@174], #t1@175, ((aenc(([na@174], mess@176, pkey@172), pk(SKA[])), (#ta@177, v@178)), v@179)});
    @premise know(#t1@175, #t@181);
    @premise open([na@174]);
    @premise know(aenc(([na@174], mess@176, pkey@172), pk(SKA[])), #t@182);
    @premise know(#ta@177, #t@183);
    @premise init([na@174], (pk(SKA[]), pkey@172, [na@174], mess@176), #ta@177);
    @conclusion know(aenc(mess@176, pkey@172), #t@184);
    @constraint -$pn - #t1@175 + #t@36 >= 0;
    @constraint -$pn - #ta@177 + #t@184 >= 0;
    @constraint -#t@8 + #t@18 > 0;
    @constraint -#t@18 + #t1@175 > 0;
    @constraint -#t1@175 + #t@41 > 0;
    @constraint -#t@41 + #ta@177 > 0;
    @constraint #ta@177 - #t@183 > 0;
    @constraint #t@41 - #t@182 > 0;
    @constraint #t1@175 - #t@181 > 0;
    @constraint #t@18 - #t@173 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(pk(SKB[]), #t@185);
    @premise new([na@186], l0[]);
    @premise unique([na@186], l0[], {pk(SKB[]), [na@186], #t1@187, (v@188, v@189)});
    @premise know(#t1@187, #t@191);
    @conclusion know(aenc(([na@186], pk(SKA[])), pk(SKB[])), #t@192);
    @constraint -$pn - #t1@187 + #t@192 >= 0;
    @constraint -#t@8 + #t@18 > 0;
    @constraint -#t@18 + #t1@187 > 0;
    @constraint #t1@187 - #t@191 > 0;
    @constraint #t@18 - #t@185 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(pk(SKB[]), #t@193);
    @premise new([na@194], l0[]);
    @premise unique([na@194], l0[], {pk(SKB[]), [na@194], #t1@195, ((aenc(([na@194], mess@196, pk(SKB[])), pk(SKA[])), (#t2@197, (#ta@198, v@199))), v@200)});
    @premise know(#t1@195, #t@202);
    @premise know(aenc(([na@194], mess@196, pk(SKB[])), pk(SKA[])), #t@203);
    @premise know(#t2@197, #t@204);
    @premise know(#ta@198, #t@205);
    @premise init([na@194], (pk(SKA[]), pk(SKB[]), [na@194], mess@196), #ta@198);
    @conclusion know(aenc(mess@196, pk(SKB[])), #t@206);
    @constraint -$pn - #t1@195 + #t@57 >= 0;
    @constraint -$pn - #ta@198 + #t@206 >= 0;
    @constraint -#t@8 + #t@18 > 0;
    @constraint -#t@18 + #t1@195 > 0;
    @constraint -#t1@195 + #t@61 > 0;
    @constraint -#t@61 + #t2@197 > 0;
    @constraint -#t2@197 + #ta@198 > 0;
    @constraint #ta@198 - #t@205 > 0;
    @constraint #t2@197 - #t@204 > 0;
    @constraint #t@61 - #t@203 > 0;
    @constraint #t1@195 - #t@202 > 0;
    @constraint #t1@195 - #t2@197 + $thres >= 0;
    @constraint #t@18 - #t@193 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(pkR@207, #t@208);
    @premise new([na@209], l0[]);
    @premise unique([na@209], l0[], {pkR@207, [na@209], #t1@210, (v@211, (#t2@212, v@213))});
    @premise know(#t1@210, #t@215);
    @premise know(#t2@212, #t@216);
    @premise open([na@209]);
    @conclusion know([na@209], #t@217);
    @constraint -$pn - #t2@212 + #t@217 >= 0;
    @constraint -#t@8 + #t@18 > 0;
    @constraint -#t@18 + #t1@210 > 0;
    @constraint -#t1@210 + #t2@212 - $delay >= 0;
    @constraint -#t1@210 + #t2@212 > 0;
    @constraint #t2@212 - #t@216 > 0;
    @constraint #t1@210 - #t@215 > 0;
    @constraint #t@18 - #t@208 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(pkR@218, #t@219);
    @premise new([na@220], l0[]);
    @premise unique([na@220], l0[], {pkR@218, [na@220], [na@220]});
    @premise know([na@220], #t@222);
    @conclusion leak([na@220]);
    @constraint -#t@8 + #t@18 > 0;
    @constraint #t@83 - #t@222 > 0;
    @constraint #t@18 - #t@219 > 0;
    @constraint $pn > 0;
};

@rule{
    @guard pkey@223 != pk(SKA[]);
    @premise know(aenc((na@224, pkey@223), pk(SKB[])), #t@225);
    @premise new([nb@226], l3[]);
    @premise unique([nb@226], l3[], {aenc((na@224, pkey@223), pk(SKB[])), [nb@226], #t1@227, (v@228, v@229)});
    @premise know(#t1@227, #t@231);
    @premise open([nb@226]);
    @conclusion know(aenc((na@224, [nb@226], pk(SKB[])), pkey@223), #t@232);
    @constraint -$pn - #t1@227 + #t@232 >= 0;
    @constraint -#t@8 + #t@91 > 0;
    @constraint -#t@91 + #t1@227 > 0;
    @constraint #t1@227 - #t@231 > 0;
    @constraint #t@91 - #t@225 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(aenc((na@233, pk(SKA[])), pk(SKB[])), #t@234);
    @premise new([nb@235], l3[]);
    @premise unique([nb@235], l3[], {aenc((na@233, pk(SKA[])), pk(SKB[])), [nb@235], #t1@236, (v@237, v@238)});
    @premise know(#t1@236, #t@240);
    @conclusion know(aenc((na@233, [nb@235], pk(SKB[])), pk(SKA[])), #t@241);
    @constraint -$pn - #t1@236 + #t@241 >= 0;
    @constraint -#t@8 + #t@91 > 0;
    @constraint -#t@91 + #t1@236 > 0;
    @constraint #t1@236 - #t@240 > 0;
    @constraint #t@91 - #t@234 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(aenc((na@242, pk(SKA[])), pk(SKB[])), #t@243);
    @premise new([nb@244], l3[]);
    @premise unique([nb@244], l3[], {aenc((na@242, pk(SKA[])), pk(SKB[])), [nb@244], #t1@245, ((aenc([nb@244], pk(SKB[])), (#t2@246, (#tb@247, v@248))), v@249)});
    @premise know(#t1@245, #t@251);
    @premise know(aenc([nb@244], pk(SKB[])), #t@252);
    @premise know(#t2@246, #t@253);
    @premise know(#tb@247, #t@254);
    @conclusion accept([nb@244], (pk(SKA[]), pk(SKB[]), na@242, [nb@244]), #tb@247);
    @constraint -$pn - #t1@245 + #t@122 >= 0;
    @constraint -#t@8 + #t@91 > 0;
    @constraint -#t@91 + #t1@245 > 0;
    @constraint -#t1@245 + #t@126 > 0;
    @constraint -#t@126 + #t2@246 > 0;
    @constraint -#t2@246 + #tb@247 > 0;
    @constraint #tb@247 - #t@254 > 0;
    @constraint #t2@246 - #t@253 > 0;
    @constraint #t@126 - #t@252 > 0;
    @constraint #t1@245 - #t@251 > 0;
    @constraint #t1@245 - #t2@246 + $thres >= 0;
    @constraint #t@91 - #t@243 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(aenc((na@255, pkI@256), pk(SKB[])), #t@257);
    @premise new([nb@258], l3[]);
    @premise unique([nb@258], l3[], {aenc((na@255, pkI@256), pk(SKB[])), [nb@258], #t1@259, (v@260, (#t2@261, v@262))});
    @premise know(#t1@259, #t@264);
    @premise know(#t2@261, #t@265);
    @premise open([nb@258]);
    @conclusion know([nb@258], #t@266);
    @constraint -$pn - #t2@261 + #t@266 >= 0;
    @constraint -#t@8 + #t@91 > 0;
    @constraint -#t@91 + #t1@259 > 0;
    @constraint -#t1@259 + #t2@261 - $delay >= 0;
    @constraint -#t1@259 + #t2@261 > 0;
    @constraint #t2@261 - #t@265 > 0;
    @constraint #t1@259 - #t@264 > 0;
    @constraint #t@91 - #t@257 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(aenc((na@267, pkI@268), pk(SKB[])), #t@269);
    @premise new([nb@270], l3[]);
    @premise unique([nb@270], l3[], {aenc((na@267, pkI@268), pk(SKB[])), [nb@270], [nb@270]});
    @premise know([nb@270], #t@272);
    @conclusion leak([nb@270]);
    @constraint -#t@8 + #t@91 > 0;
    @constraint #t@145 - #t@272 > 0;
    @constraint #t@91 - #t@269 > 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SKB[]), #t@273);
    @constraint -$pn - #t@8 + #t@273 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SKA[]), #t@274);
    @constraint -$pn - #t@8 + #t@274 >= 0;
    @constraint -$pn - #t@8 + #t@153 >= 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @injective init(v@161, (pkA@155, pkB@156, na@157, nb@158), #ta@159);
    @conclusion accept(v@162, (pkA@155, pkB@156, na@157, nb@158), #tb@160);
    @constraint -#ta@159 + #tb@160 >= 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
