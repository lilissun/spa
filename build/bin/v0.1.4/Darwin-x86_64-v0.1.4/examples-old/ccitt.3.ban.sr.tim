@set @index 187;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event alice(1, 3);
@provide @event alice @removable @false;

@declare @event bob(1, 3);
@provide @event bob @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @conclusion know((x0, x1, x2, x3), #t);
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @premise know(x4, #t4);
    @constraint #t4 - #t <= 0;
    @conclusion know((x0, x1, x2, x3, x4), #t);
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4), #t);
    @conclusion know(x4, #t4);
    @constraint #t4 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @premise know(x4, #t4);
    @constraint #t4 - #t <= 0;
    @premise know(x5, #t5);
    @constraint #t5 - #t <= 0;
    @conclusion know((x0, x1, x2, x3, x4, x5), #t);
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x4, #t4);
    @constraint #t4 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x5, #t5);
    @constraint #t5 - #t >= 0;
};

@set @barrier;

@declare @string l0[];
@declare @string l1[];

@declare @string SKA[];
@declare @string SKB[];

@declare @parameter $pn;
@declare @parameter $pa;
@declare @parameter $da;
@declare @parameter $pb;
@declare @parameter $db;
@set @constraint $pn > 0;
@set @constraint $pb - $db >= 0;
@set @constraint $pb + $db >= 0;
@set @constraint $pa - $da >= 0;
@set @constraint $pa + $da >= 0;

@declare @function X/2;
@declare @function Y/2;
@declare @function aenc/2;
@declare @function pk/1;
@declare @function sign/2;

@rule {
    @premise know((aenc(mess@176, pk(skey@177)), skey@177), #t);
    @conclusion know(mess@176, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@178, pkey@179), #t);
    @conclusion know(aenc(mess@178, pkey@179), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@180, skey@181), pk(skey@181)), #t);
    @conclusion know(mess@180, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@182, skey@183)), #t);
    @conclusion know(mess@182, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((skey@185), #t);
    @conclusion know(pk(skey@185), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@186, skey@187), #t);
    @conclusion know(sign(mess@186, skey@187), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @premise know(pkto@137, #t@138);
    @premise new([na@139], l0[]);
    @premise unique([na@139], l0[], {pkto@137, [na@139]});
    @conclusion know((pk(SKA[]), sign(([na@139], pkto@137, X(SKA[], pkto@137), aenc(Y(SKA[], pkto@137), pkto@137)), SKA[])), #t@141);
    @constraint -$pn - #t@18 + #t@141 >= 0;
    @constraint -#t@11 + #t@18 > 0;
    @constraint #t@18 - #t@138 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(pk(skey@142), #t@143);
    @premise new([na@144], l0[]);
    @premise unique([na@144], l0[], {pk(skey@142), [na@144], (pk(skey@142), sign((nb@145, pk(SKA[]), [na@144], xb@146, aenc(mess@147, pk(SKA[]))), skey@142)), #ta@148});
    @premise know((pk(skey@142), sign((nb@145, pk(SKA[]), [na@144], xb@146, aenc(mess@147, pk(SKA[]))), skey@142)), #t@150);
    @premise know(#ta@148, #t@151);
    @premise alice([na@144], (pk(SKA[]), pk(skey@142), [na@144], nb@145), #t@152);
    @conclusion know(sign((pk(skey@142), nb@145), SKA[]), #t@153);
    @constraint #t@152 - #ta@148 + $da == 0;
    @constraint -$pn - #t@18 + #t@28 >= 0;
    @constraint -$pn - #t@152 + #t@153 >= 0;
    @constraint -#t@11 + #t@18 > 0;
    @constraint -#t@18 + #t@43 > 0;
    @constraint -#t@43 + #t@152 > 0;
    @constraint -#t@4 + #ta@148 > 0;
    @constraint #t@152 - #t@151 > 0;
    @constraint #t@43 - #t@150 > 0;
    @constraint #t@18 - #t@143 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know((pk(skey@154), sign((na@155, pk(SKB[]), xa@156, aenc(mess@157, pk(SKB[]))), skey@154)), #t@158);
    @premise new([nb@159], l1[]);
    @premise unique([nb@159], l1[], {(pk(skey@154), sign((na@155, pk(SKB[]), xa@156, aenc(mess@157, pk(SKB[]))), skey@154)), [nb@159]});
    @conclusion know(sign(([nb@159], pk(skey@154), na@155, X(SKB[], pk(skey@154)), aenc(Y(SKB[], pk(skey@154)), pk(skey@154))), SKB[]), #t@161);
    @constraint -$pn - #t@69 + #t@161 >= 0;
    @constraint -#t@11 + #t@69 > 0;
    @constraint #t@69 - #t@158 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know((pk(SKA[]), sign((na@162, pk(SKB[]), xa@163, aenc(mess@164, pk(SKB[]))), SKA[])), #t@165);
    @premise new([nb@166], l1[]);
    @premise unique([nb@166], l1[], {(pk(SKA[]), sign((na@162, pk(SKB[]), xa@163, aenc(mess@164, pk(SKB[]))), SKA[])), [nb@166], sign((pk(SKB[]), [nb@166]), SKA[]), #tb@167});
    @premise know(sign((pk(SKB[]), [nb@166]), SKA[]), #t@169);
    @premise know(#tb@167, #t@170);
    @conclusion bob([nb@166], (pk(SKA[]), pk(SKB[]), na@162, [nb@166]), #t@171);
    @constraint #t@171 - #tb@167 + $db == 0;
    @constraint -$pn - #t@69 + #t@86 >= 0;
    @constraint -#t@11 + #t@69 > 0;
    @constraint -#t@69 + #t@95 > 0;
    @constraint -#t@95 + #t@171 > 0;
    @constraint -#t@7 + #tb@167 > 0;
    @constraint #t@171 - #t@170 > 0;
    @constraint #t@95 - #t@169 > 0;
    @constraint #t@69 - #t@165 > 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SKB[]), #t@172);
    @constraint -$pn - #t@11 + #t@172 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SKA[]), #t@173);
    @constraint -$pn - #t@11 + #t@173 >= 0;
    @constraint -$pn - #t@11 + #t@114 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(Y(SKB[], pk(SKA[])), #t@174);
    @conclusion leak(Y(SKB[], pk(SKA[])));
    @constraint #t@116 - #t@174 > 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(Y(SKA[], pk(SKB[])), #t@175);
    @conclusion leak(Y(SKA[], pk(SKB[])));
    @constraint #t@123 - #t@175 > 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @premise alice(v@135, (pkI@129, pkR@130, na@131, nb@132), #ta@133);
    @conclusion bob(v@136, (pkI@129, pkR@130, na@131, nb@132), #tb@134);
    @constraint -#ta@133 + #tb@134 >= 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
