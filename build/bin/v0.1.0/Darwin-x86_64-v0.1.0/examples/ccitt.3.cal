@function (@variable skey) pk(skey);
@function (@variable mess, @variable skey) sign(mess, skey);
@function (@variable mess, @variable skey) check(sign(mess, skey), pk(skey)) -> mess;
@function (@variable mess, @variable skey) get(sign(mess, skey)) -> mess;
@function (@variable mess, @variable pkey) aenc(mess, pkey);
@function (@variable mess, @variable skey) adec(aenc(mess, pk(skey)), skey) -> mess;
@function (@variable skfrom, @variable pkto) X(skfrom, pkto);
@function (@variable skfrom, @variable pkto) Y(skfrom, pkto);

@string SKA;
@string SKB;

@join alice;
@accept bob;

@process Pa(@variable skA) {
    @receive @variable pkR;
    @new @nonce na;
    @new @timestamp ta;
    @send (pk(skA), sign((ta, na, pkR, X(skA, pkR), aenc(Y(skA, pkR), pkR)), skA));
    @receive (== pkR, @variable m);
    @let (@timestamp tb, @variable nb, ==pk(skA), ==na, @variable xb, @variable EYB) = check(m, pkR) @then
    @let @variable yb = adec(EYB, skA) @then
    @engage alice(pk(skA), pkR, na, nb)@ta;
    @send sign(nb, skA);
}

@process Pb(@variable skB) {
    @receive (@variable pkI, @variable m);
    @let (@timestamp ta, @variable na, == pk(skB), @variable xa, @variable EYA) = check(m, pkI) @then
    @let @variable ya = adec(EYA, skB) @then
    @new @timestamp tb;
    @new @nonce nb;
    @send sign((tb, nb, pkI, na, X(skB, pkI), aenc(Y(skB, pkI), pkI)), skB);
    @receive @variable m1;
    @if (check(m1, pkI) == nb) @then 
    @if (pkI == pk(SKA)) @then
    @engage bob(pkI, pk(skB), na, nb)@tb;
}

@process Pp(@variable pkB, @variable pkA) {
    @send pkA;
    @send pkB;
}

@system {
    @secrecy Y(SKA, pk(SKB));
    @secrecy Y(SKB, pk(SKA));
    @parallel { 
        !{ @invoke Pa(SKA); } | 
        !{ @invoke Pb(SKB); } | 
        !{ @invoke Pp(pk(SKA), pk(SKB)); } 
    }
}

@correspondence (@variable pkI, @variable pkR, @variable na, @variable nb, @timestamp ta, @timestamp tb) {
    @enforced;
    @event alice(pkI, pkR, na, nb)@ta;
    @event bob(pkI, pkR, na, nb)@tb;
    @constraint ta <= tb;
}