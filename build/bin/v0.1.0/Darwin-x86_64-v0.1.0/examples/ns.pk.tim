@set @index 122;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event accept(1, 3);
@provide @event accept @removable @false;

@declare @event init(1, 3);
@provide @event init @removable @false;

@declare @event join(2, 2);
@provide @event join @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @conclusion know((x0, x1, x2, x3), #t);
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @premise know(x4, #t4);
    @constraint #t4 - #t <= 0;
    @premise know(x5, #t5);
    @constraint #t5 - #t <= 0;
    @conclusion know((x0, x1, x2, x3, x4, x5), #t);
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x4, #t4);
    @constraint #t4 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x5, #t5);
    @constraint #t5 - #t >= 0;
};

@set @barrier;

@declare @string l0[];
@declare @string l1[];
@declare @string l2[];
@declare @string l3[];
@declare @string l4[];
@declare @string l5[];
@declare @string l6[];
@declare @string l7[];
@declare @string l8[];

@declare @string true[];
@declare @string SKA[];
@declare @string SKB[];

@declare @parameter $pn;
@set @constraint $pn > 0;

@declare @function aenc/2;
@declare @function pk/1;
@declare @function sign/2;

@rule {
    @premise know((aenc(mess@109, pk(skey@110)), skey@110), #t);
    @conclusion know(mess@109, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@111, pkey@112), #t);
    @conclusion know(aenc(mess@111, pkey@112), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@113, skey@114), pk(skey@114)), #t);
    @conclusion know(true[], #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((sign(mess@117, skey@118)), #t);
    @conclusion know(mess@117, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((skey@120), #t);
    @conclusion know(pk(skey@120), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((mess@121, skey@122), #t);
    @conclusion know(sign(mess@121, skey@122), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @premise know(#t@80, #t@80);
    @premise know(pkey@81, #t@82);
    @premise new([na@83], l1[]);
    @premise unique([na@83], l2[], (#t@80, pkey@81, [na@83]));
    @conclusion know(aenc(([na@83], pk(SKA[])), pkey@81), #t@84);
    @constraint -$pn - #t@80 + #t@84 >= 0;
    @constraint -#t@4 + #t@80 >= 0;
    @constraint #t@80 - #t@82 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#t@85, #t@85);
    @premise know(pkey@86, #t@87);
    @premise new([na@88], l1[]);
    @premise unique([na@88], l2[], (#t@85, pkey@86, [na@88]));
    @premise know(#t@89, #t@89);
    @premise know(aenc(([na@88], mess@90), pk(SKA[])), #t@91);
    @premise know(#ta@92, #ta@92);
    @premise init([na@88], (pk(SKA[]), pkey@86, [na@88], mess@90), #ta@92);
    @premise unique([na@88], l3[], (#t@85, pkey@86, [na@88], #t@89, aenc(([na@88], mess@90), pk(SKA[])), #ta@92));
    @conclusion know(aenc(mess@90, pkey@86), #t@93);
    @constraint -$pn - #t@85 + #t@24 >= 0;
    @constraint -$pn - #ta@92 + #t@93 >= 0;
    @constraint -#t@4 + #t@85 >= 0;
    @constraint -#t@85 + #t@89 >= 0;
    @constraint -#t@89 + #ta@92 >= 0;
    @constraint #t@89 - #t@91 >= 0;
    @constraint #t@85 - #t@87 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#t@94, #t@94);
    @premise know(aenc((na@95, pkey@96), pk(SKB[])), #t@97);
    @premise new([nb@98], l4[]);
    @premise unique([nb@98], l5[], (#t@94, aenc((na@95, pkey@96), pk(SKB[])), [nb@98]));
    @conclusion know(aenc((na@95, [nb@98]), pkey@96), #t@99);
    @constraint -$pn - #t@94 + #t@99 >= 0;
    @constraint -#t@4 + #t@94 >= 0;
    @constraint #t@94 - #t@97 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#t@100, #t@100);
    @premise know(aenc((na@101, pk(SKA[])), pk(SKB[])), #t@102);
    @premise new([nb@103], l4[]);
    @premise unique([nb@103], l5[], (#t@100, aenc((na@101, pk(SKA[])), pk(SKB[])), [nb@103]));
    @premise know(#t@104, #t@104);
    @premise know(aenc([nb@103], pk(SKB[])), #t@105);
    @premise know(#tb@106, #tb@106);
    @premise unique([nb@103], l6[], (#t@100, aenc((na@101, pk(SKA[])), pk(SKB[])), [nb@103], #t@104, aenc([nb@103], pk(SKB[])), #tb@106));
    @conclusion accept([nb@103], (pk(SKA[]), pk(SKB[]), na@101, [nb@103]), #tb@106);
    @constraint -$pn - #t@100 + #t@54 >= 0;
    @constraint -#t@4 + #t@100 >= 0;
    @constraint -#t@100 + #t@104 >= 0;
    @constraint -#t@104 + #tb@106 >= 0;
    @constraint #t@104 - #t@105 >= 0;
    @constraint #t@100 - #t@102 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SKB[]), #t@107);
    @constraint -$pn - #t@4 + #t@107 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(pk(SKA[]), #t@108);
    @constraint -$pn - #t@4 + #t@108 >= 0;
    @constraint -$pn - #t@4 + #t@69 >= 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @injective init([n@78], (pkA@72, pkB@73, na@74, nb@75), #ta@76);
    @conclusion accept([n@79], (pkA@72, pkB@73, na@74, nb@75), #tb@77);
    @constraint -#ta@76 + #tb@77 >= 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
