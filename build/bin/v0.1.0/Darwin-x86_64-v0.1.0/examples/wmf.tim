@set @index 124;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event accept(1, 3);
@provide @event accept @removable @false;

@declare @event init(1, 3);
@provide @event init @removable @false;

@declare @event join(2, 2);
@provide @event join @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @conclusion know((x0, x1, x2), #t);
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @premise know(x4, #t4);
    @constraint #t4 - #t <= 0;
    @premise know(x5, #t5);
    @constraint #t5 - #t <= 0;
    @conclusion know((x0, x1, x2, x3, x4, x5), #t);
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x4, #t4);
    @constraint #t4 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x5, #t5);
    @constraint #t5 - #t >= 0;
};

@set @barrier;

@declare @string l0[];
@declare @string l1[];
@declare @string l2[];
@declare @string l3[];
@declare @string l4[];
@declare @string l5[];
@declare @string l6[];
@declare @string l7[];
@declare @string l8[];
@declare @string l9[];
@declare @string l10[];

@declare @string A[];
@declare @string B[];

@declare @parameter $pm;
@declare @parameter $pn;
@set @constraint $pn > 0;

@declare @function key/1;
@declare @function senc/2;

@rule {
    @premise know((senc(m@121, k@122), k@122), #t);
    @conclusion know(m@121, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((m@123, k@124), #t);
    @conclusion know(senc(m@123, k@124), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @guard u@84 != A[];
    @guard u@84 != B[];
    @premise know(#t@85, #t@85);
    @premise know(u@84, #t@86);
    @conclusion know(key(u@84), #t@87);
    @constraint -$pn - #t@85 + #t@87 >= 0;
    @constraint -#t@4 + #t@85 >= 0;
    @constraint #t@85 - #t@86 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#t@88, #t@88);
    @premise know(B[], #t@89);
    @premise new([k@90], l2[]);
    @premise unique([k@90], l3[], (#t@88, B[], [k@90]));
    @premise know(#ta@91, #ta@91);
    @premise init([k@90], (A[], B[], [k@90]), #ta@91);
    @premise unique([k@90], l4[], (#t@88, B[], [k@90], #ta@91));
    @conclusion know((A[], senc((#ta@91, B[], [k@90]), key(A[]))), #t@92);
    @constraint -$pn - #ta@91 + #t@92 >= 0;
    @constraint -#t@4 + #t@88 >= 0;
    @constraint -#t@88 + #ta@91 >= 0;
    @constraint #t@88 - #t@89 >= 0;
    @constraint $pn > 0;
};

@rule{
    @guard r@93 != B[];
    @premise know(#t@94, #t@94);
    @premise know(r@93, #t@95);
    @premise new([k@96], l2[]);
    @premise unique([k@96], l3[], (#t@94, r@93, [k@96]));
    @premise know(#ta@97, #ta@97);
    @premise init([k@96], (A[], r@93, [k@96]), #ta@97);
    @premise open([k@96]);
    @premise unique([k@96], l5[], (#t@94, r@93, [k@96], #ta@97));
    @conclusion know((A[], senc((#ta@97, r@93, [k@96]), key(A[]))), #t@98);
    @constraint -$pn - #ta@97 + #t@98 >= 0;
    @constraint -#t@4 + #t@94 >= 0;
    @constraint -#t@94 + #ta@97 >= 0;
    @constraint #t@94 - #t@95 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#t@99, #t@99);
    @premise know(r@100, #t@101);
    @premise new([k@102], l2[]);
    @premise unique([k@102], l3[], (#t@99, r@100, [k@102]));
    @premise know(#t@103, #t@103);
    @premise know([k@102], #t@104);
    @conclusion leak([k@102]);
    @constraint -#t@4 + #t@99 >= 0;
    @constraint -#t@99 + #t@103 >= 0;
    @constraint #t@103 - #t@104 >= 0;
    @constraint #t@99 - #t@101 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#t@105, #t@105);
    @premise know((u@106, senc((#ti@107, u@108, k@109), key(u@106))), #t@110);
    @premise know(#ts@111, #ts@111);
    @premise join((u@106, u@108, k@109), #ts@111);
    @conclusion know(senc((#ts@111, u@106, k@109), key(u@108)), #t@112);
    @constraint -$pn - #ts@111 + #t@112 >= 0;
    @constraint -#t@4 + #t@105 >= 0;
    @constraint -#t@105 + #ts@111 >= 0;
    @constraint -#ts@111 + $pm + #ti@107 >= 0;
    @constraint #t@105 - #t@110 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#t@113, #t@113);
    @premise know(senc((#ts@114, A[], k@115), key(B[])), #t@116);
    @premise know(#tb@117, #tb@117);
    @premise new([n@118], l7[]);
    @premise unique([n@118], l8[], (#t@113, senc((#ts@114, A[], k@115), key(B[])), #tb@117, [n@118]));
    @conclusion accept([n@118], (A[], B[], k@115), #tb@117);
    @constraint -#t@4 + #t@113 >= 0;
    @constraint -#t@113 + #tb@117 >= 0;
    @constraint -#tb@117 + $pm + #ts@114 >= 0;
    @constraint #t@113 - #t@116 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(A[], #t@119);
    @constraint -$pn - #t@4 + #t@119 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(B[], #t@120);
    @constraint -$pn - #t@4 + #t@120 >= 0;
    @constraint -$pn - #t@4 + #t@73 >= 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @injective init([n@82], (i@76, r@77, k@78), #ti@79);
    @premise join((i@76, r@77, k@78), #ts@80);
    @conclusion accept([n@83], (i@76, r@77, k@78), #tr@81);
    @constraint $pm + #ts@80 - #tr@81 >= 0;
    @constraint $pm + #ti@79 - #ts@80 >= 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
