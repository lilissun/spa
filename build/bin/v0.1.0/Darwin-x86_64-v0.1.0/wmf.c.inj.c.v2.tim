@set @index 187;

@declare @event new(1, 2);
@provide @event new @removable @false;

@declare @event unique(2, 3);
@provide @event unique @removable @false;

@declare @event accept(1, 3);
@provide @event accept @removable @false;

@declare @event init(1, 3);
@provide @event init @removable @false;

@declare @event join(2, 2);
@provide @event join @removable @false;

@declare @event open(1, 1);
@provide @event open @removable @false;

@declare @event know(1, 2);
@provide @event know( m, #t) @removable @true;
@provide @event know(#c, #t) @removable @true;
@provide @event know(#t, #t) @removable @true;

@declare @event leak(1, 1);
@provide @event leak @removable @false;

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @conclusion know((x0), #t);
};

@rule {
    @premise know((x0), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @conclusion know((x0, x1), #t);
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @conclusion know((x0, x1, x2), #t);
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @conclusion know((x0, x1, x2, x3), #t);
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know(x0, #t0);
    @constraint #t0 - #t <= 0;
    @premise know(x1, #t1);
    @constraint #t1 - #t <= 0;
    @premise know(x2, #t2);
    @constraint #t2 - #t <= 0;
    @premise know(x3, #t3);
    @constraint #t3 - #t <= 0;
    @premise know(x4, #t4);
    @constraint #t4 - #t <= 0;
    @premise know(x5, #t5);
    @constraint #t5 - #t <= 0;
    @conclusion know((x0, x1, x2, x3, x4, x5), #t);
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x0, #t0);
    @constraint #t0 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x1, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x2, #t2);
    @constraint #t2 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x3, #t3);
    @constraint #t3 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x4, #t4);
    @constraint #t4 - #t >= 0;
};

@rule {
    @premise know((x0, x1, x2, x3, x4, x5), #t);
    @conclusion know(x5, #t5);
    @constraint #t5 - #t >= 0;
};

@set @barrier;

@declare @string l0[];
@declare @string l1[];
@declare @string l2[];
@declare @string l3[];
@declare @string l4[];
@declare @string l5[];
@declare @string l6[];
@declare @string l7[];
@declare @string l8[];
@declare @string l9[];
@declare @string l10[];
@declare @string l11[];
@declare @string l12[];
@declare @string l13[];
@declare @string l14[];

@declare @string A[];
@declare @string B[];
@declare @string m1[];
@declare @string m2[];
@declare @string database[];

@declare @parameter $pm;
@declare @parameter $pn;
@set @constraint $pn > 0;

@declare @function inc/1;
@declare @function key/1;
@declare @function senc/2;

@rule {
    @premise know((u@183), #t);
    @conclusion know(inc(u@183), #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((senc(m@184, k@185), k@185), #t);
    @conclusion know(m@184, #t1);
    @constraint #t1 - #t >= 0;
};

@rule {
    @premise know((m@186, k@187), #t);
    @conclusion know(senc(m@186, k@187), #t1);
    @constraint #t1 - #t >= 0;
};

@rule{
    @guard u@119 != A[];
    @guard u@119 != B[];
    @premise know(#t@120, #t@120);
    @premise know(u@119, #t@121);
    @conclusion know(key(u@119), #t@122);
    @constraint -$pn - #t@120 + #t@122 >= 0;
    @constraint -#t@7 + #t@120 >= 0;
    @constraint #t@120 - #t@121 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#t@123, #t@123);
    @premise know(B[], #t@124);
    @premise new([k@125], l2[]);
    @premise unique([k@125], l3[], (#t@123, B[], [k@125]));
    @premise know(#ta@126, #ta@126);
    @premise unique([k@125], l4[], (#t@123, B[], [k@125], #ta@126));
    @premise unique([k@125], l5[], (#t@123, B[], [k@125], #ta@126));
    @conclusion know((A[], senc((#ta@126, B[], [k@125], m1[]), key(A[]))), #t@127);
    @constraint -$pn - #ta@126 + #t@127 >= 0;
    @constraint -#t@7 + #t@123 >= 0;
    @constraint -#t@123 + #ta@126 >= 0;
    @constraint #t@123 - #t@124 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#t@128, #t@128);
    @premise know(B[], #t@129);
    @premise new([k@130], l2[]);
    @premise unique([k@130], l3[], (#t@128, B[], [k@130]));
    @premise know(#ta@131, #ta@131);
    @premise unique([k@130], l4[], (#t@128, B[], [k@130], #ta@131));
    @premise unique([k@130], l5[], (#t@128, B[], [k@130], #ta@131));
    @premise know(#t@132, #t@132);
    @premise know(senc(u@133, [k@130]), #t@134);
    @premise init([k@130], (A[], B[], [k@130]), #ta@131);
    @premise unique([k@130], l6[], (#t@128, B[], [k@130], #ta@131, #t@132, senc(u@133, [k@130])));
    @conclusion know(senc(inc(u@133), [k@130]), #t@135);
    @constraint -$pn - #ta@131 + #t@33 >= 0;
    @constraint -$pn - #t@132 + #t@135 >= 0;
    @constraint -#t@7 + #t@128 >= 0;
    @constraint -#t@128 + #ta@131 >= 0;
    @constraint -#ta@131 + #t@132 >= 0;
    @constraint #t@132 - #t@134 >= 0;
    @constraint #t@128 - #t@129 >= 0;
    @constraint $pn > 0;
};

@rule{
    @guard r@136 != B[];
    @premise know(#t@137, #t@137);
    @premise know(r@136, #t@138);
    @premise new([k@139], l2[]);
    @premise unique([k@139], l3[], (#t@137, r@136, [k@139]));
    @premise know(#ta@140, #ta@140);
    @premise unique([k@139], l4[], (#t@137, r@136, [k@139], #ta@140));
    @premise open([k@139]);
    @premise unique([k@139], l7[], (#t@137, r@136, [k@139], #ta@140));
    @conclusion know((A[], senc((#ta@140, r@136, [k@139], m1[]), key(A[]))), #t@141);
    @constraint -$pn - #ta@140 + #t@141 >= 0;
    @constraint -#t@7 + #t@137 >= 0;
    @constraint -#t@137 + #ta@140 >= 0;
    @constraint #t@137 - #t@138 >= 0;
    @constraint $pn > 0;
};

@rule{
    @guard r@142 != B[];
    @premise know(#t@143, #t@143);
    @premise know(r@142, #t@144);
    @premise new([k@145], l2[]);
    @premise unique([k@145], l3[], (#t@143, r@142, [k@145]));
    @premise know(#ta@146, #ta@146);
    @premise unique([k@145], l4[], (#t@143, r@142, [k@145], #ta@146));
    @premise open([k@145]);
    @premise unique([k@145], l7[], (#t@143, r@142, [k@145], #ta@146));
    @premise know(#t@147, #t@147);
    @premise know(senc(u@148, [k@145]), #t@149);
    @premise init([k@145], (A[], r@142, [k@145]), #ta@146);
    @premise unique([k@145], l8[], (#t@143, r@142, [k@145], #ta@146, #t@147, senc(u@148, [k@145])));
    @conclusion know(senc(inc(u@148), [k@145]), #t@150);
    @constraint -$pn - #ta@146 + #t@52 >= 0;
    @constraint -$pn - #t@147 + #t@150 >= 0;
    @constraint -#t@7 + #t@143 >= 0;
    @constraint -#t@143 + #ta@146 >= 0;
    @constraint -#ta@146 + #t@147 >= 0;
    @constraint #t@147 - #t@149 >= 0;
    @constraint #t@143 - #t@144 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#t@151, #t@151);
    @premise know(r@152, #t@153);
    @premise new([k@154], l2[]);
    @premise unique([k@154], l3[], (#t@151, r@152, [k@154]));
    @premise know(#t@155, #t@155);
    @premise know([k@154], #t@156);
    @conclusion leak([k@154]);
    @constraint -#t@7 + #t@151 >= 0;
    @constraint -#t@151 + #t@155 >= 0;
    @constraint #t@155 - #t@156 >= 0;
    @constraint #t@151 - #t@153 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#t@157, #t@157);
    @premise know((u@158, senc((#ti@159, u@160, k@161, m1[]), key(u@158))), #t@162);
    @premise know(#ts@163, #ts@163);
    @premise join((u@158, u@160, k@161), #ts@163);
    @conclusion know(senc((#ts@163, u@158, k@161, m2[]), key(u@160)), #t@164);
    @constraint -$pn - #ts@163 + #t@164 >= 0;
    @constraint -#t@7 + #t@157 >= 0;
    @constraint -#t@157 + #ts@163 >= 0;
    @constraint -#ts@163 + $pm + #ti@159 >= 0;
    @constraint #t@157 - #t@162 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#t@165, #t@165);
    @premise know(senc((#ts@166, i@167, k@168, m2[]), key(B[])), #t@169);
    @premise know(#tb@170, #tb@170);
    @premise new([nb@171], l10[]);
    @premise unique([nb@171], l11[], (#t@165, senc((#ts@166, i@167, k@168, m2[]), key(B[])), #tb@170, [nb@171]));
    @conclusion know(senc([nb@171], k@168), #t@172);
    @constraint -$pn - #tb@170 + #t@172 >= 0;
    @constraint -#t@7 + #t@165 >= 0;
    @constraint -#t@165 + #tb@170 >= 0;
    @constraint #t@165 - #t@169 >= 0;
    @constraint $pn > 0;
};

@rule{
    @premise know(#t@173, #t@173);
    @premise know(senc((#ts@174, A[], k@175, m2[]), key(B[])), #t@176);
    @premise know(#tb@177, #tb@177);
    @premise new([nb@178], l10[]);
    @premise unique([nb@178], l11[], (#t@173, senc((#ts@174, A[], k@175, m2[]), key(B[])), #tb@177, [nb@178]));
    @premise know(#t@179, #t@179);
    @premise know(senc(inc([nb@178]), k@175), #t@180);
    @premise unique([nb@178], l12[], (#t@173, senc((#ts@174, A[], k@175, m2[]), key(B[])), #tb@177, [nb@178], #t@179, senc(inc([nb@178]), k@175)));
    @conclusion accept([nb@178], (A[], B[], k@175), #tb@177);
    @constraint -$pn - #tb@177 + #t@98 >= 0;
    @constraint -#t@7 + #t@173 >= 0;
    @constraint -#t@173 + #tb@177 >= 0;
    @constraint -#tb@177 + $pm + #ts@174 >= 0;
    @constraint -#tb@177 + #t@179 >= 0;
    @constraint #t@179 - #t@180 >= 0;
    @constraint #t@173 - #t@176 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(A[], #t@181);
    @constraint -$pn - #t@7 + #t@181 >= 0;
    @constraint $pn > 0;
};

@rule{
    @conclusion know(B[], #t@182);
    @constraint -$pn - #t@7 + #t@182 >= 0;
    @constraint -$pn - #t@7 + #t@108 >= 0;
    @constraint $pn > 0;
};

@correspondence{
    @enforced;
    @injective init([n@117], (i@111, r@112, k@113), #ti@114);
    @premise join((i@111, r@112, k@113), #ts@115);
    @conclusion accept([n@118], (i@111, r@112, k@113), #tr@116);
    @constraint $pm + #ts@115 - #tr@116 >= 0;
    @constraint $pm + #ti@114 - #ts@115 >= 0;
};

@correspondence {
    @conclusion leak(x);
    @premise open(x);
};
